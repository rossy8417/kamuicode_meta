name: module-upload-fal-ccsdk

on:
  workflow_call:
    inputs:
      file-path:
        description: 'アップロードするファイルのパス（相対パス）'
        required: true
        type: string
      branch-name:
        description: 'ワーキングブランチ名'
        required: true
        type: string
      folder-name:
        description: 'プロジェクトフォルダ名'
        required: true
        type: string
      output-filename:
        description: '出力ファイル名'
        required: false
        type: string
        default: 'uploaded-url.txt'
      video_index:
        description: '動画インデックス'
        required: false
        type: string
        default: '1'
    outputs:
      completed:
        description: '完了ステータス'
        value: ${{ jobs.upload-fal.outputs.completed }}
      fal-url:
        description: 'アップロードされたファイルのFAL URL'
        value: ${{ jobs.upload-fal.outputs.fal-url }}
    secrets:
      anthropic_api_key:
        description: 'Anthropic API Key'
        required: true
      fal_key:
        description: 'FAL API Key'
        required: true
      github_pat:
        description: 'GitHub Token'
        required: true

jobs:
  upload-fal:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      completed: ${{ steps.upload-complete.outputs.completed }}
      fal-url: ${{ steps.upload-complete.outputs.fal-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fal-client python-dotenv
      
      - name: 📤 FALアップロードエージェント (Claude Code SDK)
        id: upload-to-fal
        env:
          ANTHROPIC_API_KEY: ${{ secrets.anthropic_api_key }}
          FAL_KEY: ${{ secrets.fal_key }}
        run: |
          echo "::group::📤 FAL Upload Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          FILE_PATH="${{ inputs.file-path }}"
          FOLDER_NAME="${{ inputs.folder-name }}"
          OUTPUT_FILENAME="${{ inputs.output-filename }}"
          VIDEO_INDEX="${{ inputs.video_index }}"
          IMAGES_DIR="$FOLDER_NAME/images-${VIDEO_INDEX}"
          LOCAL_IMAGE_DIR="$IMAGES_DIR/local-image-${VIDEO_INDEX}"
          
          echo "File path: $FILE_PATH"
          echo "Folder name: $FOLDER_NAME"
          echo "Output filename: $OUTPUT_FILENAME"
          echo "Video index: $VIDEO_INDEX"
          echo "Images dir: $IMAGES_DIR"
          echo "Local image dir: $LOCAL_IMAGE_DIR"
          
          # プロンプトの構築
          PROMPT="あなたはFAL.aiファイルアップロードの専門エージェントです。ローカルファイルをFAL.aiにアップロードしてURLを取得してください。

          **入力情報**:
          - **ファイルパス**: $FILE_PATH
          - **プロジェクトフォルダ**: $FOLDER_NAME
          - **出力ファイル名**: $OUTPUT_FILENAME
          - **動画インデックス**: $VIDEO_INDEX
          - **画像ディレクトリ**: $IMAGES_DIR
          - **ローカル画像ディレクトリ**: $LOCAL_IMAGE_DIR
          - **FAL APIキー**: 環境変数 FAL_KEY に設定済み

          **実行手順**:

          1. **ファイルの確認**: 
             \`\`\`bash
             if [ -f \"$FILE_PATH\" ]; then
               echo \"✅ ファイル発見: $FILE_PATH\"
               ls -lh \"$FILE_PATH\"
             else
               echo \"❌ ファイルなし: $FILE_PATH\"
               exit 1
             fi
             \`\`\`

          2. **ディレクトリ作成とローカルファイルコピー**: 
             \`\`\`bash
             mkdir -p $LOCAL_IMAGE_DIR
             # 元ファイルをローカルディレクトリにコピー
             cp \"$FILE_PATH\" \"$LOCAL_IMAGE_DIR/local-image.jpg\"
             echo \"✅ ローカル画像コピー完了: $LOCAL_IMAGE_DIR/local-image.jpg\"
             \`\`\`

          3. **Pythonアップロード実行**: 
             \`\`\`bash
             python3 -c 'import fal_client; url=fal_client.upload_file(\"$FILE_PATH\"); open(\"$LOCAL_IMAGE_DIR/$OUTPUT_FILENAME\", \"w\").write(url); print(\"Upload complete:\", url)'
             \`\`\`

          4. **結果の確認**: 
             \`\`\`bash
             if [ -f \"$LOCAL_IMAGE_DIR/$OUTPUT_FILENAME\" ]; then
               echo \"✅ アップロード完了\"
               cat \"$LOCAL_IMAGE_DIR/$OUTPUT_FILENAME\"
             else
               echo \"❌ アップロード失敗\"
               exit 1
             fi
             \`\`\`

          **重要な技術ポイント**:
          - 環境変数FAL_KEYが設定済み
          - fal_clientが自動的にFAL_KEYを使用
          - ファイルサイズとタイプ情報を表示
          - エラーハンドリングとログ出力

          **出力要求**:
          1. ローカル画像ファイル ($LOCAL_IMAGE_DIR/local-image.jpg) - 元画像のコピー
          2. アップロードURLファイル ($LOCAL_IMAGE_DIR/$OUTPUT_FILENAME) - 最終的なFAL URLを保存
          3. 処理ログ (upload-log.txt)"
          
          echo "🚀 Starting FAL Upload Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Bash,Write" \
            --max-turns 20 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          echo "::endgroup::"

      - name: Mark upload complete
        id: upload-complete
        run: |
          FOLDER_NAME="${{ inputs.folder-name }}"
          VIDEO_INDEX="${{ inputs.video_index }}"
          OUTPUT_FILENAME="${{ inputs.output-filename }}"
          IMAGES_DIR="$FOLDER_NAME/images-${VIDEO_INDEX}"
          LOCAL_IMAGE_DIR="$IMAGES_DIR/local-image-${VIDEO_INDEX}"
          LOCAL_IMAGE_FILE="$LOCAL_IMAGE_DIR/$OUTPUT_FILENAME"
          
          # 生成されたファイルの確認
          echo "📋 Checking uploaded files..."
          echo "Images dir: $IMAGES_DIR"
          echo "Local image dir: $LOCAL_IMAGE_DIR"
          echo "Local image file: $LOCAL_IMAGE_FILE"
          
          if [ -d "$LOCAL_IMAGE_DIR" ]; then
            echo "::notice::📁 Local image directory contents:"
            ls -la "$LOCAL_IMAGE_DIR"
            
            # アップロードURLファイルの確認
            if [ -f "$LOCAL_IMAGE_FILE" ]; then
              echo "✅ Found: $OUTPUT_FILENAME"
              FAL_URL=$(cat "$LOCAL_IMAGE_FILE")
              echo "📎 FAL URL: $FAL_URL"
              echo "fal-url=$FAL_URL" >> $GITHUB_OUTPUT
              echo "completed=true" >> $GITHUB_OUTPUT
              
            else
              echo "::error::❌ Missing required file: $OUTPUT_FILENAME"
              echo "completed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
          else
            echo "::error::❌ Local image directory not found: $LOCAL_IMAGE_DIR"
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Commit upload results
        env:
          GH_TOKEN: ${{ secrets.github_pat }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ inputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No upload files to commit"
          else
            git commit -m "🚀 Add FAL upload results: ${{ inputs.file-path }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            # 並列実行での競合を回避するためのリトライ処理
            for i in {1..3}; do
              git pull --rebase origin ${{ inputs.branch-name }} || true
              if git push origin ${{ inputs.branch-name }}; then
                echo "✅ Push successful on attempt $i"
                break
              else
                echo "⚠️ Push failed on attempt $i, retrying..."
                # ランダムな待機時間（1-5秒）
                sleep $((RANDOM % 5 + 1))
              fi
            done
          fi