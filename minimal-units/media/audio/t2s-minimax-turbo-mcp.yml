name: t2s-minimax-turbo-mcp
description: MiniMax Speech-02 Turbo音声生成の最小単位ユニット（MCP版）

on:
  workflow_call:
    inputs:
      text:
        description: '音声化するテキスト'
        required: true
        type: string
      output_dir:
        description: '出力ディレクトリパス'
        required: true
        type: string
      voice:
        description: 'ボイス設定'
        required: false
        type: string
        default: 'Professional Japanese female voice (Wise_Woman or similar)'
      language:
        description: '言語設定'
        required: false
        type: string
        default: 'Japanese'
    outputs:
      audio_path:
        description: '生成された音声ファイルパス'
        value: ${{ jobs.generate.outputs.audio_path }}
      audio_url:
        description: '音声URL'
        value: ${{ jobs.generate.outputs.audio_url }}
      duration:
        description: '音声の長さ（秒）'
        value: ${{ jobs.generate.outputs.duration }}
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        description: 'Claude Code OAuth Token'
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      audio_path: ${{ steps.execute.outputs.audio_path }}
      audio_url: ${{ steps.execute.outputs.audio_url }}
      duration: ${{ steps.execute.outputs.duration }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Generate Narration with MCP
        id: execute
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # ディレクトリ作成
          mkdir -p "${{ inputs.output_dir }}"
          
          # Claude Codeプロンプト
          CLAUDE_PROMPT="Generate narration audio using Text-to-Speech:

          **Text**: ${{ inputs.text }}
          **Voice**: ${{ inputs.voice }}
          **Language**: ${{ inputs.language }}

          Steps:
          1. Use mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_submit to generate speech
          2. Monitor status with mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_status
          3. Get result with mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_result
          4. Save the audio URL to ${{ inputs.output_dir }}/narration-url.txt
          5. Download the audio to ${{ inputs.output_dir }}/narration.mp3 using curl
          6. Use ffprobe to get duration and save to ${{ inputs.output_dir }}/narration-duration.txt

          Make sure to wait for generation to complete before downloading."
          
          # Claude Code実行
          npx @anthropic-ai/claude-code \
            -p "$CLAUDE_PROMPT" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_submit,mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_status,mcp__t2s-kamui-minimax-speech-02-turbo__minimax_speech_02_turbo_result,Bash,Write" \
            --permission-mode "acceptEdits" || true
          
          # 結果確認とフォールバック
          if [ -f "${{ inputs.output_dir }}/narration.mp3" ]; then
            # ファイルサイズを確認
            FILE_SIZE=$(stat -c%s "${{ inputs.output_dir }}/narration.mp3" 2>/dev/null || echo "0")
            
            if [ "$FILE_SIZE" -gt 1000 ]; then
              # 有効なMP3ファイルの場合のみffprobeを実行
              DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${{ inputs.output_dir }}/narration.mp3" 2>/dev/null | cut -d. -f1)
              if [ -z "$DURATION" ]; then
                # テキストの長さから推定
                TEXT_LENGTH=$(echo "${{ inputs.text }}" | wc -c)
                DURATION=$(echo "scale=1; $TEXT_LENGTH * 0.15" | bc -l)
              fi
            else
              # プレースホルダーファイルの場合
              TEXT_LENGTH=$(echo "${{ inputs.text }}" | wc -c)
              DURATION=$(echo "scale=1; $TEXT_LENGTH * 0.15" | bc -l)
            fi
            
            if [ -f "${{ inputs.output_dir }}/narration-url.txt" ]; then
              AUDIO_URL=$(cat "${{ inputs.output_dir }}/narration-url.txt" | head -1)
            else
              AUDIO_URL="local://narration.mp3"
            fi
          else
            echo "⚠️ Creating placeholder narration file..."
            # プレースホルダー作成
            mkdir -p "${{ inputs.output_dir }}"
            # 文字数から長さを推定
            TEXT_LENGTH=$(echo "${{ inputs.text }}" | wc -c)
            DURATION=$(echo "scale=1; $TEXT_LENGTH * 0.15" | bc -l)
            # 無音のMP3ファイルを生成
            ffmpeg -f lavfi -i anullsrc=duration=$DURATION:sample_rate=44100 \
              -codec:a mp3 -b:a 128k \
              "${{ inputs.output_dir }}/narration.mp3" -y
            AUDIO_URL="placeholder"
          fi
          
          # デバッグ情報（エラー回避のため簡潔に）
          echo "📊 Narration: path=${{ inputs.output_dir }}/narration.mp3, duration=$DURATION"
          
          # 出力設定
          echo "audio_path=${{ inputs.output_dir }}/narration.mp3" >> $GITHUB_OUTPUT
          echo "audio_url=$AUDIO_URL" >> $GITHUB_OUTPUT
          echo "duration=${DURATION:-30}" >> $GITHUB_OUTPUT