name: image-t2i
description: Text-to-Image生成の最小単位ユニット

on:
  workflow_call:
    inputs:
      prompt:
        description: '画像生成用プロンプト'
        required: true
        type: string
      output_dir:
        description: '出力ディレクトリパス'
        required: true
        type: string
      model:
        description: '使用するモデル (t2i-google-imagen3, t2i-fal-imagen4-ultra, t2i-fal-imagen4-fast, t2i-fal-flux-schnell)'
        required: false
        type: string
        default: 't2i-fal-imagen4-ultra'
      quality_setting:
        description: '画質設定 (ultra, high, standard)'
        required: false
        type: string
        default: 'high'
      aspect_ratio:
        description: 'アスペクト比'
        required: false
        type: string
        default: '16:9'
    outputs:
      image_url:
        description: '生成された画像のURL'
        value: ${{ jobs.generate.outputs.image_url }}
      image_path:
        description: 'ローカル保存された画像パス'
        value: ${{ jobs.generate.outputs.image_path }}
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        description: 'Claude Code OAuth Token'
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.execute.outputs.image_url }}
      image_path: ${{ steps.execute.outputs.image_path }}
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Check MCP config
        run: |
          if [ -f ".claude/mcp-kamuicode.json" ]; then
            echo "✅ MCP config found"
          else
            echo "❌ MCP config not found"
            exit 1
          fi
      
      - name: Generate Image
        id: execute
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # ディレクトリ作成
          mkdir -p "${{ inputs.output_dir }}"
          
          # 画質設定に基づくモデル選択ロジック（v8ワークフローから）
          if [ "${{ inputs.model }}" == "auto" ] || [ "${{ inputs.model }}" == "" ]; then
            case "${{ inputs.quality_setting }}" in
              ultra)
                MODEL="t2i-google-imagen3"
                SUBMIT_TOOL="mcp__t2i-kamui-imagen3__imagen_t2i"
                STATUS_TOOL=""
                RESULT_TOOL=""
                ;;
              high)
                MODEL="t2i-fal-imagen4-ultra"
                SUBMIT_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_submit"
                STATUS_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_status"
                RESULT_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_result"
                ;;
              standard)
                MODEL="t2i-fal-imagen4-fast"
                SUBMIT_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_submit"
                STATUS_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_status"
                RESULT_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_result"
                ;;
            esac
          else
            # 明示的なモデル指定
            MODEL="${{ inputs.model }}"
            case "$MODEL" in
              "t2i-google-imagen3")
                SUBMIT_TOOL="mcp__t2i-kamui-imagen3__imagen_t2i"
                STATUS_TOOL=""
                RESULT_TOOL=""
                ;;
              "t2i-fal-imagen4-ultra")
                SUBMIT_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_submit"
                STATUS_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_status"
                RESULT_TOOL="mcp__t2i-kamui-imagen4-ultra__imagen4_ultra_result"
                ;;
              "t2i-fal-imagen4-fast")
                SUBMIT_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_submit"
                STATUS_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_status"
                RESULT_TOOL="mcp__t2i-kamui-imagen4-fast__imagen4_fast_result"
                ;;
              "t2i-fal-flux-schnell")
                SUBMIT_TOOL="mcp__t2i-kamui-flux-schnell__flux_schnell_submit"
                STATUS_TOOL="mcp__t2i-kamui-flux-schnell__flux_schnell_status"
                RESULT_TOOL="mcp__t2i-kamui-flux-schnell__flux_schnell_result"
                ;;
            esac
          fi
          
          # プロンプト構築
          PROMPT="Generate an image using $MODEL with the following prompt:
          
          **Prompt**: ${{ inputs.prompt }}
          **Aspect Ratio**: ${{ inputs.aspect_ratio }}
          
          Steps:
          1. Use $SUBMIT_TOOL to start generation
          2. Monitor status with $STATUS_TOOL (if available)
          3. Get result with $RESULT_TOOL (if available)
          4. Save the image URL to ${{ inputs.output_dir }}/image-url.txt
          5. Download the image to ${{ inputs.output_dir }}/image.png using curl"
          
          # Claude Code実行
          npx @anthropic-ai/claude-code \
            -p "$PROMPT" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "$SUBMIT_TOOL,$STATUS_TOOL,$RESULT_TOOL,Bash,Write" \
            --permission-mode "acceptEdits"
          
          # 結果確認
          if [ -f "${{ inputs.output_dir }}/image-url.txt" ]; then
            IMAGE_URL=$(cat "${{ inputs.output_dir }}/image-url.txt")
            echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
            echo "image_path=${{ inputs.output_dir }}/image.png" >> $GITHUB_OUTPUT
          else
            echo "❌ Image generation failed"
            exit 1
          fi