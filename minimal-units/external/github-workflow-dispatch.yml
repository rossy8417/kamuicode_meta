name: "GitHub Workflow Dispatch"
description: "Trigger GitHub Actions workflow"
category: "external"
estimated_time: "1-2 minutes"
tags: ["github", "workflow", "actions", "api", "external", "automation"]

inputs:
  repository:
    description: "Repository name (owner/repo format)"
    required: true
    type: "string"
  workflow_id:
    description: "Workflow file name or ID"
    required: true
    type: "string"
  ref:
    description: "Git ref (branch, tag, or SHA)"
    required: false
    type: "string"
    default: "main"
  inputs_json:
    description: "JSON string of workflow inputs"
    required: false
    type: "string"
    default: "{}"
  wait_for_completion:
    description: "Wait for workflow to complete"
    required: false
    type: "boolean"
    default: false
  timeout_minutes:
    description: "Timeout in minutes if waiting"
    required: false
    type: "integer"
    default: 30

outputs:
  run_id:
    description: "GitHub Actions run ID"
    type: "string"
  run_url:
    description: "URL to the workflow run"
    type: "string"
  status:
    description: "Workflow run status"
    type: "string"
  conclusion:
    description: "Workflow run conclusion (if completed)"
    type: "string"

workflow:
  - name: "Check GitHub token"
    run: |
      if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
        echo "Error: GITHUB_TOKEN not set"
        exit 1
      fi
      
  - name: "Trigger workflow"
    run: |
      # Prepare dispatch payload
      cat > dispatch_payload.json << 'EOF'
      {
        "ref": "${{ inputs.ref }}",
        "inputs": ${{ inputs.inputs_json }}
      }
      EOF
      
      # Trigger workflow
      echo "Triggering workflow: ${{ inputs.workflow_id }}"
      echo "Repository: ${{ inputs.repository }}"
      echo "Ref: ${{ inputs.ref }}"
      
      RESPONSE=$(curl -s -X POST \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d @dispatch_payload.json \
        "https://api.github.com/repos/${{ inputs.repository }}/actions/workflows/${{ inputs.workflow_id }}/dispatches")
      
      # Check response (204 No Content is success)
      RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        -d @dispatch_payload.json \
        "https://api.github.com/repos/${{ inputs.repository }}/actions/workflows/${{ inputs.workflow_id }}/dispatches")
      
      if [ "$RESPONSE_CODE" != "204" ]; then
        echo "Error: Failed to trigger workflow (HTTP $RESPONSE_CODE)"
        exit 1
      fi
      
      echo "Workflow triggered successfully"
      
      # Wait a moment for the run to be created
      sleep 5
      
  - name: "Get workflow run ID"
    run: |
      # Get recent workflow runs
      API_URL="https://api.github.com/repos/${{ inputs.repository }}/actions/workflows/${{ inputs.workflow_id }}/runs"
      PARAMS="branch=${{ inputs.ref }}&per_page=5"
      
      RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        "${API_URL}?${PARAMS}")
      
      # Get the most recent run
      RUN_ID=$(echo "$RUNS" | jq -r '.workflow_runs[0].id // ""')
      RUN_URL=$(echo "$RUNS" | jq -r '.workflow_runs[0].html_url // ""')
      STATUS=$(echo "$RUNS" | jq -r '.workflow_runs[0].status // "unknown"')
      
      if [ -z "$RUN_ID" ]; then
        echo "Warning: Could not find workflow run ID"
        RUN_ID="unknown"
        RUN_URL="https://github.com/${{ inputs.repository }}/actions"
      fi
      
      echo "run_id=${RUN_ID}" >> $GITHUB_OUTPUT
      echo "run_url=${RUN_URL}" >> $GITHUB_OUTPUT
      echo "status=${STATUS}" >> $GITHUB_OUTPUT
      echo "RUN_ID=${RUN_ID}" >> run_info.env
      
  - name: "Wait for workflow completion"
    if: inputs.wait_for_completion == true
    run: |
      source run_info.env
      
      if [ "$RUN_ID" = "unknown" ]; then
        echo "Cannot wait for completion: run ID not found"
        exit 0
      fi
      
      # Wait for workflow to complete
      TIMEOUT=$(({{ inputs.timeout_minutes }} * 60))
      ELAPSED=0
      INTERVAL=30
      
      echo "Waiting for workflow to complete (timeout: ${{ inputs.timeout_minutes }} minutes)..."
      
      while [ $ELAPSED -lt $TIMEOUT ]; do
        # Get run status
        RUN_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ inputs.repository }}/actions/runs/${RUN_ID}")
        
        STATUS=$(echo "$RUN_STATUS" | jq -r '.status')
        CONCLUSION=$(echo "$RUN_STATUS" | jq -r '.conclusion // "null"')
        
        echo "Status: ${STATUS}, Conclusion: ${CONCLUSION}"
        
        if [ "$STATUS" = "completed" ]; then
          echo "Workflow completed with conclusion: ${CONCLUSION}"
          echo "conclusion=${CONCLUSION}" >> $GITHUB_OUTPUT
          break
        fi
        
        sleep $INTERVAL
        ELAPSED=$((ELAPSED + INTERVAL))
      done
      
      if [ $ELAPSED -ge $TIMEOUT ]; then
        echo "Warning: Workflow did not complete within timeout"
      fi
      
  - name: "Generate summary"
    run: |
      echo "## GitHub Workflow Dispatch Summary" > workflow_summary.md
      echo "" >> workflow_summary.md
      echo "### Workflow Information" >> workflow_summary.md
      echo "- **Repository:** ${{ inputs.repository }}" >> workflow_summary.md
      echo "- **Workflow:** ${{ inputs.workflow_id }}" >> workflow_summary.md
      echo "- **Branch/Ref:** ${{ inputs.ref }}" >> workflow_summary.md
      echo "- **Run ID:** ${{ steps.get-run-id.outputs.run_id }}" >> workflow_summary.md
      echo "- **Status:** ${{ steps.get-run-id.outputs.status }}" >> workflow_summary.md
      
      if [ -n "${{ steps.wait-completion.outputs.conclusion }}" ]; then
        echo "- **Conclusion:** ${{ steps.wait-completion.outputs.conclusion }}" >> workflow_summary.md
      fi
      
      echo "" >> workflow_summary.md
      echo "### Links" >> workflow_summary.md
      echo "- [View Workflow Run](${{ steps.get-run-id.outputs.run_url }})" >> workflow_summary.md

dependencies:
  - name: "GitHub Token"
    type: "secret"
    required: true
    description: "GitHub personal access token with workflow permissions"