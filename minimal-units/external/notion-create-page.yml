name: "Notion Create Page"
description: "Create a new page in Notion"
category: "external"
estimated_time: "1-2 minutes"
tags: ["notion", "page", "create", "api", "external", "documentation"]

inputs:
  parent_id:
    description: "Parent page or database ID"
    required: true
    type: "string"
  title:
    description: "Page title"
    required: true
    type: "string"
  content:
    description: "Page content (markdown format)"
    required: false
    type: "string"
    default: ""
  icon_emoji:
    description: "Page icon emoji"
    required: false
    type: "string"
    default: ""
  cover_url:
    description: "Cover image URL"
    required: false
    type: "string"
    default: ""
  properties_json:
    description: "JSON string of database properties (if parent is database)"
    required: false
    type: "string"
    default: "{}"

outputs:
  page_id:
    description: "Created page ID"
    type: "string"
  page_url:
    description: "URL of the created page"
    type: "string"
  created_time:
    description: "Page creation timestamp"
    type: "string"

workflow:
  - name: "Check Notion credentials"
    run: |
      if [ -z "${{ secrets.NOTION_API_KEY }}" ]; then
        echo "Error: NOTION_API_KEY not set"
        exit 1
      fi
      
  - name: "Convert markdown to Notion blocks"
    run: |
      # Create Python script to convert markdown to Notion blocks
      cat > convert_markdown.py << 'EOF'
      import re
      import json
      
      def markdown_to_notion_blocks(markdown_text):
          blocks = []
          lines = markdown_text.split('\n')
          
          i = 0
          while i < len(lines):
              line = lines[i]
              
              # Headers
              if line.startswith('### '):
                  blocks.append({
                      "object": "block",
                      "type": "heading_3",
                      "heading_3": {
                          "rich_text": [{"type": "text", "text": {"content": line[4:]}}]
                      }
                  })
              elif line.startswith('## '):
                  blocks.append({
                      "object": "block",
                      "type": "heading_2",
                      "heading_2": {
                          "rich_text": [{"type": "text", "text": {"content": line[3:]}}]
                      }
                  })
              elif line.startswith('# '):
                  blocks.append({
                      "object": "block",
                      "type": "heading_1",
                      "heading_1": {
                          "rich_text": [{"type": "text", "text": {"content": line[2:]}}]
                      }
                  })
              # Bullet points
              elif line.startswith('- '):
                  blocks.append({
                      "object": "block",
                      "type": "bulleted_list_item",
                      "bulleted_list_item": {
                          "rich_text": [{"type": "text", "text": {"content": line[2:]}}]
                      }
                  })
              # Code blocks
              elif line.strip() == '```':
                  # Find end of code block
                  j = i + 1
                  code_lines = []
                  while j < len(lines) and lines[j].strip() != '```':
                      code_lines.append(lines[j])
                      j += 1
                  
                  if code_lines:
                      blocks.append({
                          "object": "block",
                          "type": "code",
                          "code": {
                              "rich_text": [{"type": "text", "text": {"content": '\n'.join(code_lines)}}],
                              "language": "plain text"
                          }
                      })
                  i = j
              # Regular paragraphs
              elif line.strip():
                  blocks.append({
                      "object": "block",
                      "type": "paragraph",
                      "paragraph": {
                          "rich_text": [{"type": "text", "text": {"content": line}}]
                      }
                  })
              
              i += 1
          
          return blocks
      
      # Read content and convert
      content = '''${{ inputs.content }}'''
      blocks = markdown_to_notion_blocks(content)
      
      with open('notion_blocks.json', 'w') as f:
          json.dump(blocks, f, indent=2)
      EOF
      
      python3 convert_markdown.py
      
  - name: "Create Notion page"
    run: |
      # Determine parent type
      PARENT_JSON=""
      if [[ "${{ inputs.parent_id }}" == *"-"* ]] && [[ "${#{{ inputs.parent_id }}}" -eq 36 ]]; then
        # UUID format - likely a page
        PARENT_JSON='{"type": "page_id", "page_id": "${{ inputs.parent_id }}"}'
      else
        # Assume database
        PARENT_JSON='{"type": "database_id", "database_id": "${{ inputs.parent_id }}"}'
      fi
      
      # Build page payload
      cat > page_payload.json << EOF
      {
        "parent": ${PARENT_JSON},
        "properties": {
          "title": {
            "title": [
              {
                "type": "text",
                "text": {
                  "content": "${{ inputs.title }}"
                }
              }
            ]
          }
        }
      }
      EOF
      
      # Add icon if provided
      if [ -n "${{ inputs.icon_emoji }}" ]; then
        jq '. + {"icon": {"type": "emoji", "emoji": "${{ inputs.icon_emoji }}"}}' page_payload.json > temp.json
        mv temp.json page_payload.json
      fi
      
      # Add cover if provided
      if [ -n "${{ inputs.cover_url }}" ]; then
        jq '. + {"cover": {"type": "external", "external": {"url": "${{ inputs.cover_url }}"}}}' page_payload.json > temp.json
        mv temp.json page_payload.json
      fi
      
      # Add content blocks
      if [ -f notion_blocks.json ]; then
        jq --slurpfile blocks notion_blocks.json '. + {"children": $blocks[0]}' page_payload.json > temp.json
        mv temp.json page_payload.json
      fi
      
      # Add custom properties if parent is database
      if [ "${{ inputs.properties_json }}" != "{}" ]; then
        jq --argjson props "${{ inputs.properties_json }}" '.properties = (.properties + $props)' page_payload.json > temp.json
        mv temp.json page_payload.json
      fi
      
      # Create page
      echo "Creating Notion page..."
      
      RESPONSE=$(curl -s -X POST \
        -H "Authorization: Bearer ${{ secrets.NOTION_API_KEY }}" \
        -H "Notion-Version: 2022-06-28" \
        -H "Content-Type: application/json" \
        -d @page_payload.json \
        https://api.notion.com/v1/pages)
      
      # Check for errors
      if echo "$RESPONSE" | jq -e '.object == "error"' > /dev/null 2>&1; then
        echo "Error: Notion API request failed"
        echo "$RESPONSE" | jq .
        exit 1
      fi
      
      # Extract page information
      PAGE_ID=$(echo "$RESPONSE" | jq -r '.id')
      PAGE_URL=$(echo "$RESPONSE" | jq -r '.url')
      CREATED_TIME=$(echo "$RESPONSE" | jq -r '.created_time')
      
      echo "Page created successfully"
      echo "page_id=${PAGE_ID}" >> $GITHUB_OUTPUT
      echo "page_url=${PAGE_URL}" >> $GITHUB_OUTPUT
      echo "created_time=${CREATED_TIME}" >> $GITHUB_OUTPUT

dependencies:
  - name: "Notion API Key"
    type: "secret"
    required: true
    description: "Notion Integration API key"