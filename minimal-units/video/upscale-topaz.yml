name: upscale-topaz
description: Topaz動画アップスケールの最小単位ユニット

on:
  workflow_call:
    inputs:
      video_path:
        description: '入力動画パス'
        required: true
        type: string
      output_dir:
        description: '出力ディレクトリパス'
        required: true
        type: string
      scale_factor:
        description: 'アップスケール倍率'
        required: false
        type: string
        default: '2'
      quality_mode:
        description: '品質モード（fast/balanced/quality）'
        required: false
        type: string
        default: 'balanced'
    outputs:
      video_path:
        description: 'アップスケール動画パス'
        value: ${{ jobs.upscale.outputs.video_path }}
      video_url:
        description: 'アップスケール動画URL'
        value: ${{ jobs.upscale.outputs.video_url }}
      output_resolution:
        description: '出力解像度'
        value: ${{ jobs.upscale.outputs.output_resolution }}

jobs:
  upscale:
    runs-on: ubuntu-latest
    outputs:
      video_path: ${{ steps.execute.outputs.video_path }}
      video_url: ${{ steps.execute.outputs.video_url }}
      output_resolution: ${{ steps.execute.outputs.output_resolution }}
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install requests
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Upscale Video with Topaz
        id: execute
        run: |
          # ディレクトリ作成
          mkdir -p "${{ inputs.output_dir }}"
          
          # 動画情報を取得
          WIDTH=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width -of csv=s=x:p=0 "${{ inputs.video_path }}")
          HEIGHT=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=height -of csv=s=x:p=0 "${{ inputs.video_path }}")
          FPS=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=r_frame_rate -of csv=s=x:p=0 "${{ inputs.video_path }}")
          
          # アップスケール後の解像度を計算
          NEW_WIDTH=$((WIDTH * ${{ inputs.scale_factor }}))
          NEW_HEIGHT=$((HEIGHT * ${{ inputs.scale_factor }}))
          
          echo "Input: ${WIDTH}x${HEIGHT} @ ${FPS} fps"
          echo "Output: ${NEW_WIDTH}x${NEW_HEIGHT}"
          
          # MCP経由でTopazを呼び出す（シミュレーション）
          python3 -c "
import json
import os

# Topaz APIパラメータ
params = {
    'video_path': '${{ inputs.video_path }}',
    'scale_factor': int('${{ inputs.scale_factor }}'),
    'quality_mode': '${{ inputs.quality_mode }}',
    'preserve_fps': True,
    'denoise': True,
    'sharpen': True
}

# APIレスポンスをシミュレート
# 実際はMCP v2v-fal-topaz-upscale-video経由で実行
response = {
    'status': 'completed',
    'video_url': 'https://v3.fal.media/files/user/ghi789/topaz-upscale-output.mp4',
    'processing_time': 180.7,
    'metadata': {
        'input_resolution': f'{WIDTH}x{HEIGHT}',
        'output_resolution': f'{NEW_WIDTH}x{NEW_HEIGHT}',
        'frames_processed': 300,
        'quality_improvements': {
            'noise_reduction': 0.85,
            'sharpness_gain': 1.2,
            'detail_enhancement': 0.9
        }
    }
}

# 結果を保存
with open('${{ inputs.output_dir }}/topaz_result.json', 'w') as f:
    json.dump(response, f, indent=2)

print(f'Upscaling completed: {response[\"metadata\"][\"output_resolution\"]}')
"
          
          # 仮のアップスケール動画を作成（テスト用）
          # 実際はTopazのURLから動画をダウンロード
          ffmpeg -i "${{ inputs.video_path }}" \
            -vf "scale=${NEW_WIDTH}:${NEW_HEIGHT}:flags=lanczos,unsharp=5:5:1.0:5:5:0.0" \
            -c:v libx264 -preset slow -crf 18 \
            -c:a copy \
            "${{ inputs.output_dir }}/video.mp4"
          
          # 結果を設定
          echo "video_path=${{ inputs.output_dir }}/video.mp4" >> $GITHUB_OUTPUT
          echo "video_url=https://v3.fal.media/files/user/ghi789/topaz-upscale-output.mp4" >> $GITHUB_OUTPUT
          echo "output_resolution=${NEW_WIDTH}x${NEW_HEIGHT}" >> $GITHUB_OUTPUT