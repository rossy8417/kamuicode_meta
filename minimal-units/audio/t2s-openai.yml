name: t2s-openai
description: OpenAI Text-to-Speech音声生成の最小単位ユニット

on:
  workflow_call:
    inputs:
      text:
        description: '音声化するテキスト'
        required: true
        type: string
      output_dir:
        description: '出力ディレクトリパス'
        required: true
        type: string
      model:
        description: 'TTSモデル（tts-1, tts-1-hd）'
        required: false
        type: string
        default: 'tts-1'
      voice:
        description: '音声タイプ（alloy, echo, fable, onyx, nova, shimmer）'
        required: false
        type: string
        default: 'nova'
      speed:
        description: '話速（0.25-4.0）'
        required: false
        type: string
        default: '1.0'
      response_format:
        description: '出力フォーマット（mp3, opus, aac, flac）'
        required: false
        type: string
        default: 'mp3'
    outputs:
      audio_path:
        description: '生成された音声ファイルパス'
        value: ${{ jobs.generate.outputs.audio_path }}
      duration:
        description: '音声の長さ（秒）'
        value: ${{ jobs.generate.outputs.duration }}
      cost_estimate:
        description: 'コスト推定'
        value: ${{ jobs.generate.outputs.cost_estimate }}
    secrets:
      openai_api_key:
        description: 'OpenAI API Key'
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      audio_path: ${{ steps.execute.outputs.audio_path }}
      duration: ${{ steps.execute.outputs.duration }}
      cost_estimate: ${{ steps.execute.outputs.cost_estimate }}
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install openai
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Generate Audio with OpenAI TTS
        id: execute
        env:
          OPENAI_API_KEY: ${{ secrets.openai_api_key }}
        run: |
          # ディレクトリ作成
          mkdir -p "${{ inputs.output_dir }}"
          
          # OpenAI TTS APIコール（シミュレーション）
          python3 -c "
import json
import os

# OpenAI TTS設定
text = '''${{ inputs.text }}'''
model = '${{ inputs.model }}'
voice = '${{ inputs.voice }}'
speed = float('${{ inputs.speed }}')
response_format = '${{ inputs.response_format }}'

# 文字数とコスト計算
char_count = len(text)
# TTS pricing: $0.015 per 1K characters (tts-1), $0.030 per 1K characters (tts-1-hd)
if model == 'tts-1-hd':
    cost_per_1k = 0.030
else:
    cost_per_1k = 0.015
    
estimated_cost = (char_count / 1000) * cost_per_1k

# APIレスポンスをシミュレート
# 実際の実装:
# from openai import OpenAI
# client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
# response = client.audio.speech.create(
#     model=model,
#     voice=voice,
#     input=text,
#     response_format=response_format,
#     speed=speed
# )
# response.stream_to_file(f'${{ inputs.output_dir }}/audio.{response_format}')

# 結果メタデータ
result = {
    'model': model,
    'voice': voice,
    'speed': speed,
    'format': response_format,
    'character_count': char_count,
    'estimated_cost_usd': round(estimated_cost, 4),
    'settings': {
        'model': model,
        'voice': voice,
        'speed': speed,
        'response_format': response_format
    }
}

# メタデータを保存
with open('${{ inputs.output_dir }}/openai_tts_metadata.json', 'w') as f:
    json.dump(result, f, indent=2)

print(f'OpenAI TTS generation completed')
print(f'Model: {model}')
print(f'Voice: {voice}')
print(f'Characters: {char_count}')
print(f'Estimated cost: ${estimated_cost:.4f}')
"
          
          # 仮の音声ファイルを生成（テスト用）
          # 実際はOpenAI TTSの結果を保存
          EXTENSION="${{ inputs.response_format }}"
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" \
            -ar 24000 -ac 1 -ab 128k \
            "${{ inputs.output_dir }}/audio.$EXTENSION"
          
          # 音声の長さを取得
          DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${{ inputs.output_dir }}/audio.$EXTENSION")
          
          # コスト推定を取得
          METADATA=$(cat "${{ inputs.output_dir }}/openai_tts_metadata.json")
          COST_ESTIMATE=$(echo "$METADATA" | jq -r '.estimated_cost_usd')
          
          # 結果を設定
          echo "audio_path=${{ inputs.output_dir }}/audio.$EXTENSION" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "cost_estimate=\$$COST_ESTIMATE USD" >> $GITHUB_OUTPUT