# Generation-Judgment-Recovery Template for Video Production
# This template implements the robust generation pattern for video workflows

name: "Video Production with Robust Generation Pattern"
on:
  workflow_dispatch:
    inputs:
      scene_count:
        description: 'Number of scenes to generate'
        required: true
        default: '12'
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      scene_array: ${{ steps.scenes.outputs.scene_array }}
      project_dir: ${{ steps.setup.outputs.project_dir }}
    steps:
      - name: Generate Scene Array
        id: scenes
        run: |
          SCENE_COUNT="${{ github.event.inputs.scene_count }}"
          SCENE_ARRAY=$(seq 1 $SCENE_COUNT | jq -R . | jq -s .)
          echo "scene_array=${SCENE_ARRAY}" >> $GITHUB_OUTPUT
      
      - name: Setup Project Directory
        id: setup
        run: |
          PROJECT_DIR="projects/video-production-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$PROJECT_DIR"
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT

  # ðŸŽ¨ PATTERN 1: Background Image Generation â†’ Judgment â†’ Recovery
  background-generation:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.scene_array) }}
      fail-fast: false  # CRITICAL: Allow partial success
      max-parallel: 4
    steps:
      - name: Generate Background for Scene ${{ matrix.scene }}
        run: |
          # Image generation logic here
          echo "Generating background for scene ${{ matrix.scene }}"
          # Mark success/failure appropriately
          echo "scene_${{ matrix.scene }}_status=SUCCESS" >> $GITHUB_OUTPUT

  collect-background-failures:
    needs: [setup, background-generation]
    runs-on: ubuntu-latest
    outputs:
      has_failures: ${{ steps.analyze.outputs.has_failures }}
      failed_scenes: ${{ steps.analyze.outputs.failed_scenes }}
      success_rate: ${{ steps.analyze.outputs.success_rate }}
    steps:
      - name: Analyze Background Generation Results
        id: analyze
        run: |
          # Analyze which scenes failed
          FAILED_SCENES=""
          SUCCESS_COUNT=0
          TOTAL_SCENES=${{ strategy.job-total }}
          
          # Check each scene's generation result
          for scene in $(echo '${{ needs.setup.outputs.scene_array }}' | jq -r '.[]'); do
            if [ ! -f "${{ needs.setup.outputs.project_dir }}/backgrounds/scene_${scene}.png" ]; then
              FAILED_SCENES="${FAILED_SCENES} ${scene}"
            else
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          done
          
          if [ -n "$FAILED_SCENES" ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "failed_scenes=${FAILED_SCENES}" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "failed_scenes=" >> $GITHUB_OUTPUT
          fi
          
          echo "success_rate=$((SUCCESS_COUNT * 100 / TOTAL_SCENES))" >> $GITHUB_OUTPUT

  background-recovery:
    needs: [setup, background-generation, collect-background-failures]
    if: needs.collect-background-failures.outputs.has_failures == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scene: ${{ fromJson(needs.collect-background-failures.outputs.failed_scenes) }}
      fail-fast: false
    steps:
      - name: Recover Background for Scene ${{ matrix.scene }}
        run: |
          echo "Recovering background for failed scene ${{ matrix.scene }}"
          # Recovery logic with different parameters/algorithms
          # Retry with different seed, different MCP service, or fallback method

  # ðŸŽ¬ PATTERN 2: Video Generation â†’ Judgment â†’ Recovery  
  scene-video-generation:
    needs: [setup, background-generation, collect-background-failures, background-recovery]
    if: |
      always() &&
      needs.collect-background-failures.result == 'success' &&
      (needs.background-recovery.result == 'success' || needs.background-recovery.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.scene_array) }}
      fail-fast: false  # CRITICAL: Allow partial success
      max-parallel: 3
    steps:
      - name: Generate Video for Scene ${{ matrix.scene }}
        run: |
          echo "Generating video for scene ${{ matrix.scene }}"
          # Video generation logic here
          # Use available background (original or recovered)
          echo "scene_${{ matrix.scene }}_video_status=SUCCESS" >> $GITHUB_OUTPUT

  collect-video-failures:
    needs: [setup, scene-video-generation]
    runs-on: ubuntu-latest
    outputs:
      has_failures: ${{ steps.analyze.outputs.has_failures }}
      failed_scenes: ${{ steps.analyze.outputs.failed_scenes }}
      success_rate: ${{ steps.analyze.outputs.success_rate }}
    steps:
      - name: Analyze Video Generation Results
        id: analyze
        run: |
          # Similar analysis logic for video generation
          FAILED_SCENES=""
          SUCCESS_COUNT=0
          
          for scene in $(echo '${{ needs.setup.outputs.scene_array }}' | jq -r '.[]'); do
            if [ ! -f "${{ needs.setup.outputs.project_dir }}/videos/scene_${scene}.mp4" ]; then
              FAILED_SCENES="${FAILED_SCENES} ${scene}"
            else
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          done
          
          if [ -n "$FAILED_SCENES" ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "failed_scenes=${FAILED_SCENES}" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
          fi
          
          echo "success_rate=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT

  video-recovery:
    needs: [setup, scene-video-generation, collect-video-failures]
    if: needs.collect-video-failures.outputs.has_failures == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scene: ${{ fromJson(needs.collect-video-failures.outputs.failed_scenes) }}
      fail-fast: false
    steps:
      - name: Recover Video for Scene ${{ matrix.scene }}
        run: |
          echo "Recovering video for failed scene ${{ matrix.scene }}"
          # Video recovery logic with fallback methods

  # ðŸŽµ PATTERN 3: Audio Processing (Next Phase)
  audio-processing:
    needs: [setup, scene-video-generation, collect-video-failures, video-recovery]
    if: |
      always() &&
      needs.collect-video-failures.result == 'success' &&
      (needs.video-recovery.result == 'success' || needs.video-recovery.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Process Audio with Available Videos
        run: |
          echo "Processing audio with all available videos (original + recovered)"
          # Audio processing logic here

  # ðŸŽ¬ FINAL: Composition Phase
  final-composition:
    needs: [setup, audio-processing]
    if: always() && needs.audio-processing.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Compose Final Video
        run: |
          echo "Composing final video with all available assets"
          # Final composition logic
          # Use all available content for best possible result

  # ðŸ“Š REPORTING: Success Summary
  workflow-summary:
    needs: [collect-background-failures, collect-video-failures, final-composition]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Workflow Summary
        run: |
          echo "## ðŸŽ¬ Video Production Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Background Generation" >> $GITHUB_STEP_SUMMARY
          echo "- Success Rate: ${{ needs.collect-background-failures.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery Applied: ${{ needs.collect-background-failures.outputs.has_failures }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Video Generation" >> $GITHUB_STEP_SUMMARY
          echo "- Success Rate: ${{ needs.collect-video-failures.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "- Recovery Applied: ${{ needs.collect-video-failures.outputs.has_failures }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Final Result" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Completed: ${{ needs.final-composition.result == 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pattern: Generation â†’ Judgment â†’ Recovery â†’ Next Phase" >> $GITHUB_STEP_SUMMARY