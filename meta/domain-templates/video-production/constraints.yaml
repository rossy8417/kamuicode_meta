# 動画制作の制約条件と計算式

# 🚨 重要: シーン数計算は必須です
# タスク分解時には必ずこの計算式を適用してください
timing_constraints:
  # シーン数計算 - 動画品質の要
  scene_calculation:
    importance: "CRITICAL - 動画の視聴体験を左右する最重要要素"
    formula: |
      # ニュース動画用の計算式（5秒/シーン固定）
      total_scenes = ceil(duration_seconds / 5)
      
      # 旧式（汎用動画向け）
      # total_scenes = ceil(duration_seconds / average_scene_length)
      # where:
      #   - average_scene_length = 6.5 (5-8秒の中央値)
      #   - buffer_scenes = ceil(total_scenes * 0.2) # 20%の予備シーン
      #   - final_scene_count = total_scenes + buffer_scenes
    
    examples:
      - "duration: 30s → scenes: 6"
      - "duration: 60s → scenes: 12"
      - "duration: 180s → scenes: 36"

# 構成ルール（直列×並列）
composition_rules:
  per_scene_pipeline:
    description: "各シーンは『画像生成 → 画像から動画(I2V)』を同一ジョブ内で直列実行する"
    rationale:
      - "画像生成直後にI2Vを行うことでURL期限切れを回避"
      - "同一ランナー内でのファイル共有により安定性向上"
    mandatory: true

  orchestration:
    strategy: "matrix(scene: 1..N)"
    max_parallel: "N"  # Nはscene_calculationで動的に算出されたシーン数
    notes:
      - "max_parallelはシーン数と同じ値に動的設定（全シーン同時処理可能）"
      - "各ジョブ内で画像生成→I2V変換を直列実行しURL期限対策"
      - "Nはscene_calculationで算出（例: 60秒→12シーン、30秒→6シーン）"

  duration_allocation:
    default_per_scene_seconds: 5
    precedence: "story_structure.scene_breakdown[i].duration_sec があればそれを優先"
    fallback: "duration_seconds / default_per_scene_seconds でNを算出（切り上げ）"

  forbidden_patterns:
    - "画像だけをバッチ並列（7A/7B型）のみで生成する設計"
    - "I2Vだけを別バッチ（8A/8B型）のみで並列処理する設計"
    - "画像生成とI2Vが別ジョブになりURL有効期限の影響を受ける設計"
  
  # URL有効期限対策
  url_expiration:
    gcs_limit: 900 # 15分
    s3_limit: 1800 # 30分
    safety_margin: 180 # 3分の安全マージン
    
    batch_strategy:
      max_parallel: "dynamic"  # scene_calculationの結果に基づいて動的設定
      time_per_batch: 180 # 3分
      calculation: |
        # max_parallelは動的に計算されたシーン数（N）と同じ
        max_parallel = N  # Nはscene_calculationで算出
        total_batches = 1  # 全シーンを1バッチで並列処理が理想
        total_time = total_batches * time_per_batch
        # URL期限内に収まらない場合のみバッチ分割
        if total_time > (url_limit - safety_margin):
          adjust_batch_size_based_on_url_limit()

# 人間要素特化制約
human_element_technical_constraints:
  # キャラクター生成技術制約
  character_generation:
    face_resolution_minimum: "512x512  # 顔部分の最低解像度"
    face_detection_confidence: "0.85  # 顔認識精度闾値"
    expression_frame_rate: "15fps  # 表情変化のスムーズさ"
    
    clothing_consistency:
      texture_resolution: "1024x1024"
      color_tolerance: "5%  # RGB値の許容誕差"
      pattern_alignment: "required  # 柄の連続性"
  
  # リップシンク技術制約
  lipsync_technical:
    phoneme_accuracy: ">90%  # 音素認識精度"
    mouth_shape_frames: "24fps  # 口の形状フレームレート"
    sync_drift_tolerance: "100ms per minute  # 時間経過によるズレ許容"
    
    multi_speaker_handling:
      speaker_identification: "required  # 話者特定必須"
      voice_overlap_resolution: "priority_based  # 主話者優先"
      cross_talk_detection: "enabled  # 同時発話検出"

# データ永続化制約（データ共有問題対策）
data_persistence_constraints:
  claude_code_execution:
    must_include:
      - explicit_save_path: "必ず${PROJECT_DIR}/media/...形式で明示的に指定"
      - url_file_creation: "Google Cloud Storage URLを別ファイル（*-url.txt）に保存"
      - verification_command: "ls -laコマンド実行でファイル保存を確認"
    example_prompt: |
      "MCPツール mcp__t2i-kamui-imagen3__imagen_t2i で画像生成後、
       Writeツールで ${PROJECT_DIR}/media/images/scene${N}.png に保存、
       Google URLを ${PROJECT_DIR}/media/images/scene${N}-url.txt に保存、
       最後に Bashツールで ls -la ${PROJECT_DIR}/media/images/ を実行"
    
  file_retrieval:
    search_patterns:
      primary: "*scene*.png または *scene*.jpg"
      secondary: "*.png -mmin -2 (2分以内に作成されたファイル)"
      tertiary: "*.png または *.jpg (汎用パターン)"
    retry_before_placeholder: true
    multiple_attempts: 3
    
  url_handling:
    immediate_download: true
    curl_command: "curl -L -o local_file.png \"$URL\""
    expiration_check: "curl -IfsS --max-time 5 \"$URL\""
    fallback_to_local: true

technical_constraints:
  # 解像度とアスペクト比
  resolution:
    youtube_optimal: "1920x1080"
    instagram_reel: "1080x1920"
    tiktok: "1080x1920"
    twitter: "1280x720"
    linkedin: "1200x628"
  
  # ビットレート推奨値
  bitrate:
    4k: "35-45 Mbps"
    1080p: "8-12 Mbps"
    720p: "5-8 Mbps"
    mobile: "2-4 Mbps"
  
  # フレームレート
  framerate:
    cinema: 24
    standard: 30
    smooth_motion: 60
    slow_motion: 120

# Rule references (domain rule files to load additionally)
rule_references:
  - path: "meta/domain-templates/video-production/rules/task-breakdown.yaml"
    purpose: "Task decomposition into atomic steps"
  - path: "meta/domain-templates/video-production/rules/orchestration.yaml"
    purpose: "Serial/parallel/matrix orchestration and limits"
  - path: "meta/domain-templates/video-production/rules/consistency.yaml"
    purpose: "Presenter identity and visual/audio consistency"

# Checklist references (domain-specific MUST/SHOULD)
checklist_references:
  - path: "meta/domain-templates/video-production/checklists/news-specific.md"
    purpose: "News video MUST/SHOULD checklist"

parallel_processing:
  # 並列処理戦略
  strategies:
    - name: "シーン別並列"
      condition: "total_scenes > 1"  # 複数シーンがある場合は常に並列化
      approach: |
        1. 全シーンを並列処理（N並列、Nは動的計算されたシーン数）
        2. 各シーンは画像生成→I2V変換を直列実行
        3. 完成したシーンから順次結合
    
    - name: "レイヤー別並列"
      condition: "has_background && has_foreground"
      approach: |
        1. 背景生成と前景生成を並列実行
        2. 合成処理で統合
    
    - name: "品質別並列"
      condition: "need_preview"
      approach: |
        1. 低解像度プレビュー版を先行生成
        2. 高解像度本番版を並列生成

audio_video_sync:
  # 音声・動画同期戦略
  sync_points:
    - type: "ナレーション駆動"
      process: |
        1. ナレーション音声を先に生成
        2. 音声解析でシーン切り替えポイント特定
        3. 各ポイントに合わせて映像生成
    
    - type: "ビート同期"
      process: |
        1. BGMのビート検出
        2. ビートに合わせたカット点設定
        3. リズムに同期した映像遷移
  
  # リップシンク要件
  lipsync:
    required_when: "has_visible_speaker"
    pre_processing: |
      - 音素解析
      - 口形状マッピング
      - タイミング調整（±50ms許容）
  
  # 人間要素同期制約新追加
  human_element_sync:
    # キャラクター一貫性制約
    character_consistency:
      importance: "CRITICAL - キャラクターの一貫性は視聴体験に直結"
      constraints:
        same_character_seed: "true  # 同一キャラは同じseed値使用必須"
        color_palette_lock: "true  # 肤の色、髪の色、服の色を固定"
        facial_features_lock: "true  # 顔の特徴（目、鼻、輪郭）を固定"
        pose_reference: "maintain  # 姿勢・表情のベースライン保持"
    
    # 複数人物出演時の制約
    multi_presenter_constraints:
      max_simultaneous: 3  # 同時出演人数上限
      screen_composition:
        two_people: "split_screen or interview_setup"
        three_people: "panel_discussion or main_with_guests"
        four_plus: "group_shot or sequential_appearance"
      
      interaction_rules:
        eye_contact: "speakers should make appropriate eye contact"
        gesture_sync: "avoid simultaneous large gestures"
        voice_overlap: "max 200ms overlap allowed"
    
    # 音声キャラクター連携
    voice_character_mapping:
      consistency_requirement: |
        - 同じキャラは同じ音声パラメータ使用
        - 音声と外観の違和感チェック（年齢・性別・体格）
        - キャラ特性と音声特性のマッチング
      
      voice_separation:
        minimum_pitch_difference: "3 semitones  # 複数話者の聴き分け用"
        speaking_pace_variation: "allow  # 個性を出すための速度差"
        accent_consistency: "per_character  # キャラ毎のアクセント統一"

quality_assurance:
  # 品質チェックポイント
  checkpoints:
    - stage: "プリプロダクション"
      checks:
        - "ストーリーボードの完成度"
        - "音声スクリプトの長さ検証"
        - "必要リソースの確認"
    
    - stage: "プロダクション"
      checks:
        - "各シーンの生成成功"
        - "解像度・フォーマット統一"
        - "カラーグレーディング一貫性"
    
    - stage: "ポストプロダクション"
      checks:
        - "音声レベル正規化（-14 LUFS）"
        - "カット点の自然さ"
        - "エンコード品質"

failure_recovery:
  # 人間要素関連失敗リカバリー
  human_element_recovery:
    - error: "キャラ不一致"
      detection: |
        - 顔特徴を数値化して比較（SSIM < 0.7）
        - 色彩ヒストグラムでカラーパレット確認
        - ポーズ・表情の一貫性チェック
      recovery: |
        1. ベースキャラクターを基準として設定
        2. seed値とプロンプトを統一
        3. 不一致シーンのみ再生成
        4. ポストプロセシングで色補正
    
    - error: "リップシンク失敗"
      detection: |
        - 音声タイミングと口の動きのズレ > 200ms
        - 音素と口形の不一致率 > 30%
        - 音声のない時間帯での口の動き
      recovery: |
        1. 音素解析を再実行（精度向上）
        2. 音声速度を微調整（±5%範囲）
        3. 手動でキーフレーム指定
        4. フォールバック：シンプルリップシンクモード
    
    - error: "複数登場人物の競合"
      detection: |
        - 同時に複数話者の口が動く
        - 話者以外の人物が意図せず話している
        - 音声重なりが不自然
      recovery: |
        1. 話者優先度を明確化
        2. 非話者の口を閉じた状態で再生成
        3. シークエンシャル音声処理に切替
        4. 複数カメラアングルで個別撮影
  
  # 従来の失敗リカバリー戦略
  strategies:
    - error: "URL期限切れ"
      recovery: |
        1. 失敗したバッチを特定
        2. 新規URLで再生成
        3. 既存完了分と結合
    
    - error: "生成タイムアウト"
      recovery: |
        1. シーン分割（より短いクリップへ）
        2. 解像度を下げて再試行
        3. 代替シーン使用
    
    - error: "スタイル不一致"
      recovery: |
        1. スタイル参照画像を固定
        2. seed値の統一
        3. 後処理でカラー補正