name: "Game Asset Creation Workflow"
run-name: "üéÆ Creating game assets: ${{ github.event.inputs.game_concept || 'Game Asset Production' }}"

on:
  workflow_dispatch:
    inputs:
      game_concept:
        description: '„Ç≤„Éº„É†„Ç≥„É≥„Çª„Éó„Éà„Éª‰∏ñÁïåË¶≥'
        required: true
        default: '„Éï„Ç°„É≥„Çø„Ç∏„ÉºRPG„ÄÅ„Çµ„Ç§„Éê„Éº„Éë„É≥„ÇØ‰∏ñÁïå„ÄÅ„Åã„Çè„ÅÑ„ÅÑÂãïÁâ©„ÄÅÊú™Êù•ÈÉΩÂ∏Ç'
        type: string
      game_genre:
        description: '„Ç≤„Éº„É†„Ç∏„É£„É≥„É´'
        required: true
        type: choice
        options:
        - action_adventure
        - rpg_fantasy
        - puzzle_casual
        - strategy_simulation
        - platformer_arcade
        - shooter_combat
        default: 'rpg_fantasy'
      asset_type_priority:
        description: '„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÂÑ™ÂÖàÂ∫¶'
        required: true
        type: choice
        options:
        - characters_focus
        - environments_focus
        - ui_interface_focus
        - props_items_focus
        - effects_audio_focus
        - balanced_all
        default: 'balanced_all'
      art_style:
        description: '„Ç¢„Éº„Éà„Çπ„Çø„Ç§„É´'
        required: true
        type: choice
        options:
        - pixel_art
        - cartoon_stylized
        - realistic_3d
        - minimalist_abstract
        - anime_manga
        - retro_vintage
        default: 'cartoon_stylized'
      target_platform:
        description: '„Çø„Éº„Ç≤„ÉÉ„Éà„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†'
        required: true
        type: choice
        options:
        - mobile_games
        - pc_desktop
        - console_games
        - web_browser
        - vr_ar_platforms
        - multi_platform
        default: 'multi_platform'
      resolution_quality:
        description: 'Ëß£ÂÉèÂ∫¶„ÉªÂìÅË≥™„É¨„Éô„É´'
        required: true
        type: choice
        options:
        - low_res_retro
        - standard_hd
        - high_res_4k
        - ultra_quality
        - scalable_vector
        default: 'standard_hd'
      color_palette:
        description: '„Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà'
        required: true
        type: choice
        options:
        - vibrant_colorful
        - dark_moody
        - pastel_soft
        - monochrome_minimal
        - neon_cyber
        - earth_natural
        default: 'vibrant_colorful'
      animation_needs:
        description: '„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë¶Å‰ª∂'
        required: true
        type: choice
        options:
        - static_assets_only
        - basic_animations
        - complex_sequences
        - interactive_animations
        - cinematic_quality
        default: 'basic_animations'
      asset_quantity:
        description: '„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÈáè'
        required: true
        type: choice
        options:
        - prototype_minimal
        - demo_essential
        - alpha_moderate
        - beta_comprehensive
        - full_production
        default: 'demo_essential'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: ‰∫ãÂâç„ÉÜ„Çπ„ÉàÊÆµÈöé
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      image_gen_available: ${{ steps.test.outputs.image_gen_available }}
      threed_gen_available: ${{ steps.test.outputs.threed_gen_available }}
      audio_gen_available: ${{ steps.test.outputs.audio_gen_available }}
    steps:
      - name: Test game asset generation services
        id: test
        run: |
          echo "üéÆ Testing game asset generation services..."
          
          mkdir -p .logs/connectivity-tests
          
          # 2DÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºà„Ç≠„É£„É©„ÇØ„Çø„Éº„ÉªËÉåÊôØÁî®Ôºâ
          echo "Testing 2D image generation for game assets..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "game character asset test" > .logs/connectivity-tests/2d-asset-test.log 2>&1; then
            IMAGE_GEN_STATUS="success"
            echo "‚úÖ 2D Image Generation: Available"
          else
            IMAGE_GEN_STATUS="failed"
            echo "‚ö†Ô∏è 2D Image Generation: Not available - will use concept art approach"
          fi
          
          # 3D„É¢„Éá„É´ÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºà3D„Ç¢„Çª„ÉÉ„ÉàÁî®Ôºâ
          echo "Testing 3D model generation for game objects..."
          if timeout 180 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --test > .logs/connectivity-tests/3d-asset-test.log 2>&1; then
            THREED_GEN_STATUS="success"
            echo "‚úÖ 3D Model Generation: Available"
          else
            THREED_GEN_STATUS="failed"
            echo "‚ö†Ô∏è 3D Model Generation: Not available - will focus on 2D assets"
          fi
          
          # Èü≥Ê•Ω„ÉªÂäπÊûúÈü≥ÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing audio generation for game sounds..."
          if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "game background music test" > .logs/connectivity-tests/audio-test.log 2>&1; then
            AUDIO_GEN_STATUS="success"
            echo "‚úÖ Audio Generation: Available"
          else
            AUDIO_GEN_STATUS="failed"
            echo "‚ö†Ô∏è Audio Generation: Not available - will focus on visual assets"
          fi
          
          # Set outputs
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "image_gen_available=$IMAGE_GEN_STATUS" >> $GITHUB_OUTPUT
          echo "threed_gen_available=$THREED_GEN_STATUS" >> $GITHUB_OUTPUT
          echo "audio_gen_available=$AUDIO_GEN_STATUS" >> $GITHUB_OUTPUT
          
          echo "üéÆ Game asset services connectivity tests completed"

  # Phase 2: „Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥ÊñáÊõ∏‰ΩúÊàêÊÆµÈöé
  game-design-document:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      design_ready: ${{ steps.design.outputs.design_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create comprehensive game design document
        id: design
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üìã Creating comprehensive game design document..."
          
          mkdir -p .logs/game-design
          
          GAME_CONCEPT="${{ github.event.inputs.game_concept }}"
          GAME_GENRE="${{ github.event.inputs.game_genre }}"
          ART_STYLE="${{ github.event.inputs.art_style }}"
          
          echo "Game concept: $GAME_CONCEPT"
          echo "Genre: $GAME_GENRE"
          echo "Art style: $ART_STYLE"
          
          # Claude Code „Åß„Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥ÊñáÊõ∏‰ΩúÊàê
          claude-code --prompt "‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂåÖÊã¨ÁöÑ„Å™„Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥ÊñáÊõ∏„Å®„Ç¢„Çª„ÉÉ„Éà‰ªïÊßò„ÇíJSONÂΩ¢Âºè„Åß‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

          „Ç≤„Éº„É†„Ç≥„É≥„Çª„Éó„Éà: $GAME_CONCEPT
          „Ç∏„É£„É≥„É´: $GAME_GENRE
          „Ç¢„Éº„Éà„Çπ„Çø„Ç§„É´: $ART_STYLE
          „Çø„Éº„Ç≤„ÉÉ„Éà„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: ${{ github.event.inputs.target_platform }}
          „Ç¢„Çª„ÉÉ„ÉàÂÑ™ÂÖàÂ∫¶: ${{ github.event.inputs.asset_type_priority }}
          „Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà: ${{ github.event.inputs.color_palette }}

          „Ç≠„É£„É©„ÇØ„Çø„ÉºË®≠Ë®à„ÄÅÁí∞Â¢É„ÉªËÉåÊôØ„ÄÅUIË¶ÅÁ¥†„ÄÅÂ∞èÈÅìÂÖ∑„ÄÅÈü≥ÈüøË¶ÅÁ¥†„ÅÆË©≥Á¥∞„Å™‰ªïÊßò„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" > .logs/game-design/game-design-document.json
          
          echo "design_ready=true" >> $GITHUB_OUTPUT
          echo "üìã Game design document creation completed"

  # Phase 3: „Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÊÆµÈöé
  character-assets:
    needs: [connectivity-test, game-design-document]
    runs-on: ubuntu-latest
    outputs:
      characters_ready: ${{ steps.create.outputs.characters_ready }}
    steps:
      - name: Generate character assets and designs
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üëæ Generating character assets and designs..."
          
          mkdir -p .logs/character-assets
          
          IMAGE_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.image_gen_available }}"
          ART_STYLE="${{ github.event.inputs.art_style }}"
          COLOR_PALETTE="${{ github.event.inputs.color_palette }}"
          
          if [ "$IMAGE_GEN_AVAILABLE" = "success" ]; then
            echo "Generating main character designs..."
            MAIN_CHAR_PROMPT="${{ github.event.inputs.game_concept }}, main character design, $ART_STYLE style, $COLOR_PALETTE colors, game asset, character sheet"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$MAIN_CHAR_PROMPT" > .logs/character-assets/main-character.json 2>&1 || echo "Main character generation failed"
            
            echo "Generating NPC character designs..."
            NPC_PROMPT="${{ github.event.inputs.game_concept }}, NPC character design, $ART_STYLE style, supporting character, game asset"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$NPC_PROMPT" > .logs/character-assets/npc-characters.json 2>&1 || echo "NPC character generation failed"
            
            echo "Generating enemy/antagonist designs..."
            ENEMY_PROMPT="${{ github.event.inputs.game_concept }}, enemy character design, $ART_STYLE style, antagonist, game asset"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$ENEMY_PROMPT" > .logs/character-assets/enemy-characters.json 2>&1 || echo "Enemy character generation failed"
            
            echo "‚úÖ Character assets generated"
          else
            echo "‚ö†Ô∏è Image generation not available - creating character concept descriptions"
            echo '{"asset_type": "concept_descriptions", "art_style": "${{ github.event.inputs.art_style }}"}' > .logs/character-assets/character-concepts.json
          fi
          
          echo "characters_ready=true" >> $GITHUB_OUTPUT
          echo "üëæ Character assets creation completed"

  # Phase 4: Áí∞Â¢É„ÉªËÉåÊôØ„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÊÆµÈöé
  environment-assets:
    needs: [connectivity-test, game-design-document]
    runs-on: ubuntu-latest
    outputs:
      environments_ready: ${{ steps.create.outputs.environments_ready }}
    steps:
      - name: Generate environment and background assets
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üåç Generating environment and background assets..."
          
          mkdir -p .logs/environment-assets
          
          IMAGE_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.image_gen_available }}"
          
          if [ "$IMAGE_GEN_AVAILABLE" = "success" ]; then
            echo "Generating main game environment..."
            ENV_PROMPT="${{ github.event.inputs.game_concept }}, game environment, ${{ github.event.inputs.art_style }} style, background scene, game level design"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$ENV_PROMPT" > .logs/environment-assets/main-environment.json 2>&1 || echo "Main environment generation failed"
            
            echo "Generating secondary environments..."
            SEC_ENV_PROMPT="${{ github.event.inputs.game_concept }}, secondary game area, ${{ github.event.inputs.art_style }} style, alternate environment"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$SEC_ENV_PROMPT" > .logs/environment-assets/secondary-environments.json 2>&1 || echo "Secondary environment generation failed"
            
            echo "Generating environmental props..."
            PROPS_PROMPT="${{ github.event.inputs.game_concept }}, environmental props, ${{ github.event.inputs.art_style }} style, game objects, decorative elements"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$PROPS_PROMPT" > .logs/environment-assets/environment-props.json 2>&1 || echo "Environmental props generation failed"
            
            echo "‚úÖ Environment assets generated"
          else
            echo "‚ö†Ô∏è Image generation not available - creating environment concept descriptions"
            echo '{"asset_type": "environment_concepts", "game_genre": "${{ github.event.inputs.game_genre }}"}' > .logs/environment-assets/environment-concepts.json
          fi
          
          echo "environments_ready=true" >> $GITHUB_OUTPUT
          echo "üåç Environment assets creation completed"

  # Phase 5: 3D„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÊÆµÈöé
  threed-assets:
    needs: [connectivity-test, character-assets]
    runs-on: ubuntu-latest
    outputs:
      threed_ready: ${{ steps.create.outputs.threed_ready }}
    steps:
      - name: Generate 3D game assets
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üßä Generating 3D game assets..."
          
          mkdir -p .logs/threed-assets
          
          THREED_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.threed_gen_available }}"
          
          if [ "$THREED_GEN_AVAILABLE" = "success" ]; then
            echo "Generating 3D props from 2D references..."
            
            # 2D„Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Çª„ÉÉ„Éà„Åã„Çâ3D„É¢„Éá„É´ÁîüÊàê
            CHAR_REF_FILE=$(ls .logs/character-assets/main-character*.json 2>/dev/null | head -1)
            
            if [ -n "$CHAR_REF_FILE" ]; then
              CHAR_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$CHAR_REF_FILE" 2>/dev/null)
              
              if [ "$CHAR_IMAGE_PATH" != "none" ]; then
                echo "Generating 3D character model from 2D reference..."
                
                claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$CHAR_IMAGE_PATH" > .logs/threed-assets/3d-character-model.json 2>&1 || echo "3D character generation failed"
              fi
            fi
            
            echo "‚úÖ 3D assets generated"
          else
            echo "‚ö†Ô∏è 3D generation not available - focusing on 2D asset pipeline"
            echo '{"asset_type": "2d_only", "platform": "${{ github.event.inputs.target_platform }}"}' > .logs/threed-assets/2d-focus-plan.json
          fi
          
          echo "threed_ready=true" >> $GITHUB_OUTPUT
          echo "üßä 3D assets creation completed"

  # Phase 6: UI„Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÂà∂‰ΩúÊÆµÈöé
  ui-interface:
    needs: game-design-document
    runs-on: ubuntu-latest
    outputs:
      ui_ready: ${{ steps.create.outputs.ui_ready }}
    steps:
      - name: Generate UI and interface elements
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üñ•Ô∏è Generating UI and interface elements..."
          
          mkdir -p .logs/ui-interface
          
          # UI„Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπË®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆ„Ç≤„Éº„É†Ë¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅUI„Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπË®≠Ë®à„ÇíJSONÂΩ¢Âºè„Åß‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

          „Ç≤„Éº„É†„Ç∏„É£„É≥„É´: ${{ github.event.inputs.game_genre }}
          „Çø„Éº„Ç≤„ÉÉ„Éà„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: ${{ github.event.inputs.target_platform }}
          „Ç¢„Éº„Éà„Çπ„Çø„Ç§„É´: ${{ github.event.inputs.art_style }}
          Ëß£ÂÉèÂ∫¶ÂìÅË≥™: ${{ github.event.inputs.resolution_quality }}

          „É°„Éã„É•„ÉºÁîªÈù¢„ÄÅ„Ç≤„Éº„É†„Éó„É¨„Ç§UI„ÄÅ„Ç§„É≥„Éô„É≥„Éà„É™„ÄÅË®≠ÂÆöÁîªÈù¢„ÄÅ„Éú„Çø„É≥„Éª„Ç¢„Ç§„Ç≥„É≥„ÅÆË©≥Á¥∞‰ªïÊßò„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" > .logs/ui-interface/ui-design.json
          
          echo "ui_ready=true" >> $GITHUB_OUTPUT
          echo "üñ•Ô∏è UI interface creation completed"

  # Phase 7: Èü≥Èüø„Ç¢„Çª„ÉÉ„ÉàÂà∂‰ΩúÊÆµÈöé
  audio-assets:
    needs: [connectivity-test, game-design-document]
    runs-on: ubuntu-latest
    outputs:
      audio_ready: ${{ steps.create.outputs.audio_ready }}
    steps:
      - name: Generate audio assets and sound effects
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üîä Generating audio assets and sound effects..."
          
          mkdir -p .logs/audio-assets
          
          AUDIO_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.audio_gen_available }}"
          
          if [ "$AUDIO_GEN_AVAILABLE" = "success" ]; then
            echo "Generating background music..."
            BGM_PROMPT="${{ github.event.inputs.game_concept }}, game background music, ${{ github.event.inputs.game_genre }} style, atmospheric, looping"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$BGM_PROMPT" > .logs/audio-assets/background-music.json 2>&1 || echo "Background music generation failed"
            
            echo "Generating menu music..."
            MENU_PROMPT="${{ github.event.inputs.game_concept }}, game menu music, welcoming, engaging, ${{ github.event.inputs.game_genre }} genre"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$MENU_PROMPT" > .logs/audio-assets/menu-music.json 2>&1 || echo "Menu music generation failed"
            
            echo "‚úÖ Audio assets generated"
          else
            echo "‚ö†Ô∏è Audio generation not available - creating audio specification document"
            echo '{"asset_type": "audio_specifications", "game_genre": "${{ github.event.inputs.game_genre }}"}' > .logs/audio-assets/audio-specs.json
          fi
          
          echo "audio_ready=true" >> $GITHUB_OUTPUT
          echo "üîä Audio assets creation completed"

  # Phase 8: ÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
  final-packaging:
    needs: [game-design-document, character-assets, environment-assets, threed-assets, ui-interface, audio-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive game asset package
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "üì¶ Creating comprehensive game asset package..."
          
          mkdir -p .final-output/{design,characters,environments,threed,ui,audio}
          
          # „Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥ÊñáÊõ∏
          cp .logs/game-design/game-design-document.json .final-output/design/ 2>/dev/null || true
          
          # „Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Çª„ÉÉ„Éà
          cp .logs/character-assets/*.json .final-output/characters/ 2>/dev/null || true
          
          # Áí∞Â¢É„ÉªËÉåÊôØ„Ç¢„Çª„ÉÉ„Éà
          cp .logs/environment-assets/*.json .final-output/environments/ 2>/dev/null || true
          
          # 3D„Ç¢„Çª„ÉÉ„Éà
          cp .logs/threed-assets/*.json .final-output/threed/ 2>/dev/null || true
          
          # UI„Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
          cp .logs/ui-interface/*.json .final-output/ui/ 2>/dev/null || true
          
          # Èü≥Èüø„Ç¢„Çª„ÉÉ„Éà
          cp .logs/audio-assets/*.json .final-output/audio/ 2>/dev/null || true
          
          # „Éû„Çπ„Çø„Éº„Ç≤„Éº„É†„Ç¢„Çª„ÉÉ„ÉàÊÉÖÂ†±
          cat > .final-output/game-asset-master.json << EOF
          {
            "project_info": {
              "project_name": "Game Asset Creation & Production",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "production_type": "game_asset_generation"
            },
            "input_parameters": {
              "game_concept": "${{ github.event.inputs.game_concept }}",
              "game_genre": "${{ github.event.inputs.game_genre }}",
              "asset_type_priority": "${{ github.event.inputs.asset_type_priority }}",
              "art_style": "${{ github.event.inputs.art_style }}",
              "target_platform": "${{ github.event.inputs.target_platform }}",
              "resolution_quality": "${{ github.event.inputs.resolution_quality }}",
              "color_palette": "${{ github.event.inputs.color_palette }}",
              "animation_needs": "${{ github.event.inputs.animation_needs }}",
              "asset_quantity": "${{ github.event.inputs.asset_quantity }}"
            },
            "deliverables": {
              "design_documents": {
                "game_design_document": "design/game-design-document.json"
              },
              "visual_assets": {
                "character_designs": "characters/",
                "environment_backgrounds": "environments/",
                "threed_models": "threed/",
                "ui_interface_elements": "ui/"
              },
              "audio_assets": {
                "music_and_sounds": "audio/"
              }
            }
          }
          EOF
          
          # „Ç≤„Éº„É†„Ç¢„Çª„ÉÉ„ÉàÂà∂‰Ωú„Ç¨„Ç§„Éâ
          cat > .final-output/GAME_ASSET_GUIDE.md << 'EOF'
          # „Ç≤„Éº„É†„Ç¢„Çª„ÉÉ„ÉàÂà∂‰Ωú„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Ç¨„Ç§„Éâ
          
          ## üéÆ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å
          - Âà∂‰ΩúÊâãÊ≥ï: AIÁîüÊàê„Å´„Çà„ÇãÁµ±Âêà„Ç≤„Éº„É†„Ç¢„Çª„ÉÉ„ÉàÂà∂‰Ωú
          - ÂìÅË≥™„É¨„Éô„É´: „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Ç≤„Éº„É†ÈñãÁô∫ÂØæÂøú
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÊúÄÈÅ©Âåñ: „Éû„É´„ÉÅ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøú
          
          ## üìã „Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥
          - ÂåÖÊã¨ÁöÑ„Ç≤„Éº„É†„Éá„Ç∂„Ç§„É≥ÊñáÊõ∏
          - „Ç¢„Éº„Éà„Çπ„Çø„Ç§„É´Áµ±‰∏ÄÊåáÈáù
          - ÊäÄË°ì‰ªïÊßò„ÉªÂà∂Á¥Ñ‰∫ãÈ†Ö
          - „Ç¢„Çª„ÉÉ„ÉàÂÑ™ÂÖàÂ∫¶„Éª„É≠„Éº„Éâ„Éû„ÉÉ„Éó
          
          ## üëæ „Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Çª„ÉÉ„Éà
          - „É°„Ç§„É≥„Ç≠„É£„É©„ÇØ„Çø„ÉºË®≠Ë®à
          - NPC„Éª„Çµ„Éù„Éº„Éà„Ç≠„É£„É©„ÇØ„Çø„Éº
          - Êïµ„Ç≠„É£„É©„ÇØ„Çø„Éº„Éª„Éú„Çπ
          - „Ç≠„É£„É©„ÇØ„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªïÊßò
          
          ## üåç Áí∞Â¢É„ÉªËÉåÊôØ„Ç¢„Çª„ÉÉ„Éà
          - „Ç≤„Éº„É†‰∏ñÁïåÁí∞Â¢ÉË®≠Ë®à
          - „É¨„Éô„É´„Éª„Çπ„ÉÜ„Éº„Ç∏ËÉåÊôØ
          - Áí∞Â¢ÉÂ∞èÈÅìÂÖ∑„ÉªË£ÖÈ£æ
          - Áí∞Â¢É„Ç®„Éï„Çß„ÇØ„Éà„ÉªÁÖßÊòé
          
          ## üßä 3D„Ç¢„Çª„ÉÉ„Éà„Éª„É¢„Éá„É™„É≥„Ç∞
          - 3D„Ç≠„É£„É©„ÇØ„Çø„Éº„É¢„Éá„É´
          - Áí∞Â¢É3D„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
          - „Éó„É≠„ÉÉ„Éó„Çπ„Éª„Ç¢„Ç§„ÉÜ„É†
          - „ÉÜ„ÇØ„Çπ„ÉÅ„É£„Éª„Éû„ÉÜ„É™„Ç¢„É´
          
          ## üñ•Ô∏è UI„Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
          - „Ç≤„Éº„É†„É°„Éã„É•„ÉºË®≠Ë®à
          - „Ç≤„Éº„É†„Éó„É¨„Ç§UIË¶ÅÁ¥†
          - „Ç¢„Ç§„Ç≥„É≥„Éª„Éú„Çø„É≥„Éá„Ç∂„Ç§„É≥
          - „É¢„Éê„Ç§„É´„Éª„Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÊúÄÈÅ©Âåñ
          
          ## üîä Èü≥Èüø„Éª„Ç™„Éº„Éá„Ç£„Ç™
          - ËÉåÊôØÈü≥Ê•Ω„Éª„ÉÜ„Éº„ÉûÊõ≤
          - ÂäπÊûúÈü≥„ÉªÁí∞Â¢ÉÈü≥
          - „Ç≠„É£„É©„ÇØ„Çø„ÉºÈü≥Â£∞
          - „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç™„Éº„Éá„Ç£„Ç™
          
          ## üé® „Ç¢„Éº„Éà„ÉªÂìÅË≥™ÁÆ°ÁêÜ
          - „Ç¢„Éº„Éà„Çπ„Çø„Ç§„É´Áµ±‰∏Ä
          - ÂìÅË≥™Âü∫Ê∫ñ„Éª„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà
          - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøú
          
          ## üöÄ Áµ±Âêà„ÉªÂÆüË£Ö
          - „Ç≤„Éº„É†„Ç®„É≥„Ç∏„É≥Áµ±Âêà
          - „Ç¢„Çª„ÉÉ„ÉàÊúÄÈÅ©Âåñ„ÉªÂúßÁ∏Æ
          - „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„ÉªÊõ¥Êñ∞
          - Á∂ôÁ∂öÁöÑÊîπÂñÑ„ÉªÊã°Âºµ
          EOF
          
          echo "üì¶ Final game asset packaging completed"
          
      - name: Upload Game Asset Package
        uses: actions/upload-artifact@v4
        with:
          name: game-asset-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30