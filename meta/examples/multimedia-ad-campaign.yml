# „Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥Âà∂‰Ωú - Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
name: "multimedia-ad-campaign"
description: "Áµ±ÂêàÁöÑ„Å™„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂÆåÂÖ®Âà∂‰Ωú„Éï„É≠„ÉºÔºàÁîªÂÉè„ÉªÂãïÁîª„ÉªÈü≥Ê•Ω„Éª3DÁµ±ÂêàÔºâ"
category: "integrated-marketing-campaign"
complexity_level: 6
estimated_duration_minutes: 60

# ÂãïÁöÑÂÖ•Âäõ‰ªïÊßòÔºà„É¶„Éº„Ç∂„Éº„Åå„É¢„Éº„ÉÄ„É´„ÅßÂÖ•ÂäõÔºâ
dynamic_inputs_spec:
  modal:
    title: "„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥Âà∂‰ΩúË®≠ÂÆö"
    description: "Áµ±ÂêàÁöÑ„Å™„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂà∂‰Ωú„Å´ÂøÖË¶Å„Å™Ë®≠ÂÆö„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    form_sections:
      - title: "„Ç≠„É£„É≥„Éö„Éº„É≥Âü∫Êú¨ÊÉÖÂ†±"
        inputs:
          - name: "campaign_objective"
            label: "„Ç≠„É£„É≥„Éö„Éº„É≥ÁõÆÊ®ô"
            type: "textarea"
            placeholder: "‰æãÔºöÊñ∞ÂïÜÂìÅ„ÅÆ„Éñ„É©„É≥„ÉâË™çÁü•Âêë‰∏ä„Å®Ë≥ºË≤∑‰øÉÈÄ≤„ÇíÁõÆÁöÑ„Å®„Åó„ÅüÁµ±Âêà„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞„Ç≠„É£„É≥„Éö„Éº„É≥"
            required: true
            description: "„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆ‰∏ªË¶ÅÁõÆÊ®ô„Å®ÊúüÂæÖ„Åô„ÇãÊàêÊûú„ÇíË©≥„Åó„ÅèË®òÂÖ•„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          - name: "target_audience"
            label: "„Çø„Éº„Ç≤„ÉÉ„ÉàÈ°ßÂÆ¢"
            type: "select"
            options:
              - "20-30‰ª£Â•≥ÊÄßÔºà„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥„ÉªÁæéÂÆπÈñ¢ÂøÉÂ±§Ôºâ"
              - "30-40‰ª£Áî∑ÊÄßÔºà„Éì„Ç∏„Éç„Çπ„Éª„ÉÜ„ÇØ„Éé„É≠„Ç∏„ÉºÈñ¢ÂøÉÂ±§Ôºâ"
              - "10-20‰ª£Â≠¶ÁîüÔºà„Ç®„É≥„Çø„É°„Éª„É©„Ç§„Éï„Çπ„Çø„Ç§„É´Èñ¢ÂøÉÂ±§Ôºâ"
              - "40-60‰ª£„Éï„Ç°„Éü„É™„ÉºÔºàÂÆ∂Â∫≠„ÉªÂ≠êËÇ≤„Å¶Èñ¢ÂøÉÂ±§Ôºâ"
              - "‰ºÅÊ•≠„ÉªB2BÔºàÊ•≠ÂãôÂäπÁéá„Éª„Ç≥„Çπ„ÉàÂâäÊ∏õÈñ¢ÂøÉÂ±§Ôºâ"
              - "„Ç∑„Éã„Ç¢Â±§ÔºàÂÅ•Â∫∑„ÉªË∂£Âë≥Èñ¢ÂøÉÂ±§Ôºâ"
            required: true
            description: "‰∏ªË¶Å„Å™„Çø„Éº„Ç≤„ÉÉ„ÉàÈ°ßÂÆ¢Â±§„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          - name: "budget_range"
            label: "‰∫àÁÆóË¶èÊ®°"
            type: "select"
            options:
              - "„Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„ÉóÔºà50‰∏áÂÜÜÊú™Ê∫ÄÔºâ"
              - "‰∏≠Â∞è‰ºÅÊ•≠Ôºà50-200‰∏áÂÜÜÔºâ"
              - "‰∏≠Â†Ö‰ºÅÊ•≠Ôºà200-500‰∏áÂÜÜÔºâ"
              - "Â§ß‰ºÅÊ•≠Ôºà500-1000‰∏áÂÜÜÔºâ"
              - "„É°„Ç¨„Ç≥„Éº„Éù„É¨„Éº„Ç∑„Éß„É≥Ôºà1000‰∏áÂÜÜ‰ª•‰∏äÔºâ"
            required: true
            description: "„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂ§ß„Åæ„Åã„Å™‰∫àÁÆóË¶èÊ®°„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
      - title: "„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Éª„ÉÅ„É£„Éç„É´Ë®≠ÂÆö"
        inputs:
          - name: "brand_tone"
            label: "„Éñ„É©„É≥„Éâ„Éà„Éº„É≥"
            type: "select"
            options:
              - "„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Éª‰ø°È†ºÊÑüÈáçË¶ñ"
              - "Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ„Éª„Ç´„Ç∏„É•„Ç¢„É´"
              - "Èù©Êñ∞ÁöÑ„ÉªÂÖàÈÄ≤ÁöÑ"
              - "‰∏äË≥™„Éª„Éó„É¨„Éü„Ç¢„É†"
              - "„Ç®„Éç„É´„ÇÆ„ÉÉ„Ç∑„É•„ÉªÊ¥ªÂãïÁöÑ"
              - "Ê∏©„Åã„ÅÑ„Éª‰∫∫ÈñìÂë≥„ÅÆ„ÅÇ„Çã"
            required: true
            description: "„Éñ„É©„É≥„Éâ„ÅÆË°®Áèæ„Åó„Åü„ÅÑ„Éà„Éº„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          - name: "channels"
            label: "ÈÖç‰ø°„ÉÅ„É£„Éç„É´"
            type: "select"
            options:
              - "SNS‰∏≠ÂøÉÔºàInstagram„ÄÅTikTok„ÄÅTwitterÔºâ"
              - "ÂãïÁîª„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÔºàYouTube„ÄÅVimeoÔºâ"
              - "WebÂ∫ÉÂëäÔºàGoogle„ÄÅFacebook„ÄÅ„Éê„Éä„ÉºÔºâ"
              - "„ÉÜ„É¨„Éì„Éª„Éá„Ç∏„Çø„É´OOH"
              - "Áµ±Âêà„Éû„É´„ÉÅ„ÉÅ„É£„Éç„É´ÔºàÂÖ®„ÉÅ„É£„Éç„É´Ê¥ªÁî®Ôºâ"
              - "B2BÂ∞ÇÈñÄÔºàLinkedIn„ÄÅÊ•≠Áïå„É°„Éá„Ç£„Ç¢Ôºâ"
            required: true
            description: "‰∏ªË¶Å„Å™ÈÖç‰ø°„ÉÅ„É£„Éç„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          - name: "content_emphasis"
            label: "„Ç≥„É≥„ÉÜ„É≥„ÉÑÈáçÁÇπ"
            type: "select"
            options:
              - "„Éì„Ç∏„É•„Ç¢„É´ÈáçË¶ñÔºàÁîªÂÉè„Éª„Éá„Ç∂„Ç§„É≥‰∏≠ÂøÉÔºâ"
              - "ÂãïÁîª„ÉªÊò†ÂÉèÈáçË¶ñ"
              - "Èü≥Ê•Ω„Éª„Çµ„Ç¶„É≥„ÉâÈáçË¶ñ"
              - "3D„Éª„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÈáçË¶ñ"
              - "„Éê„É©„É≥„ÇπÂûãÔºàÂÖ®Á¥†ÊùêÂùáÁ≠âÔºâ"
            required: true
            description: "Áâπ„Å´Âäõ„ÇíÂÖ•„Çå„Åü„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
      - title: "ÂÆüÊñΩ„ÉªÂìÅË≥™Ë®≠ÂÆö"
        inputs:
          - name: "campaign_duration"
            label: "ÂÆüÊñΩÊúüÈñì"
            type: "select"
            options:
              - "Áü≠ÊúüÈõÜ‰∏≠Ôºà2-4ÈÄ±ÈñìÔºâ"
              - "Ê®ôÊ∫ñÊúüÈñìÔºà1-2„É∂ÊúàÔºâ"
              - "‰∏≠ÊúüÂÆüÊñΩÔºà3-6„É∂ÊúàÔºâ"
              - "Èï∑ÊúüÁ∂ôÁ∂öÔºà6„É∂Êúà‰ª•‰∏äÔºâ"
              - "„Ç§„Éô„É≥„ÉàÈÄ£ÂãïÔºàÁâπÂÆöÊúüÈñìÔºâ"
            required: true
            description: "„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂÆüÊñΩÊúüÈñì„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          - name: "quality_priority"
            label: "ÂìÅË≥™ÂÑ™ÂÖàÂ∫¶"
            type: "range"
            min: 1
            max: 10
            default: 7
            description: "1=ÈÄüÂ∫¶ÈáçË¶ñ„ÄÅ10=ÊúÄÈ´òÂìÅË≥™ÈáçË¶ñ„ÄÇÈ´òÂìÅË≥™„Åª„Å©Âà∂‰ΩúÊôÇÈñì„ÅåÈï∑„Åè„Å™„Çä„Åæ„Åô"
          - name: "innovation_level"
            label: "Èù©Êñ∞ÊÄß„É¨„Éô„É´"
            type: "range"
            min: 1
            max: 10
            default: 6
            description: "1=ÂÆâÂÖ®„ÉªÂÆüÁ∏æÈáçË¶ñ„ÄÅ10=ÊúÄÊñ∞ÊäÄË°ì„ÉªÂÆüÈ®ìÁöÑ„ÄÇÈù©Êñ∞ÊÄß„ÅåÈ´ò„ÅÑ„Åª„Å©„É™„Çπ„ÇØ„ÇÇÈ´ò„Åæ„Çä„Åæ„Åô"
  
  github_inputs:
    campaign_objective:
      description: "„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆ‰∏ªË¶ÅÁõÆÊ®ô„Å®ÊúüÂæÖ„Åô„ÇãÊàêÊûú"
      required: true
    target_audience:
      description: "‰∏ªË¶Å„Å™„Çø„Éº„Ç≤„ÉÉ„ÉàÈ°ßÂÆ¢Â±§"
      required: true
    budget_range:
      description: "„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂ§ß„Åæ„Åã„Å™‰∫àÁÆóË¶èÊ®°"
      required: true
    brand_tone:
      description: "„Éñ„É©„É≥„Éâ„ÅÆË°®Áèæ„Åó„Åü„ÅÑ„Éà„Éº„É≥„Å®„Çπ„Çø„Ç§„É´"
      required: true
    channels:
      description: "‰∏ªË¶Å„Å™ÈÖç‰ø°„ÉÅ„É£„Éç„É´„Éª„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†"
      required: true
    content_emphasis:
      description: "Áâπ„Å´Âäõ„ÇíÂÖ•„Çå„Åü„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó"
      required: true
    campaign_duration:
      description: "„Ç≠„É£„É≥„Éö„Éº„Ç∑„Éß„É≥„ÅÆÂÆüÊñΩÊúüÈñì"
      required: true
    quality_priority:
      description: "ÂìÅË≥™ÂÑ™ÂÖàÂ∫¶Ôºà1-10Ôºâ"
      required: false
      default: "7"
    innovation_level:
      description: "Èù©Êñ∞ÊÄß„É¨„Éô„É´Ôºà1-10Ôºâ"
      required: false
      default: "6"

# ‰∫∫Èñì„ÅÆÁÑ°ÊÑèË≠òÊÄùËÄÉ„Éó„É≠„Çª„Çπ
human_process:
  - phase: "campaign_strategy"
    description: "„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•ÊÆµÈöéÔºàÁõÆÊ®ô„ÉªÂØæË±°„Éª„É°„ÉÉ„Çª„Éº„Ç∏„Éª„ÉÅ„É£„Éç„É´Êà¶Áï•Ôºâ"
  - phase: "creative_concept"
    description: "„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„ÉàÊÆµÈöéÔºà„Ç¢„Ç§„Éá„Ç¢„Éª„Éì„Ç∏„É•„Ç¢„É´ÊñπÂêëÊÄß„Éª„Çπ„Éà„Éº„É™„ÉºÔºâ"
  - phase: "asset_planning"
    description: "Á¥†Êùê‰ºÅÁîªÊÆµÈöéÔºàÂøÖË¶ÅÁ¥†Êùê„ÉªÂà∂‰Ωú‰ªïÊßò„ÉªÂìÅË≥™Âü∫Ê∫ñ„Éª„Çπ„Ç±„Ç∏„É•„Éº„É´Ôºâ"
  - phase: "multimedia_production"
    description: "„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Âà∂‰ΩúÊÆµÈöéÔºàÁîªÂÉè„ÉªÂãïÁîª„ÉªÈü≥Ê•Ω„Éª3D„Éª„ÉÜ„Ç≠„Çπ„ÉàÁµ±ÂêàÂà∂‰ΩúÔºâ"
  - phase: "integration_optimization"
    description: "Áµ±ÂêàÊúÄÈÅ©ÂåñÊÆµÈöéÔºà„ÉÅ„É£„Éç„É´Âà•ÊúÄÈÅ©Âåñ„Éª‰∏ÄË≤´ÊÄß„ÉªÁõ∏‰πóÂäπÊûúÔºâ"
  - phase: "campaign_finalization"
    description: "„Ç≠„É£„É≥„Éö„Éº„É≥ÂÆåÊàêÊÆµÈöéÔºàÂìÅË≥™ÁÆ°ÁêÜ„ÉªÈÖç‰ø°Ê∫ñÂÇô„ÉªÂäπÊûúÊ∏¨ÂÆöË®≠ÂÆöÔºâ"

# GitHub Actions „Éé„Éº„ÉâË®≠Ë®à
github_actions_config:
  workflow_name: "Multimedia Ad Campaign Creation Pipeline"
  on_triggers: ["workflow_dispatch", "issues"]
  permissions:
    contents: "write"
    issues: "write"
    actions: "read"
  artifacts_retention_days: 30
  max_parallel_jobs: 5

# Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
tasks:
  # === ‰∫ãÂâç„ÉÜ„Çπ„ÉàÊÆµÈöé ===
  - id: "multimedia-services-connectivity-test"
    name: "ÂÖ®„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢„Çµ„Éº„Éì„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà"
    phase: "pre_validation"
    github_job: "connectivity-test"
    type: "validation"
    implementation: "mcp"
    duration_minutes: 5
    dependencies: []
    parallel_group: null
    
    github_steps:
      - name: "Test all multimedia generation services"
        shell: "bash"
        script: |
          echo "üéØ Testing comprehensive multimedia ad services..."
          
          mkdir -p .logs/connectivity-tests
          
          # ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàÂ∫ÉÂëä„É°„Ç§„É≥Á¥†ÊùêÔºâ
          echo "Testing image generation services..."
          if timeout 60 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt "professional advertisement image test" > .logs/connectivity-tests/image-ultra-test.log 2>&1; then
            IMAGE_ULTRA_STATUS="success"
            echo "‚úÖ Image Generation (Ultra): Available"
          else
            IMAGE_ULTRA_STATUS="failed"
            echo "‚ö†Ô∏è Image Ultra: Not available"
          fi
          
          if timeout 45 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "advertisement graphics test" > .logs/connectivity-tests/image-fast-test.log 2>&1; then
            IMAGE_FAST_STATUS="success"
            echo "‚úÖ Image Generation (Fast): Available"
          else
            IMAGE_FAST_STATUS="failed"
            echo "‚ö†Ô∏è Image Fast: Not available"
          fi
          
          if timeout 60 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-google-imagen3 --prompt "google imagen test" > .logs/connectivity-tests/image-google-test.log 2>&1; then
            IMAGE_GOOGLE_STATUS="success"
            echo "‚úÖ Google Imagen3: Available"
          else
            IMAGE_GOOGLE_STATUS="failed"
            echo "‚ö†Ô∏è Google Imagen3: Not available"
          fi
          
          # ÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing video generation services..."
          if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2v-fal-veo3-fast --prompt "test advertisement video" > .logs/connectivity-tests/video-test.log 2>&1; then
            VIDEO_STATUS="success"
            echo "‚úÖ Video Generation (T2V): Available"
          else
            VIDEO_STATUS="failed"
            echo "‚ö†Ô∏è Video Generation: Not available"
          fi
          
          if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro --image-path "/tmp/test.jpg" > .logs/connectivity-tests/i2v-test.log 2>&1; then
            I2V_STATUS="success"
            echo "‚úÖ Image-to-Video: Available"
          else
            I2V_STATUS="failed"
            echo "‚ö†Ô∏è Image-to-Video: Not available"
          fi
          
          # Èü≥Ê•Ω„ÉªÈü≥Â£∞ÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing audio generation services..."
          if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "advertisement background music" > .logs/connectivity-tests/music-test.log 2>&1; then
            MUSIC_STATUS="success"
            echo "‚úÖ Music Generation: Available"
          else
            MUSIC_STATUS="failed"
            echo "‚ö†Ô∏è Music Generation: Not available"
          fi
          
          if timeout 60 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "/tmp/test.mp4" > .logs/connectivity-tests/v2a-test.log 2>&1; then
            V2A_STATUS="success"
            echo "‚úÖ Video-to-Audio: Available"
          else
            V2A_STATUS="failed"
            echo "‚ö†Ô∏è Video-to-Audio: Not available"
          fi
          
          # 3DÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing 3D generation services..."
          if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "/tmp/test.jpg" > .logs/connectivity-tests/3d-test.log 2>&1; then
            THREED_STATUS="success"
            echo "‚úÖ 3D Model Generation: Available"
          else
            THREED_STATUS="failed"
            echo "‚ö†Ô∏è 3D Generation: Not available"
          fi
          
          # ÁîªÂÉèÂº∑Âåñ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing image enhancement services..."
          if timeout 60 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max --image-path "/tmp/test.jpg" > .logs/connectivity-tests/enhancement-test.log 2>&1; then
            ENHANCEMENT_STATUS="success"
            echo "‚úÖ Image Enhancement: Available"
          else
            ENHANCEMENT_STATUS="failed"
            echo "‚ö†Ô∏è Image Enhancement: Not available"
          fi
          
          # ÂãïÁîªÁ∑®ÈõÜ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing video editing services..."
          if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify --video-path "/tmp/test.mp4" > .logs/connectivity-tests/video-edit-test.log 2>&1; then
            VIDEO_EDIT_STATUS="success"
            echo "‚úÖ Video Editing: Available"
          else
            VIDEO_EDIT_STATUS="failed"
            echo "‚ö†Ô∏è Video Editing: Not available"
          fi
          
          # Reference-to-Video „Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„Éà
          echo "Testing reference-to-video services..."
          if timeout 100 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp r2v-fal-vidu-q1 --reference-path "/tmp/test.jpg" > .logs/connectivity-tests/r2v-test.log 2>&1; then
            R2V_STATUS="success"
            echo "‚úÖ Reference-to-Video: Available"
          else
            R2V_STATUS="failed"
            echo "‚ö†Ô∏è Reference-to-Video: Not available"
          fi
          
          # „Çµ„Éº„Éì„ÇπÂèØÁî®ÊÄß„ÅÆÁ∑èÂêàË©ï‰æ°
          BASIC_CAPABILITY="none"
          ADVANCED_CAPABILITY="none"
          
          # Âü∫Êú¨Ê©üËÉΩÂà§ÂÆöÔºàÁîªÂÉè+ÂãïÁîª„Åæ„Åü„ÅØÈü≥Ê•ΩÔºâ
          if [ "$IMAGE_FAST_STATUS" = "success" ] || [ "$IMAGE_ULTRA_STATUS" = "success" ] || [ "$IMAGE_GOOGLE_STATUS" = "success" ]; then
            if [ "$VIDEO_STATUS" = "success" ] || [ "$MUSIC_STATUS" = "success" ]; then
              BASIC_CAPABILITY="available"
            fi
          fi
          
          # È´òÂ∫¶Ê©üËÉΩÂà§ÂÆöÔºà3D„ÄÅÈ´òÂìÅË≥™ÂãïÁîªÁ∑®ÈõÜÁ≠âÔºâ
          if [ "$THREED_STATUS" = "success" ] && [ "$VIDEO_EDIT_STATUS" = "success" ] && [ "$ENHANCEMENT_STATUS" = "success" ]; then
            ADVANCED_CAPABILITY="available"
          fi
          
          # „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíJSON‰øùÂ≠ò
          cat > .logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "multimedia_services": {
              "image_generation": {
                "ultra_quality": "$IMAGE_ULTRA_STATUS",
                "fast_quality": "$IMAGE_FAST_STATUS",
                "google_imagen": "$IMAGE_GOOGLE_STATUS"
              },
              "video_generation": {
                "text_to_video": "$VIDEO_STATUS",
                "image_to_video": "$I2V_STATUS",
                "reference_to_video": "$R2V_STATUS",
                "video_editing": "$VIDEO_EDIT_STATUS"
              },
              "audio_generation": {
                "music_creation": "$MUSIC_STATUS",
                "video_to_audio": "$V2A_STATUS"
              },
              "3d_generation": {
                "model_creation": "$THREED_STATUS"
              },
              "enhancement_services": {
                "image_enhancement": "$ENHANCEMENT_STATUS"
              }
            },
            "capability_assessment": {
              "basic_multimedia_capability": "$BASIC_CAPABILITY",
              "advanced_multimedia_capability": "$ADVANCED_CAPABILITY",
              "workflow_can_proceed": $([ "$BASIC_CAPABILITY" = "available" ] && echo "true" || echo "false"),
              "full_feature_campaign": $([ "$ADVANCED_CAPABILITY" = "available" ] && echo "true" || echo "false")
            },
            "service_priorities": {
              "primary_image_service": "$([ "$IMAGE_ULTRA_STATUS" = "success" ] && echo "ultra" || [ "$IMAGE_FAST_STATUS" = "success" ] && echo "fast" || [ "$IMAGE_GOOGLE_STATUS" = "success" ] && echo "google" || echo "none")",
              "video_capability": "$([ "$VIDEO_STATUS" = "success" ] && echo "full" || [ "$I2V_STATUS" = "success" ] && echo "i2v_only" || echo "none")",
              "audio_capability": "$([ "$MUSIC_STATUS" = "success" ] && [ "$V2A_STATUS" = "success" ] && echo "full" || [ "$MUSIC_STATUS" = "success" ] && echo "music_only" || echo "none")",
              "enhancement_level": "$([ "$ENHANCEMENT_STATUS" = "success" ] && [ "$VIDEO_EDIT_STATUS" = "success" ] && echo "professional" || echo "basic")"
            }
          }
          EOF
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å´ÁµêÊûú„ÇíË®≠ÂÆö
          echo "BASIC_CAPABILITY=$BASIC_CAPABILITY" >> $GITHUB_ENV
          echo "ADVANCED_CAPABILITY=$ADVANCED_CAPABILITY" >> $GITHUB_ENV
          echo "PRIMARY_IMAGE_SERVICE=$([ "$IMAGE_ULTRA_STATUS" = "success" ] && echo "ultra" || [ "$IMAGE_FAST_STATUS" = "success" ] && echo "fast" || [ "$IMAGE_GOOGLE_STATUS" = "success" ] && echo "google" || echo "none")" >> $GITHUB_ENV
          echo "VIDEO_CAPABILITY=$([ "$VIDEO_STATUS" = "success" ] && echo "full" || [ "$I2V_STATUS" = "success" ] && echo "i2v_only" || echo "none")" >> $GITHUB_ENV
          echo "AUDIO_CAPABILITY=$([ "$MUSIC_STATUS" = "success" ] && [ "$V2A_STATUS" = "success" ] && echo "full" || [ "$MUSIC_STATUS" = "success" ] && echo "music_only" || echo "none")" >> $GITHUB_ENV
          
          echo "üéØ Multimedia services connectivity tests completed"
          echo "Basic capability: $BASIC_CAPABILITY"
          echo "Advanced capability: $ADVANCED_CAPABILITY"
          
    validation:
      criteria:
        - "Âü∫Êú¨ÁöÑ„Å™„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Ê©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ"
        - "„ÉÜ„Çπ„ÉàÁµêÊûú„ÅåJSONÂΩ¢Âºè„Åß‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã"
        - "„Çµ„Éº„Éì„ÇπÂÑ™ÂÖàÂ∫¶„ÅåÊ±∫ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".logs/connectivity-tests/test-results.json" ]; then
          echo "‚ùå VALIDATION FAILED: Test results missing"
          exit 1
        fi
        
        WORKFLOW_CAN_PROCEED=$(jq -r '.capability_assessment.workflow_can_proceed' .logs/connectivity-tests/test-results.json)
        if [ "$WORKFLOW_CAN_PROCEED" = "true" ]; then
          echo "‚úÖ Validation passed: Multimedia campaign services ready"
        else
          echo "‚ùå VALIDATION FAILED: Critical multimedia services unavailable"
          exit 1
        fi

  # === „Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•ÊÆµÈöé ===
  - id: "campaign-strategy-development"
    name: "„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•„Éª„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞ÂàÜÊûê"
    phase: "campaign_strategy"
    github_job: "strategy-development"
    type: "analysis"
    implementation: "ai"
    duration_minutes: 6
    dependencies: ["multimedia-services-connectivity-test"]
    parallel_group: null
    
    github_steps:
      - name: "Develop comprehensive campaign strategy"
        shell: "bash"
        script: |
          echo "üéØ Developing comprehensive campaign strategy..."
          
          mkdir -p .logs/campaign-strategy
          
          # ÂÖ•Âäõ„Åã„Çâ„Ç≠„É£„É≥„Éö„Éº„É≥Ë¶Å‰ª∂„ÇíÊäΩÂá∫
          CAMPAIGN_OBJECTIVE="${{ github.event.inputs.campaign_objective || github.event.issue.title || 'Brand Awareness Campaign' }}"
          TARGET_AUDIENCE="${{ github.event.inputs.target_audience || 'general consumers' }}"
          BUDGET_RANGE="${{ github.event.inputs.budget_range || 'medium budget' }}"
          CAMPAIGN_DURATION="${{ github.event.inputs.campaign_duration || '4 weeks' }}"
          CHANNELS="${{ github.event.inputs.channels || 'digital channels' }}"
          BRAND_TONE="${{ github.event.inputs.brand_tone || 'professional and friendly' }}"
          
          echo "Campaign objective: $CAMPAIGN_OBJECTIVE"
          echo "Target audience: $TARGET_AUDIENCE"
          echo "Budget range: $BUDGET_RANGE"
          echo "Duration: $CAMPAIGN_DURATION"
          echo "Channels: $CHANNELS"
          echo "Brand tone: $BRAND_TONE"
          
          # Claude Code „Åß„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•ÈñãÁô∫
          claude-code --prompt "‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂåÖÊã¨ÁöÑ„Å™„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•„ÇíÈñãÁô∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „Ç≠„É£„É≥„Éö„Éº„É≥ÁõÆÊ®ô: $CAMPAIGN_OBJECTIVE
          ÂØæË±°È°ßÂÆ¢: $TARGET_AUDIENCE
          ‰∫àÁÆóË¶èÊ®°: $BUDGET_RANGE
          ÂÆüÊñΩÊúüÈñì: $CAMPAIGN_DURATION
          Ê¥ªÁî®„ÉÅ„É£„Éç„É´: $CHANNELS
          „Éñ„É©„É≥„Éâ„Éà„Éº„É≥: $BRAND_TONE
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"campaign_overview\": {
              \"campaign_name\": \"„Ç≠„É£„É≥„Éö„Éº„É≥Âêç\",
              \"primary_objective\": \"‰∏ªË¶ÅÁõÆÊ®ô\",
              \"success_metrics\": [\"ÊàêÂäüÊåáÊ®ô\"],
              \"unique_value_proposition\": \"Áã¨Ëá™‰æ°ÂÄ§ÊèêÊ°à\",
              \"competitive_advantage\": \"Á´∂ÂêàÂÑ™‰ΩçÊÄß\"
            },
            \"target_analysis\": {
              \"primary_persona\": {
                \"demographics\": \"‰∫∫Âè£Áµ±Ë®àÁöÑÁâπÂæ¥\",
                \"psychographics\": \"ÂøÉÁêÜÁöÑÁâπÂæ¥\",
                \"pain_points\": [\"Ë™≤È°å„Éª„Éã„Éº„Ç∫\"],
                \"media_consumption\": [\"„É°„Éá„Ç£„Ç¢Êé•Ëß¶ÁøíÊÖ£\"],
                \"decision_factors\": [\"Ë≥ºË≤∑Ê±∫ÂÆöË¶ÅÂõ†\"]
              },
              \"secondary_personas\": [\"„Çµ„Éñ„Çø„Éº„Ç≤„ÉÉ„ÉàÁæ§\"],
              \"market_size\": \"Â∏ÇÂ†¥Ë¶èÊ®°Êé®ÂÆö\",
              \"growth_potential\": \"ÊàêÈï∑ÂèØËÉΩÊÄß\"
            },
            \"messaging_strategy\": {
              \"core_message\": \"Ê†∏„Å®„Å™„Çã„É°„ÉÉ„Çª„Éº„Ç∏\",
              \"supporting_messages\": [\"„Çµ„Éù„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏\"],
              \"emotional_triggers\": [\"ÊÑüÊÉÖÁöÑË®¥Ê±Ç„Éù„Ç§„É≥„Éà\"],
              \"rational_benefits\": [\"ÁêÜÊÄßÁöÑ„Éô„Éç„Éï„Ç£„ÉÉ„Éà\"],
              \"call_to_action\": \"Ë°åÂãïÂñöËµ∑„É°„ÉÉ„Çª„Éº„Ç∏\"
            },
            \"channel_strategy\": {
              \"primary_channels\": [\"‰∏ªË¶Å„ÉÅ„É£„Éç„É´\"],
              \"secondary_channels\": [\"Ë£úÂä©„ÉÅ„É£„Éç„É´\"],
              \"channel_mix_rationale\": \"„ÉÅ„É£„Éç„É´„Éü„ÉÉ„ÇØ„Çπ„ÅÆÁêÜÁî±\",
              \"cross_channel_synergy\": \"„ÉÅ„É£„Éç„É´ÈñìÁõ∏‰πóÂäπÊûú\"
            },
            \"multimedia_requirements\": {
              \"content_types_needed\": [\"ÂøÖË¶Å„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó\"],
              \"format_specifications\": {
                \"images\": [\"ÁîªÂÉè‰ªïÊßòË¶Å‰ª∂\"],
                \"videos\": [\"ÂãïÁîª‰ªïÊßòË¶Å‰ª∂\"],
                \"audio\": [\"Èü≥Â£∞‰ªïÊßòË¶Å‰ª∂\"],
                \"3d_content\": [\"3D„Ç≥„É≥„ÉÜ„É≥„ÉÑË¶Å‰ª∂\"]
              },
              \"quality_standards\": \"ÂìÅË≥™Âü∫Ê∫ñ\",
              \"brand_consistency\": \"„Éñ„É©„É≥„Éâ‰∏ÄË≤´ÊÄßË¶Å‰ª∂\"
            },
            \"campaign_timeline\": {
              \"phase_1\": \"Á¨¨1„Éï„Çß„Éº„Ç∫ÔºàÊ∫ñÂÇô„ÉªÂà∂‰ΩúÔºâ\",
              \"phase_2\": \"Á¨¨2„Éï„Çß„Éº„Ç∫ÔºàÂÆüË°å„ÉªÂ±ïÈñãÔºâ\",
              \"phase_3\": \"Á¨¨3„Éï„Çß„Éº„Ç∫ÔºàÊúÄÈÅ©Âåñ„ÉªÊã°ÂºµÔºâ\",
              \"key_milestones\": [\"ÈáçË¶Å„Éû„Ç§„É´„Çπ„Éà„Éº„É≥\"],
              \"optimization_points\": [\"ÊúÄÈÅ©Âåñ„Éù„Ç§„É≥„Éà\"]
            },
            \"success_measurement\": {
              \"kpis\": [\"‰∏ªË¶ÅÊ•≠Á∏æÊåáÊ®ô\"],
              \"tracking_methods\": [\"Ê∏¨ÂÆöÊñπÊ≥ï\"],
              \"reporting_frequency\": \"„É¨„Éù„Éº„ÉàÈ†ªÂ∫¶\",
              \"optimization_triggers\": [\"ÊúÄÈÅ©ÂåñÂÆüË°å„Éà„É™„Ç¨„Éº\"]
            }
          }" > .logs/campaign-strategy/campaign-strategy.json
          
          CAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)
          echo "CAMPAIGN_STRATEGY_FILE=.logs/campaign-strategy/campaign-strategy.json" >> $GITHUB_ENV
          
          # ÂøÖË¶Å„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          CONTENT_TYPES=$(echo "$CAMPAIGN_STRATEGY" | jq -r '.multimedia_requirements.content_types_needed | join(",")')
          echo "REQUIRED_CONTENT_TYPES=$CONTENT_TYPES" >> $GITHUB_ENV
          
          echo "üéØ Campaign strategy development completed"
          echo "Required content types: $CONTENT_TYPES"

  - id: "creative-concept-ideation"
    name: "„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà„Éª„Ç¢„Ç§„Éá„Ç¢ÈñãÁô∫"
    phase: "creative_concept"
    github_job: "concept-ideation"
    type: "creation"
    implementation: "ai"
    duration_minutes: 5
    dependencies: ["campaign-strategy-development"]
    parallel_group: null
    
    github_steps:
      - name: "Develop creative concepts and ideas"
        shell: "bash"
        script: |
          echo "üí° Developing creative concepts and ideas..."
          
          mkdir -p .logs/creative-concept
          
          CAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)
          
          # „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„ÉàÈñãÁô∫
          claude-code --prompt "‰ª•‰∏ã„ÅÆ„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÈù©Êñ∞ÁöÑ„ÅßÂäπÊûúÁöÑ„Å™„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà„ÇíÈñãÁô∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•: $CAMPAIGN_STRATEGY
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"creative_theme\": {
              \"central_concept\": \"‰∏≠ÂøÉÁöÑ„Å™„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà\",
              \"visual_metaphor\": \"Ë¶ñË¶öÁöÑ„É°„Çø„Éï„Ç°„Éº\",
              \"storytelling_approach\": \"„Çπ„Éà„Éº„É™„Éº„ÉÜ„É™„É≥„Ç∞ÊâãÊ≥ï\",
              \"emotional_arc\": \"ÊÑüÊÉÖÁöÑ„Å™ÊµÅ„Çå\",
              \"memorable_elements\": [\"Ë®òÊÜ∂„Å´ÊÆã„ÇãË¶ÅÁ¥†\"]
            },
            \"visual_identity\": {
              \"color_palette\": {
                \"primary_colors\": [\"„É°„Ç§„É≥„Ç´„É©„ÉºÔºàHEX„Ç≥„Éº„ÉâÔºâ\"],
                \"secondary_colors\": [\"„Çµ„Éñ„Ç´„É©„ÉºÔºàHEX„Ç≥„Éº„ÉâÔºâ\"],
                \"accent_colors\": [\"„Ç¢„ÇØ„Çª„É≥„Éà„Ç´„É©„ÉºÔºàHEX„Ç≥„Éº„ÉâÔºâ\"]
              },
              \"typography_style\": \"„Çø„Ç§„Éù„Ç∞„É©„Éï„Ç£„Çπ„Çø„Ç§„É´\",
              \"visual_style\": \"ÂÖ®‰ΩìÁöÑ„Å™„Éì„Ç∏„É•„Ç¢„É´„Çπ„Çø„Ç§„É´\",
              \"imagery_direction\": \"ÁîªÂÉè„ÅÆÊñπÂêëÊÄß\",
              \"iconography\": \"„Ç¢„Ç§„Ç≥„Éé„Ç∞„É©„Éï„Ç£„ÉºÊñπÈáù\"
            },
            \"content_concepts\": [
              {
                \"concept_name\": \"„Ç≥„É≥„Çª„Éó„ÉàÂêç\",
                \"media_type\": \"image|video|audio|3d|mixed\",
                \"core_idea\": \"Ê†∏„Å®„Å™„Çã„Ç¢„Ç§„Éá„Ç¢\",
                \"visual_description\": \"„Éì„Ç∏„É•„Ç¢„É´Ë°®Áèæ„ÅÆË©≥Á¥∞\",
                \"target_emotion\": \"Áãô„ÅÜÊÑüÊÉÖ\",
                \"key_message\": \"‰ºù„Åà„Çã„É°„ÉÉ„Çª„Éº„Ç∏\",
                \"production_complexity\": \"low|medium|high\",
                \"estimated_impact\": \"high|medium|low\"
              }
            ],
            \"multimedia_integration\": {
              \"cross_media_consistency\": \"„É°„Éá„Ç£„Ç¢Èñì‰∏ÄË≤´ÊÄß„ÅÆÊñπÈáù\",
              \"format_adaptation\": \"„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈÅ©ÂøúÊà¶Áï•\",
              \"synergy_opportunities\": [\"Áõ∏‰πóÂäπÊûú„ÅÆÊ©ü‰ºö\"],
              \"user_journey_mapping\": \"„É¶„Éº„Ç∂„Éº„Ç∏„É£„Éº„Éã„Éº„Åß„ÅÆÊ¥ªÁî®\"
            },
            \"innovation_elements\": {
              \"cutting_edge_techniques\": [\"ÊúÄÂÖàÁ´ØÊäÄË°ì„ÅÆÊ¥ªÁî®\"],
              \"interactive_features\": [\"„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñË¶ÅÁ¥†\"],
              \"personalization_opportunities\": [\"„Éë„Éº„ÇΩ„Éä„É©„Ç§„Çº„Éº„Ç∑„Éß„É≥Ê©ü‰ºö\"],
              \"viral_potential\": \"„Éê„Ç§„É©„É´ÂèØËÉΩÊÄß\"
            },
            \"execution_guidelines\": {
              \"quality_standards\": \"ÂìÅË≥™Âü∫Ê∫ñ\",
              \"brand_compliance\": \"„Éñ„É©„É≥„ÉâÈÅµÂÆà‰∫ãÈ†Ö\",
              \"technical_requirements\": [\"ÊäÄË°ìË¶Å‰ª∂\"],
              \"approval_criteria\": [\"ÊâøË™çÂü∫Ê∫ñ\"]
            }
          }" > .logs/creative-concept/creative-concepts.json
          
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          echo "CREATIVE_CONCEPTS_FILE=.logs/creative-concept/creative-concepts.json" >> $GITHUB_ENV
          
          # „Ç≥„É≥„Çª„Éó„ÉàÊï∞„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          CONCEPT_COUNT=$(echo "$CREATIVE_CONCEPTS" | jq '.content_concepts | length')
          echo "CONCEPT_COUNT=$CONCEPT_COUNT" >> $GITHUB_ENV
          
          echo "üí° Creative concept development completed"
          echo "Generated concepts: $CONCEPT_COUNT"

  # === Á¥†Êùê‰ºÅÁîªÊÆµÈöé ===
  - id: "asset-specification-planning"
    name: "Âà∂‰ΩúÁ¥†Êùê‰ªïÊßò„ÉªÂÑ™ÂÖàÂ∫¶Ë®àÁîª"
    phase: "asset_planning"
    github_job: "asset-planning"
    type: "planning"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["creative-concept-ideation"]
    parallel_group: null
    
    github_steps:
      - name: "Plan asset specifications and priorities"
        shell: "bash"
        script: |
          echo "üìã Planning asset specifications and production priorities..."
          
          mkdir -p .logs/asset-planning
          
          CAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          TEST_RESULTS=$(cat .logs/connectivity-tests/test-results.json)
          
          # Á¥†ÊùêÂà∂‰ΩúË®àÁîª„ÅÆË©≥Á¥∞Ë®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅ„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂà∂‰ΩúÁ¥†Êùê‰ªïÊßò„Å®ÂÑ™ÂÖàÂ∫¶„ÇíË®àÁîª„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•: $CAMPAIGN_STRATEGY
          „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà: $CREATIVE_CONCEPTS
          Âà©Áî®ÂèØËÉΩ„Çµ„Éº„Éì„Çπ: $TEST_RESULTS
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"production_overview\": {
              \"total_assets_planned\": \"Ë®àÁîªÁ¥†ÊùêÁ∑èÊï∞\",
              \"production_phases\": [\"Âà∂‰Ωú„Éï„Çß„Éº„Ç∫\"],
              \"estimated_timeline\": \"Êé®ÂÆöÂà∂‰ΩúÊôÇÈñì\",
              \"quality_tier\": \"ÂìÅË≥™„ÉÜ„Ç£„Ç¢Ôºàpremium|standard|rapidÔºâ\"
            },
            \"asset_specifications\": [
              {
                \"asset_id\": \"Á¥†ÊùêID\",
                \"asset_name\": \"Á¥†ÊùêÂêç\",
                \"media_type\": \"image|video|audio|3d|mixed\",
                \"primary_use\": \"‰∏ªË¶ÅÁî®ÈÄî\",
                \"target_channels\": [\"ÂØæË±°„ÉÅ„É£„Éç„É´\"],
                \"priority_level\": \"high|medium|low\",
                \"production_service\": \"‰ΩøÁî®‰∫àÂÆö„Çµ„Éº„Éì„ÇπÔºàMCP„Çµ„Éº„Éì„ÇπÂêçÔºâ\",
                \"technical_specs\": {
                  \"dimensions\": \"„Çµ„Ç§„Ç∫„ÉªËß£ÂÉèÂ∫¶\",
                  \"duration\": \"Â∞∫„ÉªÊôÇÈñì\",
                  \"file_format\": \"„Éï„Ç°„Ç§„É´ÂΩ¢Âºè\",
                  \"quality_level\": \"ÂìÅË≥™„É¨„Éô„É´\"
                },
                \"creative_requirements\": {
                  \"visual_style\": \"„Éì„Ç∏„É•„Ç¢„É´„Çπ„Çø„Ç§„É´\",
                  \"color_scheme\": \"„Ç´„É©„Éº„Çπ„Ç≠„Éº„É†\",
                  \"messaging\": \"„É°„ÉÉ„Çª„Éº„Ç∏„É≥„Ç∞\",
                  \"mood_tone\": \"„É†„Éº„Éâ„Éª„Éà„Éº„É≥\"
                },
                \"production_prompt\": \"ÁîüÊàêÁî®Ë©≥Á¥∞„Éó„É≠„É≥„Éó„Éà\",
                \"quality_criteria\": [\"ÂìÅË≥™Âà§ÂÆöÂü∫Ê∫ñ\"],
                \"fallback_options\": [\"‰ª£ÊõøÊ°à\"]
              }
            ],
            \"production_sequence\": {
              \"phase_1_assets\": [\"Á¨¨1„Éï„Çß„Éº„Ç∫Âà∂‰ΩúÁ¥†ÊùêID\"],
              \"phase_2_assets\": [\"Á¨¨2„Éï„Çß„Éº„Ç∫Âà∂‰ΩúÁ¥†ÊùêID\"],
              \"phase_3_assets\": [\"Á¨¨3„Éï„Çß„Éº„Ç∫Âà∂‰ΩúÁ¥†ÊùêID\"],
              \"dependencies\": [\"Âà∂‰Ωú‰æùÂ≠òÈñ¢‰øÇ\"],
              \"parallel_opportunities\": [\"‰∏¶Ë°åÂà∂‰ΩúÂèØËÉΩÁ¥†Êùê\"]
            },
            \"resource_allocation\": {
              \"service_usage_plan\": {
                \"image_generation\": \"ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ‰ΩøÁî®Ë®àÁîª\",
                \"video_generation\": \"ÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ‰ΩøÁî®Ë®àÁîª\",
                \"audio_generation\": \"Èü≥Â£∞ÁîüÊàê„Çµ„Éº„Éì„Çπ‰ΩøÁî®Ë®àÁîª\",
                \"3d_generation\": \"3DÁîüÊàê„Çµ„Éº„Éì„Çπ‰ΩøÁî®Ë®àÁîª\",
                \"enhancement_services\": \"Âº∑Âåñ„Çµ„Éº„Éì„Çπ‰ΩøÁî®Ë®àÁîª\"
              },
              \"estimated_processing_time\": \"Êé®ÂÆöÂá¶ÁêÜÊôÇÈñì\",
              \"quality_assurance_plan\": \"ÂìÅË≥™‰øùË®ºË®àÁîª\"
            },
            \"success_metrics\": {
              \"production_kpis\": [\"Âà∂‰ΩúKPI\"],
              \"quality_thresholds\": [\"ÂìÅË≥™ÈñæÂÄ§\"],
              \"efficiency_targets\": [\"ÂäπÁéáÁõÆÊ®ô\"]
            }
          }" > .logs/asset-planning/production-plan.json
          
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          echo "PRODUCTION_PLAN_FILE=.logs/asset-planning/production-plan.json" >> $GITHUB_ENV
          
          # Âà∂‰Ωú„Éï„Çß„Éº„Ç∫ÊÉÖÂ†±„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          TOTAL_ASSETS=$(echo "$PRODUCTION_PLAN" | jq -r '.production_overview.total_assets_planned')
          PHASE_1_COUNT=$(echo "$PRODUCTION_PLAN" | jq '.production_sequence.phase_1_assets | length')
          
          echo "TOTAL_PLANNED_ASSETS=$TOTAL_ASSETS" >> $GITHUB_ENV
          echo "PHASE_1_ASSET_COUNT=$PHASE_1_COUNT" >> $GITHUB_ENV
          
          echo "üìã Asset planning completed"
          echo "Total planned assets: $TOTAL_ASSETS"
          echo "Phase 1 assets: $PHASE_1_COUNT"

  # === „Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Âà∂‰ΩúÊÆµÈöé ===
  - id: "hero-image-creation"
    name: "„É°„Ç§„É≥„Éì„Ç∏„É•„Ç¢„É´„Éª„Éí„Éº„É≠„ÉºÁîªÂÉèÂà∂‰Ωú"
    phase: "multimedia_production"
    github_job: "hero-image-creation"
    type: "generation"
    implementation: "mcp"
    tool: "image-generation"
    duration_minutes: 8
    dependencies: ["asset-specification-planning"]
    parallel_group: "media_production_parallel"
    
    github_steps:
      - name: "Create hero images and main visuals"
        shell: "bash"
        script: |
          echo "üñºÔ∏è Creating hero images and main visuals..."
          
          mkdir -p .logs/multimedia-production/images
          
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          
          # Phase 1 ÁîªÂÉèÁ¥†Êùê„ÇíÊäΩÂá∫„ÉªÁîüÊàê
          PHASE_1_ASSETS=$(echo "$PRODUCTION_PLAN" | jq -r '.production_sequence.phase_1_assets[]')
          
          echo "Creating Phase 1 image assets..."
          
          for asset_id in $PHASE_1_ASSETS; do
            # Ë©≤ÂΩìÁ¥†Êùê„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó
            ASSET_INFO=$(echo "$PRODUCTION_PLAN" | jq ".asset_specifications[] | select(.asset_id == \"$asset_id\")")
            MEDIA_TYPE=$(echo "$ASSET_INFO" | jq -r '.media_type')
            
            if [ "$MEDIA_TYPE" = "image" ] || [ "$MEDIA_TYPE" = "mixed" ]; then
              ASSET_NAME=$(echo "$ASSET_INFO" | jq -r '.asset_name')
              PRODUCTION_PROMPT=$(echo "$ASSET_INFO" | jq -r '.production_prompt')
              QUALITY_LEVEL=$(echo "$ASSET_INFO" | jq -r '.technical_specs.quality_level')
              
              echo "Generating $ASSET_NAME (ID: $asset_id)..."
              
              # „Çµ„Éº„Éì„ÇπÈÅ∏Êäû„Å®ÁîüÊàêÂÆüË°å
              if [ "$PRIMARY_IMAGE_SERVICE" = "ultra" ] && [ "$QUALITY_LEVEL" = "premium" ]; then
                echo "Using Ultra quality service for $asset_id..."
                if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt "$PRODUCTION_PROMPT" > .logs/multimedia-production/images/${asset_id}.json 2>&1; then
                  echo "‚úÖ $asset_id generated with Ultra quality"
                  GENERATION_STATUS="success_ultra"
                else
                  echo "‚ö†Ô∏è Ultra generation failed for $asset_id, trying fast..."
                  if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$PRODUCTION_PROMPT" > .logs/multimedia-production/images/${asset_id}.json 2>&1; then
                    echo "‚úÖ $asset_id generated with Fast quality"
                    GENERATION_STATUS="success_fast"
                  else
                    echo "‚ùå $asset_id generation failed"
                    GENERATION_STATUS="failed"
                  fi
                fi
              elif [ "$PRIMARY_IMAGE_SERVICE" = "fast" ] || [ "$PRIMARY_IMAGE_SERVICE" = "google" ]; then
                SERVICE_NAME=$([ "$PRIMARY_IMAGE_SERVICE" = "fast" ] && echo "t2i-fal-imagen4-fast" || echo "t2i-google-imagen3")
                echo "Using $SERVICE_NAME for $asset_id..."
                if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp $SERVICE_NAME --prompt "$PRODUCTION_PROMPT" > .logs/multimedia-production/images/${asset_id}.json 2>&1; then
                  echo "‚úÖ $asset_id generated successfully"
                  GENERATION_STATUS="success"
                else
                  echo "‚ùå $asset_id generation failed"
                  GENERATION_STATUS="failed"
                fi
              else
                echo "‚ö†Ô∏è No suitable image generation service available for $asset_id"
                GENERATION_STATUS="service_unavailable"
              fi
              
              # ÁîüÊàêÁµêÊûú„ÅÆÂìÅË≥™Âêë‰∏äÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
              if [ "$GENERATION_STATUS" != "failed" ] && [ "$GENERATION_STATUS" != "service_unavailable" ]; then
                IMAGE_FILE_PATH=$(jq -r '.image_url // .file_path // "none"' .logs/multimedia-production/images/${asset_id}.json 2>/dev/null)
                
                if [ "$IMAGE_FILE_PATH" != "none" ] && [ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services.enhancement_services.image_enhancement')" = "success" ]; then
                  echo "Enhancing quality for $asset_id..."
                  if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max --image-path "$IMAGE_FILE_PATH" --enhancement "professional advertisement quality, sharp details, vibrant colors" > .logs/multimedia-production/images/${asset_id}-enhanced.json 2>&1; then
                    echo "‚úÖ $asset_id enhanced successfully"
                  fi
                fi
              fi
            fi
          done
          
          # ÁîüÊàêÁµêÊûú„ÅÆÁµ±Ë®à
          GENERATED_COUNT=$(ls .logs/multimedia-production/images/*.json 2>/dev/null | wc -l)
          
          # ÁîüÊàê„É≠„Ç∞„ÅÆ‰ΩúÊàê
          cat > .logs/multimedia-production/images/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "image_generation_summary": {
              "total_requested": $PHASE_1_ASSET_COUNT,
              "successfully_generated": $GENERATED_COUNT,
              "primary_service_used": "$PRIMARY_IMAGE_SERVICE",
              "quality_enhancement_applied": $([ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services.enhancement_services.image_enhancement')" = "success" ] && echo "true" || echo "false")
            },
            "generated_assets": [$(ls .logs/multimedia-production/images/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "IMAGE_GENERATION_STATUS=completed" >> $GITHUB_ENV
          echo "GENERATED_IMAGE_COUNT=$GENERATED_COUNT" >> $GITHUB_ENV
          
          echo "üñºÔ∏è Hero image creation completed: $GENERATED_COUNT images"

  - id: "video-content-production"
    name: "ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éª„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âà∂‰Ωú"
    phase: "multimedia_production"
    github_job: "video-production"
    type: "generation"
    implementation: "mcp"
    tool: "video-generation"
    duration_minutes: 12
    dependencies: ["hero-image-creation"]
    parallel_group: "media_production_parallel"
    
    github_steps:
      - name: "Create video content and animations"
        shell: "bash"
        script: |
          echo "üé¨ Creating video content and animations..."
          
          mkdir -p .logs/multimedia-production/videos
          
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          IMAGE_GENERATION_LOG=$(cat .logs/multimedia-production/images/generation-log.json)
          
          # ÂãïÁîªÂà∂‰ΩúÂØæË±°Á¥†Êùê„ÇíÊäΩÂá∫
          echo "Identifying video assets for production..."
          
          VIDEO_ASSETS=$(echo "$PRODUCTION_PLAN" | jq -r '.asset_specifications[] | select(.media_type == "video" or .media_type == "mixed") | .asset_id')
          VIDEO_COUNT=$(echo "$VIDEO_ASSETS" | wc -w)
          
          echo "Found $VIDEO_COUNT video assets to produce"
          
          for asset_id in $VIDEO_ASSETS; do
            ASSET_INFO=$(echo "$PRODUCTION_PLAN" | jq ".asset_specifications[] | select(.asset_id == \"$asset_id\")")
            ASSET_NAME=$(echo "$ASSET_INFO" | jq -r '.asset_name')
            PRODUCTION_PROMPT=$(echo "$ASSET_INFO" | jq -r '.production_prompt')
            DURATION=$(echo "$ASSET_INFO" | jq -r '.technical_specs.duration // "15 seconds"')
            PRIORITY=$(echo "$ASSET_INFO" | jq -r '.priority_level')
            
            echo "Producing video: $ASSET_NAME (ID: $asset_id, Priority: $PRIORITY)..."
            
            # Âà∂‰ΩúÊñπÊ≥ï„ÅÆÊ±∫ÂÆö
            PRODUCTION_METHOD="none"
            
            if [ "$VIDEO_CAPABILITY" = "full" ]; then
              # T2V (Text-to-Video) „ÅßÁõ¥Êé•ÁîüÊàê
              echo "Using T2V for $asset_id..."
              ENHANCED_PROMPT="$PRODUCTION_PROMPT, professional advertisement video, high quality, engaging, $DURATION duration, smooth motion, commercial grade"
              
              if timeout 180 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2v-fal-veo3-fast --prompt "$ENHANCED_PROMPT" --duration "$DURATION" > .logs/multimedia-production/videos/${asset_id}.json 2>&1; then
                echo "‚úÖ $asset_id created with T2V"
                PRODUCTION_METHOD="t2v"
              else
                echo "‚ö†Ô∏è T2V failed for $asset_id, trying I2V..."
                PRODUCTION_METHOD="failed_t2v"
              fi
            fi
            
            # I2V (Image-to-Video) „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            if [ "$PRODUCTION_METHOD" = "failed_t2v" ] || [ "$VIDEO_CAPABILITY" = "i2v_only" ]; then
              # ÂØæÂøú„Åô„ÇãÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇíÊé¢„Åô
              CORRESPONDING_IMAGE=$(ls .logs/multimedia-production/images/${asset_id}*.json 2>/dev/null | head -1)
              
              if [ -n "$CORRESPONDING_IMAGE" ]; then
                IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$CORRESPONDING_IMAGE" 2>/dev/null)
                
                if [ "$IMAGE_PATH" != "none" ]; then
                  echo "Using I2V for $asset_id with corresponding image..."
                  MOTION_DESCRIPTION="$PRODUCTION_PROMPT, cinematic motion, smooth transitions, professional advertisement style"
                  
                  if timeout 150 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro --image-path "$IMAGE_PATH" --motion-description "$MOTION_DESCRIPTION" > .logs/multimedia-production/videos/${asset_id}-i2v.json 2>&1; then
                    echo "‚úÖ $asset_id created with I2V"
                    PRODUCTION_METHOD="i2v"
                  else
                    echo "‚ùå I2V failed for $asset_id"
                    PRODUCTION_METHOD="failed"
                  fi
                fi
              else
                echo "‚ö†Ô∏è No corresponding image found for I2V production of $asset_id"
                PRODUCTION_METHOD="no_image"
              fi
            fi
            
            # R2V (Reference-to-Video) Ë©¶Ë°åÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
            if [ "$PRODUCTION_METHOD" = "failed" ] && [ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services.video_generation.reference_to_video')" = "success" ]; then
              REFERENCE_IMAGE=$(ls .logs/multimedia-production/images/*.json 2>/dev/null | head -1)
              if [ -n "$REFERENCE_IMAGE" ]; then
                REFERENCE_PATH=$(jq -r '.image_url // .file_path // "none"' "$REFERENCE_IMAGE" 2>/dev/null)
                if [ "$REFERENCE_PATH" != "none" ]; then
                  echo "Trying R2V for $asset_id..."
                  if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp r2v-fal-vidu-q1 --reference-path "$REFERENCE_PATH" --description "$PRODUCTION_PROMPT" > .logs/multimedia-production/videos/${asset_id}-r2v.json 2>&1; then
                    echo "‚úÖ $asset_id created with R2V"
                    PRODUCTION_METHOD="r2v"
                  fi
                fi
              fi
            fi
            
            # ÂãïÁîªÂìÅË≥™Âêë‰∏äÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
            if [ "$PRODUCTION_METHOD" != "failed" ] && [ "$PRODUCTION_METHOD" != "none" ] && [ "$PRODUCTION_METHOD" != "no_image" ]; then
              VIDEO_FILE=$(ls .logs/multimedia-production/videos/${asset_id}*.json | head -1)
              VIDEO_PATH=$(jq -r '.video_url // .file_path // "none"' "$VIDEO_FILE" 2>/dev/null)
              
              if [ "$VIDEO_PATH" != "none" ] && [ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services.video_generation.video_editing')" = "success" ]; then
                echo "Enhancing video quality for $asset_id..."
                if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify --video-path "$VIDEO_PATH" --modification "enhance quality, improve sharpness, optimize colors, professional advertisement standard" > .logs/multimedia-production/videos/${asset_id}-enhanced.json 2>&1; then
                  echo "‚úÖ $asset_id video enhanced"
                fi
              fi
            fi
          done
          
          # Âà∂‰ΩúÁµêÊûú„ÅÆÁµ±Ë®à
          PRODUCED_COUNT=$(ls .logs/multimedia-production/videos/*.json 2>/dev/null | wc -l)
          
          # ÂãïÁîªÂà∂‰Ωú„É≠„Ç∞
          cat > .logs/multimedia-production/videos/production-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "video_production_summary": {
              "total_video_assets_planned": $VIDEO_COUNT,
              "successfully_produced": $PRODUCED_COUNT,
              "video_capability_used": "$VIDEO_CAPABILITY",
              "primary_production_methods": ["t2v", "i2v", "r2v"],
              "quality_enhancement_applied": $([ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services.video_generation.video_editing')" = "success" ] && echo "true" || echo "false")
            },
            "produced_assets": [$(ls .logs/multimedia-production/videos/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "VIDEO_PRODUCTION_STATUS=completed" >> $GITHUB_ENV
          echo "PRODUCED_VIDEO_COUNT=$PRODUCED_COUNT" >> $GITHUB_ENV
          
          echo "üé¨ Video production completed: $PRODUCED_COUNT videos"

  - id: "audio-music-creation"
    name: "BGM„ÉªÂäπÊûúÈü≥„ÉªÈü≥Â£∞Á¥†ÊùêÂà∂‰Ωú"
    phase: "multimedia_production"
    github_job: "audio-creation"
    type: "generation"
    implementation: "mcp"
    tool: "audio-generation"
    duration_minutes: 8
    dependencies: ["video-content-production"]
    parallel_group: "media_production_parallel"
    
    github_steps:
      - name: "Create background music and audio elements"
        shell: "bash"
        script: |
          echo "üéµ Creating background music and audio elements..."
          
          mkdir -p .logs/multimedia-production/audio
          
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          VIDEO_PRODUCTION_LOG=$(cat .logs/multimedia-production/videos/production-log.json)
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          
          # Èü≥Â£∞Âà∂‰ΩúÂØæË±°Á¥†Êùê„ÇíÊäΩÂá∫
          AUDIO_ASSETS=$(echo "$PRODUCTION_PLAN" | jq -r '.asset_specifications[] | select(.media_type == "audio") | .asset_id')
          AUDIO_COUNT=$(echo "$AUDIO_ASSETS" | wc -w)
          
          echo "Found $AUDIO_COUNT dedicated audio assets"
          
          # 1. Â∞ÇÁî®Èü≥Â£∞Á¥†Êùê„ÅÆÂà∂‰Ωú
          if [ "$AUDIO_CAPABILITY" = "full" ] || [ "$AUDIO_CAPABILITY" = "music_only" ]; then
            for asset_id in $AUDIO_ASSETS; do
              ASSET_INFO=$(echo "$PRODUCTION_PLAN" | jq ".asset_specifications[] | select(.asset_id == \"$asset_id\")")
              ASSET_NAME=$(echo "$ASSET_INFO" | jq -r '.asset_name')
              PRODUCTION_PROMPT=$(echo "$ASSET_INFO" | jq -r '.production_prompt')
              DURATION=$(echo "$ASSET_INFO" | jq -r '.technical_specs.duration // "30 seconds"')
              
              echo "Creating audio: $ASSET_NAME (ID: $asset_id)..."
              
              # T2M (Text-to-Music) „ÅßÈü≥Ê•ΩÁîüÊàê
              MUSIC_PROMPT="$PRODUCTION_PROMPT, professional advertisement music, ${DURATION} duration, high quality, suitable for commercial use"
              
              if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$MUSIC_PROMPT" --duration "$DURATION" > .logs/multimedia-production/audio/${asset_id}.json 2>&1; then
                echo "‚úÖ $asset_id music created successfully"
              else
                echo "‚ùå $asset_id music creation failed"
              fi
            done
          else
            echo "‚ö†Ô∏è Audio generation not available - skipping dedicated audio assets"
          fi
          
          # 2. ÂãïÁîª„Åã„Çâ„ÅÆÈü≥Â£∞ÁîüÊàêÔºàV2AÔºâ
          if [ "$AUDIO_CAPABILITY" = "full" ]; then
            echo "Generating complementary audio from videos..."
            
            for video_file in .logs/multimedia-production/videos/*.json; do
              if [ -f "$video_file" ]; then
                VIDEO_ASSET_ID=$(basename "$video_file" .json | sed 's/-enhanced$//' | sed 's/-i2v$//' | sed 's/-r2v$//')
                VIDEO_PATH=$(jq -r '.video_url // .file_path // "none"' "$video_file" 2>/dev/null)
                
                if [ "$VIDEO_PATH" != "none" ]; then
                  echo "Generating complementary audio for video $VIDEO_ASSET_ID..."
                  
                  # V2A (Video-to-Audio) „ÅßÂäπÊûúÈü≥„ÉªÁí∞Â¢ÉÈü≥ÁîüÊàê
                  AUDIO_STYLE="natural sound effects and ambient audio matching the video content, professional advertisement quality"
                  
                  if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "$VIDEO_PATH" --audio-style "$AUDIO_STYLE" > .logs/multimedia-production/audio/${VIDEO_ASSET_ID}-v2a.json 2>&1; then
                    echo "‚úÖ Complementary audio generated for $VIDEO_ASSET_ID"
                  else
                    echo "‚ö†Ô∏è V2A failed for $VIDEO_ASSET_ID"
                  fi
                fi
              fi
            done
          fi
          
          # 3. „Ç≠„É£„É≥„Éö„Éº„É≥Áµ±‰∏ÄBGM„ÅÆÁîüÊàê
          echo "Creating campaign signature music..."
          CAMPAIGN_THEME=$(echo "$CREATIVE_CONCEPTS" | jq -r '.creative_theme.central_concept')
          BRAND_TONE=$(echo "$CREATIVE_CONCEPTS" | jq -r '.visual_identity.visual_style')
          
          if [ "$AUDIO_CAPABILITY" = "full" ] || [ "$AUDIO_CAPABILITY" = "music_only" ]; then
            SIGNATURE_MUSIC_PROMPT="campaign signature music, $CAMPAIGN_THEME theme, $BRAND_TONE style, 45 seconds, memorable melody, suitable for brand recognition, professional commercial quality"
            
            if timeout 150 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$SIGNATURE_MUSIC_PROMPT" --duration "45" > .logs/multimedia-production/audio/campaign-signature-music.json 2>&1; then
              echo "‚úÖ Campaign signature music created"
            else
              echo "‚ö†Ô∏è Campaign signature music creation failed"
            fi
          fi
          
          # Âà∂‰ΩúÁµêÊûú„ÅÆÁµ±Ë®à
          CREATED_AUDIO_COUNT=$(ls .logs/multimedia-production/audio/*.json 2>/dev/null | wc -l)
          
          # Èü≥Â£∞Âà∂‰Ωú„É≠„Ç∞
          cat > .logs/multimedia-production/audio/creation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "audio_creation_summary": {
              "dedicated_audio_assets": $AUDIO_COUNT,
              "total_audio_files_created": $CREATED_AUDIO_COUNT,
              "audio_capability": "$AUDIO_CAPABILITY",
              "creation_methods": {
                "text_to_music": $([ "$AUDIO_CAPABILITY" = "full" ] || [ "$AUDIO_CAPABILITY" = "music_only" ] && echo "true" || echo "false"),
                "video_to_audio": $([ "$AUDIO_CAPABILITY" = "full" ] && echo "true" || echo "false"),
                "signature_music": $([ -f ".logs/multimedia-production/audio/campaign-signature-music.json" ] && echo "true" || echo "false")
              }
            },
            "created_assets": [$(ls .logs/multimedia-production/audio/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "AUDIO_CREATION_STATUS=completed" >> $GITHUB_ENV
          echo "CREATED_AUDIO_COUNT=$CREATED_AUDIO_COUNT" >> $GITHUB_ENV
          
          echo "üéµ Audio creation completed: $CREATED_AUDIO_COUNT audio files"

  - id: "3d-immersive-content-creation"
    name: "3D„ÉªÊ≤°ÂÖ•Âûã„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú"
    phase: "multimedia_production"
    github_job: "3d-content-creation"
    type: "generation"
    implementation: "mcp"
    tool: "3d-generation"
    duration_minutes: 10
    dependencies: ["hero-image-creation"]
    parallel_group: "media_production_parallel"  
    
    github_steps:
      - name: "Create 3D models and immersive content"
        shell: "bash"
        script: |
          echo "üßä Creating 3D models and immersive content..."
          
          mkdir -p .logs/multimedia-production/3d
          
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          IMAGE_GENERATION_LOG=$(cat .logs/multimedia-production/images/generation-log.json)
          
          # 3DÂà∂‰ΩúÂØæË±°Á¥†Êùê„ÇíÊäΩÂá∫
          THREED_ASSETS=$(echo "$PRODUCTION_PLAN" | jq -r '.asset_specifications[] | select(.media_type == "3d") | .asset_id')
          THREED_COUNT=$(echo "$THREED_ASSETS" | wc -w)
          
          echo "Found $THREED_COUNT dedicated 3D assets"
          
          if [ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services."3d_generation".model_creation')" = "success" ]; then
            echo "3D generation service available - proceeding with creation..."
            
            # Â∞ÇÁî®3DÁ¥†Êùê„ÅÆÂà∂‰Ωú
            for asset_id in $THREED_ASSETS; do
              ASSET_INFO=$(echo "$PRODUCTION_PLAN" | jq ".asset_specifications[] | select(.asset_id == \"$asset_id\")")
              ASSET_NAME=$(echo "$ASSET_INFO" | jq -r '.asset_name')
              PRODUCTION_PROMPT=$(echo "$ASSET_INFO" | jq -r '.production_prompt')
              
              echo "Creating 3D asset: $ASSET_NAME (ID: $asset_id)..."
              
              # ÂØæÂøú„Åô„Çã2DÁîªÂÉè„ÇíÊé¢„Åó„Å¶3DÂåñ
              CORRESPONDING_IMAGE=$(ls .logs/multimedia-production/images/${asset_id}*.json 2>/dev/null | head -1)
              
              if [ -n "$CORRESPONDING_IMAGE" ]; then
                IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$CORRESPONDING_IMAGE" 2>/dev/null)
                
                if [ "$IMAGE_PATH" != "none" ]; then
                  echo "Converting 2D image to 3D for $asset_id..."
                  
                  if timeout 180 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$IMAGE_PATH" > .logs/multimedia-production/3d/${asset_id}.json 2>&1; then
                    echo "‚úÖ $asset_id 3D model created successfully"
                  else
                    echo "‚ùå $asset_id 3D conversion failed"
                  fi
                else
                  echo "‚ö†Ô∏è No valid image path found for $asset_id"
                fi
              else
                echo "‚ö†Ô∏è No corresponding 2D image found for $asset_id"
              fi
            done
            
            # ‰∏ªË¶ÅÁîªÂÉèÁ¥†Êùê„ÅÆ3DÂåñÔºàËøΩÂä†„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥‰ΩúÊàêÔºâ
            echo "Creating 3D variations of hero images..."
            
            for image_file in .logs/multimedia-production/images/*.json; do
              if [ -f "$image_file" ]; then
                IMAGE_ASSET_ID=$(basename "$image_file" .json | sed 's/-enhanced$//')
                IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$image_file" 2>/dev/null)
                
                # ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÔºàÊó¢„Å´Â∞ÇÁî®3DÁ¥†Êùê„Å®„Åó„Å¶Âá¶ÁêÜÊ∏à„Åø„Åß„Å™„ÅÑ„ÅãÔºâ
                if ! echo "$THREED_ASSETS" | grep -q "$IMAGE_ASSET_ID"; then
                  if [ "$IMAGE_PATH" != "none" ]; then
                    echo "Creating 3D variation for image $IMAGE_ASSET_ID..."
                    
                    if timeout 150 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$IMAGE_PATH" > .logs/multimedia-production/3d/${IMAGE_ASSET_ID}-3d-variation.json 2>&1; then
                      echo "‚úÖ 3D variation created for $IMAGE_ASSET_ID"
                    else
                      echo "‚ö†Ô∏è 3D variation creation failed for $IMAGE_ASSET_ID"
                    fi
                  fi
                fi
              fi
            done
            
          else
            echo "‚ö†Ô∏è 3D generation service not available - skipping 3D content creation"
            
            # ‰ª£ÊõøÊ°à„ÅÆÊèêÁ§∫
            cat > .logs/multimedia-production/3d/3d-alternatives.json << EOF
            {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "3d_service_status": "unavailable",
              "alternative_approaches": [
                "Use 2D images with parallax effects for pseudo-3D",
                "Apply depth-of-field effects to existing images", 
                "Create layered compositions for dimensionality",
                "Use external 3D rendering services",
                "Focus on enhanced 2D visuals with motion graphics"
              ],
              "recommended_next_steps": [
                "Enhance existing 2D assets with depth effects",
                "Create multiple angle variations manually",
                "Consider external 3D service integration"
              ]
            }
            EOF
          fi
          
          # Âà∂‰ΩúÁµêÊûú„ÅÆÁµ±Ë®à
          CREATED_3D_COUNT=$(ls .logs/multimedia-production/3d/*.json 2>/dev/null | wc -l)
          
          # 3DÂà∂‰Ωú„É≠„Ç∞
          cat > .logs/multimedia-production/3d/creation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "3d_creation_summary": {
              "dedicated_3d_assets_planned": $THREED_COUNT,
              "total_3d_files_created": $CREATED_3D_COUNT,
              "3d_service_available": $([ "$(echo "$TEST_RESULTS" | jq -r '.multimedia_services."3d_generation".model_creation')" = "success" ] && echo "true" || echo "false"),
              "creation_method": "image_to_3d_conversion",
              "additional_variations_created": $([ $CREATED_3D_COUNT -gt $THREED_COUNT ] && echo "true" || echo "false")
            },
            "created_assets": [$(ls .logs/multimedia-production/3d/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "THREED_CREATION_STATUS=completed" >> $GITHUB_ENV
          echo "CREATED_3D_COUNT=$CREATED_3D_COUNT" >> $GITHUB_ENV
          
          echo "üßä 3D content creation completed: $CREATED_3D_COUNT assets"

  # === Áµ±ÂêàÊúÄÈÅ©ÂåñÊÆµÈöé ===
  - id: "cross-media-optimization"
    name: "„ÇØ„É≠„Çπ„É°„Éá„Ç£„Ç¢ÊúÄÈÅ©Âåñ„Éª‰∏ÄË≤´ÊÄßÁ¢∫‰øù"
    phase: "integration_optimization"
    github_job: "cross-media-optimization"
    type: "optimization"
    implementation: "ai"
    duration_minutes: 8
    dependencies: ["audio-music-creation", "3d-immersive-content-creation"]
    parallel_group: null
    
    github_steps:
      - name: "Optimize cross-media consistency and performance"
        shell: "bash"
        script: |
          echo "üîÑ Optimizing cross-media consistency and performance..."
          
          mkdir -p .logs/integration-optimization
          
          # ÂÖ®Âà∂‰Ωú„É≠„Ç∞„ÇíÂèéÈõÜ
          IMAGE_LOG=$(cat .logs/multimedia-production/images/generation-log.json 2>/dev/null || echo '{}')
          VIDEO_LOG=$(cat .logs/multimedia-production/videos/production-log.json 2>/dev/null || echo '{}')  
          AUDIO_LOG=$(cat .logs/multimedia-production/audio/creation-log.json 2>/dev/null || echo '{}')
          THREED_LOG=$(cat .logs/multimedia-production/3d/creation-log.json 2>/dev/null || echo '{}')
          
          CAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          
          # „ÇØ„É≠„Çπ„É°„Éá„Ç£„Ç¢ÊúÄÈÅ©ÂåñÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆÂà∂‰ΩúÁµêÊûú„ÇíÂü∫„Å´„ÄÅ„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆ„ÇØ„É≠„Çπ„É°„Éá„Ç£„Ç¢ÊúÄÈÅ©Âåñ„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•: $CAMPAIGN_STRATEGY
          „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà: $CREATIVE_CONCEPTS
          Âà∂‰ΩúË®àÁîª: $PRODUCTION_PLAN
          
          Âà∂‰ΩúÂÆüÁ∏æ:
          - ÁîªÂÉèÂà∂‰Ωú: $IMAGE_LOG
          - ÂãïÁîªÂà∂‰Ωú: $VIDEO_LOG
          - Èü≥Â£∞Âà∂‰Ωú: $AUDIO_LOG
          - 3DÂà∂‰Ωú: $THREED_LOG
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"optimization_analysis\": {
              \"cross_media_consistency\": {
                \"visual_consistency_score\": \"1-10ÁÇπ\",
                \"brand_alignment_score\": \"1-10ÁÇπ\",
                \"message_coherence_score\": \"1-10ÁÇπ\",
                \"style_uniformity_score\": \"1-10ÁÇπ\"
              },
              \"technical_quality\": {
                \"resolution_consistency\": \"1-10ÁÇπ\",
                \"color_accuracy\": \"1-10ÁÇπ\",
                \"audio_quality\": \"1-10ÁÇπ\",
                \"format_compatibility\": \"1-10ÁÇπ\"
              },
              \"user_experience\": {
                \"engagement_potential\": \"1-10ÁÇπ\",
                \"accessibility_score\": \"1-10ÁÇπ\",
                \"loading_performance\": \"1-10ÁÇπ\",
                \"mobile_optimization\": \"1-10ÁÇπ\"
              }
            },
            \"identified_issues\": [
              {
                \"issue_category\": \"visual|audio|technical|branding\",
                \"severity\": \"critical|high|medium|low\",
                \"description\": \"ÂïèÈ°å„ÅÆË©≥Á¥∞Ë™¨Êòé\",
                \"affected_assets\": [\"ÂΩ±Èüø„ÇíÂèó„Åë„ÇãÁ¥†ÊùêID\"],
                \"impact_assessment\": \"„Ç≠„É£„É≥„Éö„Éº„É≥„Å∏„ÅÆÂΩ±ÈüøË©ï‰æ°\",
                \"recommended_fix\": \"Êé®Â•®‰øÆÊ≠£ÊñπÊ≥ï\"
              }
            ],
            \"optimization_recommendations\": [
              {
                \"optimization_type\": \"color_correction|size_optimization|format_conversion|quality_enhancement\",
                \"target_assets\": [\"ÂØæË±°Á¥†ÊùêID\"],
                \"optimization_goal\": \"ÊúÄÈÅ©Âåñ„ÅÆÁõÆÊ®ô\",
                \"implementation_method\": \"ÂÆüË£ÖÊñπÊ≥ï\",
                \"expected_improvement\": \"ÊúüÂæÖ„Åï„Çå„ÇãÊîπÂñÑÂäπÊûú\",
                \"priority_level\": \"high|medium|low\"
              }
            ],
            \"channel_specific_adaptations\": {
              \"social_media\": {
                \"format_requirements\": [\"SNSÂêë„Åë„Éï„Ç©„Éº„Éû„ÉÉ„ÉàË¶Å‰ª∂\"],
                \"sizing_adaptations\": [\"„Çµ„Ç§„Ç∫Ë™øÊï¥Ë¶Å‰ª∂\"],
                \"engagement_optimizations\": [\"„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÊúÄÈÅ©Âåñ\"]
              },
              \"web_advertising\": {
                \"banner_variations\": [\"„Éê„Éä„ÉºÂ∫ÉÂëä„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥\"],
                \"loading_optimizations\": [\"Ë™≠„ÅøËæº„ÅøÊúÄÈÅ©Âåñ\"],
                \"responsive_design\": [\"„É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú\"]
              },
              \"video_platforms\": {
                \"aspect_ratio_variants\": [\"„Ç¢„Çπ„Éö„ÇØ„ÉàÊØî„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥\"],
                \"duration_adaptations\": [\"Â∞∫Ë™øÊï¥\"],
                \"platform_specific_features\": [\"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫ÊúâÊ©üËÉΩ\"]
              }
            },
            \"integration_strategy\": {
              \"content_hierarchy\": \"„Ç≥„É≥„ÉÜ„É≥„ÉÑÈöéÂ±§„ÅÆÊúÄÈÅ©Âåñ\",
              \"cross_promotion\": \"„ÇØ„É≠„Çπ„Éó„É≠„É¢„Éº„Ç∑„Éß„É≥Êà¶Áï•\",
              \"synergy_maximization\": \"Áõ∏‰πóÂäπÊûúÊúÄÂ§ßÂåñÊñπÊ≥ï\",
              \"measurement_framework\": \"ÂäπÊûúÊ∏¨ÂÆö„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ\"
            },
            \"quality_assurance\": {
              \"final_checklist\": [\"ÊúÄÁµÇÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà\"],
              \"compliance_verification\": [\"„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπÁ¢∫Ë™çÈ†ÖÁõÆ\"],
              \"performance_benchmarks\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂü∫Ê∫ñ\"],
              \"approval_workflow\": \"ÊâøË™ç„ÉØ„Éº„ÇØ„Éï„É≠„Éº\"
            }
          }" > .logs/integration-optimization/optimization-analysis.json
          
          OPTIMIZATION_ANALYSIS=$(cat .logs/integration-optimization/optimization-analysis.json)
          
          # ÊúÄÈÅ©ÂåñÂÆüË°å„ÅÆÂÑ™ÂÖàÂ∫¶Ê±∫ÂÆö
          CRITICAL_ISSUES=$(echo "$OPTIMIZATION_ANALYSIS" | jq '[.identified_issues[] | select(.severity == "critical")] | length')
          HIGH_PRIORITY_OPT=$(echo "$OPTIMIZATION_ANALYSIS" | jq '[.optimization_recommendations[] | select(.priority_level == "high")] | length')
          
          echo "CRITICAL_ISSUES_COUNT=$CRITICAL_ISSUES" >> $GITHUB_ENV
          echo "HIGH_PRIORITY_OPTIMIZATIONS=$HIGH_PRIORITY_OPT" >> $GITHUB_ENV
          echo "OPTIMIZATION_ANALYSIS_FILE=.logs/integration-optimization/optimization-analysis.json" >> $GITHUB_ENV
          
          # „ÉÅ„É£„Éç„É´Âà•ÈÅ©ÂøúÁâà„ÅÆÁîüÊàêË®àÁîª
          claude-code --prompt "‰ª•‰∏ã„ÅÆÊúÄÈÅ©ÂåñÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂêÑÈÖç‰ø°„ÉÅ„É£„Éç„É´Âêë„Åë„ÅÆÈÅ©ÂøúÁâàÂà∂‰ΩúË®àÁîª„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ÊúÄÈÅ©ÂåñÂàÜÊûê: $OPTIMIZATION_ANALYSIS
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"adaptation_plan\": {
              \"total_variants_needed\": \"ÂøÖË¶Å„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥Á∑èÊï∞\",
              \"priority_channels\": [\"ÂÑ™ÂÖà„ÉÅ„É£„Éç„É´\"],
              \"adaptation_complexity\": \"low|medium|high\"
            },
            \"channel_variants\": [
              {
                \"channel_name\": \"„ÉÅ„É£„Éç„É´Âêç\",
                \"required_formats\": [\"ÂøÖË¶Å„Éï„Ç©„Éº„Éû„ÉÉ„Éà\"],
                \"adaptation_tasks\": [\"ÈÅ©Âøú„Çø„Çπ„ÇØ\"],
                \"estimated_effort\": \"Êé®ÂÆö‰ΩúÊ•≠Èáè\",
                \"technical_requirements\": [\"ÊäÄË°ìË¶Å‰ª∂\"]
              }
            ],
            \"automation_opportunities\": [
              {
                \"task_type\": \"Ëá™ÂãïÂåñÂèØËÉΩ„Çø„Çπ„ÇØ\",
                \"automation_method\": \"Ëá™ÂãïÂåñÊñπÊ≥ï\",
                \"efficiency_gain\": \"ÂäπÁéáÂêë‰∏äÂ∫¶\"
              }
            ],
            \"manual_review_points\": [\"ÊâãÂãïÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Å™„Éù„Ç§„É≥„Éà\"],
            \"delivery_timeline\": \"ÈÖç‰ø°„Çπ„Ç±„Ç∏„É•„Éº„É´\"
          }" > .logs/integration-optimization/adaptation-plan.json
          
          ADAPTATION_PLAN=$(cat .logs/integration-optimization/adaptation-plan.json)
          echo "ADAPTATION_PLAN_FILE=.logs/integration-optimization/adaptation-plan.json" >> $GITHUB_ENV
          
          echo "üîÑ Cross-media optimization completed"
          echo "Critical issues identified: $CRITICAL_ISSUES"
          echo "High priority optimizations: $HIGH_PRIORITY_OPT"

  # === „Ç≠„É£„É≥„Éö„Éº„É≥ÂÆåÊàêÊÆµÈöé ===
  - id: "campaign-quality-assurance"
    name: "„Ç≠„É£„É≥„Éö„Éº„É≥ÂìÅË≥™‰øùË®º„ÉªÊúÄÁµÇÊ§úË®º"
    phase: "campaign_finalization"
    github_job: "quality-assurance"
    type: "validation"
    implementation: "ai"
    duration_minutes: 6
    dependencies: ["cross-media-optimization"]
    parallel_group: null
    
    github_steps:
      - name: "Comprehensive quality assurance and final validation"
        shell: "bash"
        script: |
          echo "üîç Conducting comprehensive quality assurance..."
          
          mkdir -p .logs/campaign-finalization
          
          # ÂÖ®Âà∂‰ΩúÊàêÊûúÁâ©„ÅÆÁµ±Ë®à
          TOTAL_IMAGES=$(ls .logs/multimedia-production/images/*.json 2>/dev/null | wc -l)
          TOTAL_VIDEOS=$(ls .logs/multimedia-production/videos/*.json 2>/dev/null | wc -l)
          TOTAL_AUDIO=$(ls .logs/multimedia-production/audio/*.json 2>/dev/null | wc -l)
          TOTAL_3D=$(ls .logs/multimedia-production/3d/*.json 2>/dev/null | wc -l)
          TOTAL_ASSETS=$((TOTAL_IMAGES + TOTAL_VIDEOS + TOTAL_AUDIO + TOTAL_3D))
          
          # ÂÖ®„Éá„Éº„Çø„ÅÆÁµ±Âêà
          CAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)
          CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)
          PRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)
          OPTIMIZATION_ANALYSIS=$(cat .logs/integration-optimization/optimization-analysis.json)
          
          # ÂåÖÊã¨ÁöÑÂìÅË≥™‰øùË®ºÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅ„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥„ÅÆÂåÖÊã¨ÁöÑ„Å™ÂìÅË≥™‰øùË®ºË©ï‰æ°„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•: $CAMPAIGN_STRATEGY
          „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Ç≥„É≥„Çª„Éó„Éà: $CREATIVE_CONCEPTS
          Âà∂‰ΩúË®àÁîª: $PRODUCTION_PLAN
          ÊúÄÈÅ©ÂåñÂàÜÊûê: $OPTIMIZATION_ANALYSIS
          
          Âà∂‰ΩúÂÆüÁ∏æÁµ±Ë®à:
          - ÁîªÂÉèÁ¥†Êùê: $TOTAL_IMAGES ‰ª∂
          - ÂãïÁîªÁ¥†Êùê: $TOTAL_VIDEOS ‰ª∂
          - Èü≥Â£∞Á¥†Êùê: $TOTAL_AUDIO ‰ª∂
          - 3DÁ¥†Êùê: $TOTAL_3D ‰ª∂
          - Á∑èÁ¥†ÊùêÊï∞: $TOTAL_ASSETS ‰ª∂
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"overall_assessment\": {
              \"campaign_readiness_score\": \"1-100ÁÇπ„Åß„ÅÆÁ∑èÂêàË©ï‰æ°\",
              \"strategic_alignment\": \"1-10ÁÇπ„Åß„ÅÆÊà¶Áï•Êï¥ÂêàÊÄß\",
              \"creative_excellence\": \"1-10ÁÇπ„Åß„ÅÆ„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„ÉñÂìÅË≥™\",
              \"technical_quality\": \"1-10ÁÇπ„Åß„ÅÆÊäÄË°ìÂìÅË≥™\",
              \"brand_consistency\": \"1-10ÁÇπ„Åß„ÅÆ„Éñ„É©„É≥„Éâ‰∏ÄË≤´ÊÄß\",
              \"market_competitiveness\": \"1-10ÁÇπ„Åß„ÅÆÂ∏ÇÂ†¥Á´∂‰∫âÂäõ\"
            },
            \"quality_metrics\": {
              \"content_completeness\": \"$TOTAL_ASSETS/$TOTAL_PLANNED_ASSETS ÈÅîÊàêÁéá\",
              \"production_efficiency\": \"Âà∂‰ΩúÂäπÁéáË©ï‰æ°\",
              \"innovation_level\": \"Èù©Êñ∞ÊÄß„É¨„Éô„É´Ë©ï‰æ°\",
              \"scalability_potential\": \"Êã°ÂºµÂèØËÉΩÊÄßË©ï‰æ°\"
            },
            \"compliance_check\": {
              \"brand_guidelines\": \"„Éñ„É©„É≥„Éâ„Ç¨„Ç§„Éâ„É©„Ç§„É≥Ê∫ñÊã†\",
              \"technical_standards\": \"ÊäÄË°ìÂü∫Ê∫ñÈÅ©Âêà\",
              \"accessibility_compliance\": \"„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÂØæÂøú\",
              \"platform_requirements\": \"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ë¶Å‰ª∂ÈÅ©Âêà\",
              \"legal_compliance\": \"Ê≥ïÁöÑ„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„Çπ\"
            },
            \"risk_assessment\": {
              \"high_risk_factors\": [\"È´ò„É™„Çπ„ÇØË¶ÅÂõ†\"],
              \"medium_risk_factors\": [\"‰∏≠„É™„Çπ„ÇØË¶ÅÂõ†\"],
              \"mitigation_strategies\": [\"„É™„Çπ„ÇØËªΩÊ∏õÁ≠ñ\"],
              \"contingency_plans\": [\"Á∑äÊÄ•ÊôÇÂØæÂøúË®àÁîª\"]
            },
            \"performance_predictions\": {
              \"expected_engagement_rate\": \"‰∫àÊÉ≥„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÁéá\",
              \"conversion_potential\": \"„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥ÂèØËÉΩÊÄß\",
              \"viral_potential\": \"„Éê„Ç§„É©„É´ÂèØËÉΩÊÄß\",
              \"brand_impact_score\": \"„Éñ„É©„É≥„Éâ„Ç§„É≥„Éë„ÇØ„Éà‰∫àÊ∏¨\"
            },
            \"launch_readiness\": {
              \"immediate_launch\": \"Âç≥Â∫ßÂÆüË°åÂèØËÉΩÁ¥†Êùê\",
              \"minor_adjustments_needed\": \"ÂæÆË™øÊï¥ÂøÖË¶ÅÁ¥†Êùê\",
              \"major_revisions_required\": \"Â§ßÂπÖ‰øÆÊ≠£ÂøÖË¶ÅÁ¥†Êùê\",
              \"overall_launch_status\": \"ready|almost_ready|needs_work\"
            },
            \"success_optimization\": {
              \"high_impact_improvements\": [\"È´ò„Ç§„É≥„Éë„ÇØ„ÉàÊîπÂñÑÊ°à\"],
              \"quick_wins\": [\"Âç≥ÂäπÊÄßÊîπÂñÑÊ°à\"],
              \"long_term_enhancements\": [\"Èï∑ÊúüÁöÑÂº∑ÂåñÊ°à\"],
              \"competitive_advantages\": [\"Á´∂ÂêàÂÑ™‰ΩçË¶ÅÁ¥†\"]
            },
            \"measurement_framework\": {
              \"primary_kpis\": [\"‰∏ªË¶ÅKPIË®≠ÂÆö\"],
              \"tracking_implementation\": \"„Éà„É©„ÉÉ„Ç≠„É≥„Ç∞ÂÆüË£ÖÊñπÈáù\",
              \"reporting_schedule\": \"„É¨„Éù„Éº„ÉÜ„Ç£„É≥„Ç∞„Çπ„Ç±„Ç∏„É•„Éº„É´\",
              \"optimization_triggers\": [\"ÊúÄÈÅ©ÂåñÂÆüË°å„Éà„É™„Ç¨„Éº\"]
            }
          }" > .logs/campaign-finalization/quality-assurance-report.json
          
          QA_REPORT=$(cat .logs/campaign-finalization/quality-assurance-report.json)
          CAMPAIGN_READINESS=$(echo "$QA_REPORT" | jq -r '.overall_assessment.campaign_readiness_score')
          LAUNCH_STATUS=$(echo "$QA_REPORT" | jq -r '.launch_readiness.overall_launch_status')
          
          echo "CAMPAIGN_READINESS_SCORE=$CAMPAIGN_READINESS" >> $GITHUB_ENV
          echo "LAUNCH_STATUS=$LAUNCH_STATUS" >> $GITHUB_ENV
          echo "QA_REPORT_FILE=.logs/campaign-finalization/quality-assurance-report.json" >> $GITHUB_ENV
          
          echo "üîç Quality assurance completed"
          echo "Campaign readiness score: $CAMPAIGN_READINESS/100"
          echo "Launch status: $LAUNCH_STATUS"

  - id: "final-campaign-packaging"
    name: "ÊúÄÁµÇ„Ç≠„É£„É≥„Éö„Éº„É≥„Éë„ÉÉ„Ç±„Éº„Ç∏„ÉªÈÖç‰ø°Ê∫ñÂÇô"
    phase: "campaign_finalization"
    github_job: "final-packaging"
    type: "packaging"
    implementation: "script"
    duration_minutes: 5
    dependencies: ["campaign-quality-assurance"]
    parallel_group: null
    
    github_steps:
      - name: "Create comprehensive campaign delivery package"
        shell: "bash"
        script: |
          echo "üì¶ Creating comprehensive campaign delivery package..."
          
          mkdir -p .final-output/{strategy,creative,assets,optimization}
          
          # Êà¶Áï•„Éª‰ºÅÁîª„Éâ„Ç≠„É•„É°„É≥„Éà
          cp .logs/campaign-strategy/campaign-strategy.json .final-output/strategy/ 2>/dev/null || true
          cp .logs/creative-concept/creative-concepts.json .final-output/creative/ 2>/dev/null || true
          cp .logs/asset-planning/production-plan.json .final-output/strategy/ 2>/dev/null || true
          
          # Âà∂‰ΩúÁ¥†Êùê
          mkdir -p .final-output/assets/{images,videos,audio,3d}
          cp .logs/multimedia-production/images/*.json .final-output/assets/images/ 2>/dev/null || true
          cp .logs/multimedia-production/videos/*.json .final-output/assets/videos/ 2>/dev/null || true
          cp .logs/multimedia-production/audio/*.json .final-output/assets/audio/ 2>/dev/null || true  
          cp .logs/multimedia-production/3d/*.json .final-output/assets/3d/ 2>/dev/null || true
          
          # ÊúÄÈÅ©Âåñ„ÉªÂìÅË≥™‰øùË®ºË≥áÊñô
          cp .logs/integration-optimization/*.json .final-output/optimization/ 2>/dev/null || true
          cp .logs/campaign-finalization/*.json .final-output/optimization/ 2>/dev/null || true
          
          # „Éû„Çπ„Çø„Éº„Ç≠„É£„É≥„Éö„Éº„É≥ÊÉÖÂ†±„ÅÆ‰ΩúÊàê
          cat > .final-output/campaign-master-package.json << EOF
          {
            "project_info": {
              "project_name": "Multimedia Ad Campaign Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "campaign_type": "integrated_multimedia_campaign",
              "total_production_time": "60 minutes"
            },
            "campaign_overview": {
              "campaign_readiness_score": "$CAMPAIGN_READINESS_SCORE/100",
              "launch_status": "$LAUNCH_STATUS",
              "total_assets_created": $TOTAL_ASSETS,
              "multimedia_capabilities": {
                "image_generation": $([ "$GENERATED_IMAGE_COUNT" -gt 0 ] && echo "true" || echo "false"),
                "video_production": $([ "$PRODUCED_VIDEO_COUNT" -gt 0 ] && echo "true" || echo "false"),
                "audio_creation": $([ "$CREATED_AUDIO_COUNT" -gt 0 ] && echo "true" || echo "false"),
                "3d_modeling": $([ "$CREATED_3D_COUNT" -gt 0 ] && echo "true" || echo "false")
              }
            },
            "deliverables": {
              "strategy_documents": {
                "campaign_strategy": "strategy/campaign-strategy.json",
                "production_plan": "strategy/production-plan.json"
              },
              "creative_assets": {
                "creative_concepts": "creative/creative-concepts.json",
                "image_assets": "assets/images/",
                "video_assets": "assets/videos/",
                "audio_assets": "assets/audio/",
                "3d_assets": "assets/3d/"
              },
              "optimization_reports": {
                "cross_media_optimization": "optimization/optimization-analysis.json",
                "adaptation_plan": "optimization/adaptation-plan.json",
                "quality_assurance": "optimization/quality-assurance-report.json"
              }
            },
            "asset_inventory": {
              "images_created": $TOTAL_IMAGES,
              "videos_produced": $TOTAL_VIDEOS,
              "audio_files_generated": $TOTAL_AUDIO,
              "3d_models_created": $TOTAL_3D,
              "total_multimedia_assets": $TOTAL_ASSETS
            },
            "technical_capabilities": {
              "basic_multimedia_capability": "$BASIC_CAPABILITY",
              "advanced_multimedia_capability": "$ADVANCED_CAPABILITY",
              "primary_image_service": "$PRIMARY_IMAGE_SERVICE",
              "video_capability": "$VIDEO_CAPABILITY",
              "audio_capability": "$AUDIO_CAPABILITY"
            },
            "campaign_execution": {
              "immediate_deployment_ready": $([ "$LAUNCH_STATUS" = "ready" ] && echo "true" || echo "false"),
              "critical_issues_count": "$CRITICAL_ISSUES_COUNT",
              "high_priority_optimizations": "$HIGH_PRIORITY_OPTIMIZATIONS",
              "recommended_next_steps": [
                "Review quality assurance report",
                "Implement high-priority optimizations",
                "Conduct stakeholder approval process",
                "Execute channel-specific adaptations",
                "Launch measurement framework"
              ]
            },
            "usage_guidelines": {
              "asset_modification": "Assets can be modified using source JSON specifications",
              "brand_compliance": "Ensure all modifications maintain brand consistency",
              "platform_adaptation": "Use adaptation plan for channel-specific versions",
              "quality_maintenance": "Follow QA checklist for any changes",
              "performance_monitoring": "Implement measurement framework for optimization"
            },
            "support_resources": {
              "troubleshooting": "Check logs/ directory for detailed generation information",
              "asset_regeneration": "Use production-plan.json specifications to recreate assets",
              "optimization_guidance": "Follow optimization-analysis.json recommendations",
              "compliance_verification": "Use quality-assurance-report.json compliance checklist"
            }
          }
          EOF
          
          # „Ç≠„É£„É≥„Éö„Éº„É≥ÂÆüË°å„Ç¨„Ç§„Éâ„ÅÆ‰ΩúÊàê
          cat > .final-output/CAMPAIGN_EXECUTION_GUIDE.md << 'EOF'
          # „Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Â∫ÉÂëä„Ç≠„É£„É≥„Éö„Éº„É≥ÂÆüË°å„Ç¨„Ç§„Éâ
          
          ## üìä „Ç≠„É£„É≥„Éö„Éº„É≥Ê¶ÇË¶Å
          - Á∑èÂà∂‰ΩúÁ¥†ÊùêÊï∞: Áµ±ÂêàÁöÑ„Å™„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Á¥†Êùê
          - ÂìÅË≥™Ë©ï‰æ°„Çπ„Ç≥„Ç¢: Á∑èÂêàÂìÅË≥™Ë©ï‰æ°
          - ÈÖç‰ø°Ê∫ñÂÇôÁä∂Ê≥Å: ÂÆüË°åÂèØËÉΩÊÄß„É¨„Éô„É´
          
          ## üöÄ ÂÆüË°åÂâç„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà
          - [ ] ÂÖ®Á¥†Êùê„ÅÆÂìÅË≥™Á¢∫Ë™ç
          - [ ] „Éñ„É©„É≥„Éâ„Ç¨„Ç§„Éâ„É©„Ç§„É≥ÈÅ©ÂêàÊÄßÁ¢∫Ë™ç
          - [ ] ÂêÑ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†‰ªïÊßòÈÅ©ÂêàÁ¢∫Ë™ç
          - [ ] Ê≥ïÁöÑ„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπÁ¢∫Ë™ç
          - [ ] Ê∏¨ÂÆö„Éª„Éà„É©„ÉÉ„Ç≠„É≥„Ç∞Ë®≠ÂÆö
          
          ## üéØ ÈÖç‰ø°Êà¶Áï•
          - „ÉÅ„É£„Éç„É´Âà•ÊúÄÈÅ©Âåñ„ÅÆÂÆüÊñΩ
          - „ÇØ„É≠„Çπ„É°„Éá„Ç£„Ç¢Áõ∏‰πóÂäπÊûú„ÅÆÊ¥ªÁî®
          - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ‰ΩìÂà∂„ÅÆÊßãÁØâ
          - Á∂ôÁ∂öÁöÑÊúÄÈÅ©Âåñ„Éó„É≠„Çª„Çπ„ÅÆÂÆüË£Ö
          
          ## üìà ÊàêÊûúÊ∏¨ÂÆö
          - KPIË®≠ÂÆö„Å®Áõ£Ë¶ñ
          - A/B„ÉÜ„Çπ„ÉàÂÆüÊñΩ
          - ROIÊ∏¨ÂÆö
          - Á∂ôÁ∂öÊîπÂñÑ„Çµ„Ç§„ÇØ„É´
          
          ## üîß ÊäÄË°ìÁöÑÊ≥®ÊÑè‰∫ãÈ†Ö
          - „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÅÆ‰∫íÊèõÊÄßÁ¢∫Ë™ç
          - Ë™≠„ÅøËæº„ÅøÈÄüÂ∫¶„ÅÆÊúÄÈÅ©Âåñ
          - „É¢„Éê„Ç§„É´ÂØæÂøú„ÅÆÊ§úË®º
          - „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÂØæÂøú
          EOF
          
          # ZIP„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
          cd .final-output && zip -r ../multimedia-campaign-package.zip . && cd ..
          
          echo "üì¶ Final campaign packaging completed"
          echo "Package includes:"
          echo "- Campaign strategy and creative concepts"
          echo "- $TOTAL_ASSETS multimedia assets"
          echo "- Cross-media optimization analysis"
          echo "- Quality assurance report (score: $CAMPAIGN_READINESS_SCORE/100)"
          echo "- Channel adaptation guidelines"
          echo "- Execution and measurement framework"
          echo "Package location: multimedia-campaign-package.zip"
          
    success_links:
      package_download: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
      quality_report: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/optimization/quality-assurance-report.json"
      campaign_strategy: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/strategy/campaign-strategy.json"
      execution_guide: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/CAMPAIGN_EXECUTION_GUIDE.md"

    validation:
      criteria:
        - "„Ç≠„É£„É≥„Éö„Éº„É≥Êà¶Áï•„ÅåÁ≠ñÂÆö„Åï„Çå„Å¶„ÅÑ„Çã"
        - "„Éû„É´„ÉÅ„É°„Éá„Ç£„Ç¢Á¥†Êùê„ÅåÂà∂‰Ωú„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÂìÅË≥™‰øùË®º„ÅåÂÆüÊñΩ„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".final-output/campaign-master-package.json" ]; then
          echo "‚ùå VALIDATION FAILED: Campaign package missing"
          exit 1
        fi
        
        if [ "$LAUNCH_STATUS" = "ready" ]; then
          echo "‚úÖ Validation passed: Campaign ready for launch"
        elif [ "$LAUNCH_STATUS" = "almost_ready" ]; then
          echo "‚ö†Ô∏è WARNING: Minor adjustments recommended before launch"
        else
          echo "‚ùå VALIDATION FAILED: Major work needed before campaign launch"
          exit 1
        fi