name: "Interactive Web Content Creation Workflow"
run-name: "🌐 Creating web content: ${{ github.event.inputs.content_purpose || 'Interactive Web Experience' }}"

on:
  workflow_dispatch:
    inputs:
      content_purpose:
        description: 'Webコンテンツの目的・用途'
        required: true
        default: 'ランディングページ、インタラクティブ展示、プロダクトデモ'
        type: string
      website_type:
        description: 'ウェブサイトタイプ'
        required: true
        type: choice
        options:
        - landing_page
        - portfolio_site
        - interactive_demo
        - educational_content
        - product_showcase
        - corporate_site
        default: 'landing_page'
      design_style:
        description: 'デザインスタイル'
        required: true
        type: choice
        options:
        - modern_minimal
        - corporate_professional
        - creative_artistic
        - tech_futuristic
        - classic_elegant
        - playful_colorful
        default: 'modern_minimal'
      target_device:
        description: 'ターゲットデバイス'
        required: true
        type: choice
        options:
        - mobile_first
        - desktop_first
        - responsive_all
        - tablet_optimized
        default: 'responsive_all'
      interactivity_level:
        description: 'インタラクティブ機能レベル'
        required: true
        type: choice
        options:
        - basic_static
        - light_interactive
        - medium_dynamic
        - highly_interactive
        - advanced_animation
        default: 'medium_dynamic'
      performance_priority:
        description: 'パフォーマンス優先度'
        required: true
        type: choice
        options:
        - ultra_fast
        - balanced
        - feature_rich
        - animation_heavy
        default: 'balanced'
      accessibility_level:
        description: 'アクセシビリティレベル'
        required: true
        type: choice
        options:
        - basic_compliance
        - wcag_aa
        - wcag_aaa
        - universal_design
        default: 'wcag_aa'
      color_scheme:
        description: 'カラースキーム'
        required: false
        type: choice
        options:
        - monochrome
        - warm_colors
        - cool_colors
        - brand_colors
        - high_contrast
        - pastel_soft
        default: 'brand_colors'
      content_sections:
        description: 'コンテンツセクション数 (3-12)'
        required: true
        default: '6'
        type: choice
        options:
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
        - '11'
        - '12'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      web_image_available: ${{ steps.test.outputs.web_image_available }}
      code_gen_available: ${{ steps.test.outputs.code_gen_available }}
    steps:
      - name: Test web development and design services
        id: test
        run: |
          echo "🌐 Testing web development and design services..."
          
          mkdir -p generated/logs/connectivity-tests
          
          # Web用画像生成サービステスト
          echo "Testing image generation for web content..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "professional web design hero image test" > generated/logs/connectivity-tests/web-image-test.log 2>&1; then
            WEB_IMAGE_STATUS="success"
            echo "✅ Web Image Generation: Available"
          else
            WEB_IMAGE_STATUS="failed"
            echo "⚠️ Web Image Generation: Not available - will use placeholder images"
          fi
          
          # Claude Code によるコード生成テスト
          echo "Testing code generation capabilities..."
          if timeout 30 claude-code --prompt "Test: Generate a simple HTML div element. Return 'CODE_GEN_SUCCESS' if working." > generated/logs/connectivity-tests/code-gen-test.log 2>&1; then
            if grep -q "CODE_GEN_SUCCESS" generated/logs/connectivity-tests/code-gen-test.log || grep -q "<div" generated/logs/connectivity-tests/code-gen-test.log; then
              CODE_GEN_STATUS="success"
              echo "✅ Code Generation: Available"
            else
              CODE_GEN_STATUS="partial"
              echo "⚠️ Code Generation: Partial - response received but needs verification"
            fi
          else
            CODE_GEN_STATUS="failed"
            echo "❌ Code Generation: Failed - will use template-based approach"
          fi
          
          # Set outputs
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "web_image_available=$WEB_IMAGE_STATUS" >> $GITHUB_OUTPUT
          echo "code_gen_available=$CODE_GEN_STATUS" >> $GITHUB_OUTPUT
          
          echo "🌐 Web development services connectivity tests completed"

  # Phase 2: サイト設計段階
  site-architecture:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      architecture_ready: ${{ steps.design.outputs.architecture_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Design site architecture and user experience
        id: design
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🏗️ Designing site architecture and user experience..."
          
          mkdir -p generated/logs/site-architecture
          
          CONTENT_PURPOSE="${{ github.event.inputs.content_purpose }}"
          WEBSITE_TYPE="${{ github.event.inputs.website_type }}"
          TARGET_DEVICE="${{ github.event.inputs.target_device }}"
          
          echo "Content purpose: $CONTENT_PURPOSE"
          echo "Website type: $WEBSITE_TYPE"
          echo "Target device: $TARGET_DEVICE"
          
          # Claude Code でサイト設計・UX戦略
          claude-code --prompt "以下の要件に基づいて、Webサイトのアーキテクチャとユーザーエクスペリエンス設計をJSON形式で作成してください：

          コンテンツ目的: $CONTENT_PURPOSE
          ウェブサイトタイプ: $WEBSITE_TYPE
          ターゲットデバイス: $TARGET_DEVICE
          インタラクティブレベル: ${{ github.event.inputs.interactivity_level }}
          デザインスタイル: ${{ github.event.inputs.design_style }}
          コンテンツセクション数: ${{ github.event.inputs.content_sections }}

          サイトマップ、ナビゲーション構造、ユーザーフロー、レスポンシブ設計要件を含めてください。" > generated/logs/site-architecture/site-design.json
          
          echo "architecture_ready=true" >> $GITHUB_OUTPUT
          echo "🏗️ Site architecture design completed"

  # Phase 3: ビジュアル素材制作段階
  visual-assets-creation:
    needs: [connectivity-test, site-architecture]
    runs-on: ubuntu-latest
    outputs:
      assets_ready: ${{ steps.create.outputs.assets_ready }}
    steps:
      - name: Generate visual assets for web content
        id: create
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎨 Generating visual assets for web content..."
          
          mkdir -p generated/logs/visual-assets
          
          WEB_IMAGE_AVAILABLE="${{ needs.connectivity-test.outputs.web_image_available }}"
          DESIGN_STYLE="${{ github.event.inputs.design_style }}"
          COLOR_SCHEME="${{ github.event.inputs.color_scheme }}"
          
          if [ "$WEB_IMAGE_AVAILABLE" = "success" ]; then
            echo "Generating hero section image..."
            HERO_PROMPT="${{ github.event.inputs.content_purpose }}, hero section banner, $DESIGN_STYLE design, $COLOR_SCHEME colors, professional web design, high quality"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$HERO_PROMPT" > generated/logs/visual-assets/hero-image.json 2>&1 || echo "Hero image generation failed"
            
            echo "Generating section background images..."
            SECTION_PROMPT="${{ github.event.inputs.content_purpose }}, section background, $DESIGN_STYLE aesthetic, web-optimized, clean background"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$SECTION_PROMPT" > generated/logs/visual-assets/section-bg.json 2>&1 || echo "Section background generation failed"
            
            echo "Generating icon/graphic elements..."
            ICON_PROMPT="modern web icons, $DESIGN_STYLE style, $COLOR_SCHEME colors, vector-style graphics, professional"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$ICON_PROMPT" > generated/logs/visual-assets/web-icons.json 2>&1 || echo "Icon generation failed"
            
            echo "✅ Visual assets generated"
          else
            echo "⚠️ Image generation not available - will create CSS-based visual design"
            echo '{"asset_type": "css_only", "color_scheme": "${{ github.event.inputs.color_scheme }}"}' > generated/logs/visual-assets/design-fallback.json
          fi
          
          echo "assets_ready=true" >> $GITHUB_OUTPUT
          echo "🎨 Visual assets creation completed"

  # Phase 4: HTML構造生成段階
  html-structure-generation:
    needs: site-architecture
    runs-on: ubuntu-latest
    outputs:
      html_ready: ${{ steps.generate.outputs.html_ready }}
    steps:
      - name: Generate semantic HTML structure
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📄 Generating semantic HTML structure..."
          
          mkdir -p generated/logs/html-structure
          
          # HTML構造生成
          claude-code --prompt "以下の要件に基づいて、セマンティックで構造化されたHTMLコードを生成してください：

          ウェブサイトタイプ: ${{ github.event.inputs.website_type }}
          コンテンツセクション数: ${{ github.event.inputs.content_sections }}
          アクセシビリティレベル: ${{ github.event.inputs.accessibility_level }}
          ターゲットデバイス: ${{ github.event.inputs.target_device }}

          HTML5セマンティック要素、適切な見出し構造、ARIAラベル、メタタグを含む完全なHTMLを生成してください。" > generated/logs/html-structure/main-structure.html
          
          echo "html_ready=true" >> $GITHUB_OUTPUT
          echo "📄 HTML structure generation completed"

  # Phase 5: CSS スタイリング段階
  css-styling:
    needs: [html-structure-generation, visual-assets-creation]
    runs-on: ubuntu-latest
    outputs:
      css_ready: ${{ steps.style.outputs.css_ready }}
    steps:
      - name: Generate responsive CSS styling
        id: style
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎨 Generating responsive CSS styling..."
          
          mkdir -p generated/logs/css-styling
          
          # CSS生成
          claude-code --prompt "以下の要件に基づいて、レスポンシブで現代的なCSSスタイルシートを生成してください：

          デザインスタイル: ${{ github.event.inputs.design_style }}
          カラースキーム: ${{ github.event.inputs.color_scheme }}
          ターゲットデバイス: ${{ github.event.inputs.target_device }}
          パフォーマンス優先度: ${{ github.event.inputs.performance_priority }}

          モバイルファースト、Flexbox/Grid、アニメーション、ホバー効果を含む完全なCSSを生成してください。" > generated/logs/css-styling/main-styles.css
          
          echo "css_ready=true" >> $GITHUB_OUTPUT
          echo "🎨 CSS styling completed"

  # Phase 6: JavaScript インタラクティブ機能段階
  javascript-interactivity:
    needs: css-styling
    runs-on: ubuntu-latest
    outputs:
      js_ready: ${{ steps.script.outputs.js_ready }}
    steps:
      - name: Generate JavaScript interactive features
        id: script
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "⚡ Generating JavaScript interactive features..."
          
          mkdir -p generated/logs/javascript-interactivity
          
          INTERACTIVITY_LEVEL="${{ github.event.inputs.interactivity_level }}"
          
          # JavaScript生成
          claude-code --prompt "以下の要件に基づいて、インタラクティブなJavaScriptコードを生成してください：

          インタラクティブレベル: $INTERACTIVITY_LEVEL
          ウェブサイトタイプ: ${{ github.event.inputs.website_type }}
          パフォーマンス優先度: ${{ github.event.inputs.performance_priority }}
          アクセシビリティレベル: ${{ github.event.inputs.accessibility_level }}

          スムーズスクロール、アニメーション、フォームバリデーション、レスポンシブナビゲーションを含むモダンなJavaScriptを生成してください。" > generated/logs/javascript-interactivity/interactive-features.js
          
          echo "js_ready=true" >> $GITHUB_OUTPUT
          echo "⚡ JavaScript interactivity completed"

  # Phase 7: 最適化・検証段階
  optimization-validation:
    needs: javascript-interactivity
    runs-on: ubuntu-latest
    outputs:
      optimization_ready: ${{ steps.optimize.outputs.optimization_ready }}
    steps:
      - name: Optimize and validate web content
        id: optimize
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔧 Optimizing and validating web content..."
          
          mkdir -p generated/logs/optimization-validation
          
          # 最適化・検証分析
          claude-code --prompt "以下のWebプロジェクト要件に基づいて、パフォーマンス最適化とアクセシビリティ検証の提案をJSON形式で作成してください：

          パフォーマンス優先度: ${{ github.event.inputs.performance_priority }}
          アクセシビリティレベル: ${{ github.event.inputs.accessibility_level }}
          ターゲットデバイス: ${{ github.event.inputs.target_device }}

          Core Web Vitals、WCAG準拠、SEO最適化、ブラウザ互換性の観点から分析してください。" > generated/logs/optimization-validation/optimization-report.json
          
          echo "optimization_ready=true" >> $GITHUB_OUTPUT
          echo "🔧 Optimization and validation completed"

  # Phase 8: 最終パッケージ作成
  final-packaging:
    needs: [site-architecture, visual-assets-creation, html-structure-generation, css-styling, javascript-interactivity, optimization-validation]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive web project package
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📦 Creating comprehensive web project package..."
          
          mkdir -p .final-output/{design,assets,code,optimization}
          
          # デザイン・設計ドキュメント
          cp generated/logs/site-architecture/site-design.json .final-output/design/ 2>/dev/null || true
          
          # ビジュアル素材
          cp generated/logs/visual-assets/*.json .final-output/assets/ 2>/dev/null || true
          
          # コードファイル
          mkdir -p .final-output/code/{html,css,js}
          cp generated/logs/html-structure/main-structure.html .final-output/code/html/ 2>/dev/null || true
          cp generated/logs/css-styling/main-styles.css .final-output/code/css/ 2>/dev/null || true
          cp generated/logs/javascript-interactivity/interactive-features.js .final-output/code/js/ 2>/dev/null || true
          
          # 最適化レポート
          cp generated/logs/optimization-validation/optimization-report.json .final-output/optimization/ 2>/dev/null || true
          
          # マスターWeb プロジェクト情報
          cat > .final-output/web-project-master.json << EOF
          {
            "project_info": {
              "project_name": "Interactive Web Content Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "project_type": "interactive_web_content_development"
            },
            "input_parameters": {
              "content_purpose": "${{ github.event.inputs.content_purpose }}",
              "website_type": "${{ github.event.inputs.website_type }}",
              "design_style": "${{ github.event.inputs.design_style }}",
              "target_device": "${{ github.event.inputs.target_device }}",
              "interactivity_level": "${{ github.event.inputs.interactivity_level }}",
              "performance_priority": "${{ github.event.inputs.performance_priority }}",
              "accessibility_level": "${{ github.event.inputs.accessibility_level }}",
              "color_scheme": "${{ github.event.inputs.color_scheme }}",
              "content_sections": ${{ github.event.inputs.content_sections }}
            },
            "deliverables": {
              "design_documents": {
                "site_architecture": "design/site-design.json"
              },
              "visual_assets": {
                "generated_images": "assets/"
              },
              "source_code": {
                "html_structure": "code/html/main-structure.html",
                "css_styling": "code/css/main-styles.css",
                "javascript_features": "code/js/interactive-features.js"
              },
              "optimization_reports": {
                "performance_analysis": "optimization/optimization-report.json"
              }
            }
          }
          EOF
          
          # Web開発プロジェクトガイド
          cat > .final-output/WEB_DEVELOPMENT_GUIDE.md << 'EOF'
          # インタラクティブWebコンテンツ開発ガイド
          
          ## 🌐 プロジェクト概要
          - 開発手法: AI生成による構造化Web開発
          - 品質レベル: モダンWeb標準準拠
          - 最適化: パフォーマンス・アクセシビリティ重視
          
          ## 🏗️ アーキテクチャ設計
          - セマンティックHTML5構造
          - レスポンシブデザイン戦略
          - ユーザーエクスペリエンス設計
          - アクセシビリティ配慮
          
          ## 🎨 デザイン・ビジュアル
          - モダンUIデザイン
          - カラースキーム統一
          - ビジュアル素材最適化
          - ブランド整合性確保
          
          ## ⚡ インタラクティブ機能
          - JavaScript機能実装
          - スムーズアニメーション
          - ユーザーインタラクション
          - フォーム・ナビゲーション
          
          ## 🔧 最適化・品質
          - Core Web Vitals対応
          - SEO最適化実装
          - クロスブラウザ互換性
          - パフォーマンス最適化
          
          ## 📱 レスポンシブ対応
          - モバイルファースト設計
          - タブレット・デスクトップ最適化
          - タッチインターフェース対応
          - 画面サイズ適応性
          EOF
          
          echo "📦 Final web project packaging completed"
          
      - name: Upload Web Project Package
        uses: actions/upload-artifact@v4
        with:
          name: web-project-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30