name: "Audio Music Creation Workflow"
run-name: "🎵 Creating music: ${{ github.event.inputs.music_concept || 'Audio Music Creation' }}"

on:
  workflow_dispatch:
    inputs:
      music_concept:
        description: '音楽コンセプト・用途'
        required: true
        default: 'リラックスできるカフェBGM、アップテンポなワークアウト用音楽'
        type: string
      music_genre:
        description: '音楽ジャンル'
        required: true
        type: choice
        options:
        - ambient
        - electronic
        - classical
        - jazz
        - rock
        - pop
        - world
        - experimental
        default: 'ambient'
      mood_energy:
        description: 'ムード・エネルギー'
        required: true
        type: choice
        options:
        - very_calm
        - relaxing
        - neutral
        - uplifting
        - energetic
        - intense
        default: 'relaxing'
      track_duration:
        description: '楽曲の長さ (秒)'
        required: true
        default: '120'
        type: choice
        options:
        - '30'
        - '60'
        - '90'
        - '120'
        - '150'
        - '180'
        - '210'
        - '240'
        - '270'
        - '300'
      tempo_bpm:
        description: 'テンポ (BPM)'
        required: true
        default: '120'
        type: choice
        options:
        - '60'
        - '70'
        - '80'
        - '90'
        - '100'
        - '110'
        - '120'
        - '130'
        - '140'
        - '150'
        - '160'
        - '170'
        - '180'
      musical_key:
        description: '調性・キー'
        required: true
        type: choice
        options:
        - c_major
        - g_major
        - d_major
        - a_minor
        - e_minor
        - f_major
        - auto
        default: 'auto'
      instrumentation:
        description: '楽器編成'
        required: true
        type: choice
        options:
        - solo_piano
        - string_ensemble
        - full_orchestra
        - electronic_synth
        - acoustic_guitar
        - mixed_ensemble
        default: 'mixed_ensemble'
      audio_quality:
        description: '音響品質'
        required: true
        type: choice
        options:
        - studio_master
        - high_fidelity
        - standard
        default: 'high_fidelity'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      music_gen_available: ${{ steps.test.outputs.music_gen_available }}
      voice_available: ${{ steps.test.outputs.voice_available }}
    steps:
      - name: Test audio generation services
        id: test
        run: |
          echo "🎵 Testing audio generation services..."
          
          mkdir -p .logs/connectivity-tests
          
          # 音楽生成サービステスト（T2M）
          echo "Testing music generation service..."
          if timeout 180 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --test > .logs/connectivity-tests/music-gen-test.log 2>&1; then
            MUSIC_GEN_STATUS="success"
            echo "✅ Music Generation (Google Lyria): Available"
          else
            MUSIC_GEN_STATUS="failed"
            echo "❌ Music Generation: Failed"
          fi
          
          # 音声生成サービステスト（V2A）
          echo "Testing voice generation service..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp v2a-fal-metavoice-v1 --test > .logs/connectivity-tests/voice-test.log 2>&1; then
            VOICE_GEN_STATUS="success"
            echo "✅ Voice Generation (MetaVoice): Available"
          else
            VOICE_GEN_STATUS="failed"
            echo "⚠️ Voice Generation: Not available"
          fi
          
          # 出力設定
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "music_gen_available=$MUSIC_GEN_STATUS" >> $GITHUB_OUTPUT
          echo "voice_available=$VOICE_GEN_STATUS" >> $GITHUB_OUTPUT
          
          echo "🎵 Audio services connectivity tests completed"

  # Phase 2: 音楽コンセプト開発段階
  concept-development:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      concept_ready: ${{ steps.develop.outputs.concept_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Develop music concept and specifications
        id: develop
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎯 Developing music concept and specifications..."
          
          mkdir -p .logs/music-concept
          
          # 入力から音楽要件を抽出
          MUSIC_CONCEPT="${{ github.event.inputs.music_concept }}"
          MUSIC_GENRE="${{ github.event.inputs.music_genre }}"
          MOOD_ENERGY="${{ github.event.inputs.mood_energy }}"
          INSTRUMENTATION="${{ github.event.inputs.instrumentation }}"
          
          echo "Music concept: $MUSIC_CONCEPT"
          echo "Genre: $MUSIC_GENRE"
          echo "Mood: $MOOD_ENERGY"
          echo "Instrumentation: $INSTRUMENTATION"
          
          # Claude Code で音楽コンセプト設計
          claude-code --prompt "以下の要件に基づいて、音楽制作の詳細なコンセプトと技術仕様を設計してください：
          
          音楽コンセプト: $MUSIC_CONCEPT
          ジャンル: $MUSIC_GENRE
          ムード・エネルギー: $MOOD_ENERGY
          楽器編成: $INSTRUMENTATION
          
          JSON形式で音楽仕様を返してください。" > .logs/music-concept/music-concept.json
          
          echo "concept_ready=true" >> $GITHUB_OUTPUT
          echo "🎯 Music concept development completed"

  # Phase 3: 楽曲構成設計段階
  composition-design:
    needs: concept-development
    runs-on: ubuntu-latest
    outputs:
      composition_ready: ${{ steps.design.outputs.composition_ready }}
    steps:
      - name: Design musical composition structure
        id: design
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎼 Designing musical composition structure..."
          
          mkdir -p .logs/composition-design
          
          TRACK_DURATION="${{ github.event.inputs.track_duration }}"
          TEMPO_BPM="${{ github.event.inputs.tempo_bpm }}"
          MUSICAL_KEY="${{ github.event.inputs.musical_key }}"
          
          echo "Duration: $TRACK_DURATION seconds"
          echo "Tempo: $TEMPO_BPM BPM"
          echo "Key: $MUSICAL_KEY"
          
          # 楽曲構成設計
          claude-code --prompt "以下のパラメータに基づいて、詳細な楽曲構成を設計してください：
          
          楽曲の長さ: $TRACK_DURATION 秒
          テンポ: $TEMPO_BPM BPM
          調性: $MUSICAL_KEY
          
          楽曲の構造、ハーモニー、リズムパターンを含むJSON形式の構成を返してください。" > .logs/composition-design/composition-structure.json
          
          echo "composition_ready=true" >> $GITHUB_OUTPUT
          echo "🎼 Musical composition design completed"

  # Phase 4: 音楽生成段階
  music-generation:
    needs: [connectivity-test, concept-development, composition-design]
    runs-on: ubuntu-latest
    outputs:
      generation_results: ${{ steps.generate.outputs.generation_results }}
    steps:
      - name: Generate primary music track
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎵 Generating primary music track..."
          
          mkdir -p .logs/music-generation
          
          MUSIC_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.music_gen_available }}"
          MUSIC_CONCEPT="${{ github.event.inputs.music_concept }}"
          MUSIC_GENRE="${{ github.event.inputs.music_genre }}"
          MOOD_ENERGY="${{ github.event.inputs.mood_energy }}"
          TRACK_DURATION="${{ github.event.inputs.track_duration }}"
          
          if [ "$MUSIC_GEN_AVAILABLE" = "success" ]; then
            echo "Music generation service available - creating music..."
            
            # メイン楽曲生成
            echo "Generating primary music track..."
            MUSIC_PROMPT="Create $MUSIC_GENRE music with $MOOD_ENERGY mood, duration $TRACK_DURATION seconds, concept: $MUSIC_CONCEPT"
            
            if timeout 300 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$MUSIC_PROMPT" --duration "$TRACK_DURATION" > .logs/music-generation/primary-track.json 2>&1; then
              echo "✅ Primary music track generated successfully"
              PRIMARY_MUSIC_STATUS="success"
            else
              echo "❌ Primary music generation failed"
              PRIMARY_MUSIC_STATUS="failed"
            fi
          else
            echo "⚠️ Music generation service not available"
            PRIMARY_MUSIC_STATUS="service_unavailable"
          fi
          
          # 音楽生成結果をログ保存
          cat > .logs/music-generation/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "primary_music_status": "$PRIMARY_MUSIC_STATUS",
            "generation_service_used": "$([ "$MUSIC_GEN_AVAILABLE" = "success" ] && echo "t2m-google-lyria" || echo "none")",
            "track_duration": $TRACK_DURATION,
            "music_genre": "$MUSIC_GENRE",
            "mood_energy": "$MOOD_ENERGY"
          }
          EOF
          
          echo "generation_results<<EOF" >> $GITHUB_OUTPUT
          cat .logs/music-generation/generation-log.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "🎵 Primary music generation completed"

  # Phase 5: 音響処理・最適化段階
  audio-processing:
    needs: music-generation
    runs-on: ubuntu-latest
    outputs:
      processing_status: ${{ steps.process.outputs.processing_status }}
    steps:
      - name: Process and optimize audio quality
        id: process
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎚️ Processing and optimizing audio quality..."
          
          mkdir -p .logs/audio-processing
          
          GENERATION_RESULTS='${{ needs.music-generation.outputs.generation_results }}'
          AUDIO_QUALITY="${{ github.event.inputs.audio_quality }}"
          
          # 音響処理分析
          claude-code --prompt "以下の音楽生成結果を基に、音響処理と品質最適化の詳細分析を行ってください：
          
          生成ログ: $GENERATION_RESULTS
          音響品質: $AUDIO_QUALITY
          
          JSON形式で音響処理推奨事項を返してください。" > .logs/audio-processing/processing-analysis.json
          
          echo "processing_status=completed" >> $GITHUB_OUTPUT
          echo "🎚️ Audio processing completed"

  # Phase 6: ミキシング・マスタリング段階
  mixing-mastering:
    needs: audio-processing
    runs-on: ubuntu-latest
    outputs:
      mixing_ready: ${{ steps.mix.outputs.mixing_ready }}
    steps:
      - name: Perform mixing and mastering
        id: mix
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎛️ Performing mixing and mastering..."
          
          mkdir -p .logs/mixing-mastering
          
          AUDIO_QUALITY="${{ github.event.inputs.audio_quality }}"
          TEMPO_BPM="${{ github.event.inputs.tempo_bpm }}"
          
          # ミキシング・マスタリング設定
          claude-code --prompt "以下のパラメータに基づいて、最適なミキシングとマスタリング設定を設計してください：
          
          音響品質: $AUDIO_QUALITY
          テンポ: $TEMPO_BPM BPM
          
          JSON形式でミキシング・マスタリング設定を返してください。" > .logs/mixing-mastering/mixing-configuration.json
          
          echo "mixing_ready=true" >> $GITHUB_OUTPUT
          echo "🎛️ Mixing and mastering completed"

  # Phase 7: フォーマット・配信準備段階
  format-delivery:
    needs: [music-generation, audio-processing, mixing-mastering]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare various audio formats for delivery
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📦 Preparing various audio formats for delivery..."
          
          mkdir -p .logs/format-delivery
          
          AUDIO_QUALITY="${{ github.event.inputs.audio_quality }}"
          TRACK_DURATION="${{ github.event.inputs.track_duration }}"
          
          # フォーマット・配信戦略
          claude-code --prompt "以下の音楽プロジェクト情報を基に、配信フォーマットと最適化戦略を設計してください：
          
          音響品質: $AUDIO_QUALITY
          楽曲の長さ: $TRACK_DURATION 秒
          
          JSON形式で配信戦略を返してください。" > .logs/format-delivery/delivery-strategy.json
          
          echo "📦 Audio format delivery preparation completed"

  # Phase 8: 最終パッケージ作成
  final-packaging:
    needs: [concept-development, music-generation, audio-processing, mixing-mastering, format-delivery]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive audio project delivery package
        run: |
          echo "📦 Creating comprehensive audio project delivery package..."
          
          mkdir -p .final-output/{concept,generation,processing,mixing}
          
          # プロジェクト文書
          cp .logs/music-concept/music-concept.json .final-output/concept/ 2>/dev/null || true
          cp .logs/composition-design/composition-structure.json .final-output/concept/ 2>/dev/null || true
          
          # 音楽生成成果物
          mkdir -p .final-output/generation/{tracks,analysis}
          cp .logs/music-generation/*.json .final-output/generation/tracks/ 2>/dev/null || true
          
          # 音響処理・ミキシング資料
          cp .logs/audio-processing/*.json .final-output/processing/ 2>/dev/null || true
          cp .logs/mixing-mastering/*.json .final-output/mixing/ 2>/dev/null || true
          cp .logs/format-delivery/*.json .final-output/mixing/ 2>/dev/null || true
          
          # マスター音楽プロジェクト情報
          cat > .final-output/music-project-master.json << EOF
          {
            "project_info": {
              "project_name": "Audio Music Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "project_type": "music_audio_generation_and_production"
            },
            "input_parameters": {
              "music_concept": "${{ github.event.inputs.music_concept }}",
              "music_genre": "${{ github.event.inputs.music_genre }}",
              "mood_energy": "${{ github.event.inputs.mood_energy }}",
              "track_duration": ${{ github.event.inputs.track_duration }},
              "tempo_bpm": ${{ github.event.inputs.tempo_bpm }},
              "musical_key": "${{ github.event.inputs.musical_key }}",
              "instrumentation": "${{ github.event.inputs.instrumentation }}",
              "audio_quality": "${{ github.event.inputs.audio_quality }}"
            },
            "deliverables": {
              "concept_documents": {
                "music_concept": "concept/music-concept.json",
                "composition_structure": "concept/composition-structure.json"
              },
              "audio_assets": {
                "generated_tracks": "generation/tracks/",
                "analysis_reports": "generation/analysis/"
              },
              "production_reports": {
                "audio_processing": "processing/processing-analysis.json",
                "mixing_configuration": "mixing/mixing-configuration.json",
                "delivery_strategy": "mixing/delivery-strategy.json"
              }
            }
          }
          EOF
          
          # 音楽制作プロジェクトガイドの作成
          cat > .final-output/MUSIC_PROJECT_GUIDE.md << 'EOF'
          # 音楽・オーディオ制作プロジェクトガイド
          
          ## 🎵 プロジェクト概要
          - 制作手法: AI生成による音楽・オーディオ制作
          - 品質レベル: プロフェッショナル対応
          - 最適化: マルチフォーマット対応
          
          ## 🎯 楽曲仕様
          - ジャンル・ムード設定
          - 楽曲構成・ハーモニー
          - 楽器編成・音響品質
          - テンポ・調性・尺設定
          
          ## 🎨 制作成果物
          - メイン楽曲トラック
          - バリエーション・ミックス
          - 音響処理設定
          - ミキシング・マスタリング設定
          
          ## ⚡ 音響処理・最適化
          - 音質最適化設定
          - フォーマット別最適化
          - 配信プラットフォーム対応
          - ライセンス・著作権情報
          
          ## 🚀 配信・活用
          - フォーマット変換ガイド
          - プラットフォーム統合手順
          - 音響設定適用
          - 品質検証プロセス
          EOF
          
          echo "📦 Final music project packaging completed"
          
      - name: Upload Music Project Package
        uses: actions/upload-artifact@v4
        with:
          name: music-project-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30