# Èü≥Ê•Ω„Éª„Ç™„Éº„Éá„Ç£„Ç™Âà∂‰Ωú - Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
name: "audio-music-creation"
description: "Èü≥Ê•Ω„ÉªÂäπÊûúÈü≥„ÉªÈü≥Â£∞„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂ∞ÇÈñÄÁöÑÂà∂‰Ωú„Éï„É≠„Éº"
category: "audio-content-production"
complexity_level: 4
estimated_duration_minutes: 35

# ÂãïÁöÑ„É¢„Éº„ÉÄ„É´ÂÖ•Âäõ‰ªïÊßò (Dynamic Modal Input Specification)
dynamic_inputs_spec:
  modal_title: "Èü≥Ê•Ω„Éª„Ç™„Éº„Éá„Ç£„Ç™Âà∂‰ΩúË®≠ÂÆö"
  modal_description: "AIÈü≥Ê•ΩÁîüÊàê„ÉªÈü≥Â£∞„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„ÅÆË©≥Á¥∞„Éë„É©„É°„Éº„ÇøË®≠ÂÆö"
  form_sections:
    - section_name: "Èü≥Ê•Ω„Ç≥„É≥„Çª„Éó„Éà"
      section_description: "Ê•ΩÊõ≤„ÅÆÂü∫Êú¨ÁöÑ„Å™„Ç≥„É≥„Çª„Éó„Éà„Å®„Ç∏„É£„É≥„É´"
      inputs:
        - name: "music_concept"
          label: "Èü≥Ê•Ω„Ç≥„É≥„Çª„Éó„Éà„ÉªÁî®ÈÄî"
          type: "textarea"
          required: true
          placeholder: "‰æã: „É™„É©„ÉÉ„ÇØ„Çπ„Åß„Åç„Çã„Ç´„Éï„ÇßBGM„ÄÅ„Ç¢„ÉÉ„Éó„ÉÜ„É≥„Éù„Å™„ÉØ„Éº„ÇØ„Ç¢„Ç¶„ÉàÁî®Èü≥Ê•Ω"
          description: "‰ΩúÊàê„Åó„Åü„ÅÑÈü≥Ê•Ω„ÅÆÁõÆÁöÑ„ÉªÁî®ÈÄî„Éª„Ç§„É°„Éº„Ç∏„ÇíË©≥Á¥∞„Å´Ë®òËºâ"
          validation:
            min_length: 15
            max_length: 600
        
        - name: "music_genre"
          label: "Èü≥Ê•Ω„Ç∏„É£„É≥„É´"
          type: "select"
          required: true
          options:
            - value: "ambient"
              label: "üåä „Ç¢„É≥„Éì„Ç®„É≥„Éà (Áí∞Â¢ÉÈü≥Ê•Ω„ÉªÁôí„ÅóÁ≥ª)"
            - value: "electronic"
              label: "üéõÔ∏è „Ç®„É¨„ÇØ„Éà„É≠„Éã„ÉÉ„ÇØ („Ç∑„É≥„Çª„Çµ„Ç§„Ç∂„Éº‰∏≠ÂøÉ)"
            - value: "classical"
              label: "üéº „ÇØ„É©„Ç∑„ÉÉ„ÇØ („Ç™„Éº„Ç±„Çπ„Éà„É©„ÉªÂô®Ê•Ω)"
            - value: "jazz"
              label: "üé∫ „Ç∏„É£„Ç∫ (Âç≥Ëàà„Éª„Çπ„Ç¶„Ç£„É≥„Ç∞)"
            - value: "rock"
              label: "üé∏ „É≠„ÉÉ„ÇØ („Éê„É≥„Éâ„Çµ„Ç¶„É≥„Éâ)"
            - value: "pop"
              label: "üé§ „Éù„ÉÉ„Éó„Çπ („Ç≠„É£„ÉÉ„ÉÅ„Éº„ÉªË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ)"
            - value: "world"
              label: "üåç „ÉØ„Éº„É´„Éâ„Éü„É•„Éº„Ç∏„ÉÉ„ÇØ (Ê∞ëÊóèÈü≥Ê•Ω)"
            - value: "experimental"
              label: "üî¨ ÂÆüÈ®ìÈü≥Ê•Ω (ÂâçË°õ„ÉªÂâµÈÄ†ÁöÑ)"
          default: "ambient"
        
        - name: "mood_energy"
          label: "„É†„Éº„Éâ„Éª„Ç®„Éç„É´„ÇÆ„Éº"
          type: "select"
          required: true
          options:
            - value: "very_calm"
              label: "üòå „Å®„Å¶„ÇÇÁ©è„ÇÑ„Åã (ÁûëÊÉ≥„ÉªÁù°Áú†Áî®)"
            - value: "relaxing"
              label: "üçÉ „É™„É©„ÉÉ„ÇØ„Çπ (Ë™≠Êõ∏„Éª‰ΩúÊ•≠Áî®)"
            - value: "neutral"
              label: "üòê ‰∏≠Á´ã (Êó•Â∏∏„ÉªÊ±éÁî®)"
            - value: "uplifting"
              label: "üòä Êòé„Çã„ÅÑ (ÂâçÂêë„Åç„ÉªÊ•Ω„Åó„ÅÑ)"
            - value: "energetic"
              label: "‚ö° „Ç®„Éç„É´„ÇÆ„ÉÉ„Ç∑„É• (ÈÅãÂãï„ÉªÊ¥ªÂãïÁöÑ)"
            - value: "intense"
              label: "üî• ÊøÄ„Åó„ÅÑ („Çπ„Éù„Éº„ÉÑ„ÉªÈõÜ‰∏≠)"
          default: "relaxing"

    - section_name: "Ê•ΩÊõ≤ÊßãÊàê"
      section_description: "Ê•ΩÊõ≤„ÅÆÊßãÈÄ†„Å®ÊäÄË°ìÁöÑ„Éë„É©„É°„Éº„Çø"
      inputs:
        - name: "track_duration"
          label: "Ê•ΩÊõ≤„ÅÆÈï∑„Åï (Áßí)"
          type: "range"
          required: true
          min: 30
          max: 300
          default: 120
          step: 30
          description: "ÁîüÊàê„Åô„ÇãÊ•ΩÊõ≤„ÅÆÈï∑„Åï (30Áßí-5ÂàÜ)"
        
        - name: "tempo_bpm"
          label: "„ÉÜ„É≥„Éù (BPM)"
          type: "range"
          required: true
          min: 60
          max: 180
          default: 120
          step: 10
          description: "Ê•ΩÊõ≤„ÅÆ„ÉÜ„É≥„Éù„ÉªÈÄüÂ∫¶ (60=„ÇÜ„Å£„Åè„Çä, 180=ÈÄü„ÅÑ)"
        
        - name: "musical_key"
          label: "Ë™øÊÄß„Éª„Ç≠„Éº"
          type: "select"
          required: true
          options:
            - value: "c_major"
              label: "C Major (Êòé„Çã„ÅÑ„ÉªÂü∫Êú¨ÁöÑ)"
            - value: "g_major"
              label: "G Major (Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ)"
            - value: "d_major"
              label: "D Major (ËèØ„ÇÑ„Åã)"
            - value: "a_minor"
              label: "A Minor (Â∞ë„ÅóÊöó„ÅÑ„ÉªÊÉÖÁ∑íÁöÑ)"
            - value: "e_minor"
              label: "E Minor („É°„É©„É≥„Ç≥„É™„ÉÉ„ÇØ)"
            - value: "f_major"
              label: "F Major (Êüî„Çâ„Åã)"
            - value: "auto"
              label: "üé≤ Ëá™ÂãïÈÅ∏Êäû (AI„ÅåÊúÄÈÅ©Âà§Êñ≠)"
          default: "auto"

    - section_name: "Èü≥ÈüøË®≠ÂÆö"
      section_description: "Èü≥Ë≥™„Å®Ê•ΩÂô®Á∑®Êàê„ÅÆË®≠ÂÆö"
      inputs:
        - name: "instrumentation"
          label: "Ê•ΩÂô®Á∑®Êàê"
          type: "select"
          required: true
          options:
            - value: "solo_piano"
              label: "üéπ „ÇΩ„É≠„Éî„Ç¢„Éé"
            - value: "string_ensemble"
              label: "üéª Âº¶Ê•Ω„Ç¢„É≥„Çµ„É≥„Éñ„É´"
            - value: "full_orchestra"
              label: "üéº „Éï„É´„Ç™„Éº„Ç±„Çπ„Éà„É©"
            - value: "electronic_synth"
              label: "üéõÔ∏è „Ç®„É¨„ÇØ„Éà„É≠„Éã„ÉÉ„ÇØ„Éª„Ç∑„É≥„Çª"
            - value: "acoustic_guitar"
              label: "üé∏ „Ç¢„Ç≥„Éº„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ„ÇÆ„Çø„Éº"
            - value: "mixed_ensemble"
              label: "üé™ „Éü„ÉÉ„ÇØ„Çπ„Éª„Ç¢„É≥„Çµ„É≥„Éñ„É´"
          default: "mixed_ensemble"
        
        - name: "audio_quality"
          label: "Èü≥ÈüøÂìÅË≥™"
          type: "select"
          required: true
          options:
            - value: "studio_master"
              label: "üéöÔ∏è „Çπ„Çø„Ç∏„Ç™„Éû„Çπ„Çø„Éº (ÊúÄÈ´òÂìÅË≥™)"
            - value: "high_fidelity"
              label: "üîä „Éè„Ç§„Éï„Ç°„Ç§ (È´òÂìÅË≥™)"
            - value: "standard"
              label: "üìª Ê®ôÊ∫ñÂìÅË≥™"
          default: "high_fidelity"
        
        - name: "stereo_width"
          label: "„Çπ„ÉÜ„É¨„Ç™ÂπÖ"
          type: "select"
          required: true
          options:
            - value: "wide_stereo"
              label: "üîä „ÉØ„Ç§„Éâ„Çπ„ÉÜ„É¨„Ç™ (Á©∫ÈñìÁöÑ)"
            - value: "standard_stereo"
              label: "üéß Ê®ôÊ∫ñ„Çπ„ÉÜ„É¨„Ç™"
            - value: "mono_focused"
              label: "üìª „É¢„Éé„É©„É´ÂØÑ„Çä (‰∏≠Â§ÆÈõÜ‰∏≠)"
          default: "standard_stereo"

# GitHub Actions inputsÂ§âÊèõ„Éû„ÉÉ„Éî„É≥„Ç∞
github_actions_inputs_mapping:
  inputs_conversion:
    textarea: "string"
    select: "choice"
    range: "number"
  
  generated_inputs_preview:
    music_concept:
      description: "Èü≥Ê•Ω„Ç≥„É≥„Çª„Éó„Éà„ÉªÁî®ÈÄî"
      required: true
      type: string
    music_genre:
      description: "Èü≥Ê•Ω„Ç∏„É£„É≥„É´"
      required: true
      type: choice
      options: ["ambient", "electronic", "classical", "jazz", "rock", "pop", "world", "experimental"]
      default: "ambient"

# ‰∫∫Èñì„ÅÆÁÑ°ÊÑèË≠òÊÄùËÄÉ„Éó„É≠„Çª„Çπ
human_process:
  - phase: "audio_concept_planning"
    description: "Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà‰ºÅÁîªÊÆµÈöéÔºà„Ç∏„É£„É≥„É´„Éª„É†„Éº„Éâ„ÉªÁî®ÈÄî„ÉªÊäÄË°ì‰ªïÊßòÔºâ"
  - phase: "musical_composition"
    description: "Ê•ΩÊõ≤ÊßãÊàêÊÆµÈöéÔºà„É°„É≠„Éá„Ç£„Éª„É™„Ç∫„É†„Éª„Éè„Éº„É¢„Éã„Éº„ÉªÊßãÈÄ†Ë®≠Ë®àÔºâ"
  - phase: "sound_design"
    description: "„Çµ„Ç¶„É≥„Éâ„Éá„Ç∂„Ç§„É≥ÊÆµÈöéÔºàÂäπÊûúÈü≥„ÉªÁí∞Â¢ÉÈü≥„ÉªÈü≥ÈüøÂäπÊûúÔºâ"
  - phase: "audio_production"
    description: "Èü≥Â£∞Âà∂‰ΩúÊÆµÈöéÔºàÈå≤Èü≥„ÉªÁîüÊàê„ÉªÁ∑®ÈõÜ„Éª„Éü„Ç≠„Ç∑„É≥„Ç∞Ôºâ"
  - phase: "quality_enhancement"
    description: "ÂìÅË≥™Âêë‰∏äÊÆµÈöéÔºà„Éû„Çπ„Çø„É™„É≥„Ç∞„ÉªÊúÄÈÅ©Âåñ„ÉªÂΩ¢ÂºèÂ§âÊèõÔºâ"
  - phase: "delivery_preparation"
    description: "ÈÖç‰ø°Ê∫ñÂÇôÊÆµÈöéÔºàÁî®ÈÄîÂà•ÊúÄÈÅ©Âåñ„ÉªÂìÅË≥™ÁÆ°ÁêÜ„ÉªÈÖç‰ø°Ê∫ñÂÇôÔºâ"

# GitHub Actions „Éé„Éº„ÉâË®≠Ë®à
github_actions_config:
  workflow_name: "Audio Music Creation Pipeline"
  on_triggers: ["workflow_dispatch", "issues"]
  permissions:
    contents: "write"
    issues: "write"
    actions: "read"
  artifacts_retention_days: 30
  max_parallel_jobs: 3

# Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
tasks:
  # === ‰∫ãÂâç„ÉÜ„Çπ„ÉàÊÆµÈöé ===
  - id: "audio-services-connectivity-test"
    name: "Èü≥Â£∞„ÉªÈü≥Ê•ΩÁîüÊàê„Çµ„Éº„Éì„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà"
    phase: "pre_validation"
    github_job: "connectivity-test"
    type: "validation"
    implementation: "mcp"
    duration_minutes: 3
    dependencies: []
    parallel_group: null
    
    github_steps:
      - name: "Test audio and music generation services"
        shell: "bash"
        script: |
          echo "üéµ Testing audio and music generation services..."
          
          mkdir -p .logs/connectivity-tests
          
          # Èü≥Ê•ΩÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàT2MÔºâ
          echo "Testing music generation service..."
          if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "test background music, 10 seconds" --duration "10" > .logs/connectivity-tests/music-test.log 2>&1; then
            MUSIC_GEN_STATUS="success"
            echo "‚úÖ Music Generation (Lyria): Available"
          else
            MUSIC_GEN_STATUS="failed"
            echo "‚ùå Music Generation: Failed"
          fi
          
          # Video-to-Audio „Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàV2AÔºâ
          echo "Testing video-to-audio service..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "/tmp/test.mp4" --audio-style "test audio" > .logs/connectivity-tests/v2a-test.log 2>&1; then
            V2A_STATUS="success"
            echo "‚úÖ Video-to-Audio (ThinkSound): Available"
          else
            V2A_STATUS="failed"
            echo "‚ö†Ô∏è Video-to-Audio: Not available"
          fi
          
          # Claude Code AI „ÉÜ„Çπ„ÉàÔºà‰ΩúË©û„ÉªÊ•ΩÁêÜÂàÜÊûêÁî®Ôºâ
          echo "Testing Claude Code for music composition..."
          if timeout 30 claude-code --prompt "Test: Create a simple chord progression in C major and return 'MUSIC_AI_TEST_SUCCESS' if working." > .logs/connectivity-tests/music-ai-test.log 2>&1; then
            if grep -q "MUSIC_AI_TEST_SUCCESS" .logs/connectivity-tests/music-ai-test.log; then
              MUSIC_AI_STATUS="success"
              echo "‚úÖ Music AI Analysis: Available"
            else
              MUSIC_AI_STATUS="partial"
              echo "‚ö†Ô∏è Music AI Analysis: Partial response"
            fi
          else
            MUSIC_AI_STATUS="failed"
            echo "‚ùå Music AI Analysis: Failed"
          fi
          
          # Â§ñÈÉ®Èü≥Â£∞API „ÉÜ„Çπ„Éà
          echo "Testing external audio APIs..."
          if [ -n "${{ secrets.ELEVENLABS_API_KEY }}" ]; then
            if timeout 30 curl -s -H "xi-api-key: ${{ secrets.ELEVENLABS_API_KEY }}" "https://api.elevenlabs.io/v1/voices" > .logs/connectivity-tests/tts-test.log 2>&1; then
              TTS_API_STATUS="success"
              echo "‚úÖ Text-to-Speech API: Available"
            else
              TTS_API_STATUS="failed"
              echo "‚ö†Ô∏è Text-to-Speech API: Failed"
            fi
          else
            TTS_API_STATUS="not_configured"
            echo "‚ÑπÔ∏è Text-to-Speech API: Not configured"
          fi
          
          # Èü≥Â£∞Âá¶ÁêÜ„ÉÑ„Éº„É´„ÉÜ„Çπ„Éà
          echo "Testing audio processing tools..."
          if command -v ffmpeg &> /dev/null; then
            if timeout 10 ffmpeg -version > .logs/connectivity-tests/ffmpeg-test.log 2>&1; then
              AUDIO_TOOLS_STATUS="success"
              echo "‚úÖ Audio Processing Tools: Available"
            else
              AUDIO_TOOLS_STATUS="limited"
              echo "‚ö†Ô∏è Audio Tools: Limited functionality"
            fi
          else
            AUDIO_TOOLS_STATUS="not_available"
            echo "‚ÑπÔ∏è Audio Processing Tools: Not installed"
          fi
          
          # Èü≥ÈüøÂà∂‰ΩúËÉΩÂäõ„ÅÆË©ï‰æ°
          BASIC_AUDIO_CAPABILITY="none"
          ADVANCED_AUDIO_CAPABILITY="none"
          
          # Âü∫Êú¨Ê©üËÉΩÔºàÈü≥Ê•ΩÁîüÊàê„Åæ„Åü„ÅØAIÂàÜÊûêÔºâ
          if [ "$MUSIC_GEN_STATUS" = "success" ] || [ "$MUSIC_AI_STATUS" = "success" ]; then
            BASIC_AUDIO_CAPABILITY="available"
          fi
          
          # È´òÂ∫¶Ê©üËÉΩÔºàË§áÊï∞„Çµ„Éº„Éì„ÇπÁµÑ„ÅøÂêà„Çè„ÅõÔºâ
          if [ "$MUSIC_GEN_STATUS" = "success" ] && [ "$V2A_STATUS" = "success" ] && [ "$AUDIO_TOOLS_STATUS" = "success" ]; then
            ADVANCED_AUDIO_CAPABILITY="available"
          fi
          
          # „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíJSON‰øùÂ≠ò
          cat > .logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "audio_services": {
              "music_generation": "$MUSIC_GEN_STATUS",
              "video_to_audio": "$V2A_STATUS",
              "music_ai_analysis": "$MUSIC_AI_STATUS",
              "text_to_speech_api": "$TTS_API_STATUS",
              "audio_processing_tools": "$AUDIO_TOOLS_STATUS"
            },
            "capability_assessment": {
              "basic_audio_capability": "$BASIC_AUDIO_CAPABILITY",
              "advanced_audio_capability": "$ADVANCED_AUDIO_CAPABILITY",
              "workflow_can_proceed": $([ "$BASIC_AUDIO_CAPABILITY" = "available" ] && echo "true" || echo "false"),
              "professional_production": $([ "$ADVANCED_AUDIO_CAPABILITY" = "available" ] && echo "true" || echo "false")
            },
            "service_priorities": {
              "primary_music_service": "$([ "$MUSIC_GEN_STATUS" = "success" ] && echo "t2m-google-lyria" || echo "none")",
              "audio_enhancement": "$([ "$V2A_STATUS" = "success" ] && echo "v2a-fal-thinksound" || echo "none")",
              "composition_ai": "$([ "$MUSIC_AI_STATUS" = "success" ] && echo "claude-code" || echo "none")"
            }
          }
          EOF
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å´ÁµêÊûú„ÇíË®≠ÂÆö
          echo "BASIC_AUDIO_CAPABILITY=$BASIC_AUDIO_CAPABILITY" >> $GITHUB_ENV
          echo "ADVANCED_AUDIO_CAPABILITY=$ADVANCED_AUDIO_CAPABILITY" >> $GITHUB_ENV
          echo "MUSIC_GEN_AVAILABLE=$([ "$MUSIC_GEN_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "V2A_AVAILABLE=$([ "$V2A_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "MUSIC_AI_AVAILABLE=$([ "$MUSIC_AI_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          echo "üéµ Audio services connectivity tests completed"
          echo "Basic capability: $BASIC_AUDIO_CAPABILITY"
          echo "Advanced capability: $ADVANCED_AUDIO_CAPABILITY"
          
    validation:
      criteria:
        - "Âü∫Êú¨ÁöÑ„Å™Èü≥Â£∞Âà∂‰ΩúÊ©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ"
        - "„ÉÜ„Çπ„ÉàÁµêÊûú„ÅåJSONÂΩ¢Âºè„Åß‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".logs/connectivity-tests/test-results.json" ]; then
          echo "‚ùå VALIDATION FAILED: Test results missing"
          exit 1
        fi
        
        WORKFLOW_CAN_PROCEED=$(jq -r '.capability_assessment.workflow_can_proceed' .logs/connectivity-tests/test-results.json)
        if [ "$WORKFLOW_CAN_PROCEED" = "true" ]; then
          echo "‚úÖ Validation passed: Audio production services ready"
        else
          echo "‚ùå VALIDATION FAILED: Critical audio services unavailable"
          exit 1
        fi

  # === Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà‰ºÅÁîªÊÆµÈöé ===
  - id: "audio-concept-development"
    name: "Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà„Éª‰ªïÊßòË®≠Ë®à"
    phase: "audio_concept_planning"
    github_job: "concept-development"
    type: "planning"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["audio-services-connectivity-test"]
    parallel_group: null
    
    github_steps:
      - name: "Develop audio concept and specifications"
        shell: "bash"
        script: |
          echo "üéº Developing audio concept and specifications..."
          
          mkdir -p .logs/audio-concept
          
          # ÂÖ•Âäõ„Åã„Çâ„Ç™„Éº„Éá„Ç£„Ç™Ë¶Å‰ª∂„ÇíÊäΩÂá∫
          AUDIO_PURPOSE="${{ github.event.inputs.audio_purpose || github.event.issue.title || 'Background Music' }}"
          MUSIC_GENRE="${{ github.event.inputs.music_genre || 'ambient electronic' }}"
          TARGET_MOOD="${{ github.event.inputs.target_mood || 'calm and focused' }}"
          DURATION="${{ github.event.inputs.duration || '2 minutes' }}"
          USE_CASE="${{ github.event.inputs.use_case || 'background music for video content' }}"
          TECHNICAL_QUALITY="${{ github.event.inputs.technical_quality || 'professional' }}"
          
          echo "Audio purpose: $AUDIO_PURPOSE"
          echo "Music genre: $MUSIC_GENRE"
          echo "Target mood: $TARGET_MOOD"
          echo "Duration: $DURATION"
          echo "Use case: $USE_CASE"
          echo "Quality level: $TECHNICAL_QUALITY"
          
          # Claude Code „ÅßÈü≥Èüø„Ç≥„É≥„Çª„Éó„ÉàË®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂ∞ÇÈñÄÁöÑ„Å™Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà„Å®ÊäÄË°ì‰ªïÊßò„ÇíË®≠Ë®à„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Âà∂‰ΩúÁõÆÁöÑ: $AUDIO_PURPOSE
          Èü≥Ê•Ω„Ç∏„É£„É≥„É´: $MUSIC_GENRE
          „Çø„Éº„Ç≤„ÉÉ„ÉàÊÑüÊÉÖ: $TARGET_MOOD
          ÊôÇÈñì: $DURATION
          Áî®ÈÄî: $USE_CASE
          ÂìÅË≥™„É¨„Éô„É´: $TECHNICAL_QUALITY
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"audio_concept\": {
              \"primary_purpose\": \"‰∏ªË¶ÅÁõÆÁöÑ\",
              \"emotional_target\": \"Áãô„ÅÜÊÑüÊÉÖ„ÉªÂç∞Ë±°\",
              \"genre_classification\": \"Ë©≥Á¥∞„Ç∏„É£„É≥„É´ÂàÜÈ°û\",
              \"stylistic_influences\": [\"„Çπ„Çø„Ç§„É´ÁöÑÂΩ±Èüø„ÉªÂèÇËÄÉ\"],
              \"unique_characteristics\": [\"Áã¨Ëá™ÁâπÂæ¥„ÉªÂÄãÊÄß\"]
            },
            \"musical_specifications\": {
              \"tempo_bpm\": \"„ÉÜ„É≥„ÉùÔºàBPMÔºâ\",
              \"key_signature\": \"Ë™øÊÄß\",
              \"time_signature\": \"ÊãçÂ≠ê\",
              \"harmonic_structure\": \"ÂíåÂ£∞ÊßãÈÄ†\",
              \"melodic_characteristics\": \"„É°„É≠„Éá„Ç£ÁâπÂæ¥\",
              \"rhythmic_patterns\": \"„É™„Ç∫„É†„Éë„Çø„Éº„É≥\",
              \"dynamic_range\": \"„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„É¨„É≥„Ç∏\"
            },
            \"instrumentation\": {
              \"primary_instruments\": [\"‰∏ªË¶ÅÊ•ΩÂô®„ÉªÈü≥Ëâ≤\"],
              \"supporting_elements\": [\"„Çµ„Éù„Éº„ÉàË¶ÅÁ¥†\"],
              \"texture_layers\": [\"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„ÉºÂ±§\"],
              \"special_effects\": [\"ÁâπÊÆäÂäπÊûú„ÉªÂá¶ÁêÜ\"],
              \"ambient_elements\": [\"Áí∞Â¢ÉÈü≥„Éª„Ç¢„É≥„Éì„Ç®„É≥„ÉàË¶ÅÁ¥†\"]
            },
            \"technical_requirements\": {
              \"sample_rate\": \"„Çµ„É≥„Éó„É™„É≥„Ç∞„É¨„Éº„Éà\",
              \"bit_depth\": \"„Éì„ÉÉ„ÉàÊ∑±Â∫¶\",
              \"file_format\": \"„Éï„Ç°„Ç§„É´ÂΩ¢Âºè\",
              \"dynamic_range_target\": \"„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„É¨„É≥„Ç∏ÁõÆÊ®ô\",
              \"frequency_response\": \"Âë®Ê≥¢Êï∞ÁâπÊÄß\",
              \"loudness_standard\": \"„É©„Ç¶„Éâ„Éç„ÇπÂü∫Ê∫ñ\"
            },
            \"structure_design\": {
              \"intro_duration\": \"„Ç§„É≥„Éà„É≠ÊôÇÈñì\",
              \"main_sections\": [\"„É°„Ç§„É≥„Çª„ÇØ„Ç∑„Éß„É≥ÊßãÊàê\"],
              \"transition_points\": [\"Ëª¢Êèõ„Éù„Ç§„É≥„Éà\"],
              \"climax_placement\": \"„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„ÇπÈÖçÁΩÆ\",
              \"outro_approach\": \"„Ç¢„Ç¶„Éà„É≠ÊâãÊ≥ï\",
              \"loop_compatibility\": \"„É´„Éº„ÉóÂØæÂøú\"
            },
            \"production_approach\": {
              \"generation_strategy\": \"ÁîüÊàêÊà¶Áï•\",
              \"layering_plan\": \"„É¨„Ç§„É§„É™„É≥„Ç∞Ë®àÁîª\",
              \"mixing_philosophy\": \"„Éü„Ç≠„Ç∑„É≥„Ç∞ÊñπÈáù\",
              \"mastering_goals\": \"„Éû„Çπ„Çø„É™„É≥„Ç∞ÁõÆÊ®ô\",
              \"quality_benchmarks\": [\"ÂìÅË≥™„Éô„É≥„ÉÅ„Éû„Éº„ÇØ\"]
            },
            \"use_case_optimization\": {
              \"playback_environments\": [\"ÂÜçÁîüÁí∞Â¢É\"],
              \"listener_attention_level\": \"ËÅ¥ÂèñÈõÜ‰∏≠Â∫¶\",
              \"content_integration\": \"„Ç≥„É≥„ÉÜ„É≥„ÉÑÁµ±ÂêàÊñπÈáù\",
              \"accessibility_considerations\": [\"„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÈÖçÊÖÆ\"],
              \"platform_requirements\": [\"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ë¶Å‰ª∂\"]
            }
          }" > .logs/audio-concept/audio-concept.json
          
          AUDIO_CONCEPT=$(cat .logs/audio-concept/audio-concept.json)
          echo "AUDIO_CONCEPT_FILE=.logs/audio-concept/audio-concept.json" >> $GITHUB_ENV
          
          # ‰∏ªË¶Å„Éë„É©„É°„Éº„Çø„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          TARGET_DURATION=$(echo "$AUDIO_CONCEPT" | jq -r '.structure_design.intro_duration // "2 minutes"' | sed 's/[^0-9]//g')
          TEMPO_BPM=$(echo "$AUDIO_CONCEPT" | jq -r '.musical_specifications.tempo_bpm' | sed 's/[^0-9]//g')
          
          echo "TARGET_DURATION_SECONDS=${TARGET_DURATION:-120}" >> $GITHUB_ENV
          echo "TEMPO_BPM=${TEMPO_BPM:-120}" >> $GITHUB_ENV
          
          echo "üéº Audio concept development completed"
          echo "Target duration: ${TARGET_DURATION:-120} seconds"
          echo "Tempo: ${TEMPO_BPM:-120} BPM"

  - id: "musical-composition-design"
    name: "Ê•ΩÊõ≤ÊßãÊàê„ÉªÊ•ΩÁêÜË®≠Ë®à"
    phase: "musical_composition"
    github_job: "composition-design"
    type: "creation"
    implementation: "ai"
    duration_minutes: 5
    dependencies: ["audio-concept-development"]
    parallel_group: null
    
    github_steps:
      - name: "Design musical composition and theory"
        shell: "bash"
        script: |
          echo "üéπ Designing musical composition and theory..."
          
          mkdir -p .logs/musical-composition
          
          AUDIO_CONCEPT=$(cat .logs/audio-concept/audio-concept.json)
          
          # Ë©≥Á¥∞Ê•ΩÊõ≤ÊßãÊàêË®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆÈü≥Èüø„Ç≥„É≥„Çª„Éó„Éà„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅË©≥Á¥∞„Å™Ê•ΩÊõ≤ÊßãÊàê„Å®Ê•ΩÁêÜË®≠Ë®à„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà: $AUDIO_CONCEPT
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"composition_structure\": {
              \"total_duration_seconds\": $TARGET_DURATION_SECONDS,
              \"section_breakdown\": [
                {
                  \"section_name\": \"„Çª„ÇØ„Ç∑„Éß„É≥Âêç\",
                  \"start_time\": \"ÈñãÂßãÊôÇÈñìÔºàÁßíÔºâ\",
                  \"duration\": \"„Çª„ÇØ„Ç∑„Éß„É≥Èï∑ÔºàÁßíÔºâ\",
                  \"musical_function\": \"Èü≥Ê•ΩÁöÑÊ©üËÉΩ\",
                  \"energy_level\": \"„Ç®„Éç„É´„ÇÆ„Éº„É¨„Éô„É´Ôºà1-10Ôºâ\",
                  \"key_elements\": [\"ÈáçË¶ÅË¶ÅÁ¥†\"],
                  \"transition_type\": \"Ê¨°„Å∏„ÅÆÁßªË°åÊñπÊ≥ï\"
                }
              ],
              \"overall_arc\": \"ÂÖ®‰ΩìÁöÑ„Å™Ëµ∑ÊâøËª¢Áµê\"
            },
            \"harmonic_progression\": {
              \"primary_key\": \"‰∏ªË™ø\",
              \"chord_progressions\": [
                {
                  \"section\": \"ÂØæË±°„Çª„ÇØ„Ç∑„Éß„É≥\",
                  \"chords\": [\"„Ç≥„Éº„ÉâÈÄ≤Ë°å\"],
                  \"harmonic_rhythm\": \"ÂíåÂ£∞„É™„Ç∫„É†\",
                  \"voice_leading\": \"Â£∞ÈÉ®ÈÄ≤Ë°å\"
                }
              ],
              \"modulations\": [\"Ëª¢Ë™ø„Éù„Ç§„É≥„Éà\"],
              \"harmonic_tension_points\": [\"ÂíåÂ£∞ÁöÑÁ∑äÂºµ„Éù„Ç§„É≥„Éà\"]
            },
            \"melodic_design\": {
              \"main_melody\": {
                \"contour\": \"„É°„É≠„Éá„Ç£„Éº„É©„Ç§„É≥Ê¶ÇË¶Å\",
                \"range\": \"Èü≥Âüü\",
                \"motivic_content\": \"ÂãïÊ©üÁöÑÂÜÖÂÆπ\",
                \"phrasing\": \"„Éï„É¨„Éº„Ç∏„É≥„Ç∞\"
              },
              \"counter_melodies\": [\"ÂØæÊóãÂæã\"],
              \"thematic_development\": \"‰∏ªÈ°åÁô∫Â±ï\",
              \"melodic_instruments\": [\"„É°„É≠„Éá„Ç£ÊãÖÂΩìÊ•ΩÂô®\"]
            },
            \"rhythmic_framework\": {
              \"base_tempo\": $TEMPO_BPM,
              \"rhythmic_patterns\": [
                {
                  \"instrument_group\": \"Ê•ΩÂô®„Ç∞„É´„Éº„Éó\",
                  \"pattern_description\": \"„É™„Ç∫„É†„Éë„Çø„Éº„É≥Ë®òËø∞\",
                  \"complexity_level\": \"Ë§áÈõëÂ∫¶\",
                  \"interaction_with_others\": \"‰ªñ„Éë„Éº„Éà„Å®„ÅÆÈñ¢‰øÇ\"
                }
              ],
              \"polyrhythmic_elements\": [\"„Éù„É™„É™„Ç∫„É†Ë¶ÅÁ¥†\"],
              \"tempo_variations\": [\"„ÉÜ„É≥„ÉùÂ§âÂåñ\"]
            },
            \"orchestration_plan\": {
              \"instrument_layers\": [
                {
                  \"layer_name\": \"„É¨„Ç§„É§„ÉºÂêç\",
                  \"instruments\": [\"‰ΩøÁî®Ê•ΩÂô®„ÉªÈü≥Ëâ≤\"],
                  \"register\": \"Èü≥Âüü\",
                  \"dynamic_role\": \"„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØÂΩπÂâ≤\",
                  \"entry_timing\": \"ÁôªÂ†¥„Çø„Ç§„Éü„É≥„Ç∞\",
                  \"articulation\": \"„Ç¢„Éº„ÉÜ„Ç£„Ç≠„É•„É¨„Éº„Ç∑„Éß„É≥\"
                }
              ],
              \"texture_evolution\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Éº„ÅÆÁô∫Â±ï\",
              \"climax_orchestration\": \"„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„ÇπÊôÇ„ÅÆÁ∑®Êàê\",
              \"minimalist_sections\": \"„Éü„Éã„Éû„É´ÊßãÊàêÁÆáÊâÄ\"
            },
            \"production_prompts\": {
              \"primary_generation_prompt\": \"„É°„Ç§„É≥ÁîüÊàêÁî®Ë©≥Á¥∞„Éó„É≠„É≥„Éó„Éà\",
              \"section_specific_prompts\": [
                {
                  \"section\": \"„Çª„ÇØ„Ç∑„Éß„É≥Âêç\",
                  \"prompt\": \"„Çª„ÇØ„Ç∑„Éß„É≥Âà•ÁîüÊàê„Éó„É≠„É≥„Éó„Éà\",
                  \"emphasis_points\": [\"Âº∑Ë™ø„Éù„Ç§„É≥„Éà\"]
                }
              ],
              \"style_descriptors\": [\"„Çπ„Çø„Ç§„É´Ë®òËø∞Â≠ê\"],
              \"technical_parameters\": [\"ÊäÄË°ìÁöÑ„Éë„É©„É°„Éº„Çø\"]
            },
            \"quality_criteria\": {
              \"musical_coherence\": \"Ê•ΩÊõ≤ÁöÑ‰∏ÄË≤´ÊÄßÂü∫Ê∫ñ\",
              \"emotional_impact\": \"ÊÑüÊÉÖÁöÑ„Ç§„É≥„Éë„ÇØ„ÉàÂü∫Ê∫ñ\",
              \"technical_excellence\": \"ÊäÄË°ìÁöÑÂìÅË≥™Âü∫Ê∫ñ\",
              \"commercial_viability\": \"ÂïÜÁî®ÂèØËÉΩÊÄßÂü∫Ê∫ñ\",
              \"innovation_elements\": [\"Èù©Êñ∞ÁöÑË¶ÅÁ¥†\"]
            }
          }" > .logs/musical-composition/composition-design.json
          
          COMPOSITION_DESIGN=$(cat .logs/musical-composition/composition-design.json)
          echo "COMPOSITION_DESIGN_FILE=.logs/musical-composition/composition-design.json" >> $GITHUB_ENV
          
          # ‰∏ªË¶ÅÁîüÊàê„Éó„É≠„É≥„Éó„Éà„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          PRIMARY_PROMPT=$(echo "$COMPOSITION_DESIGN" | jq -r '.production_prompts.primary_generation_prompt')
          SECTION_COUNT=$(echo "$COMPOSITION_DESIGN" | jq '.composition_structure.section_breakdown | length')
          
          echo "PRIMARY_GENERATION_PROMPT=$PRIMARY_PROMPT" >> $GITHUB_ENV
          echo "COMPOSITION_SECTIONS=$SECTION_COUNT" >> $GITHUB_ENV
          
          echo "üéπ Musical composition design completed"
          echo "Composition sections: $SECTION_COUNT"

  # === „Çµ„Ç¶„É≥„Éâ„Éá„Ç∂„Ç§„É≥ÊÆµÈöé ===
  - id: "sound-effects-planning"
    name: "ÂäπÊûúÈü≥„ÉªÁí∞Â¢ÉÈü≥Ë®≠Ë®à"
    phase: "sound_design"
    github_job: "sound-planning"
    type: "planning"
    implementation: "ai"
    duration_minutes: 3
    dependencies: ["musical-composition-design"]
    parallel_group: "sound_design_parallel"
    
    github_steps:
      - name: "Plan sound effects and ambient sounds"
        shell: "bash"
        script: |
          echo "üîä Planning sound effects and ambient audio..."
          
          mkdir -p .logs/sound-design
          
          AUDIO_CONCEPT=$(cat .logs/audio-concept/audio-concept.json)
          COMPOSITION_DESIGN=$(cat .logs/musical-composition/composition-design.json)
          
          # „Çµ„Ç¶„É≥„Éâ„Ç®„Éï„Çß„ÇØ„Éà„ÉªÁí∞Â¢ÉÈü≥Ë®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆÊ•ΩÊõ≤ÊßãÊàê„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂäπÊûúÈü≥„Å®Áí∞Â¢ÉÈü≥„ÅÆË©≥Á¥∞Ë®≠Ë®à„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà: $AUDIO_CONCEPT
          Ê•ΩÊõ≤ÊßãÊàê: $COMPOSITION_DESIGN
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"sound_design_concept\": {
              \"overall_sound_palette\": \"ÂÖ®‰ΩìÁöÑÈü≥Èüø„Éë„É¨„ÉÉ„Éà\",
              \"ambient_atmosphere\": \"Áí∞Â¢ÉÁöÑÈõ∞Âõ≤Ê∞ó\",
              \"sound_narrative\": \"Èü≥Èüø„Éä„É©„ÉÜ„Ç£„Éñ\",
              \"immersion_level\": \"Ê≤°ÂÖ•ÊÑü„É¨„Éô„É´\"
            },
            \"ambient_elements\": [
              {
                \"element_name\": \"Áí∞Â¢ÉÈü≥Âêç\",
                \"sound_description\": \"Èü≥„ÅÆË©≥Á¥∞Ë™¨Êòé\",
                \"frequency_range\": \"Âë®Ê≥¢Êï∞Â∏ØÂüü\",
                \"dynamic_behavior\": \"„ÉÄ„Ç§„Éä„Éü„ÇØ„ÇπÊåôÂãï\",
                \"spatial_placement\": \"Á©∫ÈñìÈÖçÁΩÆ\",
                \"duration_pattern\": \"ÊåÅÁ∂ö„Éë„Çø„Éº„É≥\",
                \"interaction_with_music\": \"Ê•ΩÊõ≤„Å®„ÅÆÁõ∏‰∫í‰ΩúÁî®\"
              }
            ],
            \"sound_effects\": [
              {
                \"effect_name\": \"ÂäπÊûúÈü≥Âêç\",
                \"trigger_timing\": \"Áô∫Áîü„Çø„Ç§„Éü„É≥„Ç∞\",
                \"sonic_characteristics\": \"Èü≥ÈüøÁâπÊÄß\",
                \"processing_needs\": \"Âá¶ÁêÜË¶Å‰ª∂\",
                \"layering_potential\": \"„É¨„Ç§„É§„É™„É≥„Ç∞ÂèØËÉΩÊÄß\",
                \"emotional_function\": \"ÊÑüÊÉÖÁöÑÊ©üËÉΩ\"
              }
            ],
            \"textural_layers\": [
              {
                \"layer_name\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„ÉºÂ±§Âêç\",
                \"generation_method\": \"ÁîüÊàêÊñπÊ≥ï\",
                \"processing_chain\": \"Âá¶ÁêÜ„ÉÅ„Çß„Éº„É≥\",
                \"mix_position\": \"„Éü„ÉÉ„ÇØ„ÇπÂÜÖ‰ΩçÁΩÆ\",
                \"evolution_pattern\": \"Â§âÂåñ„Éë„Çø„Éº„É≥\"
              }
            ],
            \"production_requirements\": {
              \"source_material_needs\": [\"„ÇΩ„Éº„ÇπÁ¥†ÊùêË¶Å‰ª∂\"],
              \"processing_tools\": [\"ÂøÖË¶ÅÂá¶ÁêÜ„ÉÑ„Éº„É´\"],
              \"quality_standards\": \"ÂìÅË≥™Âü∫Ê∫ñ\",
              \"integration_approach\": \"Ê•ΩÊõ≤Áµ±ÂêàÊñπÈáù\"
            },
            \"generation_prompts\": {
              \"ambient_prompts\": [\"Áí∞Â¢ÉÈü≥ÁîüÊàê„Éó„É≠„É≥„Éó„Éà\"],
              \"effect_prompts\": [\"ÂäπÊûúÈü≥ÁîüÊàê„Éó„É≠„É≥„Éó„Éà\"],
              \"texture_prompts\": [\"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„ÉºÁîüÊàê„Éó„É≠„É≥„Éó„Éà\"]
            }
          }" > .logs/sound-design/sound-effects-plan.json
          
          SOUND_EFFECTS_PLAN=$(cat .logs/sound-design/sound-effects-plan.json)
          echo "SOUND_EFFECTS_PLAN_FILE=.logs/sound-design/sound-effects-plan.json" >> $GITHUB_ENV
          
          # ÂäπÊûúÈü≥Êï∞„Å®„Ç¢„É≥„Éì„Ç®„É≥„ÉàË¶ÅÁ¥†Êï∞„ÇíÁÆóÂá∫
          EFFECTS_COUNT=$(echo "$SOUND_EFFECTS_PLAN" | jq '.sound_effects | length')
          AMBIENT_COUNT=$(echo "$SOUND_EFFECTS_PLAN" | jq '.ambient_elements | length')
          
          echo "SOUND_EFFECTS_COUNT=$EFFECTS_COUNT" >> $GITHUB_ENV
          echo "AMBIENT_ELEMENTS_COUNT=$AMBIENT_COUNT" >> $GITHUB_ENV
          
          echo "üîä Sound effects planning completed"
          echo "Sound effects: $EFFECTS_COUNT, Ambient elements: $AMBIENT_COUNT"

  # === Èü≥Â£∞Âà∂‰ΩúÊÆµÈöé ===
  - id: "primary-music-generation"
    name: "„É°„Ç§„É≥Ê•ΩÊõ≤ÁîüÊàê"
    phase: "audio_production"
    github_job: "music-generation"
    type: "generation"
    implementation: "mcp"
    tool: "music-generation"
    duration_minutes: 8
    dependencies: ["sound-effects-planning"]
    parallel_group: "audio_production_parallel"
    
    github_steps:
      - name: "Generate primary music composition"
        shell: "bash"
        script: |
          echo "üéº Generating primary music composition..."
          
          mkdir -p .logs/audio-production/music
          
          COMPOSITION_DESIGN=$(cat .logs/musical-composition/composition-design.json)
          
          if [ "$MUSIC_GEN_AVAILABLE" = "true" ]; then
            echo "Music generation service available - creating composition..."
            
            # „É°„Ç§„É≥Ê•ΩÊõ≤„ÅÆÁîüÊàê
            echo "Generating main composition..."
            MAIN_PROMPT="$PRIMARY_GENERATION_PROMPT"
            DURATION_SECONDS="$TARGET_DURATION_SECONDS"
            
            echo "Using prompt: $MAIN_PROMPT"
            echo "Duration: $DURATION_SECONDS seconds"
            
            if timeout 180 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$MAIN_PROMPT" --duration "$DURATION_SECONDS" > .logs/audio-production/music/main-composition.json 2>&1; then
              echo "‚úÖ Main composition generated successfully"
              MAIN_GENERATION_STATUS="success"
            else
              echo "‚ùå Main composition generation failed"
              MAIN_GENERATION_STATUS="failed"
            fi
            
            # „Çª„ÇØ„Ç∑„Éß„É≥Âà•Ê•ΩÊõ≤ÁîüÊàêÔºàË©≥Á¥∞„Ç≥„É≥„Éà„É≠„Éº„É´Áî®Ôºâ
            echo "Generating section-specific compositions..."
            
            SECTION_PROMPTS=$(echo "$COMPOSITION_DESIGN" | jq -c '.production_prompts.section_specific_prompts[]')
            SECTION_INDEX=0
            
            while IFS= read -r section_data; do
              SECTION_NAME=$(echo "$section_data" | jq -r '.section')
              SECTION_PROMPT=$(echo "$section_data" | jq -r '.prompt')
              
              echo "Generating section: $SECTION_NAME"
              
              # „Çª„ÇØ„Ç∑„Éß„É≥ÊôÇÈñì„ÇíÁÆóÂá∫ÔºàÁ∞°ÊòìÔºâ
              SECTION_DURATION=$((TARGET_DURATION_SECONDS / COMPOSITION_SECTIONS))
              
              if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$SECTION_PROMPT" --duration "$SECTION_DURATION" > .logs/audio-production/music/section-${SECTION_INDEX}-${SECTION_NAME}.json 2>&1; then
                echo "‚úÖ Section $SECTION_NAME generated"
              else
                echo "‚ö†Ô∏è Section $SECTION_NAME generation failed"
              fi
              
              SECTION_INDEX=$((SECTION_INDEX + 1))
            done <<< "$SECTION_PROMPTS"
            
            # Ê•ΩÂô®Âà•„É¨„Ç§„É§„ÉºÁîüÊàêÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
            echo "Generating instrumental layers..."
            
            INSTRUMENT_LAYERS=$(echo "$COMPOSITION_DESIGN" | jq -c '.orchestration_plan.instrument_layers[]')
            LAYER_INDEX=0
            
            while IFS= read -r layer_data; do
              LAYER_NAME=$(echo "$layer_data" | jq -r '.layer_name')
              INSTRUMENTS=$(echo "$layer_data" | jq -r '.instruments | join(", ")')
              DYNAMIC_ROLE=$(echo "$layer_data" | jq -r '.dynamic_role')
              
              echo "Generating layer: $LAYER_NAME"
              
              LAYER_PROMPT="$INSTRUMENTS layer for $DYNAMIC_ROLE, ${TARGET_DURATION_SECONDS} seconds, fits the main composition style"
              
              if timeout 100 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$LAYER_PROMPT" --duration "$TARGET_DURATION_SECONDS" > .logs/audio-production/music/layer-${LAYER_INDEX}-${LAYER_NAME}.json 2>&1; then
                echo "‚úÖ Layer $LAYER_NAME generated"
              else
                echo "‚ö†Ô∏è Layer $LAYER_NAME generation failed"
              fi
              
              LAYER_INDEX=$((LAYER_INDEX + 1))
            done <<< "$INSTRUMENT_LAYERS"
            
          else
            echo "‚ö†Ô∏è Music generation service not available"
            MAIN_GENERATION_STATUS="service_unavailable"
            
            # ‰ª£ÊõøÊ°à„ÅÆÊèêÁ§∫
            cat > .logs/audio-production/music/generation-alternatives.json << EOF
            {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "music_service_status": "unavailable",
              "alternative_approaches": [
                "Use external music generation services",
                "Employ royalty-free music libraries",
                "Create MIDI compositions for external rendering",
                "Use AI music composition software locally",
                "Collaborate with human composers"
              ],
              "composition_specifications": $(cat .logs/musical-composition/composition-design.json | jq '.production_prompts'),
              "recommended_next_steps": [
                "Export composition specifications for external use",
                "Create detailed production notes for human musicians",
                "Identify suitable royalty-free alternatives"
              ]
            }
            EOF
          fi
          
          # ÁîüÊàêÁµêÊûú„ÅÆÁµ±Ë®à
          GENERATED_MUSIC_COUNT=$(ls .logs/audio-production/music/*.json 2>/dev/null | wc -l)
          
          # Èü≥Ê•ΩÁîüÊàê„É≠„Ç∞
          cat > .logs/audio-production/music/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "music_generation_summary": {
              "main_composition_status": "$MAIN_GENERATION_STATUS",
              "total_music_files_generated": $GENERATED_MUSIC_COUNT,
              "target_duration_seconds": $TARGET_DURATION_SECONDS,
              "composition_sections_planned": $COMPOSITION_SECTIONS,
              "generation_service_used": "$([ "$MUSIC_GEN_AVAILABLE" = "true" ] && echo "t2m-google-lyria" || echo "none")"
            },
            "generated_assets": [$(ls .logs/audio-production/music/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "MUSIC_GENERATION_STATUS=$MAIN_GENERATION_STATUS" >> $GITHUB_ENV
          echo "GENERATED_MUSIC_COUNT=$GENERATED_MUSIC_COUNT" >> $GITHUB_ENV
          
          echo "üéº Primary music generation completed: $GENERATED_MUSIC_COUNT files"

  - id: "ambient-sound-creation"
    name: "Áí∞Â¢ÉÈü≥„ÉªÂäπÊûúÈü≥Âà∂‰Ωú"
    phase: "audio_production"
    github_job: "ambient-creation"
    type: "generation"
    implementation: "mcp"
    tool: "audio-effects"
    duration_minutes: 6
    dependencies: ["primary-music-generation"]
    parallel_group: "audio_production_parallel"
    
    github_steps:
      - name: "Create ambient sounds and effects"
        shell: "bash"
        script: |
          echo "üåä Creating ambient sounds and effects..."
          
          mkdir -p .logs/audio-production/ambient
          
          SOUND_EFFECTS_PLAN=$(cat .logs/sound-design/sound-effects-plan.json)
          MUSIC_GENERATION_LOG=$(cat .logs/audio-production/music/generation-log.json)
          
          # V2AÔºàVideo-to-AudioÔºâ„Çµ„Éº„Éì„Çπ„Çí‰ΩøÁî®„Åó„ÅüÁí∞Â¢ÉÈü≥ÁîüÊàê
          if [ "$V2A_AVAILABLE" = "true" ]; then
            echo "V2A service available - generating ambient audio..."
            
            # Èü≥Ê•Ω„Éï„Ç°„Ç§„É´„Åã„ÇâÁí∞Â¢ÉÈü≥„ÇíÁîüÊàêÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
            MAIN_MUSIC_FILE=$(ls .logs/audio-production/music/main-composition.json 2>/dev/null | head -1)
            
            if [ -n "$MAIN_MUSIC_FILE" ]; then
              MUSIC_PATH=$(jq -r '.audio_url // .file_path // "none"' "$MAIN_MUSIC_FILE" 2>/dev/null)
              
              if [ "$MUSIC_PATH" != "none" ]; then
                echo "Generating complementary ambient audio from main composition..."
                
                AMBIENT_STYLE="subtle ambient textures and environmental sounds that complement the musical composition, professional audio quality"
                
                if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "$MUSIC_PATH" --audio-style "$AMBIENT_STYLE" > .logs/audio-production/ambient/complementary-ambient.json 2>&1; then
                  echo "‚úÖ Complementary ambient audio generated"
                fi
              fi
            fi
            
            # ÂÄãÂà•Áí∞Â¢ÉÈü≥Ë¶ÅÁ¥†„ÅÆÁîüÊàêÔºàÁñë‰ººÁöÑ„Å´„ÉÜ„Ç≠„Çπ„Éà„Éô„Éº„Çπ„ÅßÔºâ
            echo "Generating specific ambient elements..."
            
            AMBIENT_ELEMENTS=$(echo "$SOUND_EFFECTS_PLAN" | jq -c '.ambient_elements[]')
            AMBIENT_INDEX=0
            
            while IFS= read -r element_data; do
              ELEMENT_NAME=$(echo "$element_data" | jq -r '.element_name')
              SOUND_DESCRIPTION=$(echo "$element_data" | jq -r '.sound_description')
              
              echo "Generating ambient element: $ELEMENT_NAME"
              
              # Áü≠„ÅÑ„Çµ„É≥„Éó„É´Èü≥Ê∫ê„Çí‰ΩúÊàê„Åó„Å¶„ÄÅ„Åù„Çå„ÇíV2A„ÅßÊã°Âºµ
              # „Åì„Åì„Åß„ÅØ‰ª£ÊõøÁöÑ„Å´AIÂàÜÊûê„Çí‰ΩøÁî®
              claude-code --prompt "Create detailed audio production specifications for this ambient element:
              
              Element: $ELEMENT_NAME
              Description: $SOUND_DESCRIPTION
              
              Return a JSON with production parameters for professional audio creation." > .logs/audio-production/ambient/element-${AMBIENT_INDEX}-${ELEMENT_NAME}.json 2>&1
              
              AMBIENT_INDEX=$((AMBIENT_INDEX + 1))
            done <<< "$AMBIENT_ELEMENTS"
            
          else
            echo "‚ö†Ô∏è V2A service not available - creating specification-based ambient design"
            
            # ‰ª£ÊõøÔºöË©≥Á¥∞„Å™Âà∂‰Ωú‰ªïÊßòÊõ∏‰ΩúÊàê
            claude-code --prompt "Convert the following sound design plan into detailed production specifications that can be used with external audio tools:
            
            Sound Design Plan: $SOUND_EFFECTS_PLAN
            
            Create comprehensive technical specifications for each ambient element and sound effect." > .logs/audio-production/ambient/ambient-specifications.json 2>&1
          fi
          
          # ÂäπÊûúÈü≥„ÅÆÁîüÊàê‰ªïÊßòÊõ∏‰ΩúÊàê
          echo "Creating sound effects specifications..."
          
          SOUND_EFFECTS=$(echo "$SOUND_EFFECTS_PLAN" | jq -c '.sound_effects[]')
          EFFECT_INDEX=0
          
          while IFS= read -r effect_data; do
            EFFECT_NAME=$(echo "$effect_data" | jq -r '.effect_name')
            SONIC_CHARACTERISTICS=$(echo "$effect_data" | jq -r '.sonic_characteristics')
            
            echo "Specifying sound effect: $EFFECT_NAME"
            
            # Ë©≥Á¥∞„Å™ÂäπÊûúÈü≥‰ªïÊßò‰ΩúÊàê
            claude-code --prompt "Create professional audio production specifications for this sound effect:
            
            Effect Name: $EFFECT_NAME
            Characteristics: $SONIC_CHARACTERISTICS
            
            Include frequency analysis, dynamic range, timing, and processing recommendations." > .logs/audio-production/ambient/effect-${EFFECT_INDEX}-${EFFECT_NAME}.json 2>&1
            
            EFFECT_INDEX=$((EFFECT_INDEX + 1))
          done <<< "$SOUND_EFFECTS"
          
          # Âà∂‰ΩúÁµêÊûú„ÅÆÁµ±Ë®à
          CREATED_AMBIENT_COUNT=$(ls .logs/audio-production/ambient/*.json 2>/dev/null | wc -l)
          
          # Áí∞Â¢ÉÈü≥Âà∂‰Ωú„É≠„Ç∞
          cat > .logs/audio-production/ambient/creation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "ambient_creation_summary": {
              "v2a_service_available": "$V2A_AVAILABLE",
              "total_ambient_files_created": $CREATED_AMBIENT_COUNT,
              "ambient_elements_planned": $AMBIENT_ELEMENTS_COUNT,
              "sound_effects_planned": $SOUND_EFFECTS_COUNT,
              "creation_method": "$([ "$V2A_AVAILABLE" = "true" ] && echo "v2a_generation" || echo "specification_based")"
            },
            "created_assets": [$(ls .logs/audio-production/ambient/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "AMBIENT_CREATION_STATUS=completed" >> $GITHUB_ENV
          echo "CREATED_AMBIENT_COUNT=$CREATED_AMBIENT_COUNT" >> $GITHUB_ENV
          
          echo "üåä Ambient sound creation completed: $CREATED_AMBIENT_COUNT files"

  # === ÂìÅË≥™Âêë‰∏äÊÆµÈöé ===
  - id: "audio-quality-enhancement"
    name: "Èü≥Ë≥™Âêë‰∏ä„Éª„Éü„Ç≠„Ç∑„É≥„Ç∞ÊúÄÈÅ©Âåñ"
    phase: "quality_enhancement"
    github_job: "quality-enhancement"
    type: "optimization"
    implementation: "ai"
    duration_minutes: 5
    dependencies: ["ambient-sound-creation"]
    parallel_group: null
    
    github_steps:
      - name: "Enhance audio quality and optimize mixing"
        shell: "bash"
        script: |
          echo "üéõÔ∏è Enhancing audio quality and optimizing mixing..."
          
          mkdir -p .logs/quality-enhancement
          
          AUDIO_CONCEPT=$(cat .logs/audio-concept/audio-concept.json)
          COMPOSITION_DESIGN=$(cat .logs/musical-composition/composition-design.json)
          MUSIC_GENERATION_LOG=$(cat .logs/audio-production/music/generation-log.json)
          AMBIENT_CREATION_LOG=$(cat .logs/audio-production/ambient/creation-log.json)
          
          # Èü≥Ë≥™Âêë‰∏ä„Éª„Éü„Ç≠„Ç∑„É≥„Ç∞ÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆÈü≥Â£∞Âà∂‰ΩúÁµêÊûú„ÇíÂü∫„Å´„ÄÅÈü≥Ë≥™Âêë‰∏ä„Å®„Éü„Ç≠„Ç∑„É≥„Ç∞ÊúÄÈÅ©Âåñ„ÅÆË©≥Á¥∞ÂàÜÊûê„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà: $AUDIO_CONCEPT
          Ê•ΩÊõ≤ÊßãÊàê: $COMPOSITION_DESIGN
          Èü≥Ê•ΩÂà∂‰Ωú„É≠„Ç∞: $MUSIC_GENERATION_LOG
          Áí∞Â¢ÉÈü≥Âà∂‰Ωú„É≠„Ç∞: $AMBIENT_CREATION_LOG
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"quality_assessment\": {
              \"current_audio_quality\": \"ÁèæÂú®„ÅÆÈü≥Ë≥™Ë©ï‰æ°Ôºà1-10ÁÇπÔºâ\",
              \"technical_analysis\": {
                \"frequency_balance\": \"Âë®Ê≥¢Êï∞„Éê„É©„É≥„ÇπË©ï‰æ°\",
                \"dynamic_range\": \"„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„É¨„É≥„Ç∏Ë©ï‰æ°\",
                \"stereo_imaging\": \"„Çπ„ÉÜ„É¨„Ç™„Ç§„É°„Éº„Ç∏„É≥„Ç∞Ë©ï‰æ°\",
                \"phase_coherence\": \"‰ΩçÁõ∏„Ç≥„Éí„Éº„É¨„É≥„ÇπË©ï‰æ°\",
                \"noise_floor\": \"„Éé„Ç§„Ç∫„Éï„É≠„Ç¢Ë©ï‰æ°\"
              },
              \"musical_analysis\": {
                \"harmonic_balance\": \"ÂíåÂ£∞„Éê„É©„É≥„ÇπË©ï‰æ°\",
                \"rhythmic_precision\": \"„É™„Ç∫„É†Á≤æÂ∫¶Ë©ï‰æ°\",
                \"melodic_clarity\": \"„É°„É≠„Éá„Ç£ÊòéÁû≠Â∫¶Ë©ï‰æ°\",
                \"textural_depth\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„ÉºÊ∑±Â∫¶Ë©ï‰æ°\"
              }
            },
            \"enhancement_recommendations\": [
              {
                \"enhancement_type\": \"EQ|Compression|Reverb|Stereo_Enhancement|Mastering\",
                \"target_elements\": [\"ÂØæË±°Èü≥ÈüøË¶ÅÁ¥†\"],
                \"specific_adjustments\": \"ÂÖ∑‰ΩìÁöÑË™øÊï¥ÂÜÖÂÆπ\",
                \"expected_improvement\": \"ÊúüÂæÖ„Åï„Çå„ÇãÊîπÂñÑÂäπÊûú\",
                \"processing_priority\": \"high|medium|low\",
                \"technical_parameters\": \"ÊäÄË°ìÁöÑ„Éë„É©„É°„Éº„Çø\"
              }
            ],
            \"mixing_optimization\": {
              \"level_balancing\": \"„É¨„Éô„É´„Éê„É©„É≥„Ç∑„É≥„Ç∞ÊñπÈáù\",
              \"panning_strategy\": \"„Éë„É≥„Éã„É≥„Ç∞Êà¶Áï•\",
              \"spatial_placement\": \"Á©∫ÈñìÈÖçÁΩÆÊúÄÈÅ©Âåñ\",
              \"frequency_separation\": \"Âë®Ê≥¢Êï∞ÂàÜÈõ¢ÊâãÊ≥ï\",
              \"dynamic_control\": \"„ÉÄ„Ç§„Éä„Éü„ÇØ„ÇπÂà∂Âæ°\"
            },
            \"mastering_approach\": {
              \"overall_loudness_target\": \"ÂÖ®‰Ωì„É©„Ç¶„Éâ„Éç„ÇπÁõÆÊ®ô\",
              \"dynamic_range_preservation\": \"„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„É¨„É≥„Ç∏‰øùÊåÅÊñπÈáù\",
              \"frequency_response_shaping\": \"Âë®Ê≥¢Êï∞ÁâπÊÄßË™øÊï¥\",
              \"stereo_enhancement\": \"„Çπ„ÉÜ„É¨„Ç™Âº∑ÂåñÊâãÊ≥ï\",
              \"final_limiting_strategy\": \"ÊúÄÁµÇ„É™„Éü„ÉÉ„ÉÜ„Ç£„É≥„Ç∞Êà¶Áï•\"
            },
            \"technical_specifications\": {
              \"recommended_sample_rate\": \"Êé®Â•®„Çµ„É≥„Éó„É™„É≥„Ç∞„É¨„Éº„Éà\",
              \"bit_depth_target\": \"ÁõÆÊ®ô„Éì„ÉÉ„ÉàÊ∑±Â∫¶\",
              \"dithering_requirements\": \"„Éá„Ç£„Ç∂„É™„É≥„Ç∞Ë¶Å‰ª∂\",
              \"format_optimization\": \"„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©Âåñ\",
              \"metadata_standards\": \"„É°„Çø„Éá„Éº„ÇøÂü∫Ê∫ñ\"
            },
            \"quality_benchmarks\": {
              \"professional_standards\": [\"„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´Âü∫Ê∫ñ\"],
              \"platform_requirements\": [\"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ë¶Å‰ª∂\"],
              \"accessibility_compliance\": [\"„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÂØæÂøú\"],
              \"commercial_readiness\": \"ÂïÜÁî®ÂèØËÉΩÊÄßË©ï‰æ°\"
            },
            \"implementation_roadmap\": {
              \"immediate_improvements\": [\"Âç≥Â∫ßÂÆüË°åÂèØËÉΩÊîπÂñÑ\"],
              \"advanced_processing\": [\"È´òÂ∫¶Âá¶ÁêÜË¶Å‰ª∂\"],
              \"external_tool_requirements\": [\"Â§ñÈÉ®„ÉÑ„Éº„É´Ë¶Å‰ª∂\"],
              \"quality_validation_steps\": [\"ÂìÅË≥™Ê§úË®º„Çπ„ÉÜ„ÉÉ„Éó\"]
            }
          }" > .logs/quality-enhancement/enhancement-analysis.json
          
          ENHANCEMENT_ANALYSIS=$(cat .logs/quality-enhancement/enhancement-analysis.json)
          
          # ÂìÅË≥™„É°„Éà„É™„ÇØ„Çπ„ÅÆÊäΩÂá∫
          CURRENT_QUALITY=$(echo "$ENHANCEMENT_ANALYSIS" | jq -r '.quality_assessment.current_audio_quality')
          HIGH_PRIORITY_ENHANCEMENTS=$(echo "$ENHANCEMENT_ANALYSIS" | jq '[.enhancement_recommendations[] | select(.processing_priority == "high")] | length')
          
          echo "CURRENT_AUDIO_QUALITY=$CURRENT_QUALITY" >> $GITHUB_ENV
          echo "HIGH_PRIORITY_ENHANCEMENTS=$HIGH_PRIORITY_ENHANCEMENTS" >> $GITHUB_ENV
          echo "ENHANCEMENT_ANALYSIS_FILE=.logs/quality-enhancement/enhancement-analysis.json" >> $GITHUB_ENV
          
          # ÂÆüË°åÂèØËÉΩ„Å™ÊúÄÈÅ©Âåñ„ÅÆÈÅ©Áî®ÔºàÁñë‰ººÁöÑÔºâ
          echo "Applying feasible optimizations..."
          
          claude-code --prompt "Based on the enhancement analysis, create a detailed implementation guide for the immediate improvements that can be applied:
          
          Enhancement Analysis: $ENHANCEMENT_ANALYSIS
          
          Focus on practical steps that can be implemented with available tools and create specific parameter recommendations." > .logs/quality-enhancement/implementation-guide.json 2>&1
          
          echo "üéõÔ∏è Audio quality enhancement completed"
          echo "Current quality score: $CURRENT_QUALITY/10"
          echo "High priority enhancements identified: $HIGH_PRIORITY_ENHANCEMENTS"

  # === ÈÖç‰ø°Ê∫ñÂÇôÊÆµÈöé ===
  - id: "format-optimization-delivery"
    name: "„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©Âåñ„ÉªÈÖç‰ø°Ê∫ñÂÇô"
    phase: "delivery_preparation"
    github_job: "delivery-preparation"
    type: "packaging"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["audio-quality-enhancement"]
    parallel_group: null
    
    github_steps:
      - name: "Optimize formats and prepare for delivery"
        shell: "bash"
        script: |
          echo "üì§ Optimizing formats and preparing for delivery..."
          
          mkdir -p .logs/delivery-preparation
          
          AUDIO_CONCEPT=$(cat .logs/audio-concept/audio-concept.json)
          ENHANCEMENT_ANALYSIS=$(cat .logs/quality-enhancement/enhancement-analysis.json)
          
          # ÈÖç‰ø°„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©ÂåñÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆÈü≥Èüø„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅÈÖç‰ø°„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©Âåñ„Å®ÈÖç‰ø°Ê∫ñÂÇô„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà: $AUDIO_CONCEPT
          ÂìÅË≥™Âêë‰∏äÂàÜÊûê: $ENHANCEMENT_ANALYSIS
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"delivery_strategy\": {
              \"primary_use_cases\": [\"‰∏ªË¶ÅÁî®ÈÄî\"],
              \"target_platforms\": [\"ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†\"],
              \"distribution_channels\": [\"ÈÖç‰ø°„ÉÅ„É£„Éç„É´\"],
              \"audience_considerations\": [\"ËÅ¥ÂèñËÄÖÈÖçÊÖÆ‰∫ãÈ†Ö\"]
            },
            \"format_specifications\": [
              {
                \"format_name\": \"„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂêç\",
                \"use_case\": \"‰ΩøÁî®Áî®ÈÄî\",
                \"technical_specs\": {
                  \"sample_rate\": \"„Çµ„É≥„Éó„É™„É≥„Ç∞„É¨„Éº„Éà\",
                  \"bit_depth\": \"„Éì„ÉÉ„ÉàÊ∑±Â∫¶\",
                  \"compression_type\": \"ÂúßÁ∏ÆÊñπÂºè\",
                  \"bitrate\": \"„Éì„ÉÉ„Éà„É¨„Éº„Éà\",
                  \"file_format\": \"„Éï„Ç°„Ç§„É´ÂΩ¢Âºè\"
                },
                \"quality_profile\": \"ÂìÅË≥™„Éó„É≠„Éï„Ç°„Ç§„É´\",
                \"file_size_estimate\": \"Êé®ÂÆö„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫\",
                \"compatibility\": [\"‰∫íÊèõÊÄßÊÉÖÂ†±\"]
              }
            ],
            \"optimization_variants\": {
              \"high_quality\": \"È´òÂìÅË≥™Áâà‰ªïÊßò\",
              \"standard_quality\": \"Ê®ôÊ∫ñÂìÅË≥™Áâà‰ªïÊßò\",
              \"streaming_optimized\": \"„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÊúÄÈÅ©ÂåñÁâà‰ªïÊßò\",
              \"mobile_optimized\": \"„É¢„Éê„Ç§„É´ÊúÄÈÅ©ÂåñÁâà‰ªïÊßò\",
              \"loop_versions\": \"„É´„Éº„ÉóÁâà‰ªïÊßò\"
            },
            \"metadata_package\": {
              \"track_information\": {
                \"title\": \"Ê•ΩÊõ≤„Çø„Ç§„Éà„É´\",
                \"artist\": \"„Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÊÉÖÂ†±\",
                \"album\": \"„Ç¢„É´„Éê„É†ÊÉÖÂ†±\",
                \"genre\": \"„Ç∏„É£„É≥„É´\",
                \"duration\": \"$TARGET_DURATION_SECONDS seconds\",
                \"bpm\": \"$TEMPO_BPM\",
                \"key\": \"Ë™øÊÄß\"
              },
              \"technical_metadata\": {
                \"creation_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                \"production_method\": \"AI-generated composition\",
                \"quality_level\": \"$CURRENT_AUDIO_QUALITY/10\",
                \"mastering_standard\": \"„Éû„Çπ„Çø„É™„É≥„Ç∞Âü∫Ê∫ñ\"
              },
              \"usage_rights\": {
                \"license_type\": \"„É©„Ç§„Çª„É≥„ÇπÁ®ÆÂà•\",
                \"usage_restrictions\": [\"‰ΩøÁî®Âà∂Èôê\"],
                \"attribution_requirements\": [\"„ÇØ„É¨„Ç∏„ÉÉ„ÉàË¶Å‰ª∂\"],
                \"commercial_usage\": \"ÂïÜÁî®Âà©Áî®ÂèØÂê¶\"
              }
            },
            \"quality_assurance\": {
              \"final_checks\": [\"ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØÈ†ÖÁõÆ\"],
              \"compatibility_tests\": [\"‰∫íÊèõÊÄß„ÉÜ„Çπ„Éà\"],
              \"performance_benchmarks\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂü∫Ê∫ñ\"],  
              \"user_experience_validation\": [\"UXÊ§úË®ºÈ†ÖÁõÆ\"]
            },
            \"delivery_package\": {
              \"primary_deliverables\": [\"‰∏ªË¶ÅÊàêÊûúÁâ©\"],
              \"supporting_materials\": [\"„Çµ„Éù„Éº„ÉàË≥áÊñô\"],
              \"documentation\": [\"„Éâ„Ç≠„É•„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥\"],
              \"usage_guidelines\": [\"‰ΩøÁî®„Ç¨„Ç§„Éâ„É©„Ç§„É≥\"]
            },
            \"success_metrics\": {
              \"technical_kpis\": [\"ÊäÄË°ìÁöÑKPI\"],
              \"user_satisfaction_metrics\": [\"„É¶„Éº„Ç∂„ÉºÊ∫ÄË∂≥Â∫¶ÊåáÊ®ô\"],
              \"performance_indicators\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ô\"],
              \"optimization_opportunities\": [\"ÊúÄÈÅ©ÂåñÊ©ü‰ºö\"]
            }
          }" > .logs/delivery-preparation/delivery-strategy.json
          
          DELIVERY_STRATEGY=$(cat .logs/delivery-preparation/delivery-strategy.json)
          
          # ÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏ÊÉÖÂ†±„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          FORMAT_COUNT=$(echo "$DELIVERY_STRATEGY" | jq '.format_specifications | length')
          PRIMARY_FORMAT=$(echo "$DELIVERY_STRATEGY" | jq -r '.format_specifications[0].format_name // "High Quality Audio"')
          
          echo "DELIVERY_FORMAT_COUNT=$FORMAT_COUNT" >> $GITHUB_ENV
          echo "PRIMARY_DELIVERY_FORMAT=$PRIMARY_FORMAT" >> $GITHUB_ENV
          echo "DELIVERY_STRATEGY_FILE=.logs/delivery-preparation/delivery-strategy.json" >> $GITHUB_ENV
          
          echo "üì§ Format optimization and delivery preparation completed"
          echo "Delivery formats: $FORMAT_COUNT"
          echo "Primary format: $PRIMARY_FORMAT"

  - id: "final-audio-packaging"
    name: "ÊúÄÁµÇ„Ç™„Éº„Éá„Ç£„Ç™„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê"
    phase: "delivery_preparation"
    github_job: "final-packaging"
    type: "packaging"
    implementation: "script"
    duration_minutes: 3
    dependencies: ["format-optimization-delivery"]
    parallel_group: null
    
    github_steps:
      - name: "Create comprehensive audio delivery package"
        shell: "bash"
        script: |
          echo "üì¶ Creating comprehensive audio delivery package..."
          
          mkdir -p .final-output/{concept,composition,production,quality}
          
          # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊñáÊõ∏
          cp .logs/audio-concept/audio-concept.json .final-output/concept/ 2>/dev/null || true
          cp .logs/musical-composition/composition-design.json .final-output/composition/ 2>/dev/null || true
          cp .logs/sound-design/sound-effects-plan.json .final-output/composition/ 2>/dev/null || true
          
          # Âà∂‰ΩúÊàêÊûúÁâ©
          mkdir -p .final-output/production/{music,ambient,specifications}
          cp .logs/audio-production/music/*.json .final-output/production/music/ 2>/dev/null || true
          cp .logs/audio-production/ambient/*.json .final-output/production/ambient/ 2>/dev/null || true
          
          # ÂìÅË≥™„ÉªÈÖç‰ø°Ë≥áÊñô
          cp .logs/quality-enhancement/*.json .final-output/quality/ 2>/dev/null || true
          cp .logs/delivery-preparation/*.json .final-output/quality/ 2>/dev/null || true
          
          # „Éû„Çπ„Çø„Éº„Ç™„Éº„Éá„Ç£„Ç™„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±
          cat > .final-output/audio-project-master.json << EOF
          {
            "project_info": {
              "project_name": "Audio Music Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "project_type": "music_and_audio_production",
              "total_production_time": "35 minutes"
            },
            "audio_overview": {
              "target_duration_seconds": $TARGET_DURATION_SECONDS,
              "tempo_bpm": $TEMPO_BPM,
              "composition_sections": $COMPOSITION_SECTIONS,
              "current_quality_score": "$CURRENT_AUDIO_QUALITY/10",
              "delivery_formats": $DELIVERY_FORMAT_COUNT
            },
            "production_summary": {
              "music_generation_available": "$MUSIC_GEN_AVAILABLE",
              "v2a_enhancement_available": "$V2A_AVAILABLE",
              "ai_composition_analysis": "$MUSIC_AI_AVAILABLE",
              "generated_music_files": $GENERATED_MUSIC_COUNT,
              "ambient_audio_files": $CREATED_AMBIENT_COUNT,
              "sound_effects_planned": $SOUND_EFFECTS_COUNT,
              "ambient_elements_planned": $AMBIENT_ELEMENTS_COUNT
            },
            "deliverables": {
              "concept_documents": {
                "audio_concept": "concept/audio-concept.json",
                "composition_design": "composition/composition-design.json",
                "sound_effects_plan": "composition/sound-effects-plan.json"
              },
              "production_assets": {
                "music_files": "production/music/",
                "ambient_audio": "production/ambient/",
                "technical_specifications": "production/specifications/"
              },
              "quality_assurance": {
                "enhancement_analysis": "quality/enhancement-analysis.json",
                "delivery_strategy": "quality/delivery-strategy.json"
              }
            },
            "technical_capabilities": {
              "basic_audio_capability": "$BASIC_AUDIO_CAPABILITY",
              "advanced_audio_capability": "$ADVANCED_AUDIO_CAPABILITY",
              "primary_music_service": "$([ "$MUSIC_GEN_AVAILABLE" = "true" ] && echo "t2m-google-lyria" || echo "none")",
              "audio_enhancement_service": "$([ "$V2A_AVAILABLE" = "true" ] && echo "v2a-fal-thinksound" || echo "none")"
            },
            "production_readiness": {
              "music_generation_status": "$MUSIC_GENERATION_STATUS",
              "ambient_creation_status": "$AMBIENT_CREATION_STATUS", 
              "quality_score": "$CURRENT_AUDIO_QUALITY/10",
              "high_priority_enhancements": $HIGH_PRIORITY_ENHANCEMENTS,
              "delivery_ready": $([ "$MUSIC_GENERATION_STATUS" = "success" ] && echo "true" || echo "false")
            },
            "usage_guidelines": {
              "audio_modification": "Generated audio can be further processed using specifications provided",
              "quality_maintenance": "Follow enhancement analysis recommendations for optimal results",
              "format_conversion": "Use delivery strategy specifications for platform-specific formats",
              "licensing_compliance": "Check metadata package for usage rights and restrictions",
              "technical_requirements": "Ensure proper audio equipment for quality evaluation"
            },
            "support_resources": {
              "composition_regeneration": "Use composition-design.json specifications to recreate or modify music",
              "quality_improvement": "Follow enhancement-analysis.json recommendations",
              "format_optimization": "Use delivery-strategy.json for platform-specific conversions",
              "troubleshooting": "Check production logs for detailed generation information"
            }
          }
          EOF
          
          # „Ç™„Éº„Éá„Ç£„Ç™Âà∂‰Ωú„Ç¨„Ç§„Éâ„ÅÆ‰ΩúÊàê
          cat > .final-output/AUDIO_PRODUCTION_GUIDE.md << 'EOF'
          # „Ç™„Éº„Éá„Ç£„Ç™„ÉªÈü≥Ê•ΩÂà∂‰Ωú„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¨„Ç§„Éâ
          
          ## üéµ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å
          - Ê•ΩÊõ≤Èï∑: AIÁîüÊàê„Å´„Çà„ÇãÈü≥Ê•ΩÂà∂‰Ωú
          - ÂìÅË≥™„É¨„Éô„É´: „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´ÂØæÂøú
          - Âà∂‰ΩúÊâãÊ≥ï: AIÁîüÊàê + Â∞ÇÈñÄÁöÑÈü≥ÈüøË®≠Ë®à
          
          ## üéº Ê•ΩÊõ≤‰ªïÊßò
          - ÊßãÊàê„Çª„ÇØ„Ç∑„Éß„É≥Êï∞„Å®Ë©≥Á¥∞Ë®≠Ë®à
          - Ê•ΩÂô®Á∑®Êàê„Å®Èü≥Èüø„É¨„Ç§„É§„Éº
          - „ÉÜ„É≥„Éù„ÉªË™øÊÄß„ÉªÂíåÂ£∞ÈÄ≤Ë°å
          - Èü≥ÈüøÂäπÊûú„Å®Áí∞Â¢ÉÈü≥Ë®≠Ë®à
          
          ## üîä Âà∂‰ΩúÊàêÊûúÁâ©
          - „É°„Ç§„É≥Ê•ΩÊõ≤„Éï„Ç°„Ç§„É´
          - „Çª„ÇØ„Ç∑„Éß„É≥Âà•Èü≥Ê•ΩÁ¥†Êùê
          - Ê•ΩÂô®Âà•„É¨„Ç§„É§„Éº
          - Áí∞Â¢ÉÈü≥„ÉªÂäπÊûúÈü≥‰ªïÊßò
          - ÂìÅË≥™Âêë‰∏äÊé®Â•®‰∫ãÈ†Ö
          
          ## üìä ÂìÅË≥™ÁÆ°ÁêÜ
          - Èü≥ÈüøÂìÅË≥™Ë©ï‰æ°„Çπ„Ç≥„Ç¢
          - ÊäÄË°ìÁöÑ‰ªïÊßòÈÅ©ÂêàÊÄß
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÊúÄÈÅ©Âåñ
          - „É¶„Éº„Ç∂„Éº‰ΩìÈ®ìÈÖçÊÖÆ
          
          ## üöÄ ÈÖç‰ø°„ÉªÊ¥ªÁî®
          - „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂà•ÊúÄÈÅ©Âåñ
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøú
          - „É©„Ç§„Çª„É≥„Çπ„Éª‰ΩøÁî®Ê®©Èôê
          - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
          
          ## üîß ÊäÄË°ìÁöÑÊ≥®ÊÑè‰∫ãÈ†Ö
          - „Ç™„Éº„Éá„Ç£„Ç™ÂìÅË≥™„ÅÆÁ∂≠ÊåÅ
          - ‰∫íÊèõÊÄßÁ¢∫‰øù
          - „É°„Çø„Éá„Éº„ÇøÁÆ°ÁêÜ
          - Á∂ôÁ∂öÁöÑÂìÅË≥™ÊîπÂñÑ
          EOF
          
          # ZIP„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
          cd .final-output && zip -r ../audio-music-package.zip . && cd ..
          
          echo "üì¶ Final audio packaging completed"
          echo "Package includes:"
          echo "- Audio concept and composition design"
          echo "- $GENERATED_MUSIC_COUNT music files generated"
          echo "- $CREATED_AMBIENT_COUNT ambient audio elements"
          echo "- Quality analysis (score: $CURRENT_AUDIO_QUALITY/10)"
          echo "- $DELIVERY_FORMAT_COUNT delivery format specifications"
          echo "- Technical documentation and usage guidelines"
          echo "Package location: audio-music-package.zip"
          
    success_links:
      package_download: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
      enhancement_analysis: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/quality/enhancement-analysis.json"
      composition_design: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/composition/composition-design.json"
      production_guide: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/AUDIO_PRODUCTION_GUIDE.md"

    validation:
      criteria:
        - "Èü≥Èüø„Ç≥„É≥„Çª„Éó„Éà„ÅåË®≠Ë®à„Åï„Çå„Å¶„ÅÑ„Çã"
        - "Ê•ΩÊõ≤ÊßãÊàê„ÅåÂÆåÊàê„Åó„Å¶„ÅÑ„Çã"
        - "Èü≥Â£∞Âà∂‰Ωú„ÅåÂÆüÊñΩ„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÂìÅË≥™Âêë‰∏äÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã"
        - "ÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".final-output/audio-project-master.json" ]; then
          echo "‚ùå VALIDATION FAILED: Audio project package missing"
          exit 1
        fi
        
        if [ "$MUSIC_GENERATION_STATUS" = "success" ]; then
          echo "‚úÖ Validation passed: Audio production completed successfully"
        elif [ "$MUSIC_GENERATION_STATUS" = "service_unavailable" ]; then
          echo "‚ö†Ô∏è WARNING: Music generation service unavailable - specifications created for external use"
        else
          echo "‚ùå VALIDATION FAILED: Music generation failed"
          exit 1
        fi