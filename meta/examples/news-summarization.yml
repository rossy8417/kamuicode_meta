name: "AI News Summarization Workflow"
run-name: "📰 Analyzing news: ${{ github.event.inputs.news_topic || 'News Analysis' }}"

on:
  workflow_dispatch:
    inputs:
      news_topic:
        description: '分析対象トピック・キーワード'
        required: true
        default: 'AI技術の進展、暗号通貨市場動向、気候変動対策、経済政策'
        type: string
      news_sources:
        description: 'ニュースソース'
        required: true
        type: choice
        options:
        - major_media
        - tech_media
        - business_media
        - international
        - comprehensive
        - specialized
        default: 'comprehensive'
      geographic_focus:
        description: '地域的焦点'
        required: true
        type: choice
        options:
        - global
        - japan
        - asia_pacific
        - north_america
        - europe
        default: 'global'
      analysis_period:
        description: '分析対象期間'
        required: true
        type: choice
        options:
        - 24hours
        - 3days
        - 1week
        - 2weeks
        - 1month
        default: '1week'
      summary_length:
        description: '要約の詳細度'
        required: true
        type: choice
        options:
        - brief
        - standard
        - detailed
        - comprehensive
        default: 'standard'
      analysis_focus:
        description: '分析の焦点'
        required: true
        type: choice
        options:
        - trend_analysis
        - sentiment_analysis
        - impact_analysis
        - stakeholder_analysis
        - comparative_analysis
        default: 'trend_analysis'
      output_format:
        description: 'メイン出力形式'
        required: true
        type: choice
        options:
        - executive_summary
        - detailed_report
        - newsletter
        - bullet_points
        - timeline
        default: 'detailed_report'
      urgency_level:
        description: '緊急度・重要度フィルタ（1-5）'
        required: true
        default: '3'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
      include_sources:
        description: '情報源の表示'
        required: false
        type: choice
        options:
        - full_citations
        - source_names
        - minimal
        - none
        default: 'source_names'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      web_search_available: ${{ steps.test.outputs.web_search_available }}
      rss_available: ${{ steps.test.outputs.rss_available }}
      ai_analysis_available: ${{ steps.test.outputs.ai_analysis_available }}
    steps:
      - name: Test news collection services
        id: test
        run: |
          echo "📰 Testing news collection and analysis services..."
          
          mkdir -p generated/logs/connectivity-tests
          
          # Web Search API テスト（ニュース収集で必須）
          echo "Testing web search services (required for news collection)..."
          if [ -n "${{ secrets.GOOGLE_SEARCH_API_KEY }}" ] && [ -n "${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}" ]; then
            if timeout 30 curl -s "https://www.googleapis.com/customsearch/v1?key=${{ secrets.GOOGLE_SEARCH_API_KEY }}&cx=${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}&q=latest+technology+news&num=5" > generated/logs/connectivity-tests/web-search-test.log 2>&1; then
              WEB_SEARCH_STATUS="success"
              echo "✅ Google Search API: Available"
            else
              WEB_SEARCH_STATUS="failed"
              echo "❌ Google Search API: Failed - Cannot collect news without search"
            fi
          else
            WEB_SEARCH_STATUS="not_configured"
            echo "⚠️ Google Search API: Not configured"
          fi
          
          # RSS Feed Parser テスト（ニュースフィード用）
          echo "Testing RSS feed parsing..."
          if timeout 30 curl -s "https://feeds.bbci.co.uk/news/rss.xml" | head -n 20 > generated/logs/connectivity-tests/rss-test.log 2>&1; then
            RSS_STATUS="success"
            echo "✅ RSS Feed: Available"
          else
            RSS_STATUS="failed"
            echo "⚠️ RSS Feed: Not available - will use web search only"
          fi
          
          # Claude Code AI分析機能テスト（カスタム分析機能）
          echo "Testing Claude Code AI analysis functions..."
          if timeout 20 claude-code --prompt "Test prompt: Analyze this sample news text: 'Technology stocks surge as AI developments continue.' Return 'TEST_SUCCESS' if working." > generated/logs/connectivity-tests/ai-analysis-test.log 2>&1; then
            if grep -q "TEST_SUCCESS" generated/logs/connectivity-tests/ai-analysis-test.log; then
              AI_ANALYSIS_STATUS="success"
              echo "✅ Claude Code AI Analysis: Available"
            else
              AI_ANALYSIS_STATUS="partial"
              echo "⚠️ Claude Code AI Analysis: Partial - response received but format needs adjustment"
            fi
          else
            AI_ANALYSIS_STATUS="failed"
            echo "❌ Claude Code AI Analysis: Failed - will use basic text analysis"
          fi
          
          # 外部ニュースAPI テスト（NewsAPI等）
          echo "Testing external news APIs..."
          if [ -n "${{ secrets.NEWS_API_KEY }}" ]; then
            if timeout 30 curl -s "https://newsapi.org/v2/top-headlines?apiKey=${{ secrets.NEWS_API_KEY }}&pageSize=1" > generated/logs/connectivity-tests/news-api-test.log 2>&1; then
              NEWS_API_STATUS="success"
              echo "✅ News API: Available"
            else
              NEWS_API_STATUS="failed"
              echo "⚠️ News API: Failed - will use web search for collection"
            fi
          else
            NEWS_API_STATUS="not_configured"
            echo "ℹ️ News API: Not configured - using web search"
          fi
          
          # 感情分析API テスト（テキスト分析用）
          echo "Testing sentiment analysis services..."
          if [ -n "${{ secrets.SENTIMENT_API_KEY }}" ]; then
            if timeout 20 curl -s -H "Authorization: Bearer ${{ secrets.SENTIMENT_API_KEY }}" "https://api.example-sentiment.com/analyze" -d "text=test" > generated/logs/connectivity-tests/sentiment-test.log 2>&1; then
              SENTIMENT_API_STATUS="success"
              echo "✅ Sentiment API: Available"
            else
              SENTIMENT_API_STATUS="failed"
              echo "⚠️ Sentiment API: Failed - will use built-in analysis"
            fi
          else
            SENTIMENT_API_STATUS="not_configured"
            echo "ℹ️ Sentiment API: Not configured - using built-in analysis"
          fi
          
          # テスト結果をJSON保存
          cat > generated/logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "required_for_workflow": {
              "web_search_api": "$WEB_SEARCH_STATUS",
              "rss_parser": "$RSS_STATUS",
              "ai_analysis": "$AI_ANALYSIS_STATUS",
              "news_api": "$NEWS_API_STATUS",
              "sentiment_api": "$SENTIMENT_API_STATUS"
            },
            "overall_status": "$([ "$WEB_SEARCH_STATUS" = "success" ] && echo "ready" || echo "degraded")",
            "critical_services_available": $([ "$WEB_SEARCH_STATUS" = "success" ] && echo "true" || echo "false"),
            "workflow_can_proceed": $([ "$WEB_SEARCH_STATUS" = "success" ] && echo "true" || echo "false"),
            "enhanced_features_available": $([ "$NEWS_API_STATUS" = "success" ] || [ "$RSS_STATUS" = "success" ] && echo "true" || echo "false")
          }
          EOF
          
          # 環境変数に結果を設定
          echo "CONNECTIVITY_STATUS=$([ "$WEB_SEARCH_STATUS" = "success" ] && echo "ready" || echo "failed")" >> $GITHUB_ENV
          echo "ENHANCED_COLLECTION=$([ "$NEWS_API_STATUS" = "success" ] || [ "$RSS_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "ADVANCED_ANALYSIS=$([ "$SENTIMENT_API_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          # Set outputs
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "web_search_available=$WEB_SEARCH_STATUS" >> $GITHUB_OUTPUT
          echo "rss_available=$RSS_STATUS" >> $GITHUB_OUTPUT
          echo "ai_analysis_available=$AI_ANALYSIS_STATUS" >> $GITHUB_OUTPUT
          
          echo "📰 News service connectivity tests completed"

  # Phase 2: 情報収集段階
  topic-extraction:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      keywords_ready: ${{ steps.extract.outputs.keywords_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract analysis topics and keywords
        id: extract
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔍 Extracting analysis topics and keywords..."
          
          mkdir -p generated/logs/information-gathering
          
          # 入力されたトピックまたはイシューから分析対象を抽出
          INPUT_TOPIC="${{ github.event.inputs.news_topic }}"
          ANALYSIS_PERIOD="${{ github.event.inputs.analysis_period }}"
          
          echo "Input topic: $INPUT_TOPIC"
          echo "Analysis period: $ANALYSIS_PERIOD"
          
          # Claude Code でトピック分析・キーワード抽出
          claude-code --prompt "以下のニュース分析要求からトピックとキーワードを抽出してJSON形式で回答してください：
          
          分析対象: $INPUT_TOPIC
          期間: $ANALYSIS_PERIOD
          地域焦点: ${{ github.event.inputs.geographic_focus }}
          ニュースソース: ${{ github.event.inputs.news_sources }}
          
          JSON形式で検索キーワードと分析方針を返してください。" > generated/logs/information-gathering/topic-analysis.json
          
          echo "keywords_ready=true" >> $GITHUB_OUTPUT
          echo "✅ Topic and keyword extraction completed"

  # Phase 3: ニュース収集段階
  news-collection:
    needs: topic-extraction
    runs-on: ubuntu-latest
    outputs:
      collection_ready: ${{ steps.collect.outputs.collection_ready }}
    steps:
      - name: Collect news from multiple sources
        id: collect
    env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📰 Collecting news from multiple sources..."
          
          mkdir -p generated/logs/information-gathering/sources
          
          # Web Search API を使用したニュース収集
          echo "Collecting from web search..."
          if [ -n "${{ secrets.GOOGLE_SEARCH_API_KEY }}" ] && [ -n "${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}" ]; then
            curl -s "https://www.googleapis.com/customsearch/v1?key=${{ secrets.GOOGLE_SEARCH_API_KEY }}&cx=${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}&q=${SEARCH_KEYWORDS}+news&num=10&dateRestrict=d1" \
              > generated/logs/information-gathering/sources/web-search-results.json 2>&1
          else
            echo '{"items":[]}' > generated/logs/information-gathering/sources/web-search-results.json
          fi
          
          # 追加の検索（異なる角度から）
          echo "Collecting additional perspectives..."
          RELATED_TERMS=$(echo "$TOPIC_ANALYSIS" | jq -r '.related_terms[0:3] | join("+")')
          if [ -n "${{ secrets.GOOGLE_SEARCH_API_KEY }}" ] && [ -n "${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}" ]; then
            curl -s "https://www.googleapis.com/customsearch/v1?key=${{ secrets.GOOGLE_SEARCH_API_KEY }}&cx=${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}&q=${RELATED_TERMS}+analysis+report&num=10" \
              > generated/logs/information-gathering/sources/related-search-results.json 2>&1
          else
            echo '{"items":[]}' > generated/logs/information-gathering/sources/related-search-results.json
          fi
          
          # 外部ニュースAPI使用（利用可能な場合）
          if [ "$ENHANCED_COLLECTION" = "true" ] && [ -n "${{ secrets.NEWS_API_KEY }}" ]; then
            echo "Collecting from News API..."
            curl -s "https://newsapi.org/v2/everything?q=$SEARCH_KEYWORDS&sortBy=publishedAt&pageSize=30&apiKey=${{ secrets.NEWS_API_KEY }}" \
              > generated/logs/information-gathering/sources/news-api-results.json 2>&1 || echo "News API collection failed"
          fi
          
          # RSS フィード収集（利用可能な場合）
          if [ "$RSS_STATUS" = "success" ]; then
            echo "Collecting from RSS feeds..."
            # 主要ニュースサイトのRSSフィード
            curl -s "https://rss.cnn.com/rss/edition.rss" | head -n 100 > generated/logs/information-gathering/sources/cnn-rss.xml 2>&1 || echo '{"items":[]}' > generated/logs/information-gathering/sources/cnn-rss.json
            curl -s "https://feeds.reuters.com/reuters/topNews" | head -n 100 > generated/logs/information-gathering/sources/reuters-rss.xml 2>&1 || echo '{"items":[]}' > generated/logs/information-gathering/sources/reuters-rss.json
          fi
          
          # 収集結果の統合
          echo "Consolidating collected news..."
          claude-code --prompt "以下の複数ソースから収集したニュースデータを統合・整理してください：
          
          Web検索結果: $(cat generated/logs/information-gathering/sources/web-search-results.json 2>/dev/null || echo '{}')
          関連検索結果: $(cat generated/logs/information-gathering/sources/related-search-results.json 2>/dev/null || echo '{}')
          $([ -f 'generated/logs/information-gathering/sources/news-api-results.json' ] && echo "News API結果: $(cat generated/logs/information-gathering/sources/news-api-results.json)" || echo "")
          
          以下の形式でJSONで回答してください：
          {
            \"collection_summary\": {
              \"total_articles_found\": \"収集記事数\",
              \"unique_sources\": \"ユニークなソース数\",
              \"collection_timespan\": \"収集対象期間\",
              \"collection_timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            },
            \"articles\": [
              {
                \"title\": \"記事タイトル\",
                \"source\": \"情報源\",
                \"url\": \"記事URL\",
                \"published_date\": \"公開日時\",
                \"summary\": \"記事要約\",
                \"relevance_score\": \"1-10点での関連性スコア\",
                \"source_credibility\": \"high|medium|low\"
              }
            ],
            \"collection_quality\": {
              \"coverage_completeness\": \"1-10点での網羅性\",
              \"source_diversity\": \"1-10点でのソース多様性\",
              \"content_freshness\": \"1-10点での情報新鮮度\"
            }
          }" > generated/logs/information-gathering/consolidated-news.json
          
          CONSOLIDATED_NEWS=$(cat generated/logs/information-gathering/consolidated-news.json)
          echo "collection_ready=true" >> $GITHUB_OUTPUT
          echo "📰 Multi-source news collection completed"

  # Phase 4: ニュース分析段階
  news-analysis:
    needs: news-collection
    runs-on: ubuntu-latest
    outputs:
      analysis_ready: ${{ steps.analyze.outputs.analysis_ready }}
    steps:
      - name: Analyze collected news content
        id: analyze
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔍 Analyzing collected news content..."
          
          mkdir -p generated/logs/news-analysis
          
          claude-code --prompt "収集されたニュースを分析し、以下の観点で要約してください：
          
          分析焦点: ${{ github.event.inputs.analysis_focus }}
          要約レベル: ${{ github.event.inputs.summary_length }}
          期間: ${{ github.event.inputs.analysis_period }}
          
          JSON形式で分析結果を返してください。" > generated/logs/news-analysis/analysis-report.json
          
          echo "analysis_ready=true" >> $GITHUB_OUTPUT
          echo "🔍 News analysis completed"

  # Phase 5: レポート生成段階
  report-generation:
    needs: news-analysis
    runs-on: ubuntu-latest
    outputs:
      report_ready: ${{ steps.generate.outputs.report_ready }}
    steps:
      - name: Generate comprehensive news report
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📋 Generating comprehensive news report..."
          
          mkdir -p generated/logs/report-generation
          
          claude-code --prompt "分析されたニュースデータから最終レポートを生成してください：
          
          出力形式: ${{ github.event.inputs.output_format }}
          情報源表示: ${{ github.event.inputs.include_sources }}
          緊急度レベル: ${{ github.event.inputs.urgency_level }}
          
          指定された形式でレポートを作成してください。" > generated/logs/report-generation/final-report.json
          
          echo "report_ready=true" >> $GITHUB_OUTPUT
          echo "📋 Report generation completed"

  # Phase 6: 最終パッケージ作成
  final-packaging:
    needs: [connectivity-test, topic-extraction, news-collection, news-analysis, report-generation]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive news analysis package
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📦 Creating comprehensive news analysis package..."
          
          mkdir -p .final-output/{analysis,reports,sources}
          
          # 分析ドキュメント
          cp generated/logs/information-gathering/topic-analysis.json .final-output/analysis/ 2>/dev/null || true
          cp generated/logs/news-analysis/analysis-report.json .final-output/analysis/ 2>/dev/null || true
          
          # レポート
          cp generated/logs/report-generation/final-report.json .final-output/reports/ 2>/dev/null || true
          
          # ソースデータ
          cp generated/logs/information-gathering/consolidated-news.json .final-output/sources/ 2>/dev/null || true
          
          # マスター情報
          cat > .final-output/news-analysis-master.json << EOF
          {
            "project_info": {
              "project_name": "AI News Summarization & Analysis",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "analysis_type": "news_summarization_and_analysis"
            },
            "input_parameters": {
              "news_topic": "${{ github.event.inputs.news_topic }}",
              "news_sources": "${{ github.event.inputs.news_sources }}",
              "geographic_focus": "${{ github.event.inputs.geographic_focus }}",
              "analysis_period": "${{ github.event.inputs.analysis_period }}",
              "summary_length": "${{ github.event.inputs.summary_length }}",
              "analysis_focus": "${{ github.event.inputs.analysis_focus }}",
              "output_format": "${{ github.event.inputs.output_format }}",
              "urgency_level": "${{ github.event.inputs.urgency_level }}",
              "include_sources": "${{ github.event.inputs.include_sources }}"
            },
            "deliverables": {
              "analysis_documents": {
                "topic_analysis": "analysis/topic-analysis.json",
                "content_analysis": "analysis/analysis-report.json"
              },
              "reports": {
                "final_report": "reports/final-report.json"
              },
              "source_data": {
                "consolidated_news": "sources/consolidated-news.json"
              }
            }
          }
          EOF
          
          echo "📦 Final news analysis packaging completed"
          
      - name: Upload News Analysis Package
        uses: actions/upload-artifact@v4
        with:
          name: news-analysis-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30
