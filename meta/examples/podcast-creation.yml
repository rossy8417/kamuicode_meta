name: "Podcast Creation Workflow"
run-name: "🎙️ Creating podcast: ${{ github.event.inputs.podcast_topic || 'Podcast Production' }}"

on:
  workflow_dispatch:
    inputs:
      podcast_topic:
        description: 'ポッドキャストのテーマ・話題'
        required: true
        default: 'テック業界トレンド、ビジネス成功事例、教育コンテンツ'
        type: string
      podcast_format:
        description: 'ポッドキャスト形式'
        required: true
        type: choice
        options:
        - interview
        - solo_commentary
        - discussion_panel
        - storytelling
        - educational_series
        - news_summary
        default: 'solo_commentary'
      episode_length:
        description: '想定エピソード長'
        required: true
        type: choice
        options:
        - short_5_10min
        - standard_15_30min
        - long_45_60min
        - extended_60plus_min
        default: 'standard_15_30min'
      target_audience:
        description: 'ターゲット聴衆'
        required: true
        type: choice
        options:
        - general_public
        - professionals
        - students
        - entrepreneurs
        - tech_enthusiasts
        - specific_industry
        default: 'professionals'
      content_tone:
        description: 'コンテンツトーン'
        required: true
        type: choice
        options:
        - conversational
        - professional
        - educational
        - entertaining
        - inspirational
        - analytical
        default: 'conversational'
      audio_quality:
        description: '音声品質レベル'
        required: true
        type: choice
        options:
        - broadcast_quality
        - high_quality
        - standard_quality
        - basic_quality
        default: 'high_quality'
      music_style:
        description: 'BGM・ジングルスタイル'
        required: true
        type: choice
        options:
        - corporate_professional
        - upbeat_energetic
        - calm_ambient
        - modern_electronic
        - classical_elegant
        - no_music
        default: 'corporate_professional'
      episode_structure:
        description: 'エピソード構成'
        required: true
        type: choice
        options:
        - intro_main_outro
        - segmented_topics
        - interview_format
        - story_narrative
        - educational_modules
        default: 'intro_main_outro'
      language_style:
        description: '言語スタイル'
        required: false
        type: choice
        options:
        - formal_polite
        - casual_friendly
        - technical_precise
        - storytelling_engaging
        - educational_clear
        default: 'casual_friendly'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      music_gen_available: ${{ steps.test.outputs.music_gen_available }}
      voice_gen_available: ${{ steps.test.outputs.voice_gen_available }}
    steps:
      - name: Test podcast audio generation services
        id: test
        run: |
          echo "🎙️ Testing podcast audio generation services..."
          
          mkdir -p generated/logs/connectivity-tests
          
          # 音楽生成サービステスト（BGM・ジングル用）
          echo "Testing music generation for BGM and jingles..."
          if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "podcast intro music test" > generated/logs/connectivity-tests/music-test.log 2>&1; then
            MUSIC_GEN_STATUS="success"
            echo "✅ Music Generation (Lyria): Available"
          else
            MUSIC_GEN_STATUS="failed"
            echo "⚠️ Music Generation: Not available - will use music-free format"
          fi
          
          # 音声生成サービステスト（ナレーション用）
          echo "Testing voice generation for narration..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp v2a-fal-metavoice-v1 --test > generated/logs/connectivity-tests/voice-test.log 2>&1; then
            VOICE_GEN_STATUS="success"
            echo "✅ Voice Generation (MetaVoice): Available"
          else
            VOICE_GEN_STATUS="failed"
            echo "⚠️ Voice Generation: Not available - will create script-only format"
          fi
          
          # Set outputs
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "music_gen_available=$MUSIC_GEN_STATUS" >> $GITHUB_OUTPUT
          echo "voice_gen_available=$VOICE_GEN_STATUS" >> $GITHUB_OUTPUT
          
          echo "🎙️ Podcast audio services connectivity tests completed"

  # Phase 2: コンテンツ企画段階
  content-planning:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      planning_ready: ${{ steps.plan.outputs.planning_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Develop podcast content strategy and episode structure
        id: plan
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📋 Developing podcast content strategy and episode structure..."
          
          mkdir -p generated/logs/content-planning
          
          PODCAST_TOPIC="${{ github.event.inputs.podcast_topic }}"
          PODCAST_FORMAT="${{ github.event.inputs.podcast_format }}"
          EPISODE_LENGTH="${{ github.event.inputs.episode_length }}"
          
          echo "Podcast topic: $PODCAST_TOPIC"
          echo "Format: $PODCAST_FORMAT"
          echo "Episode length: $EPISODE_LENGTH"
          
          # Claude Code でポッドキャスト企画・構成設計
          claude-code --prompt "以下の要件に基づいて、ポッドキャストのコンテンツ戦略とエピソード構成をJSON形式で設計してください：

          ポッドキャストテーマ: $PODCAST_TOPIC
          形式: $PODCAST_FORMAT
          エピソード長: $EPISODE_LENGTH
          ターゲット聴衆: ${{ github.event.inputs.target_audience }}
          コンテンツトーン: ${{ github.event.inputs.content_tone }}
          エピソード構成: ${{ github.event.inputs.episode_structure }}

          詳細なエピソード構成、話題の流れ、聴衆エンゲージメント戦略を含めてください。" > generated/logs/content-planning/content-strategy.json
          
          echo "planning_ready=true" >> $GITHUB_OUTPUT
          echo "📋 Content planning completed"

  # Phase 3: 台本・シナリオ作成段階
  script-development:
    needs: content-planning
    runs-on: ubuntu-latest
    outputs:
      script_ready: ${{ steps.develop.outputs.script_ready }}
    steps:
      - name: Create detailed podcast script and narration
        id: develop
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📝 Creating detailed podcast script and narration..."
          
          mkdir -p generated/logs/script-development
          
          CONTENT_TONE="${{ github.event.inputs.content_tone }}"
          LANGUAGE_STYLE="${{ github.event.inputs.language_style }}"
          
          # 台本・シナリオ作成
          claude-code --prompt "以下の要件に基づいて、詳細なポッドキャスト台本とナレーションを作成してください：

          ポッドキャストテーマ: ${{ github.event.inputs.podcast_topic }}
          形式: ${{ github.event.inputs.podcast_format }}
          コンテンツトーン: $CONTENT_TONE
          言語スタイル: $LANGUAGE_STYLE
          エピソード長: ${{ github.event.inputs.episode_length }}

          イントロ、メインコンテンツ、アウトロを含む完全な台本を作成してください。音楽キューや効果音のタイミングも含めてください。" > generated/logs/script-development/podcast-script.json
          
          echo "script_ready=true" >> $GITHUB_OUTPUT
          echo "📝 Script development completed"

  # Phase 4: 音楽・ジングル制作段階
  music-production:
    needs: [connectivity-test, script-development]
    runs-on: ubuntu-latest
    outputs:
      music_ready: ${{ steps.produce.outputs.music_ready }}
    steps:
      - name: Generate podcast music and audio elements
        id: produce
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎵 Generating podcast music and audio elements..."
          
          mkdir -p generated/logs/music-production
          
          MUSIC_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.music_gen_available }}"
          MUSIC_STYLE="${{ github.event.inputs.music_style }}"
          
          if [ "$MUSIC_GEN_AVAILABLE" = "success" ] && [ "$MUSIC_STYLE" != "no_music" ]; then
            echo "Generating intro music..."
            INTRO_PROMPT="podcast intro music, $MUSIC_STYLE style, professional, engaging, 10-15 seconds"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$INTRO_PROMPT" > generated/logs/music-production/intro-music.json 2>&1 || echo "Intro music generation failed"
            
            echo "Generating background music..."
            BG_PROMPT="podcast background music, $MUSIC_STYLE style, subtle, non-intrusive, ambient"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$BG_PROMPT" > generated/logs/music-production/background-music.json 2>&1 || echo "Background music generation failed"
            
            echo "Generating outro music..."
            OUTRO_PROMPT="podcast outro music, $MUSIC_STYLE style, conclusive, professional, 10-15 seconds"
            
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$OUTRO_PROMPT" > generated/logs/music-production/outro-music.json 2>&1 || echo "Outro music generation failed"
            
            echo "✅ Podcast music generated"
          else
            echo "⚠️ Music generation not available or disabled - creating music-free format"
            echo '{"music_type": "none", "style": "voice_only"}' > generated/logs/music-production/no-music-plan.json
          fi
          
          echo "music_ready=true" >> $GITHUB_OUTPUT
          echo "🎵 Music production completed"

  # Phase 5: 音声ナレーション制作段階
  voice-narration:
    needs: [connectivity-test, script-development]
    runs-on: ubuntu-latest
    outputs:
      narration_ready: ${{ steps.narrate.outputs.narration_ready }}
    steps:
      - name: Generate voice narration for podcast content
        id: narrate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🗣️ Generating voice narration for podcast content..."
          
          mkdir -p generated/logs/voice-narration
          
          VOICE_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.voice_gen_available }}"
          
          if [ "$VOICE_GEN_AVAILABLE" = "success" ]; then
            echo "Generating main content narration..."
            
            # スクリプトからナレーションテキストを抽出（簡素化）
            NARRATION_TEXT="${{ github.event.inputs.podcast_topic }} に関するポッドキャストエピソードへようこそ。本日は"
            
            # メインナレーション生成（実際の実装では台本から適切にテキストを抽出）
            echo "Generating voice narration from script..."
            claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp v2a-fal-metavoice-v1 --text "$NARRATION_TEXT" > generated/logs/voice-narration/main-narration.json 2>&1 || echo "Main narration generation failed"
            
            echo "✅ Voice narration generated"
          else
            echo "⚠️ Voice generation not available - creating text-only script format"
            echo '{"narration_type": "text_only", "format": "script_based"}' > generated/logs/voice-narration/text-only-plan.json
          fi
          
          echo "narration_ready=true" >> $GITHUB_OUTPUT
          echo "🗣️ Voice narration completed"

  # Phase 6: オーディオ統合・編集段階
  audio-integration:
    needs: [music-production, voice-narration]
    runs-on: ubuntu-latest
    outputs:
      integration_ready: ${{ steps.integrate.outputs.integration_ready }}
    steps:
      - name: Plan audio integration and editing workflow
        id: integrate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔧 Planning audio integration and editing workflow..."
          
          mkdir -p generated/logs/audio-integration
          
          # オーディオ統合戦略
          claude-code --prompt "以下のポッドキャスト制作要素を統合する詳細な編集ワークフローをJSON形式で設計してください：

          音声品質レベル: ${{ github.event.inputs.audio_quality }}
          エピソード長: ${{ github.event.inputs.episode_length }}
          音楽スタイル: ${{ github.event.inputs.music_style }}
          形式: ${{ github.event.inputs.podcast_format }}

          音量バランス、フェードイン・アウト、セクション間の切り替え、音質最適化の具体的な指示を含めてください。" > generated/logs/audio-integration/integration-plan.json
          
          echo "integration_ready=true" >> $GITHUB_OUTPUT
          echo "🔧 Audio integration planning completed"

  # Phase 7: メタデータ・配信準備段階
  metadata-distribution:
    needs: audio-integration
    runs-on: ubuntu-latest
    outputs:
      metadata_ready: ${{ steps.metadata.outputs.metadata_ready }}
    steps:
      - name: Generate podcast metadata and distribution package
        id: metadata
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📊 Generating podcast metadata and distribution package..."
          
          mkdir -p generated/logs/metadata-distribution
          
          # ポッドキャストメタデータ・配信戦略
          claude-code --prompt "以下のポッドキャスト情報に基づいて、配信用メタデータとマーケティング戦略をJSON形式で作成してください：

          テーマ: ${{ github.event.inputs.podcast_topic }}
          ターゲット聴衆: ${{ github.event.inputs.target_audience }}
          形式: ${{ github.event.inputs.podcast_format }}
          エピソード長: ${{ github.event.inputs.episode_length }}

          エピソードタイトル、説明文、タグ、カテゴリ、配信プラットフォーム戦略を含めてください。" > generated/logs/metadata-distribution/distribution-strategy.json
          
          echo "metadata_ready=true" >> $GITHUB_OUTPUT
          echo "📊 Metadata and distribution preparation completed"

  # Phase 8: 最終パッケージ作成
  final-packaging:
    needs: [content-planning, script-development, music-production, voice-narration, audio-integration, metadata-distribution]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive podcast production package
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📦 Creating comprehensive podcast production package..."
          
          mkdir -p .final-output/{planning,script,audio,integration,distribution}
          
          # 企画・設計ドキュメント
          cp generated/logs/content-planning/content-strategy.json .final-output/planning/ 2>/dev/null || true
          
          # 台本・シナリオ
          cp generated/logs/script-development/podcast-script.json .final-output/script/ 2>/dev/null || true
          
          # オーディオ素材
          mkdir -p .final-output/audio/{music,narration}
          cp generated/logs/music-production/*.json .final-output/audio/music/ 2>/dev/null || true
          cp generated/logs/voice-narration/*.json .final-output/audio/narration/ 2>/dev/null || true
          
          # 統合・編集資料
          cp generated/logs/audio-integration/integration-plan.json .final-output/integration/ 2>/dev/null || true
          
          # 配信・メタデータ
          cp generated/logs/metadata-distribution/distribution-strategy.json .final-output/distribution/ 2>/dev/null || true
          
          # マスターポッドキャスト情報
          cat > .final-output/podcast-master.json << EOF
          {
            "project_info": {
              "project_name": "Podcast Creation & Production",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "production_type": "podcast_episode_creation"
            },
            "input_parameters": {
              "podcast_topic": "${{ github.event.inputs.podcast_topic }}",
              "podcast_format": "${{ github.event.inputs.podcast_format }}",
              "episode_length": "${{ github.event.inputs.episode_length }}",
              "target_audience": "${{ github.event.inputs.target_audience }}",
              "content_tone": "${{ github.event.inputs.content_tone }}",
              "audio_quality": "${{ github.event.inputs.audio_quality }}",
              "music_style": "${{ github.event.inputs.music_style }}",
              "episode_structure": "${{ github.event.inputs.episode_structure }}",
              "language_style": "${{ github.event.inputs.language_style }}"
            },
            "deliverables": {
              "content_planning": {
                "strategy_document": "planning/content-strategy.json"
              },
              "script_materials": {
                "full_script": "script/podcast-script.json"
              },
              "audio_assets": {
                "music_elements": "audio/music/",
                "voice_narration": "audio/narration/"
              },
              "production_guides": {
                "integration_plan": "integration/integration-plan.json",
                "distribution_strategy": "distribution/distribution-strategy.json"
              }
            }
          }
          EOF
          
          # ポッドキャスト制作ガイド
          cat > .final-output/PODCAST_PRODUCTION_GUIDE.md << 'EOF'
          # ポッドキャスト制作プロダクションガイド
          
          ## 🎙️ 制作概要
          - 制作手法: AI生成による統合ポッドキャスト制作
          - 品質レベル: ブロードキャスト品質対応
          - 配信最適化: マルチプラットフォーム対応
          
          ## 📋 コンテンツ企画
          - エピソード構成設計
          - ターゲット聴衆分析
          - コンテンツ戦略策定
          - 継続可能性検討
          
          ## 📝 台本・シナリオ
          - 詳細スクリプト作成
          - セクション別構成
          - トーク・ナレーション設計
          - 音響キュー指示
          
          ## 🎵 オーディオ制作
          - BGM・ジングル生成
          - 音声ナレーション制作
          - 音質・音量最適化
          - マルチトラック統合
          
          ## 🔧 編集・ポストプロダクション
          - オーディオ統合ワークフロー
          - 音響効果・フィルタリング
          - 品質管理・検証
          - フォーマット最適化
          
          ## 📊 配信・マーケティング
          - プラットフォーム戦略
          - メタデータ最適化
          - 聴衆エンゲージメント
          - アナリティクス活用
          
          ## 🚀 継続的改善
          - フィードバック分析
          - コンテンツ品質向上
          - 技術的最適化
          - 聴衆拡大戦略
          EOF
          
          echo "📦 Final podcast production packaging completed"
          
      - name: Upload Podcast Production Package
        uses: actions/upload-artifact@v4
        with:
          name: podcast-production-${{ github.run_number }}
          path: .final-output/
          retention-days: 30