name: "3D Model Creation Workflow"
run-name: "🧊 Creating 3D model: ${{ github.event.inputs.model_concept || '3D Model Creation' }}"

on:
  workflow_dispatch:
    inputs:
      model_concept:
        description: '3Dモデルコンセプト'
        required: true
        default: '商品パッケージの3D表示、建築物の立体モデル、キャラクターフィギュア'
        type: string
      model_type:
        description: 'モデルタイプ'
        required: true
        type: choice
        options:
        - product
        - architectural
        - character
        - mechanical
        - organic
        - abstract
        default: 'product'
      detail_level:
        description: '詳細レベル'
        required: true
        type: choice
        options:
        - low_poly
        - medium_detail
        - high_detail
        - ultra_detail
        default: 'medium_detail'
      reference_angles:
        description: '参照アングル数 (1-8)'
        required: true
        default: '4'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
      model_scale:
        description: 'モデルスケール'
        required: true
        type: choice
        options:
        - miniature
        - standard
        - large_scale
        default: 'standard'
      surface_quality:
        description: '表面品質'
        required: true
        type: choice
        options:
        - smooth
        - textured
        - rough
        - mixed
        default: 'textured'
      output_format:
        description: '出力フォーマット'
        required: true
        type: choice
        options:
        - obj_mtl
        - fbx
        - gltf
        - stl
        - all_formats
        default: 'obj_mtl'
      optimization_level:
        description: '最適化レベル'
        required: true
        type: choice
        options:
        - none
        - light
        - balanced
        - aggressive
        default: 'balanced'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      threed_gen_available: ${{ steps.test.outputs.threed_gen_available }}
      image_enhancement_available: ${{ steps.test.outputs.image_enhancement_available }}
      ref_image_available: ${{ steps.test.outputs.ref_image_available }}
    steps:
      - name: Test 3D generation and processing services
        id: test
        run: |
          echo "🧊 Testing 3D generation and processing services..."
          
          mkdir -p .logs/connectivity-tests
          
          # 3Dモデル生成サービステスト（I2I3D）
          echo "Testing 3D model generation service..."
          if timeout 180 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --test > .logs/connectivity-tests/3d-gen-test.log 2>&1; then
            THREED_GEN_STATUS="success"
            echo "✅ 3D Model Generation (Hunyuan3D): Available"
          else
            THREED_GEN_STATUS="failed"
            echo "❌ 3D Model Generation: Failed"
          fi
          
          # 画像生成サービステスト（参照画像作成用）
          echo "Testing image generation for reference creation..."
          if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "3d reference object test" > .logs/connectivity-tests/ref-image-test.log 2>&1; then
            REF_IMAGE_STATUS="success"
            echo "✅ Reference Image Generation: Available"
          else
            REF_IMAGE_STATUS="failed"
            echo "⚠️ Reference Image Generation: Not available"
          fi
          
          # 画像強化サービステスト（3D生成前の前処理用）
          echo "Testing image enhancement for preprocessing..."
          if timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max --test > .logs/connectivity-tests/enhancement-test.log 2>&1; then
            IMAGE_ENHANCEMENT_STATUS="success" 
            echo "✅ Image Enhancement: Available"
          else
            IMAGE_ENHANCEMENT_STATUS="failed"
            echo "⚠️ Image Enhancement: Not available"
          fi
          
          # 3D制作能力の評価
          BASIC_3D_CAPABILITY="none"
          
          # 基本機能（3D生成）
          if [ "$THREED_GEN_STATUS" = "success" ]; then
            BASIC_3D_CAPABILITY="available"
          fi
          
          # 出力設定
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "threed_gen_available=$THREED_GEN_STATUS" >> $GITHUB_OUTPUT
          echo "image_enhancement_available=$IMAGE_ENHANCEMENT_STATUS" >> $GITHUB_OUTPUT
          echo "ref_image_available=$REF_IMAGE_STATUS" >> $GITHUB_OUTPUT
          
          echo "🧊 3D services connectivity tests completed"

  # Phase 2: 概念可視化段階
  concept-development:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      concept_ready: ${{ steps.develop.outputs.concept_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Develop 3D model concept and specifications
        id: develop
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎯 Developing 3D model concept and specifications..."
          
          mkdir -p .logs/3d-concept
          
          # 入力から3D要件を抽出
          MODEL_CONCEPT="${{ github.event.inputs.model_concept }}"
          MODEL_TYPE="${{ github.event.inputs.model_type }}"
          DETAIL_LEVEL="${{ github.event.inputs.detail_level }}"
          
          echo "Model concept: $MODEL_CONCEPT"
          echo "Type: $MODEL_TYPE"
          echo "Detail level: $DETAIL_LEVEL"
          
          # Claude Code で3Dコンセプト設計
          claude-code --prompt "以下の要件に基づいて、3Dモデル制作の詳細なコンセプトと技術仕様を設計してください：
          
          モデルコンセプト: $MODEL_CONCEPT
          モデルタイプ: $MODEL_TYPE
          詳細レベル: $DETAIL_LEVEL
          
          JSON形式で3Dモデル仕様を返してください。" > .logs/3d-concept/3d-concept.json
          
          echo "concept_ready=true" >> $GITHUB_OUTPUT
          echo "🎯 3D concept development completed"

  # Phase 3: 参照準備段階
  reference-preparation:
    needs: [connectivity-test, concept-development]
    runs-on: ubuntu-latest
    outputs:
      references_ready: ${{ steps.prepare.outputs.references_ready }}
    steps:
      - name: Generate and prepare reference images
        id: prepare
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🖼️ Generating and preparing reference images..."
          
          mkdir -p .logs/reference-preparation
          
          REF_IMAGE_AVAILABLE="${{ needs.connectivity-test.outputs.ref_image_available }}"
          MODEL_CONCEPT="${{ github.event.inputs.model_concept }}"
          REFERENCE_ANGLES="${{ github.event.inputs.reference_angles }}"
          
          if [ "$REF_IMAGE_AVAILABLE" = "success" ]; then
            echo "Reference image generation service available - creating reference images..."
            
            # メイン参照画像の生成
            echo "Generating primary reference image..."
            PRIMARY_PROMPT="$MODEL_CONCEPT, perfect for 3D modeling reference, clear details, neutral background, professional product photography lighting, high resolution"
            
            if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$PRIMARY_PROMPT" > .logs/reference-preparation/primary-reference.json 2>&1; then
              echo "✅ Primary reference image generated"
              PRIMARY_REF_STATUS="success"
            else
              echo "❌ Primary reference generation failed"
              PRIMARY_REF_STATUS="failed"
            fi
          else
            echo "⚠️ Reference image generation not available"
            PRIMARY_REF_STATUS="service_unavailable"
          fi
          
          echo "references_ready=$PRIMARY_REF_STATUS" >> $GITHUB_OUTPUT
          echo "🖼️ Reference image preparation completed"

  # Phase 4: 3D生成段階
  threed-generation:
    needs: [connectivity-test, reference-preparation]
    runs-on: ubuntu-latest
    outputs:
      generation_results: ${{ steps.generate.outputs.generation_results }}
    steps:
      - name: Generate primary 3D models
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🧊 Generating primary 3D models..."
          
          mkdir -p .logs/3d-generation
          
          THREED_GEN_AVAILABLE="${{ needs.connectivity-test.outputs.threed_gen_available }}"
          
          if [ "$THREED_GEN_AVAILABLE" = "success" ]; then
            echo "3D model generation service available - creating models..."
            
            # プライマリ参照画像から3Dモデル生成
            PRIMARY_REF_FILE=$(ls .logs/reference-preparation/primary-reference*.json 2>/dev/null | head -1)
            
            if [ -n "$PRIMARY_REF_FILE" ]; then
              PRIMARY_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$PRIMARY_REF_FILE" 2>/dev/null)
              
              if [ "$PRIMARY_IMAGE_PATH" != "none" ]; then
                echo "Generating 3D model from primary reference..."
                
                if timeout 240 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$PRIMARY_IMAGE_PATH" > .logs/3d-generation/primary-3d-model.json 2>&1; then
                  echo "✅ Primary 3D model generated successfully"
                  PRIMARY_3D_STATUS="success"
                else
                  echo "❌ Primary 3D model generation failed"
                  PRIMARY_3D_STATUS="failed"
                fi
              else
                echo "⚠️ Primary reference image path not found"
                PRIMARY_3D_STATUS="no_reference"
              fi
            else
              echo "⚠️ No primary reference image available"
              PRIMARY_3D_STATUS="no_reference"
            fi
          else
            echo "⚠️ 3D model generation service not available"
            PRIMARY_3D_STATUS="service_unavailable"
          fi
          
          # 3D生成結果をログ保存
          cat > .logs/3d-generation/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "primary_3d_status": "$PRIMARY_3D_STATUS",
            "generation_service_used": "$([ "$THREED_GEN_AVAILABLE" = "success" ] && echo "i2i3d-fal-hunyuan3d-v21" || echo "none")"
          }
          EOF
          
          echo "generation_results<<EOF" >> $GITHUB_OUTPUT
          cat .logs/3d-generation/generation-log.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "🧊 Primary 3D model generation completed"

  # Phase 5: モデル最適化段階
  model-optimization:
    needs: threed-generation
    runs-on: ubuntu-latest
    outputs:
      optimization_status: ${{ steps.optimize.outputs.optimization_status }}
    steps:
      - name: Optimize 3D models for performance and quality
        id: optimize
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "⚡ Optimizing 3D models for performance and quality..."
          
          mkdir -p .logs/model-optimization
          
          GENERATION_RESULTS='${{ needs.threed-generation.outputs.generation_results }}'
          OPTIMIZATION_LEVEL="${{ github.event.inputs.optimization_level }}"
          
          # 3D最適化分析
          claude-code --prompt "以下の3D生成結果を基に、モデル最適化と品質向上の詳細分析を行ってください：
          
          生成ログ: $GENERATION_RESULTS
          最適化レベル: $OPTIMIZATION_LEVEL
          
          JSON形式で最適化推奨事項を返してください。" > .logs/model-optimization/optimization-analysis.json
          
          echo "optimization_status=completed" >> $GITHUB_OUTPUT
          echo "⚡ 3D model optimization completed"

  # Phase 6: レンダリング設定段階
  rendering-setup:
    needs: model-optimization
    runs-on: ubuntu-latest
    outputs:
      rendering_ready: ${{ steps.setup.outputs.rendering_ready }}
    steps:
      - name: Setup rendering and visualization configurations
        id: setup
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎨 Setting up rendering and visualization configurations..."
          
          mkdir -p .logs/rendering-setup
          
          OUTPUT_FORMAT="${{ github.event.inputs.output_format }}"
          SURFACE_QUALITY="${{ github.event.inputs.surface_quality }}"
          
          # レンダリング設定分析
          claude-code --prompt "以下の3Dプロジェクト情報を基に、最適なレンダリングと可視化設定を設計してください：
          
          出力フォーマット: $OUTPUT_FORMAT
          表面品質: $SURFACE_QUALITY
          
          JSON形式でレンダリング設定を返してください。" > .logs/rendering-setup/rendering-configuration.json
          
          echo "rendering_ready=true" >> $GITHUB_OUTPUT
          echo "🎨 Rendering and visualization setup completed"

  # Phase 7: 配信準備段階
  delivery-packaging:
    needs: [threed-generation, model-optimization, rendering-setup]
    runs-on: ubuntu-latest
    steps:
      - name: Create delivery package and optimize formats
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "📦 Creating 3D delivery package and optimizing formats..."
          
          mkdir -p .logs/delivery-packaging
          
          OUTPUT_FORMAT="${{ github.event.inputs.output_format }}"
          OPTIMIZATION_LEVEL="${{ github.event.inputs.optimization_level }}"
          
          # 配信パッケージ戦略
          claude-code --prompt "以下の3Dプロジェクト情報を基に、配信パッケージとフォーマット最適化戦略を設計してください：
          
          出力フォーマット: $OUTPUT_FORMAT
          最適化レベル: $OPTIMIZATION_LEVEL
          
          JSON形式で配信戦略を返してください。" > .logs/delivery-packaging/delivery-strategy.json
          
          echo "📦 3D delivery packaging completed"

  # Phase 8: 最終パッケージ作成
  final-packaging:
    needs: [concept-development, threed-generation, model-optimization, rendering-setup, delivery-packaging]
    runs-on: ubuntu-latest
    steps:
      - name: Create comprehensive 3D project delivery package
        run: |
          echo "📦 Creating comprehensive 3D project delivery package..."
          
          mkdir -p .final-output/{concept,generation,optimization,rendering}
          
          # プロジェクト文書
          cp .logs/3d-concept/3d-concept.json .final-output/concept/ 2>/dev/null || true
          
          # 3D生成成果物
          mkdir -p .final-output/generation/{models,references}
          cp .logs/3d-generation/*.json .final-output/generation/models/ 2>/dev/null || true
          cp .logs/reference-preparation/*.json .final-output/generation/references/ 2>/dev/null || true
          
          # 最適化・レンダリング資料
          cp .logs/model-optimization/*.json .final-output/optimization/ 2>/dev/null || true
          cp .logs/rendering-setup/*.json .final-output/rendering/ 2>/dev/null || true
          cp .logs/delivery-packaging/*.json .final-output/rendering/ 2>/dev/null || true
          
          # マスター3Dプロジェクト情報
          cat > .final-output/3d-project-master.json << EOF
          {
            "project_info": {
              "project_name": "3D Model Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "project_type": "3d_model_generation_and_optimization"
            },
            "input_parameters": {
              "model_concept": "${{ github.event.inputs.model_concept }}",
              "model_type": "${{ github.event.inputs.model_type }}",
              "detail_level": "${{ github.event.inputs.detail_level }}",
              "reference_angles": ${{ github.event.inputs.reference_angles }},
              "model_scale": "${{ github.event.inputs.model_scale }}",
              "surface_quality": "${{ github.event.inputs.surface_quality }}",
              "output_format": "${{ github.event.inputs.output_format }}",
              "optimization_level": "${{ github.event.inputs.optimization_level }}"
            },
            "deliverables": {
              "concept_documents": {
                "3d_concept": "concept/3d-concept.json"
              },
              "3d_assets": {
                "generated_models": "generation/models/",
                "reference_images": "generation/references/"
              },
              "optimization_reports": {
                "model_optimization": "optimization/optimization-analysis.json",
                "rendering_configuration": "rendering/rendering-configuration.json",
                "delivery_strategy": "rendering/delivery-strategy.json"
              }
            }
          }
          EOF
          
          # 3D制作プロジェクトガイドの作成
          cat > .final-output/3D_PROJECT_GUIDE.md << 'EOF'
          # 3Dモデル制作プロジェクトガイド
          
          ## 🧊 プロジェクト概要
          - 制作手法: AI生成による3Dモデル制作
          - 品質レベル: プロフェッショナル対応
          - 最適化: マルチプラットフォーム対応
          
          ## 🎯 3Dモデル仕様
          - ポリゴン予算と最適化レベル
          - テクスチャ解像度と品質設定
          - マテリアル・シェーダー設定
          - LOD (Level of Detail) 戦略
          
          ## 🎨 制作成果物
          - メイン3Dモデル
          - 角度別バリエーション
          - 詳細パーツモデル
          - 参照画像素材
          - レンダリング設定
          
          ## ⚡ 最適化・パフォーマンス
          - プラットフォーム別最適化
          - パフォーマンス目標設定
          - 品質・効率バランス
          - 配信フォーマット対応
          
          ## 🚀 配信・統合
          - フォーマット変換ガイド
          - プラットフォーム統合手順
          - レンダリング設定適用
          - 品質検証プロセス
          EOF
          
          echo "📦 Final 3D project packaging completed"
          
      - name: Upload 3D Model Package
        uses: actions/upload-artifact@v4
        with:
          name: 3d-model-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30