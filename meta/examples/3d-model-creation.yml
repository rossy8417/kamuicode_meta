# 3D„É¢„Éá„É´ÁîüÊàê - Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
name: "3d-model-creation"
description: "2DÁîªÂÉè„Åã„Çâ3D„É¢„Éá„É´ÁîüÊàê„ÉªÊúÄÈÅ©Âåñ„ÉªÊ¥ªÁî®Ê∫ñÂÇô„ÅÆÂ∞ÇÈñÄ„ÉØ„Éº„ÇØ„Éï„É≠„Éº"
category: "3d-content-generation"
complexity_level: 5
estimated_duration_minutes: 30

# ÂãïÁöÑ„É¢„Éº„ÉÄ„É´ÂÖ•Âäõ‰ªïÊßò (Dynamic Modal Input Specification)
dynamic_inputs_spec:
  modal_title: "3D„É¢„Éá„É´Âà∂‰ΩúË®≠ÂÆö"
  modal_description: "2DÁîªÂÉè„Åã„Çâ3D„É¢„Éá„É´ÁîüÊàê„ÉªÊúÄÈÅ©Âåñ„ÅÆË©≥Á¥∞„Éë„É©„É°„Éº„Çø"
  form_sections:
    - section_name: "3D„É¢„Éá„É´„Ç≥„É≥„Çª„Éó„Éà"
      section_description: "Âà∂‰Ωú„Åô„Çã3D„É¢„Éá„É´„ÅÆÂü∫Êú¨Ë®≠Ë®à"
      inputs:
        - name: "model_concept"
          label: "3D„É¢„Éá„É´„Ç≥„É≥„Çª„Éó„Éà"
          type: "textarea"
          required: true
          placeholder: "‰æã: ÂïÜÂìÅ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ3DË°®Á§∫„ÄÅÂª∫ÁØâÁâ©„ÅÆÁ´ã‰Ωì„É¢„Éá„É´„ÄÅ„Ç≠„É£„É©„ÇØ„Çø„Éº„Éï„Ç£„ÇÆ„É•„Ç¢"
          description: "Âà∂‰Ωú„Åó„Åü„ÅÑ3D„É¢„Éá„É´„ÅÆÁî®ÈÄî„ÉªÁõÆÁöÑ„ÉªÁâπÂæ¥„ÇíË©≥Á¥∞„Å´Ë®òËºâ"
          validation:
            min_length: 20
            max_length: 500
        
        - name: "model_type"
          label: "„É¢„Éá„É´„Çø„Ç§„Éó"
          type: "select"
          required: true
          options:
            - value: "product"
              label: "üì¶ Ë£ΩÂìÅ„ÉªÂïÜÂìÅ („Éë„ÉÉ„Ç±„Éº„Ç∏„Éª„Ç¢„Ç§„ÉÜ„É†)"
            - value: "architectural"
              label: "üèóÔ∏è Âª∫ÁØâ„ÉªÊßãÈÄ†Áâ© (Âª∫Áâ©„Éª„Ç§„É≥„ÉÜ„É™„Ç¢)"
            - value: "character"
              label: "üë§ „Ç≠„É£„É©„ÇØ„Çø„Éº„Éª‰∫∫Áâ© („Éï„Ç£„ÇÆ„É•„Ç¢„Éª„Ç¢„Éê„Çø„Éº)"
            - value: "mechanical"
              label: "‚öôÔ∏è Ê©üÊ¢∞„ÉªÂô®ÂÖ∑ („ÉÑ„Éº„É´„ÉªË£ÖÁΩÆ)"
            - value: "organic"
              label: "üåø ÊúâÊ©üÁâ©„ÉªËá™ÁÑ∂ (Ê§çÁâ©„ÉªÂãïÁâ©„ÉªÂú∞ÂΩ¢)"
            - value: "abstract"
              label: "üé® ÊäΩË±°„Éª„Ç¢„Éº„Éà („Éá„Ç∂„Ç§„É≥„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà)"
          default: "product"
        
        - name: "detail_level"
          label: "Ë©≥Á¥∞„É¨„Éô„É´"
          type: "select"
          required: true
          options:
            - value: "low_poly"
              label: "üìê „É≠„Éº„Éù„É™ („Ç∑„É≥„Éó„É´„ÉªÈ´òÈÄüÂá¶ÁêÜ)"
            - value: "medium_detail"
              label: "üéØ ‰∏≠Ë©≥Á¥∞ („Éê„É©„É≥„ÇπÈáçË¶ñ)"
            - value: "high_detail"
              label: "üîç È´òË©≥Á¥∞ („É™„Ç¢„É´„ÉªÈ´òÂìÅË≥™)"
            - value: "ultra_detail"
              label: "üíé Ë∂ÖÈ´òË©≥Á¥∞ (ÊúÄÈ´òÂìÅË≥™„ÉªÈáç„ÅÑ)"
          default: "medium_detail"

    - section_name: "ÁîüÊàê„Éë„É©„É°„Éº„Çø"
      section_description: "3DÁîüÊàê„ÅÆÊäÄË°ìÁöÑË®≠ÂÆö"
      inputs:
        - name: "reference_angles"
          label: "ÂèÇÁÖß„Ç¢„É≥„Ç∞„É´Êï∞"
          type: "range"
          required: true
          min: 1
          max: 8
          default: 4
          step: 1
          description: "3DÁîüÊàê„Å´‰ΩøÁî®„Åô„ÇãÂèÇÁÖßÁîªÂÉè„ÅÆËßíÂ∫¶Êï∞ (Â§ö„ÅÑ„Åª„Å©Á≤æÂØÜ)"
        
        - name: "model_scale"
          label: "„É¢„Éá„É´„Çπ„Ç±„Éº„É´"
          type: "select"
          required: true
          options:
            - value: "miniature"
              label: "üî¨ „Éü„Éã„ÉÅ„É•„Ç¢ (Â∞èÁâ©„ÉªÁ≤æÂØÜ)"
            - value: "standard"
              label: "üìè Ê®ôÊ∫ñ (‰∏ÄËà¨ÁöÑ„Å™„Çµ„Ç§„Ç∫)"
            - value: "large_scale"
              label: "üìê Â§ßÂûã (Âª∫ÁØâ„ÉªÊôØË¶≥)"
          default: "standard"
        
        - name: "surface_quality"
          label: "Ë°®Èù¢ÂìÅË≥™"
          type: "select"
          required: true
          options:
            - value: "smooth"
              label: "‚ú® „Çπ„É†„Éº„Çπ (Êªë„Çâ„Åã„Éª„ÉÑ„É§„ÅÇ„Çä)"
            - value: "textured"
              label: "üî≤ „ÉÜ„ÇØ„Çπ„ÉÅ„É£ (Ë≥™ÊÑü„ÉªÊ®°Êßò„ÅÇ„Çä)"
            - value: "rough"
              label: "‚ö° „É©„Éï (Á≤ó„ÅÑ„Éª„Éû„ÉÉ„Éà)"
            - value: "mixed"
              label: "üé® „Éü„ÉÉ„ÇØ„Çπ (ÈÉ®ÂàÜÁöÑ„Å´Áï∞„Å™„ÇãË≥™ÊÑü)"
          default: "textured"

    - section_name: "Âá∫ÂäõË®≠ÂÆö"
      section_description: "3D„É¢„Éá„É´„ÅÆÂá∫ÂäõÂΩ¢Âºè„Å®Áî®ÈÄî"
      inputs:
        - name: "output_format"
          label: "Âá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"
          type: "select"
          required: true
          options:
            - value: "obj_mtl"
              label: "üìÑ OBJ+MTL (Ê±éÁî®„ÉªËªΩÈáè)"
            - value: "fbx"
              label: "üéÆ FBX („Ç≤„Éº„É†„Éª„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥)"
            - value: "gltf"
              label: "üåê glTF (Web„ÉªAR/VR)"
            - value: "stl"
              label: "üñ®Ô∏è STL (3D„Éó„É™„É≥„Éà)"
            - value: "all_formats"
              label: "üì¶ ÂÖ®ÂΩ¢Âºè (Ë§áÊï∞ÂΩ¢ÂºèÂá∫Âäõ)"
          default: "obj_mtl"
        
        - name: "optimization_level"
          label: "ÊúÄÈÅ©Âåñ„É¨„Éô„É´"
          type: "select"
          required: true
          options:
            - value: "none"
              label: "‚ö™ ÊúÄÈÅ©Âåñ„Å™„Åó („Ç™„É™„Ç∏„Éä„É´ÂìÅË≥™)"
            - value: "light"
              label: "ü™∂ ËªΩÈáèÊúÄÈÅ©Âåñ („Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÈáçË¶ñ)"
            - value: "balanced"
              label: "‚öñÔ∏è „Éê„É©„É≥„ÇπÊúÄÈÅ©Âåñ (ÂìÅË≥™„Å®„Çµ„Ç§„Ç∫‰∏°Á´ã)"
            - value: "aggressive"
              label: "üöÄ Á©çÊ•µÁöÑÊúÄÈÅ©Âåñ (ÊúÄÂ∞è„Çµ„Ç§„Ç∫)"
          default: "balanced"

# ‰∫∫Èñì„ÅÆÁÑ°ÊÑèË≠òÊÄùËÄÉ„Éó„É≠„Çª„Çπ
human_process:
  - phase: "concept_visualization"
    description: "Ê¶ÇÂøµÂèØË¶ñÂåñÊÆµÈöéÔºà3DÂåñÂØæË±°„ÉªÁî®ÈÄî„Éª„Çπ„Çø„Ç§„É´„ÉªÊäÄË°ìË¶Å‰ª∂Ôºâ"
  - phase: "reference_preparation"
    description: "ÂèÇÁÖßÊ∫ñÂÇôÊÆµÈöéÔºà„ÇΩ„Éº„ÇπÁîªÂÉè„ÉªËßíÂ∫¶„ÉªÂìÅË≥™„ÉªÂâçÂá¶ÁêÜÔºâ"
  - phase: "3d_generation"
    description: "3DÁîüÊàêÊÆµÈöéÔºà„É°„ÉÉ„Ç∑„É•ÁîüÊàê„Éª„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Éû„ÉÉ„Éî„É≥„Ç∞„ÉªÂπæ‰ΩïÂ≠¶Âá¶ÁêÜÔºâ"
  - phase: "model_optimization"
    description: "„É¢„Éá„É´ÊúÄÈÅ©ÂåñÊÆµÈöéÔºà„Éà„Éù„É≠„Ç∏„Éº„ÉªUVÂ±ïÈñã„ÉªLOD„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÔºâ"
  - phase: "rendering_setup"
    description: "„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆöÊÆµÈöéÔºà„Éû„ÉÜ„É™„Ç¢„É´„Éª„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Éª„Ç´„É°„É©„ÉªÁí∞Â¢ÉÔºâ"
  - phase: "delivery_preparation"
    description: "ÈÖç‰ø°Ê∫ñÂÇôÊÆµÈöéÔºà„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ„ÉªÊúÄÈÅ©Âåñ„ÉªÁî®ÈÄîÂà•Ë™øÊï¥„ÉªÂìÅË≥™ÁÆ°ÁêÜÔºâ"

# GitHub Actions „Éé„Éº„ÉâË®≠Ë®à
github_actions_config:
  workflow_name: "3D Model Creation Pipeline"
  on_triggers: ["workflow_dispatch", "issues"]
  permissions:
    contents: "write"
    issues: "write"
    actions: "read"
  artifacts_retention_days: 30
  max_parallel_jobs: 3

# Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
tasks:
  # === ‰∫ãÂâç„ÉÜ„Çπ„ÉàÊÆµÈöé ===
  - id: "3d-services-connectivity-test"
    name: "3DÁîüÊàê„ÉªÂá¶ÁêÜ„Çµ„Éº„Éì„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà"
    phase: "pre_validation"
    github_job: "connectivity-test"
    type: "validation"
    implementation: "mcp"
    duration_minutes: 3
    dependencies: []
    parallel_group: null
    
    github_steps:
      - name: "Test 3D generation and processing services"
        shell: "bash"
        script: |
          echo "üßä Testing 3D generation and processing services..."
          
          mkdir -p .logs/connectivity-tests
          
          # 3D„É¢„Éá„É´ÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàI2I3DÔºâ
          echo "Testing 3D model generation service..."
          if timeout 180 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "/tmp/test.jpg" > .logs/connectivity-tests/3d-gen-test.log 2>&1; then
            THREED_GEN_STATUS="success"
            echo "‚úÖ 3D Model Generation (Hunyuan3D): Available"
          else
            THREED_GEN_STATUS="failed"
            echo "‚ùå 3D Model Generation: Failed"
          fi
          
          # ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàÂèÇÁÖßÁîªÂÉè‰ΩúÊàêÁî®Ôºâ
          echo "Testing image generation for reference creation..."
          if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "3d reference object test" > .logs/connectivity-tests/ref-image-test.log 2>&1; then
            REF_IMAGE_STATUS="success"
            echo "‚úÖ Reference Image Generation: Available"
          else
            REF_IMAGE_STATUS="failed"
            echo "‚ö†Ô∏è Reference Image Generation: Not available"
          fi
          
          # ÁîªÂÉèÂº∑Âåñ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºà3DÁîüÊàêÂâç„ÅÆÂâçÂá¶ÁêÜÁî®Ôºâ
          echo "Testing image enhancement for preprocessing..."
          if timeout 60 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max --image-path "/tmp/test.jpg" --enhancement "3d reference optimization" > .logs/connectivity-tests/enhancement-test.log 2>&1; then
            IMAGE_ENHANCEMENT_STATUS="success" 
            echo "‚úÖ Image Enhancement: Available"
          else
            IMAGE_ENHANCEMENT_STATUS="failed"
            echo "‚ö†Ô∏è Image Enhancement: Not available"
          fi
          
          # Claude Code AI „ÉÜ„Çπ„ÉàÔºà3DÂàÜÊûê„ÉªÊúÄÈÅ©ÂåñÁî®Ôºâ
          echo "Testing Claude Code for 3D analysis..."
          if timeout 30 claude-code --prompt "Test: Analyze 3D modeling requirements for a simple cube and return '3D_AI_TEST_SUCCESS' if working." > .logs/connectivity-tests/3d-ai-test.log 2>&1; then
            if grep -q "3D_AI_TEST_SUCCESS" .logs/connectivity-tests/3d-ai-test.log; then
              THREED_AI_STATUS="success"
              echo "‚úÖ 3D AI Analysis: Available"
            else
              THREED_AI_STATUS="partial"
              echo "‚ö†Ô∏è 3D AI Analysis: Partial response"
            fi
          else
            THREED_AI_STATUS="failed"
            echo "‚ùå 3D AI Analysis: Failed"
          fi
          
          # Â§ñÈÉ®3DÂá¶ÁêÜAPI „ÉÜ„Çπ„Éà
          echo "Testing external 3D processing APIs..."
          if [ -n "${{ secrets.SKETCHFAB_API_KEY }}" ]; then
            if timeout 30 curl -s -H "Authorization: Token ${{ secrets.SKETCHFAB_API_KEY }}" "https://api.sketchfab.com/v3/me" > .logs/connectivity-tests/sketchfab-test.log 2>&1; then
              THREED_API_STATUS="success"
              echo "‚úÖ 3D Platform API: Available"
            else
              THREED_API_STATUS="failed"
              echo "‚ö†Ô∏è 3D Platform API: Failed"
            fi
          else
            THREED_API_STATUS="not_configured"
            echo "‚ÑπÔ∏è 3D Platform API: Not configured"
          fi
          
          # 3DÂá¶ÁêÜ„ÉÑ„Éº„É´„ÉÜ„Çπ„Éà
          echo "Testing 3D processing tools..."
          if command -v blender &> /dev/null; then
            if timeout 10 blender --version > .logs/connectivity-tests/blender-test.log 2>&1; then
              THREED_TOOLS_STATUS="success"
              echo "‚úÖ 3D Processing Tools: Available"
            else
              THREED_TOOLS_STATUS="limited"
              echo "‚ö†Ô∏è 3D Tools: Limited functionality"
            fi
          else
            THREED_TOOLS_STATUS="not_available" 
            echo "‚ÑπÔ∏è 3D Processing Tools: Not installed"
          fi
          
          # 3DÂà∂‰ΩúËÉΩÂäõ„ÅÆË©ï‰æ°
          BASIC_3D_CAPABILITY="none"
          ADVANCED_3D_CAPABILITY="none"
          
          # Âü∫Êú¨Ê©üËÉΩÔºà3DÁîüÊàê„Åæ„Åü„ÅØAIÂàÜÊûêÔºâ
          if [ "$THREED_GEN_STATUS" = "success" ] || [ "$THREED_AI_STATUS" = "success" ]; then
            BASIC_3D_CAPABILITY="available"
          fi
          
          # È´òÂ∫¶Ê©üËÉΩÔºà3DÁîüÊàê+Âº∑Âåñ+ÂàÜÊûêÔºâ
          if [ "$THREED_GEN_STATUS" = "success" ] && [ "$IMAGE_ENHANCEMENT_STATUS" = "success" ] && [ "$THREED_AI_STATUS" = "success" ]; then
            ADVANCED_3D_CAPABILITY="available"
          fi
          
          # „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíJSON‰øùÂ≠ò
          cat > .logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "3d_services": {
              "3d_model_generation": "$THREED_GEN_STATUS",
              "reference_image_generation": "$REF_IMAGE_STATUS",
              "image_enhancement": "$IMAGE_ENHANCEMENT_STATUS",
              "3d_ai_analysis": "$THREED_AI_STATUS",
              "3d_platform_api": "$THREED_API_STATUS",
              "3d_processing_tools": "$THREED_TOOLS_STATUS"
            },
            "capability_assessment": {
              "basic_3d_capability": "$BASIC_3D_CAPABILITY",
              "advanced_3d_capability": "$ADVANCED_3D_CAPABILITY",
              "workflow_can_proceed": $([ "$BASIC_3D_CAPABILITY" = "available" ] && echo "true" || echo "false"),
              "professional_3d_production": $([ "$ADVANCED_3D_CAPABILITY" = "available" ] && echo "true" || echo "false")
            },
            "service_priorities": {
              "primary_3d_service": "$([ "$THREED_GEN_STATUS" = "success" ] && echo "i2i3d-fal-hunyuan3d-v21" || echo "none")",
              "image_preprocessing": "$([ "$IMAGE_ENHANCEMENT_STATUS" = "success" ] && echo "i2i-fal-flux-kontext-max" || echo "none")",
              "reference_creation": "$([ "$REF_IMAGE_STATUS" = "success" ] && echo "t2i-fal-imagen4-fast" || echo "none")"
            }
          }
          EOF
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å´ÁµêÊûú„ÇíË®≠ÂÆö
          echo "BASIC_3D_CAPABILITY=$BASIC_3D_CAPABILITY" >> $GITHUB_ENV
          echo "ADVANCED_3D_CAPABILITY=$ADVANCED_3D_CAPABILITY" >> $GITHUB_ENV
          echo "THREED_GEN_AVAILABLE=$([ "$THREED_GEN_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "IMAGE_ENHANCEMENT_AVAILABLE=$([ "$IMAGE_ENHANCEMENT_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "REF_IMAGE_AVAILABLE=$([ "$REF_IMAGE_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "THREED_AI_AVAILABLE=$([ "$THREED_AI_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          echo "üßä 3D services connectivity tests completed"
          echo "Basic capability: $BASIC_3D_CAPABILITY"
          echo "Advanced capability: $ADVANCED_3D_CAPABILITY"
          
    validation:
      criteria:
        - "Âü∫Êú¨ÁöÑ„Å™3DÁîüÊàêÊ©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ"
        - "„ÉÜ„Çπ„ÉàÁµêÊûú„ÅåJSONÂΩ¢Âºè„Åß‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".logs/connectivity-tests/test-results.json" ]; then
          echo "‚ùå VALIDATION FAILED: Test results missing"
          exit 1
        fi
        
        WORKFLOW_CAN_PROCEED=$(jq -r '.capability_assessment.workflow_can_proceed' .logs/connectivity-tests/test-results.json)
        if [ "$WORKFLOW_CAN_PROCEED" = "true" ]; then
          echo "‚úÖ Validation passed: 3D production services ready"
        else
          echo "‚ùå VALIDATION FAILED: Critical 3D services unavailable"
          exit 1
        fi

  # === Ê¶ÇÂøµÂèØË¶ñÂåñÊÆµÈöé ===
  - id: "3d-concept-development"
    name: "3D„É¢„Éá„É´Ê¶ÇÂøµ„Éª‰ªïÊßòË®≠Ë®à"
    phase: "concept_visualization"
    github_job: "concept-development"
    type: "planning"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["3d-services-connectivity-test"]
    parallel_group: null
    
    github_steps:
      - name: "Develop 3D model concept and specifications"
        shell: "bash"
        script: |
          echo "üéØ Developing 3D model concept and specifications..."
          
          mkdir -p .logs/3d-concept
          
          # ÂÖ•Âäõ„Åã„Çâ3DË¶Å‰ª∂„ÇíÊäΩÂá∫
          MODEL_SUBJECT="${{ github.event.inputs.model_subject || github.event.issue.title || 'Product Design Object' }}"
          MODEL_STYLE="${{ github.event.inputs.model_style || 'realistic' }}"
          INTENDED_USE="${{ github.event.inputs.intended_use || 'product visualization' }}"
          COMPLEXITY_LEVEL="${{ github.event.inputs.complexity_level || 'medium' }}"
          TARGET_QUALITY="${{ github.event.inputs.target_quality || 'high' }}"
          PLATFORM_TARGET="${{ github.event.inputs.platform_target || 'web and mobile' }}"
          
          echo "Model subject: $MODEL_SUBJECT"
          echo "Style: $MODEL_STYLE"
          echo "Intended use: $INTENDED_USE"
          echo "Complexity: $COMPLEXITY_LEVEL"
          echo "Quality target: $TARGET_QUALITY"
          echo "Platform: $PLATFORM_TARGET"
          
          # Claude Code „Åß3D„Ç≥„É≥„Çª„Éó„ÉàË®≠Ë®à
          claude-code --prompt "‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅ3D„É¢„Éá„É´Âà∂‰Ωú„ÅÆË©≥Á¥∞„Å™„Ç≥„É≥„Çª„Éó„Éà„Å®ÊäÄË°ì‰ªïÊßò„ÇíË®≠Ë®à„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          „É¢„Éá„É´ÂØæË±°: $MODEL_SUBJECT
          „Çπ„Çø„Ç§„É´: $MODEL_STYLE
          Áî®ÈÄî: $INTENDED_USE
          Ë§áÈõëÂ∫¶: $COMPLEXITY_LEVEL
          ÂìÅË≥™ÁõÆÊ®ô: $TARGET_QUALITY
          ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: $PLATFORM_TARGET
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"3d_concept\": {
              \"primary_subject\": \"‰∏ªË¶ÅÂØæË±°Áâ©\",
              \"conceptual_approach\": \"„Ç≥„É≥„Çª„Éó„ÉÅ„É•„Ç¢„É´„Ç¢„Éó„É≠„Éº„ÉÅ\",
              \"visual_style\": \"„Éì„Ç∏„É•„Ç¢„É´„Çπ„Çø„Ç§„É´Ë©≥Á¥∞\",
              \"artistic_direction\": \"„Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉÜ„Ç£„ÉÉ„ÇØÊñπÂêëÊÄß\",
              \"unique_characteristics\": [\"Áã¨Ëá™ÁâπÂæ¥„ÉªÂÄãÊÄß\"],
              \"reference_inspirations\": [\"ÂèÇËÄÉ„Éª„Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥Ê∫ê\"]
            },
            \"technical_specifications\": {
              \"geometry_complexity\": \"Âπæ‰ΩïÂ≠¶ÁöÑË§áÈõëÂ∫¶\",
              \"polygon_budget\": \"„Éù„É™„Ç¥„É≥‰∫àÁÆóÁõÆÂÆâ\",
              \"texture_resolution\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£Ëß£ÂÉèÂ∫¶ÁõÆÊ®ô\",
              \"material_complexity\": \"„Éû„ÉÜ„É™„Ç¢„É´Ë§áÈõëÂ∫¶\",
              \"animation_requirements\": \"„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë¶Å‰ª∂\",
              \"optimization_priorities\": [\"ÊúÄÈÅ©ÂåñÂÑ™ÂÖàÂ∫¶\"]
            },
            \"dimensional_specifications\": {
              \"primary_proportions\": \"‰∏ªË¶Å„Éó„É≠„Éù„Éº„Ç∑„Éß„É≥\",
              \"scale_considerations\": \"„Çπ„Ç±„Éº„É´ÈÖçÊÖÆ‰∫ãÈ†Ö\",
              \"viewing_angles\": [\"ÈáçË¶ÅË¶ñÁÇπËßíÂ∫¶\"],
              \"detail_hierarchy\": \"Ë©≥Á¥∞ÈöéÂ±§\",
              \"geometric_features\": [\"Âπæ‰ΩïÂ≠¶ÁöÑÁâπÂæ¥\"]
            },
            \"material_design\": {
              \"surface_characteristics\": [\"Ë°®Èù¢ÁâπÊÄß\"],
              \"texture_types\": [\"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Çø„Ç§„Éó\"],
              \"material_properties\": [\"„Éû„ÉÜ„É™„Ç¢„É´ÁâπÊÄß\"],
              \"lighting_response\": \"„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞ÂøúÁ≠î\",
              \"environmental_interaction\": \"Áí∞Â¢ÉÁõ∏‰∫í‰ΩúÁî®\"
            },
            \"use_case_optimization\": {
              \"platform_requirements\": [\"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ë¶Å‰ª∂\"],
              \"performance_targets\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõÆÊ®ô\"],
              \"viewing_contexts\": [\"Ë¶ñËÅ¥„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà\"],
              \"interaction_methods\": [\"„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÊñπÊ≥ï\"],
              \"accessibility_considerations\": [\"„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÈÖçÊÖÆ\"]
            },
            \"production_strategy\": {
              \"reference_image_requirements\": [\"ÂèÇÁÖßÁîªÂÉèË¶Å‰ª∂\"],
              \"generation_approach\": \"ÁîüÊàê„Ç¢„Éó„É≠„Éº„ÉÅ\",
              \"quality_validation\": \"ÂìÅË≥™Ê§úË®ºÊñπÈáù\",
              \"optimization_workflow\": \"ÊúÄÈÅ©Âåñ„ÉØ„Éº„ÇØ„Éï„É≠„Éº\",
              \"delivery_formats\": [\"ÈÖç‰ø°„Éï„Ç©„Éº„Éû„ÉÉ„Éà\"]
            },
            \"quality_benchmarks\": {
              \"visual_fidelity\": \"Ë¶ñË¶öÁöÑÂø†ÂÆüÂ∫¶Âü∫Ê∫ñ\",
              \"technical_accuracy\": \"ÊäÄË°ìÁöÑÁ≤æÂ∫¶Âü∫Ê∫ñ\",
              \"performance_efficiency\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂäπÁéáÂü∫Ê∫ñ\",
              \"user_experience\": \"„É¶„Éº„Ç∂„Éº‰ΩìÈ®ìÂü∫Ê∫ñ\",
              \"commercial_viability\": \"ÂïÜÁî®ÂèØËÉΩÊÄßÂü∫Ê∫ñ\"
            }
          }" > .logs/3d-concept/3d-concept.json
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          echo "THREED_CONCEPT_FILE=.logs/3d-concept/3d-concept.json" >> $GITHUB_ENV
          
          # ‰∏ªË¶Å„Éë„É©„É°„Éº„Çø„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          POLYGON_BUDGET=$(echo "$THREED_CONCEPT" | jq -r '.technical_specifications.polygon_budget' | sed 's/[^0-9]//g')
          TEXTURE_RESOLUTION=$(echo "$THREED_CONCEPT" | jq -r '.technical_specifications.texture_resolution' | sed 's/[^0-9]//g')
          
          echo "POLYGON_BUDGET=${POLYGON_BUDGET:-10000}" >> $GITHUB_ENV
          echo "TEXTURE_RESOLUTION=${TEXTURE_RESOLUTION:-1024}" >> $GITHUB_ENV
          
          echo "üéØ 3D concept development completed"
          echo "Polygon budget: ${POLYGON_BUDGET:-10000}"
          echo "Texture resolution: ${TEXTURE_RESOLUTION:-1024}px"

  # === ÂèÇÁÖßÊ∫ñÂÇôÊÆµÈöé ===
  - id: "reference-image-preparation"
    name: "ÂèÇÁÖßÁîªÂÉèÁîüÊàê„ÉªÂâçÂá¶ÁêÜ"
    phase: "reference_preparation"
    github_job: "reference-preparation"
    type: "generation"
    implementation: "mcp"
    tool: "image-generation"
    duration_minutes: 5
    dependencies: ["3d-concept-development"]
    parallel_group: null
    
    github_steps:
      - name: "Generate and prepare reference images"
        shell: "bash"
        script: |
          echo "üñºÔ∏è Generating and preparing reference images..."
          
          mkdir -p .logs/reference-preparation
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          
          # ÂèÇÁÖßÁîªÂÉèË¶Å‰ª∂„ÅÆÊäΩÂá∫
          REFERENCE_REQUIREMENTS=$(echo "$THREED_CONCEPT" | jq -r '.production_strategy.reference_image_requirements[]' | head -5)
          PRIMARY_SUBJECT=$(echo "$THREED_CONCEPT" | jq -r '.3d_concept.primary_subject')
          VISUAL_STYLE=$(echo "$THREED_CONCEPT" | jq -r '.3d_concept.visual_style')
          
          if [ "$REF_IMAGE_AVAILABLE" = "true" ]; then
            echo "Reference image generation service available - creating reference images..."
            
            # „É°„Ç§„É≥ÂèÇÁÖßÁîªÂÉè„ÅÆÁîüÊàê
            echo "Generating primary reference image..."
            PRIMARY_PROMPT="$PRIMARY_SUBJECT in $VISUAL_STYLE style, perfect for 3D modeling reference, clear details, neutral background, professional product photography lighting, high resolution, multiple angles visible"
            
            if timeout 120 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$PRIMARY_PROMPT" > .logs/reference-preparation/primary-reference.json 2>&1; then
              echo "‚úÖ Primary reference image generated"
              PRIMARY_REF_STATUS="success"
            else
              echo "‚ùå Primary reference generation failed"
              PRIMARY_REF_STATUS="failed"
            fi
            
            # Â§öËßíÂ∫¶ÂèÇÁÖßÁîªÂÉè„ÅÆÁîüÊàê
            VIEWING_ANGLES=$(echo "$THREED_CONCEPT" | jq -r '.dimensional_specifications.viewing_angles[]')
            ANGLE_INDEX=0
            
            while IFS= read -r angle; do
              if [ -n "$angle" ] && [ "$angle" != "null" ]; then
                echo "Generating reference for $angle view..."
                ANGLE_PROMPT="$PRIMARY_SUBJECT from $angle view, $VISUAL_STYLE style, 3D modeling reference, clear geometry, neutral background, professional lighting"
                
                if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$ANGLE_PROMPT" > .logs/reference-preparation/angle-${ANGLE_INDEX}-reference.json 2>&1; then
                  echo "‚úÖ $angle reference generated"
                else
                  echo "‚ö†Ô∏è $angle reference generation failed"
                fi
                
                ANGLE_INDEX=$((ANGLE_INDEX + 1))
              fi
            done <<< "$VIEWING_ANGLES"
            
            # Ë©≥Á¥∞ÁâπÂæ¥ÂèÇÁÖßÁîªÂÉè„ÅÆÁîüÊàê
            GEOMETRIC_FEATURES=$(echo "$THREED_CONCEPT" | jq -r '.dimensional_specifications.geometric_features[]')
            FEATURE_INDEX=0
            
            while IFS= read -r feature; do
              if [ -n "$feature" ] && [ "$feature" != "null" ] && [ $FEATURE_INDEX -lt 3 ]; then
                echo "Generating detail reference for: $feature"
                FEATURE_PROMPT="close-up detail of $feature on $PRIMARY_SUBJECT, $VISUAL_STYLE style, high detail for 3D modeling, clear texture and geometry"
                
                if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$FEATURE_PROMPT" > .logs/reference-preparation/feature-${FEATURE_INDEX}-detail.json 2>&1; then
                  echo "‚úÖ $feature detail reference generated"
                else
                  echo "‚ö†Ô∏è $feature detail reference failed"
                fi
                
                FEATURE_INDEX=$((FEATURE_INDEX + 1))
              fi
            done <<< "$GEOMETRIC_FEATURES"
            
          else
            echo "‚ö†Ô∏è Reference image generation not available"
            PRIMARY_REF_STATUS="service_unavailable"
          fi
          
          # ÁîüÊàê„Åï„Çå„ÅüÂèÇÁÖßÁîªÂÉè„ÅÆÂâçÂá¶ÁêÜ„ÉªÊúÄÈÅ©Âåñ
          if [ "$IMAGE_ENHANCEMENT_AVAILABLE" = "true" ] && [ "$PRIMARY_REF_STATUS" = "success" ]; then
            echo "Enhancing reference images for optimal 3D generation..."
            
            for ref_file in .logs/reference-preparation/*.json; do
              if [ -f "$ref_file" ]; then
                REF_NAME=$(basename "$ref_file" .json)
                IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$ref_file" 2>/dev/null)
                
                if [ "$IMAGE_PATH" != "none" ]; then
                  echo "Enhancing $REF_NAME for 3D generation..."
                  ENHANCEMENT_PROMPT="optimize for 3D model generation, enhance edge definition, improve contrast, clarify geometric details, maintain color accuracy"
                  
                  if timeout 90 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max --image-path "$IMAGE_PATH" --enhancement "$ENHANCEMENT_PROMPT" > .logs/reference-preparation/${REF_NAME}-enhanced.json 2>&1; then
                    echo "‚úÖ $REF_NAME enhanced successfully"
                  else
                    echo "‚ö†Ô∏è $REF_NAME enhancement failed"
                  fi
                fi
              fi
            done
          fi
          
          # ÂèÇÁÖßÁîªÂÉèÊ∫ñÂÇôÁµêÊûú„ÅÆÁµ±Ë®à
          GENERATED_REF_COUNT=$(ls .logs/reference-preparation/*.json 2>/dev/null | wc -l)
          ENHANCED_COUNT=$(ls .logs/reference-preparation/*-enhanced.json 2>/dev/null | wc -l)
          
          # ÂèÇÁÖßÊ∫ñÂÇô„É≠„Ç∞
          cat > .logs/reference-preparation/preparation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "reference_preparation_summary": {
              "primary_reference_status": "$PRIMARY_REF_STATUS",
              "total_reference_images": $GENERATED_REF_COUNT,
              "enhanced_images": $ENHANCED_COUNT,
              "reference_generation_available": "$REF_IMAGE_AVAILABLE",
              "enhancement_available": "$IMAGE_ENHANCEMENT_AVAILABLE"
            },
            "reference_types": {
              "primary_reference": "$([ "$PRIMARY_REF_STATUS" = "success" ] && echo "generated" || echo "unavailable")",
              "angle_references": "$([ $GENERATED_REF_COUNT -gt 1 ] && echo "multiple_angles" || echo "single_view")",
              "detail_references": "$([ $GENERATED_REF_COUNT -gt 3 ] && echo "feature_details" || echo "basic_only")"
            },
            "generated_assets": [$(ls .logs/reference-preparation/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "REFERENCE_PREPARATION_STATUS=$PRIMARY_REF_STATUS" >> $GITHUB_ENV
          echo "GENERATED_REF_COUNT=$GENERATED_REF_COUNT" >> $GITHUB_ENV
          echo "ENHANCED_REF_COUNT=$ENHANCED_COUNT" >> $GITHUB_ENV
          
          echo "üñºÔ∏è Reference image preparation completed: $GENERATED_REF_COUNT images"

  # === 3DÁîüÊàêÊÆµÈöé ===
  - id: "primary-3d-model-generation"
    name: "„É°„Ç§„É≥3D„É¢„Éá„É´ÁîüÊàê"
    phase: "3d_generation"
    github_job: "3d-generation"
    type: "generation"
    implementation: "mcp"
    tool: "3d-generation"
    duration_minutes: 8
    dependencies: ["reference-image-preparation"]
    parallel_group: null
    
    github_steps:
      - name: "Generate primary 3D models"
        shell: "bash"
        script: |
          echo "üßä Generating primary 3D models..."
          
          mkdir -p .logs/3d-generation
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          REFERENCE_LOG=$(cat .logs/reference-preparation/preparation-log.json)
          
          if [ "$THREED_GEN_AVAILABLE" = "true" ]; then
            echo "3D model generation service available - creating models..."
            
            # „Éó„É©„Ç§„Éû„É™ÂèÇÁÖßÁîªÂÉè„Åã„Çâ3D„É¢„Éá„É´ÁîüÊàê
            PRIMARY_REF_FILE=$(ls .logs/reference-preparation/primary-reference*.json 2>/dev/null | head -1)
            
            if [ -n "$PRIMARY_REF_FILE" ]; then
              PRIMARY_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$PRIMARY_REF_FILE" 2>/dev/null)
              
              if [ "$PRIMARY_IMAGE_PATH" != "none" ]; then
                echo "Generating 3D model from primary reference..."
                
                if timeout 240 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$PRIMARY_IMAGE_PATH" > .logs/3d-generation/primary-3d-model.json 2>&1; then
                  echo "‚úÖ Primary 3D model generated successfully"
                  PRIMARY_3D_STATUS="success"
                else
                  echo "‚ùå Primary 3D model generation failed"
                  PRIMARY_3D_STATUS="failed"
                fi
              else
                echo "‚ö†Ô∏è Primary reference image path not found"
                PRIMARY_3D_STATUS="no_reference"
              fi
            else
              echo "‚ö†Ô∏è No primary reference image available"
              PRIMARY_3D_STATUS="no_reference"
            fi
            
            # Âº∑Âåñ„Åï„Çå„ÅüÂèÇÁÖßÁîªÂÉè„Åã„Çâ3D„É¢„Éá„É´ÁîüÊàêÔºà„Çà„ÇäÈ´òÂìÅË≥™Ôºâ
            ENHANCED_REF_FILE=$(ls .logs/reference-preparation/primary-reference-enhanced.json 2>/dev/null | head -1)
            
            if [ -n "$ENHANCED_REF_FILE" ]; then
              ENHANCED_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$ENHANCED_REF_FILE" 2>/dev/null)
              
              if [ "$ENHANCED_IMAGE_PATH" != "none" ]; then
                echo "Generating enhanced 3D model from optimized reference..."
                
                if timeout 240 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$ENHANCED_IMAGE_PATH" > .logs/3d-generation/enhanced-3d-model.json 2>&1; then
                  echo "‚úÖ Enhanced 3D model generated successfully"
                  ENHANCED_3D_STATUS="success"
                else
                  echo "‚ö†Ô∏è Enhanced 3D model generation failed"
                  ENHANCED_3D_STATUS="failed"
                fi
              fi
            else
              ENHANCED_3D_STATUS="no_enhanced_reference"
            fi
            
            # Â§öËßíÂ∫¶ÂèÇÁÖß„Åã„Çâ„ÅÆ3D„É¢„Éá„É´ÁîüÊàêÔºà„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥Ôºâ
            echo "Generating angle-specific 3D models..."
            ANGLE_3D_COUNT=0
            
            for angle_file in .logs/reference-preparation/angle-*-reference.json; do
              if [ -f "$angle_file" ] && [ $ANGLE_3D_COUNT -lt 3 ]; then
                ANGLE_NAME=$(basename "$angle_file" .json)
                ANGLE_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$angle_file" 2>/dev/null)
                
                if [ "$ANGLE_IMAGE_PATH" != "none" ]; then
                  echo "Generating 3D model from $ANGLE_NAME..."
                  
                  if timeout 180 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$ANGLE_IMAGE_PATH" > .logs/3d-generation/${ANGLE_NAME}-3d-model.json 2>&1; then
                    echo "‚úÖ $ANGLE_NAME 3D model generated"
                    ANGLE_3D_COUNT=$((ANGLE_3D_COUNT + 1))
                  else
                    echo "‚ö†Ô∏è $ANGLE_NAME 3D model generation failed"
                  fi
                fi
              fi
            done
            
            # Ë©≥Á¥∞ÁâπÂæ¥„Åã„Çâ„ÅÆ3D„É¢„Éá„É´ÁîüÊàêÔºàË©≥Á¥∞„Éë„Éº„ÉÑÔºâ
            echo "Generating detail-specific 3D models..."
            DETAIL_3D_COUNT=0
            
            for detail_file in .logs/reference-preparation/feature-*-detail.json; do
              if [ -f "$detail_file" ] && [ $DETAIL_3D_COUNT -lt 2 ]; then
                DETAIL_NAME=$(basename "$detail_file" .json)
                DETAIL_IMAGE_PATH=$(jq -r '.image_url // .file_path // "none"' "$detail_file" 2>/dev/null)
                
                if [ "$DETAIL_IMAGE_PATH" != "none" ]; then
                  echo "Generating detail 3D model from $DETAIL_NAME..."
                  
                  if timeout 150 claude-code --mcp-config=~/.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path "$DETAIL_IMAGE_PATH" > .logs/3d-generation/${DETAIL_NAME}-3d-model.json 2>&1; then
                    echo "‚úÖ $DETAIL_NAME detail 3D model generated"
                    DETAIL_3D_COUNT=$((DETAIL_3D_COUNT + 1))
                  else
                    echo "‚ö†Ô∏è $DETAIL_NAME detail 3D model generation failed"
                  fi
                fi
              fi
            done
            
          else
            echo "‚ö†Ô∏è 3D model generation service not available"
            PRIMARY_3D_STATUS="service_unavailable"
            
            # ‰ª£ÊõøÊ°à„ÅÆÊèêÁ§∫
            cat > .logs/3d-generation/3d-alternatives.json << EOF
            {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "3d_service_status": "unavailable",
              "alternative_approaches": [
                "Use external 3D modeling software (Blender, Maya, etc.)",
                "Employ photogrammetry techniques",
                "Manual 3D modeling based on reference images",
                "Use AI-powered desktop 3D generation tools",
                "Outsource to 3D modeling professionals"
              ],
              "reference_specifications": $(cat .logs/3d-concept/3d-concept.json | jq '.production_strategy'),
              "recommended_workflow": [
                "Export reference images and specifications",
                "Create detailed modeling guidelines",
                "Set up quality validation criteria",
                "Establish optimization parameters"
              ]
            }
            EOF
          fi
          
          # 3DÁîüÊàêÁµêÊûú„ÅÆÁµ±Ë®à
          GENERATED_3D_COUNT=$(ls .logs/3d-generation/*.json 2>/dev/null | wc -l)
          
          # 3DÁîüÊàê„É≠„Ç∞
          cat > .logs/3d-generation/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "3d_generation_summary": {
              "primary_3d_status": "$PRIMARY_3D_STATUS",
              "enhanced_3d_status": "${ENHANCED_3D_STATUS:-not_attempted}",
              "total_3d_models_generated": $GENERATED_3D_COUNT,
              "angle_variants": $ANGLE_3D_COUNT,
              "detail_models": $DETAIL_3D_COUNT,
              "generation_service_used": "$([ "$THREED_GEN_AVAILABLE" = "true" ] && echo "i2i3d-fal-hunyuan3d-v21" || echo "none")"
            },
            "model_types": {
              "primary_model": "$([ "$PRIMARY_3D_STATUS" = "success" ] && echo "generated" || echo "unavailable")",
              "enhanced_model": "$([ "$ENHANCED_3D_STATUS" = "success" ] && echo "generated" || echo "unavailable")",
              "angle_variants": "$ANGLE_3D_COUNT models",
              "detail_models": "$DETAIL_3D_COUNT models"
            },
            "generated_assets": [$(ls .logs/3d-generation/*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "THREED_GENERATION_STATUS=$PRIMARY_3D_STATUS" >> $GITHUB_ENV
          echo "GENERATED_3D_COUNT=$GENERATED_3D_COUNT" >> $GITHUB_ENV
          echo "ANGLE_3D_VARIANTS=$ANGLE_3D_COUNT" >> $GITHUB_ENV
          echo "DETAIL_3D_MODELS=$DETAIL_3D_COUNT" >> $GITHUB_ENV
          
          echo "üßä Primary 3D model generation completed: $GENERATED_3D_COUNT models"

  # === „É¢„Éá„É´ÊúÄÈÅ©ÂåñÊÆµÈöé ===
  - id: "3d-model-optimization"
    name: "3D„É¢„Éá„É´ÊúÄÈÅ©Âåñ„ÉªÂìÅË≥™Âêë‰∏ä"
    phase: "model_optimization"
    github_job: "model-optimization"
    type: "optimization"
    implementation: "ai"
    duration_minutes: 5
    dependencies: ["primary-3d-model-generation"]
    parallel_group: null
    
    github_steps:
      - name: "Optimize 3D models for performance and quality"
        shell: "bash"
        script: |
          echo "‚ö° Optimizing 3D models for performance and quality..."
          
          mkdir -p .logs/model-optimization
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          GENERATION_LOG=$(cat .logs/3d-generation/generation-log.json)
          
          # 3DÊúÄÈÅ©ÂåñÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆ3DÁîüÊàêÁµêÊûú„ÇíÂü∫„Å´„ÄÅ„É¢„Éá„É´ÊúÄÈÅ©Âåñ„Å®ÂìÅË≥™Âêë‰∏ä„ÅÆË©≥Á¥∞ÂàÜÊûê„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          3D„Ç≥„É≥„Çª„Éó„Éà: $THREED_CONCEPT
          ÁîüÊàê„É≠„Ç∞: $GENERATION_LOG
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"optimization_analysis\": {
              \"current_model_quality\": {
                \"geometric_accuracy\": \"Âπæ‰ΩïÂ≠¶ÁöÑÁ≤æÂ∫¶Ë©ï‰æ°Ôºà1-10ÁÇπÔºâ\",
                \"topology_quality\": \"„Éà„Éù„É≠„Ç∏„ÉºÂìÅË≥™Ë©ï‰æ°Ôºà1-10ÁÇπÔºâ\",
                \"texture_fidelity\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£Âø†ÂÆüÂ∫¶Ë©ï‰æ°Ôºà1-10ÁÇπÔºâ\",
                \"detail_preservation\": \"Ë©≥Á¥∞‰øùÊåÅË©ï‰æ°Ôºà1-10ÁÇπÔºâ\",
                \"overall_quality_score\": \"Á∑èÂêàÂìÅË≥™„Çπ„Ç≥„Ç¢Ôºà1-10ÁÇπÔºâ\"
              },
              \"performance_metrics\": {
                \"estimated_polygon_count\": \"Êé®ÂÆö„Éù„É™„Ç¥„É≥Êï∞\",
                \"texture_memory_usage\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„É°„É¢„É™‰ΩøÁî®Èáè\",
                \"rendering_complexity\": \"„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë§áÈõëÂ∫¶\",
                \"mobile_compatibility\": \"„É¢„Éê„Ç§„É´‰∫íÊèõÊÄß\",
                \"web_performance\": \"Web „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ\"
              }
            },
            \"optimization_recommendations\": [
              {
                \"optimization_type\": \"geometry|texture|material|performance|quality\",
                \"target_models\": [\"ÂØæË±°„É¢„Éá„É´\"],
                \"specific_improvements\": \"ÂÖ∑‰ΩìÁöÑÊîπÂñÑÂÜÖÂÆπ\",
                \"technical_approach\": \"ÊäÄË°ìÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ\",
                \"expected_benefits\": \"ÊúüÂæÖ„Åï„Çå„ÇãÂäπÊûú\",
                \"implementation_priority\": \"high|medium|low\"
              }
            ],
            \"lod_strategy\": {
              \"lod_levels_needed\": \"ÂøÖË¶ÅLOD„É¨„Éô„É´Êï∞\",
              \"lod_specifications\": [
                {
                  \"lod_level\": \"LOD„É¨„Éô„É´\",
                  \"polygon_reduction\": \"„Éù„É™„Ç¥„É≥ÂâäÊ∏õÁéá\",
                  \"viewing_distance\": \"Ë¶ñË∑ùÈõ¢\",
                  \"quality_threshold\": \"ÂìÅË≥™ÈñæÂÄ§\",
                  \"use_cases\": [\"‰ΩøÁî®Â†¥Èù¢\"]
                }
              ],
              \"automatic_lod_generation\": \"Ëá™ÂãïLODÁîüÊàêÂèØËÉΩÊÄß\"
            },
            \"texture_optimization\": {
              \"texture_atlas_strategy\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Ç¢„Éà„É©„ÇπÊà¶Áï•\",
              \"compression_recommendations\": [\"ÂúßÁ∏ÆÊé®Â•®‰∫ãÈ†Ö\"],
              \"resolution_targets\": \"Ëß£ÂÉèÂ∫¶ÁõÆÊ®ôË®≠ÂÆö\",
              \"format_optimizations\": [\"„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©Âåñ\"],
              \"memory_efficiency\": \"„É°„É¢„É™ÂäπÁéáÊîπÂñÑ\"
            },
            \"material_enhancement\": {
              \"pbr_workflow\": \"PBR „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÊúÄÈÅ©Âåñ\",
              \"shader_optimization\": \"„Ç∑„Çß„Éº„ÉÄ„ÉºÊúÄÈÅ©Âåñ\",
              \"lighting_response\": \"„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞ÂøúÁ≠îÊîπÂñÑ\",
              \"realistic_rendering\": \"„É™„Ç¢„É™„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ„É¨„É≥„ÉÄ„É™„É≥„Ç∞\",
              \"performance_balance\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éê„É©„É≥„Çπ\"
            },
            \"platform_specific_optimization\": {
              \"web_optimization\": {
                \"file_size_targets\": \"„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÁõÆÊ®ô\",
                \"loading_optimization\": \"„É≠„Éº„Éá„Ç£„É≥„Ç∞ÊúÄÈÅ©Âåñ\",
                \"browser_compatibility\": \"„Éñ„É©„Ç¶„Ç∂‰∫íÊèõÊÄß\",
                \"performance_budgets\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ‰∫àÁÆó\"
              },
              \"mobile_optimization\": {
                \"polygon_limits\": \"„Éù„É™„Ç¥„É≥Âà∂Èôê\",
                \"texture_constraints\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£Âà∂Á¥Ñ\",
                \"rendering_efficiency\": \"„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÂäπÁéá\",
                \"battery_impact\": \"„Éê„ÉÉ„ÉÜ„É™„ÉºÂΩ±Èüø\"
              },
              \"desktop_optimization\": {
                \"quality_enhancements\": \"ÂìÅË≥™Âº∑Âåñ\",
                \"detail_maximization\": \"Ë©≥Á¥∞ÊúÄÂ§ßÂåñ\",
                \"advanced_features\": \"È´òÂ∫¶Ê©üËÉΩÊ¥ªÁî®\"
              }
            },
            \"quality_assurance\": {
              \"validation_criteria\": [\"Ê§úË®ºÂü∫Ê∫ñ\"],
              \"testing_scenarios\": [\"„ÉÜ„Çπ„Éà„Ç∑„Éä„É™„Ç™\"],
              \"performance_benchmarks\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ\"],
              \"user_experience_metrics\": [\"UX „É°„Éà„É™„ÇØ„Çπ\"]
            },
            \"implementation_roadmap\": {
              \"immediate_optimizations\": [\"Âç≥Â∫ßÂÆüË°åÂèØËÉΩÊúÄÈÅ©Âåñ\"],
              \"advanced_processing\": [\"È´òÂ∫¶Âá¶ÁêÜË¶Å‰ª∂\"],
              \"tool_requirements\": [\"ÂøÖË¶Å„ÉÑ„Éº„É´\"],
              \"workflow_integration\": \"„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÁµ±ÂêàÊñπÈáù\"
            }
          }" > .logs/model-optimization/optimization-analysis.json
          
          OPTIMIZATION_ANALYSIS=$(cat .logs/model-optimization/optimization-analysis.json)
          
          # ÊúÄÈÅ©Âåñ„É°„Éà„É™„ÇØ„Çπ„ÅÆÊäΩÂá∫
          OVERALL_QUALITY=$(echo "$OPTIMIZATION_ANALYSIS" | jq -r '.optimization_analysis.current_model_quality.overall_quality_score')
          HIGH_PRIORITY_OPTS=$(echo "$OPTIMIZATION_ANALYSIS" | jq '[.optimization_recommendations[] | select(.implementation_priority == "high")] | length')
          
          echo "CURRENT_3D_QUALITY=$OVERALL_QUALITY" >> $GITHUB_ENV
          echo "HIGH_PRIORITY_3D_OPTS=$HIGH_PRIORITY_OPTS" >> $GITHUB_ENV
          echo "OPTIMIZATION_ANALYSIS_FILE=.logs/model-optimization/optimization-analysis.json" >> $GITHUB_ENV
          
          # ÂÆüË°åÂèØËÉΩ„Å™ÊúÄÈÅ©Âåñ„ÅÆÈÅ©Áî®ÊåáÈáù
          echo "Creating optimization implementation guide..."
          
          claude-code --prompt "Based on the 3D optimization analysis, create a detailed implementation guide for the high-priority optimizations:
          
          Optimization Analysis: $OPTIMIZATION_ANALYSIS
          Available 3D Models: $GENERATED_3D_COUNT
          
          Focus on practical steps that can be implemented and create specific parameter recommendations for 3D model enhancement." > .logs/model-optimization/implementation-guide.json 2>&1
          
          echo "‚ö° 3D model optimization completed"
          echo "Current quality score: $OVERALL_QUALITY/10"
          echo "High priority optimizations identified: $HIGH_PRIORITY_OPTS"

  # === „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆöÊÆµÈöé ===
  - id: "rendering-visualization-setup"
    name: "„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÉªÂèØË¶ñÂåñË®≠ÂÆö"
    phase: "rendering_setup"
    github_job: "rendering-setup"
    type: "configuration"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["3d-model-optimization"]
    parallel_group: null
    
    github_steps:
      - name: "Setup rendering and visualization configurations"
        shell: "bash"
        script: |
          echo "üé® Setting up rendering and visualization configurations..."
          
          mkdir -p .logs/rendering-setup
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          OPTIMIZATION_ANALYSIS=$(cat .logs/model-optimization/optimization-analysis.json)
          
          # „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆöÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆ3D„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅÊúÄÈÅ©„Å™„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Å®ÂèØË¶ñÂåñË®≠ÂÆö„ÇíË®≠Ë®à„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          3D„Ç≥„É≥„Çª„Éó„Éà: $THREED_CONCEPT
          ÊúÄÈÅ©ÂåñÂàÜÊûê: $OPTIMIZATION_ANALYSIS
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"rendering_strategy\": {
              \"primary_rendering_approach\": \"‰∏ªË¶Å„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Ç¢„Éó„É≠„Éº„ÉÅ\",
              \"quality_vs_performance_balance\": \"ÂìÅË≥™„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éê„É©„É≥„Çπ\",
              \"target_platforms\": [\"ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†\"],
              \"rendering_pipeline\": \"„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Éë„Ç§„Éó„É©„Ç§„É≥\"
            },
            \"lighting_setup\": {
              \"lighting_scheme\": \"„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Çπ„Ç≠„Éº„É†\",
              \"key_light_configuration\": {
                \"type\": \"„É©„Ç§„Éà„Çø„Ç§„Éó\",
                \"intensity\": \"Âº∑Â∫¶\",
                \"color_temperature\": \"Ëâ≤Ê∏©Â∫¶\",
                \"position\": \"‰ΩçÁΩÆ\",
                \"shadow_settings\": \"„Ç∑„É£„Éâ„Ç¶Ë®≠ÂÆö\"
              },
              \"fill_lights\": [
                {
                  \"purpose\": \"Áî®ÈÄî\",
                  \"configuration\": \"Ë®≠ÂÆöË©≥Á¥∞\",
                  \"intensity\": \"Âº∑Â∫¶\"
                }
              ],
              \"environment_lighting\": {
                \"hdri_environment\": \"HDRIÁí∞Â¢É\",
                \"ambient_occlusion\": \"„Ç¢„É≥„Éì„Ç®„É≥„Éà„Ç™„ÇØ„É´„Éº„Ç∏„Éß„É≥\",
                \"global_illumination\": \"„Ç∞„É≠„Éº„Éê„É´„Ç§„É´„Éü„Éç„Éº„Ç∑„Éß„É≥\"
              }
            },
            \"material_rendering\": {
              \"pbr_setup\": {
                \"albedo_configuration\": \"„Ç¢„É´„Éô„ÉâË®≠ÂÆö\",
                \"metallic_settings\": \"„É°„Çø„É™„ÉÉ„ÇØË®≠ÂÆö\",
                \"roughness_configuration\": \"„É©„Éï„Éç„ÇπË®≠ÂÆö\",
                \"normal_mapping\": \"„Éé„Éº„Éû„É´„Éû„ÉÉ„Éî„É≥„Ç∞\",
                \"emission_properties\": \"„Ç®„Éü„ÉÉ„Ç∑„Éß„É≥ÁâπÊÄß\"
              },
              \"shader_optimization\": \"„Ç∑„Çß„Éº„ÉÄ„ÉºÊúÄÈÅ©Âåñ\",
              \"texture_filtering\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Éï„Ç£„É´„Çø„É™„É≥„Ç∞\",
              \"anisotropy_settings\": \"Áï∞ÊñπÊÄßË®≠ÂÆö\"
            },
            \"camera_configuration\": {
              \"default_camera_setup\": {
                \"position\": \"„Ç´„É°„É©‰ΩçÁΩÆ\",
                \"target\": \"Ê≥®Ë¶ñÁÇπ\",
                \"field_of_view\": \"Ë¶ñÈáéËßí\",
                \"depth_of_field\": \"Ë¢´ÂÜôÁïåÊ∑±Â∫¶\"
              },
              \"presentation_angles\": [
                {
                  \"angle_name\": \"„Ç¢„É≥„Ç∞„É´Âêç\",
                  \"camera_settings\": \"„Ç´„É°„É©Ë®≠ÂÆö\",
                  \"purpose\": \"Áî®ÈÄî\"
                }
              ],
              \"animation_paths\": [\"„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Éë„Çπ\"],
              \"interactive_controls\": \"„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÂà∂Âæ°\"
            },
            \"post_processing\": {
              \"tone_mapping\": \"„Éà„Éº„É≥„Éû„ÉÉ„Éî„É≥„Ç∞\",
              \"color_grading\": \"„Ç´„É©„Éº„Ç∞„É¨„Éº„Éá„Ç£„É≥„Ç∞\",
              \"anti_aliasing\": \"„Ç¢„É≥„ÉÅ„Ç®„Ç§„É™„Ç¢„Ç∑„É≥„Ç∞\",
              \"bloom_effects\": \"„Éñ„É´„Éº„É†ÂäπÊûú\",
              \"depth_effects\": \"Ê∑±Â∫¶ÂäπÊûú\",
              \"screen_space_effects\": [\"„Çπ„ÇØ„É™„Éº„É≥„Çπ„Éö„Éº„ÇπÂäπÊûú\"]
            },
            \"output_specifications\": {
              \"image_formats\": [\"ÁîªÂÉè„Éï„Ç©„Éº„Éû„ÉÉ„Éà\"],
              \"resolution_targets\": [\"Ëß£ÂÉèÂ∫¶„Çø„Éº„Ç≤„ÉÉ„Éà\"],
              \"frame_rates\": [\"„Éï„É¨„Éº„É†„É¨„Éº„Éà\"],
              \"compression_settings\": \"ÂúßÁ∏ÆË®≠ÂÆö\",
              \"color_spaces\": [\"Ëâ≤Á©∫Èñì\"]
            },
            \"platform_rendering_configs\": {
              \"web_rendering\": {
                \"webgl_settings\": \"WebGLË®≠ÂÆö\",
                \"progressive_loading\": \"„Éó„É≠„Ç∞„É¨„ÉÉ„Ç∑„Éñ„É≠„Éº„Éá„Ç£„É≥„Ç∞\",
                \"fallback_options\": [\"„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈÅ∏ÊäûËÇ¢\"]
              },
              \"mobile_rendering\": {
                \"optimization_level\": \"ÊúÄÈÅ©Âåñ„É¨„Éô„É´\",
                \"quality_scaling\": \"ÂìÅË≥™„Çπ„Ç±„Éº„É™„É≥„Ç∞\",
                \"performance_monitoring\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ\"
              },
              \"desktop_rendering\": {
                \"high_quality_features\": [\"È´òÂìÅË≥™Ê©üËÉΩ\"],
                \"advanced_shading\": \"È´òÂ∫¶„Ç∑„Çß„Éº„Éá„Ç£„É≥„Ç∞\",
                \"ray_tracing_options\": \"„É¨„Ç§„Éà„É¨„Éº„Ç∑„É≥„Ç∞ÈÅ∏ÊäûËÇ¢\"
              }
            },
            \"interactive_features\": {
              \"user_controls\": [\"„É¶„Éº„Ç∂„ÉºÂà∂Âæ°\"],
              \"animation_triggers\": [\"„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Éà„É™„Ç¨„Éº\"],
              \"customization_options\": [\"„Ç´„Çπ„Çø„Éû„Ç§„Çº„Éº„Ç∑„Éß„É≥ÈÅ∏ÊäûËÇ¢\"],
              \"performance_adaptivity\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÈÅ©ÂøúÊÄß\"
            },
            \"quality_validation\": {
              \"visual_quality_checks\": [\"Ë¶ñË¶öÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ\"],
              \"performance_benchmarks\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ\"],
              \"cross_platform_testing\": [\"„ÇØ„É≠„Çπ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÉÜ„Çπ„Éà\"],
              \"user_experience_validation\": [\"UXÊ§úË®º\"]
            }
          }" > .logs/rendering-setup/rendering-configuration.json
          
          RENDERING_CONFIG=$(cat .logs/rendering-setup/rendering-configuration.json)
          
          # „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆöÊÉÖÂ†±„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          RENDERING_APPROACH=$(echo "$RENDERING_CONFIG" | jq -r '.rendering_strategy.primary_rendering_approach')
          PLATFORM_COUNT=$(echo "$RENDERING_CONFIG" | jq '.rendering_strategy.target_platforms | length')
          
          echo "RENDERING_APPROACH=$RENDERING_APPROACH" >> $GITHUB_ENV
          echo "TARGET_PLATFORM_COUNT=$PLATFORM_COUNT" >> $GITHUB_ENV
          echo "RENDERING_CONFIG_FILE=.logs/rendering-setup/rendering-configuration.json" >> $GITHUB_ENV
          
          echo "üé® Rendering and visualization setup completed"
          echo "Rendering approach: $RENDERING_APPROACH"
          echo "Target platforms: $PLATFORM_COUNT"

  # === ÈÖç‰ø°Ê∫ñÂÇôÊÆµÈöé ===
  - id: "3d-delivery-packaging"
    name: "3DÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏„Éª„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©Âåñ"
    phase: "delivery_preparation"
    github_job: "delivery-packaging"
    type: "packaging"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["rendering-visualization-setup"]
    parallel_group: null
    
    github_steps:
      - name: "Create delivery package and optimize formats"
        shell: "bash"
        script: |
          echo "üì¶ Creating 3D delivery package and optimizing formats..."
          
          mkdir -p .logs/delivery-packaging
          
          THREED_CONCEPT=$(cat .logs/3d-concept/3d-concept.json)
          OPTIMIZATION_ANALYSIS=$(cat .logs/model-optimization/optimization-analysis.json)
          RENDERING_CONFIG=$(cat .logs/rendering-setup/rendering-configuration.json)
          GENERATION_LOG=$(cat .logs/3d-generation/generation-log.json)
          
          # ÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏Êà¶Áï•
          claude-code --prompt "‰ª•‰∏ã„ÅÆ3D„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏„Å®„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊúÄÈÅ©ÂåñÊà¶Áï•„ÇíË®≠Ë®à„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          3D„Ç≥„É≥„Çª„Éó„Éà: $THREED_CONCEPT
          ÊúÄÈÅ©ÂåñÂàÜÊûê: $OPTIMIZATION_ANALYSIS
          „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆö: $RENDERING_CONFIG
          ÁîüÊàê„É≠„Ç∞: $GENERATION_LOG
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"delivery_strategy\": {
              \"primary_use_cases\": [\"‰∏ªË¶ÅÁî®ÈÄî\"],
              \"target_audiences\": [\"ÂØæË±°„É¶„Éº„Ç∂„Éº\"],
              \"distribution_channels\": [\"ÈÖç‰ø°„ÉÅ„É£„Éç„É´\"],
              \"deployment_scenarios\": [\"„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Ç∑„Éä„É™„Ç™\"]
            },
            \"format_specifications\": [
              {
                \"format_name\": \"„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂêç\",
                \"file_extension\": \"„Éï„Ç°„Ç§„É´Êã°ÂºµÂ≠ê\",
                \"use_case\": \"‰ΩøÁî®Áî®ÈÄî\",
                \"platform_compatibility\": [\"„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†‰∫íÊèõÊÄß\"],
                \"technical_specs\": {
                  \"polygon_limit\": \"„Éù„É™„Ç¥„É≥Âà∂Èôê\",
                  \"texture_size\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Çµ„Ç§„Ç∫\",
                  \"compression_level\": \"ÂúßÁ∏Æ„É¨„Éô„É´\",
                  \"file_size_estimate\": \"Êé®ÂÆö„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫\"
                },
                \"quality_profile\": \"ÂìÅË≥™„Éó„É≠„Éï„Ç°„Ç§„É´\",
                \"loading_performance\": \"„É≠„Éº„Éá„Ç£„É≥„Ç∞„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ\"
              }
            ],
            \"optimization_variants\": {
              \"high_quality\": {
                \"description\": \"È´òÂìÅË≥™Áâà‰ªïÊßò\",
                \"polygon_count\": \"„Éù„É™„Ç¥„É≥Êï∞\",
                \"texture_resolution\": \"„ÉÜ„ÇØ„Çπ„ÉÅ„É£Ëß£ÂÉèÂ∫¶\",
                \"target_platforms\": [\"ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†\"]
              },
              \"standard_quality\": {
                \"description\": \"Ê®ôÊ∫ñÂìÅË≥™Áâà‰ªïÊßò\",
                \"optimization_level\": \"ÊúÄÈÅ©Âåñ„É¨„Éô„É´\",
                \"performance_target\": \"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõÆÊ®ô\"
              },
              \"mobile_optimized\": {
                \"description\": \"„É¢„Éê„Ç§„É´ÊúÄÈÅ©ÂåñÁâà‰ªïÊßò\",
                \"constraints\": [\"Âà∂Á¥ÑÊù°‰ª∂\"],
                \"optimization_techniques\": [\"ÊúÄÈÅ©ÂåñÊäÄÊ≥ï\"]
              },
              \"web_optimized\": {
                \"description\": \"WebÊúÄÈÅ©ÂåñÁâà‰ªïÊßò\",
                \"loading_strategy\": \"„É≠„Éº„Éá„Ç£„É≥„Ç∞Êà¶Áï•\",
                \"streaming_support\": \"„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÂØæÂøú\"
              }
            },
            \"asset_package\": {
              \"3d_models\": {
                \"primary_models\": [\"„É°„Ç§„É≥„É¢„Éá„É´\"],
                \"lod_variants\": [\"LOD„Éê„É™„Ç¢„É≥„Éà\"],
                \"detail_models\": [\"Ë©≥Á¥∞„É¢„Éá„É´\"]
              },
              \"textures\": {
                \"diffuse_maps\": [\"„Éá„Ç£„Éï„É•„Éº„Ç∫„Éû„ÉÉ„Éó\"],
                \"normal_maps\": [\"„Éé„Éº„Éû„É´„Éû„ÉÉ„Éó\"],
                \"pbr_textures\": [\"PBR„ÉÜ„ÇØ„Çπ„ÉÅ„É£\"],
                \"environment_maps\": [\"Áí∞Â¢É„Éû„ÉÉ„Éó\"]
              },
              \"materials\": {
                \"material_definitions\": [\"„Éû„ÉÜ„É™„Ç¢„É´ÂÆöÁæ©\"],
                \"shader_configurations\": [\"„Ç∑„Çß„Éº„ÉÄ„ÉºË®≠ÂÆö\"],
                \"rendering_parameters\": [\"„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Éë„É©„É°„Éº„Çø\"]
              },
              \"documentation\": {
                \"technical_specifications\": \"ÊäÄË°ì‰ªïÊßòÊõ∏\",
                \"usage_guidelines\": \"‰ΩøÁî®„Ç¨„Ç§„Éâ„É©„Ç§„É≥\",
                \"integration_instructions\": \"Áµ±ÂêàÊâãÈ†ÜÊõ∏\",
                \"troubleshooting_guide\": \"„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞\"
              }
            },
            \"metadata_package\": {
              \"model_information\": {
                \"model_name\": \"„É¢„Éá„É´Âêç\",
                \"creation_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                \"generation_method\": \"AI-generated 3D model\",
                \"quality_level\": \"$CURRENT_3D_QUALITY/10\",
                \"polygon_count\": \"„Éù„É™„Ç¥„É≥Êï∞\"
              },
              \"technical_metadata\": {
                \"coordinate_system\": \"Â∫ßÊ®ôÁ≥ª\",
                \"unit_scale\": \"Âçò‰Ωç„Çπ„Ç±„Éº„É´\",
                \"pivot_point\": \"„Éî„Éú„ÉÉ„Éà„Éù„Ç§„É≥„Éà\",
                \"bounding_box\": \"„Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ\"
              },
              \"usage_rights\": {
                \"license_type\": \"„É©„Ç§„Çª„É≥„ÇπÁ®ÆÂà•\",
                \"commercial_usage\": \"ÂïÜÁî®Âà©Áî®ÂèØÂê¶\",
                \"modification_rights\": \"ÊîπÂ§âÊ®©Èôê\",
                \"attribution_requirements\": [\"„ÇØ„É¨„Ç∏„ÉÉ„ÉàË¶Å‰ª∂\"]
              }
            },
            \"quality_assurance\": {
              \"validation_checklist\": [\"Ê§úË®º„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà\"],
              \"compatibility_tests\": [\"‰∫íÊèõÊÄß„ÉÜ„Çπ„Éà\"],
              \"performance_benchmarks\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ\"],
              \"user_acceptance_criteria\": [\"„É¶„Éº„Ç∂„ÉºÂèóÂÆπÂü∫Ê∫ñ\"]
            },
            \"deployment_guidance\": {
              \"integration_steps\": [\"Áµ±Âêà„Çπ„ÉÜ„ÉÉ„Éó\"],
              \"configuration_options\": [\"Ë®≠ÂÆöÈÅ∏ÊäûËÇ¢\"],
              \"optimization_tips\": [\"ÊúÄÈÅ©Âåñ„ÅÆ„Ç≥„ÉÑ\"],
              \"maintenance_recommendations\": [\"„É°„É≥„ÉÜ„Éä„É≥„ÇπÊé®Â•®‰∫ãÈ†Ö\"]
            },
            \"success_metrics\": {
              \"technical_kpis\": [\"ÊäÄË°ìÁöÑKPI\"],
              \"user_experience_metrics\": [\"UX „É°„Éà„É™„ÇØ„Çπ\"],
              \"performance_indicators\": [\"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ô\"],
              \"quality_benchmarks\": [\"ÂìÅË≥™„Éô„É≥„ÉÅ„Éû„Éº„ÇØ\"]
            }
          }" > .logs/delivery-packaging/delivery-strategy.json
          
          DELIVERY_STRATEGY=$(cat .logs/delivery-packaging/delivery-strategy.json)
          
          # ÈÖç‰ø°ÊÉÖÂ†±„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          FORMAT_COUNT=$(echo "$DELIVERY_STRATEGY" | jq '.format_specifications | length')
          VARIANT_COUNT=$(echo "$DELIVERY_STRATEGY" | jq '.optimization_variants | keys | length')
          
          echo "DELIVERY_FORMAT_COUNT=$FORMAT_COUNT" >> $GITHUB_ENV
          echo "OPTIMIZATION_VARIANT_COUNT=$VARIANT_COUNT" >> $GITHUB_ENV
          echo "DELIVERY_STRATEGY_FILE=.logs/delivery-packaging/delivery-strategy.json" >> $GITHUB_ENV
          
          echo "üì¶ 3D delivery packaging completed"
          echo "Delivery formats: $FORMAT_COUNT"
          echo "Optimization variants: $VARIANT_COUNT"

  - id: "final-3d-project-packaging"
    name: "ÊúÄÁµÇ3D„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê"
    phase: "delivery_preparation"
    github_job: "final-packaging"
    type: "packaging"
    implementation: "script"
    duration_minutes: 2
    dependencies: ["3d-delivery-packaging"]
    parallel_group: null
    
    github_steps:
      - name: "Create comprehensive 3D project delivery package"
        shell: "bash"
        script: |
          echo "üì¶ Creating comprehensive 3D project delivery package..."
          
          mkdir -p .final-output/{concept,generation,optimization,rendering}
          
          # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊñáÊõ∏
          cp .logs/3d-concept/3d-concept.json .final-output/concept/ 2>/dev/null || true
          cp .logs/reference-preparation/preparation-log.json .final-output/concept/ 2>/dev/null || true
          
          # 3DÁîüÊàêÊàêÊûúÁâ©
          mkdir -p .final-output/generation/{models,references}
          cp .logs/3d-generation/*.json .final-output/generation/models/ 2>/dev/null || true
          cp .logs/reference-preparation/*.json .final-output/generation/references/ 2>/dev/null || true
          
          # ÊúÄÈÅ©Âåñ„Éª„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë≥áÊñô
          cp .logs/model-optimization/*.json .final-output/optimization/ 2>/dev/null || true
          cp .logs/rendering-setup/*.json .final-output/rendering/ 2>/dev/null || true
          cp .logs/delivery-packaging/*.json .final-output/rendering/ 2>/dev/null || true
          
          # „Éû„Çπ„Çø„Éº3D„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±
          cat > .final-output/3d-project-master.json << EOF
          {
            "project_info": {
              "project_name": "3D Model Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "project_type": "3d_model_generation_and_optimization",
              "total_production_time": "30 minutes"
            },
            "3d_overview": {
              "polygon_budget": $POLYGON_BUDGET,
              "texture_resolution": $TEXTURE_RESOLUTION,
              "current_quality_score": "$CURRENT_3D_QUALITY/10",
              "delivery_formats": $DELIVERY_FORMAT_COUNT,
              "optimization_variants": $OPTIMIZATION_VARIANT_COUNT
            },
            "production_summary": {
              "3d_generation_available": "$THREED_GEN_AVAILABLE",
              "reference_generation_available": "$REF_IMAGE_AVAILABLE",
              "image_enhancement_available": "$IMAGE_ENHANCEMENT_AVAILABLE",
              "ai_analysis_available": "$THREED_AI_AVAILABLE",
              "generated_3d_models": $GENERATED_3D_COUNT,
              "reference_images": $GENERATED_REF_COUNT,
              "angle_variants": $ANGLE_3D_VARIANTS,
              "detail_models": $DETAIL_3D_MODELS
            },
            "deliverables": {
              "concept_documents": {
                "3d_concept": "concept/3d-concept.json",
                "reference_preparation": "concept/preparation-log.json"
              },
              "3d_assets": {
                "generated_models": "generation/models/",
                "reference_images": "generation/references/"
              },
              "optimization_reports": {
                "model_optimization": "optimization/optimization-analysis.json",
                "rendering_configuration": "rendering/rendering-configuration.json",
                "delivery_strategy": "rendering/delivery-strategy.json"
              }
            },
            "technical_capabilities": {
              "basic_3d_capability": "$BASIC_3D_CAPABILITY",
              "advanced_3d_capability": "$ADVANCED_3D_CAPABILITY",
              "primary_3d_service": "$([ "$THREED_GEN_AVAILABLE" = "true" ] && echo "i2i3d-fal-hunyuan3d-v21" || echo "none")",
              "enhancement_services": "$([ "$IMAGE_ENHANCEMENT_AVAILABLE" = "true" ] && echo "i2i-fal-flux-kontext-max" || echo "none")"
            },
            "production_readiness": {
              "3d_generation_status": "$THREED_GENERATION_STATUS",
              "reference_preparation_status": "$REFERENCE_PREPARATION_STATUS",
              "quality_score": "$CURRENT_3D_QUALITY/10",
              "high_priority_optimizations": $HIGH_PRIORITY_3D_OPTS,
              "rendering_approach": "$RENDERING_APPROACH",
              "delivery_ready": $([ "$THREED_GENERATION_STATUS" = "success" ] && echo "true" || echo "false")
            },
            "usage_guidelines": {
              "model_modification": "Generated 3D models can be further processed using specifications provided",
              "optimization_implementation": "Follow optimization analysis recommendations for best performance",
              "rendering_setup": "Use rendering configuration for optimal visual presentation",
              "platform_deployment": "Reference delivery strategy for platform-specific optimizations",
              "quality_maintenance": "Regular validation using provided quality benchmarks"
            },
            "support_resources": {
              "model_regeneration": "Use 3d-concept.json specifications to recreate or modify models",
              "optimization_guidance": "Follow optimization-analysis.json recommendations",
              "rendering_setup": "Use rendering-configuration.json for setup guidance",
              "troubleshooting": "Check generation logs for detailed creation information"
            }
          }
          EOF
          
          # 3DÂà∂‰Ωú„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¨„Ç§„Éâ„ÅÆ‰ΩúÊàê
          cat > .final-output/3D_PROJECT_GUIDE.md << 'EOF'
          # 3D„É¢„Éá„É´Âà∂‰Ωú„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¨„Ç§„Éâ
          
          ## üßä „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å
          - Âà∂‰ΩúÊâãÊ≥ï: AIÁîüÊàê„Å´„Çà„Çã3D„É¢„Éá„É´Âà∂‰Ωú
          - ÂìÅË≥™„É¨„Éô„É´: „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´ÂØæÂøú
          - ÊúÄÈÅ©Âåñ: „Éû„É´„ÉÅ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøú
          
          ## üéØ 3D„É¢„Éá„É´‰ªïÊßò
          - „Éù„É™„Ç¥„É≥‰∫àÁÆó„Å®ÊúÄÈÅ©Âåñ„É¨„Éô„É´
          - „ÉÜ„ÇØ„Çπ„ÉÅ„É£Ëß£ÂÉèÂ∫¶„Å®ÂìÅË≥™Ë®≠ÂÆö
          - „Éû„ÉÜ„É™„Ç¢„É´„Éª„Ç∑„Çß„Éº„ÉÄ„ÉºË®≠ÂÆö
          - LOD (Level of Detail) Êà¶Áï•
          
          ## üé® Âà∂‰ΩúÊàêÊûúÁâ©
          - „É°„Ç§„É≥3D„É¢„Éá„É´
          - ËßíÂ∫¶Âà•„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥
          - Ë©≥Á¥∞„Éë„Éº„ÉÑ„É¢„Éá„É´
          - ÂèÇÁÖßÁîªÂÉèÁ¥†Êùê
          - „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆö
          
          ## ‚ö° ÊúÄÈÅ©Âåñ„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âà•ÊúÄÈÅ©Âåñ
          - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõÆÊ®ôË®≠ÂÆö
          - ÂìÅË≥™„ÉªÂäπÁéá„Éê„É©„É≥„Çπ
          - ÈÖç‰ø°„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂØæÂøú
          
          ## üöÄ ÈÖç‰ø°„ÉªÁµ±Âêà
          - „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ„Ç¨„Ç§„Éâ
          - „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Áµ±ÂêàÊâãÈ†Ü
          - „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ë®≠ÂÆöÈÅ©Áî®
          - ÂìÅË≥™Ê§úË®º„Éó„É≠„Çª„Çπ
          
          ## üîß ÊäÄË°ìÁöÑÊ≥®ÊÑè‰∫ãÈ†Ö
          - Â∫ßÊ®ôÁ≥ª„ÉªÂçò‰Ωç„ÅÆÁµ±‰∏Ä
          - „ÉÜ„ÇØ„Çπ„ÉÅ„É£„Éª„Éû„ÉÜ„É™„Ç¢„É´ÁÆ°ÁêÜ
          - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
          - Á∂ôÁ∂öÁöÑÊúÄÈÅ©Âåñ
          EOF
          
          # ZIP„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
          cd .final-output && zip -r ../3d-model-package.zip . && cd ..
          
          echo "üì¶ Final 3D project packaging completed"
          echo "Package includes:"
          echo "- 3D concept and technical specifications"
          echo "- $GENERATED_3D_COUNT generated 3D models"
          echo "- $GENERATED_REF_COUNT reference images"
          echo "- Quality optimization analysis (score: $CURRENT_3D_QUALITY/10)"
          echo "- $DELIVERY_FORMAT_COUNT delivery format specifications"
          echo "- Rendering and deployment configurations"
          echo "Package location: 3d-model-package.zip"
          
    success_links:
      package_download: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
      optimization_analysis: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/optimization/optimization-analysis.json"
      3d_concept: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/concept/3d-concept.json"
      project_guide: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/3D_PROJECT_GUIDE.md"

    validation:
      criteria:
        - "3D„Ç≥„É≥„Çª„Éó„Éà„ÅåË®≠Ë®à„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÂèÇÁÖßÁîªÂÉè„ÅåÊ∫ñÂÇô„Åï„Çå„Å¶„ÅÑ„Çã"
        - "3D„É¢„Éá„É´„ÅåÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÊúÄÈÅ©ÂåñÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã"
        - "ÈÖç‰ø°„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".final-output/3d-project-master.json" ]; then
          echo "‚ùå VALIDATION FAILED: 3D project package missing"
          exit 1
        fi
        
        if [ "$THREED_GENERATION_STATUS" = "success" ]; then
          echo "‚úÖ Validation passed: 3D model generation completed successfully"
        elif [ "$THREED_GENERATION_STATUS" = "service_unavailable" ]; then
          echo "‚ö†Ô∏è WARNING: 3D generation service unavailable - specifications created for external use"
        else
          echo "‚ùå VALIDATION FAILED: 3D model generation failed"
          exit 1
        fi