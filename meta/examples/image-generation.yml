name: "AI Image Generation Workflow"
run-name: "🎨 Generating AI images: ${{ github.event.inputs.main_prompt || 'Image Generation' }}"

on:
  workflow_dispatch:
    inputs:
      main_prompt:
        description: 'メインプロンプト - 生成したい画像の詳細な説明'
        required: true
        default: '美しい夕日の風景、アニメスタイル、高画質、詳細な背景'
        type: string
      negative_prompt:
        description: 'ネガティブプロンプト (除外したい要素)'
        required: false
        default: '低画質、不自然な手、ぼやけた画像'
        type: string
      art_style:
        description: 'アートスタイル'
        required: true
        type: choice
        options:
        - photorealistic
        - anime
        - oil_painting
        - digital_art
        - watercolor
        default: 'photorealistic'
      quality_level:
        description: '品質レベル (1-10)'
        required: true
        default: '8'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
      aspect_ratio:
        description: '画像の縦横比'
        required: true
        type: choice
        options:
        - '1:1'
        - '16:9'
        - '4:3'
        - '3:4'
        - '9:16'
        default: '1:1'
      image_count:
        description: '生成枚数 (1-8)'
        required: true
        default: '4'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
      mcp_service_priority:
        description: '使用MCPサービス優先度'
        required: true
        type: choice
        options:
        - ultra_quality
        - balanced
        - speed_priority
        - google_only
        default: 'balanced'

permissions:
  contents: write
  issues: read
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: 事前テスト段階
  connectivity-test:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.test.outputs.services_ready }}
      recommended_service: ${{ steps.test.outputs.recommended_service }}
    steps:
      - name: Test image generation services
        id: test
        run: |
          echo "🎨 Testing image generation services..."
          
          mkdir -p .logs/connectivity-tests
          
          # MCP Kamuicode設定テスト
          echo "Testing MCP Kamuicode configuration..."
          if [ -f ".claude/mcp-kamuicode.json" ]; then
            echo "✅ MCP Configuration file found"
            MCP_CONFIG_STATUS="success"
          else
            echo "⚠️ MCP Configuration file not found, using default"
            MCP_CONFIG_STATUS="default"
          fi
          
          # 高品質画像生成テスト（Imagen4 Ultra）
          echo "Testing high-quality image generation (Imagen4 Ultra)..."
          if timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt "test high quality image" > .logs/connectivity-tests/imagen4-ultra-test.log 2>&1; then
            IMAGEN4_ULTRA_STATUS="success"
            echo "✅ Imagen4 Ultra: Available"
          else
            IMAGEN4_ULTRA_STATUS="failed"
            echo "⚠️ Imagen4 Ultra: Not available"
          fi
          
          # 高速画像生成テスト（Imagen4 Fast）
          echo "Testing fast image generation (Imagen4 Fast)..."
          if timeout 30 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "test fast image" > .logs/connectivity-tests/imagen4-fast-test.log 2>&1; then
            IMAGEN4_FAST_STATUS="success"
            echo "✅ Imagen4 Fast: Available"
          else
            IMAGEN4_FAST_STATUS="failed"
            echo "⚠️ Imagen4 Fast: Not available"
          fi
          
          # Google Imagen3 テスト（代替案）
          echo "Testing Google Imagen3..."
          if timeout 45 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-google-imagen3 --prompt "test google imagen" > .logs/connectivity-tests/google-imagen3-test.log 2>&1; then
            GOOGLE_IMAGEN3_STATUS="success"
            echo "✅ Google Imagen3: Available"
          else
            GOOGLE_IMAGEN3_STATUS="failed"
            echo "⚠️ Google Imagen3: Not available"
          fi
          
          # 最低1つの画像生成サービスが利用可能かチェック
          if [ "$IMAGEN4_ULTRA_STATUS" = "success" ] || [ "$IMAGEN4_FAST_STATUS" = "success" ] || [ "$GOOGLE_IMAGEN3_STATUS" = "success" ]; then
            IMAGE_GEN_STATUS="success"
            echo "✅ At least one image generation service available"
          else
            IMAGE_GEN_STATUS="failed"
            echo "❌ No image generation services available - Cannot proceed"
          fi
          
          # MCP Kamuicode テスト（カスタム画像処理）
          echo "Testing MCP kamuicode (image processing functions)..."
          if timeout 20 claude-code --mcp kamuicode --function test-image-processing > .logs/connectivity-tests/kamuicode-test.log 2>&1; then
            KAMUICODE_STATUS="success"
            echo "✅ MCP Kamuicode: Available"
          else
            KAMUICODE_STATUS="failed"
            echo "⚠️ MCP Kamuicode: Not available - will use standard processing"
          fi
          
          # 外部画像API テスト（Stable Diffusion, DALL-E等）
          echo "Testing external image APIs..."
          if [ -n "${{ secrets.EXTERNAL_IMAGE_API_KEY }}" ]; then
            if timeout 30 curl -s -H "Authorization: Bearer ${{ secrets.EXTERNAL_IMAGE_API_KEY }}" https://api.example-image-service.com/health > .logs/connectivity-tests/external-api-test.log 2>&1; then
              EXTERNAL_API_STATUS="success"
              echo "✅ External Image API: Available"
            else
              EXTERNAL_API_STATUS="failed"
              echo "⚠️ External Image API: Failed - will use MCP generation only"
            fi
          else
            EXTERNAL_API_STATUS="not_configured"
            echo "ℹ️ External Image API: Not configured - using MCP generation"
          fi
          
          # テスト結果をJSON保存
          cat > .logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "mcp_config_status": "$MCP_CONFIG_STATUS",
            "available_image_services": {
              "imagen4_ultra": "$IMAGEN4_ULTRA_STATUS",
              "imagen4_fast": "$IMAGEN4_FAST_STATUS", 
              "google_imagen3": "$GOOGLE_IMAGEN3_STATUS",
              "kamuicode_processing": "$KAMUICODE_STATUS",
              "external_api": "$EXTERNAL_API_STATUS"
            },
            "service_priorities": [
              "$([ "$IMAGEN4_ULTRA_STATUS" = "success" ] && echo "t2i-fal-imagen4-ultra" || echo "")",
              "$([ "$IMAGEN4_FAST_STATUS" = "success" ] && echo "t2i-fal-imagen4-fast" || echo "")",
              "$([ "$GOOGLE_IMAGEN3_STATUS" = "success" ] && echo "t2i-google-imagen3" || echo "")"
            ],
            "overall_status": "$([ "$IMAGE_GEN_STATUS" = "success" ] && echo "ready" || echo "failed")",
            "critical_services_available": $([ "$IMAGE_GEN_STATUS" = "success" ] && echo "true" || echo "false"),
            "workflow_can_proceed": $([ "$IMAGE_GEN_STATUS" = "success" ] && echo "true" || echo "false"),
            "recommended_service": "$([ "$IMAGEN4_ULTRA_STATUS" = "success" ] && echo "t2i-fal-imagen4-ultra" || [ "$IMAGEN4_FAST_STATUS" = "success" ] && echo "t2i-fal-imagen4-fast" || [ "$GOOGLE_IMAGEN3_STATUS" = "success" ] && echo "t2i-google-imagen3" || echo "none")"
          }
          EOF
          
          # 環境変数に結果を設定
          echo "CONNECTIVITY_STATUS=$([ "$IMAGE_GEN_STATUS" = "success" ] && echo "ready" || echo "failed")" >> $GITHUB_ENV
          echo "RECOMMENDED_IMAGE_SERVICE=$([ "$IMAGEN4_ULTRA_STATUS" = "success" ] && echo "t2i-fal-imagen4-ultra" || [ "$IMAGEN4_FAST_STATUS" = "success" ] && echo "t2i-fal-imagen4-fast" || [ "$GOOGLE_IMAGEN3_STATUS" = "success" ] && echo "t2i-google-imagen3" || echo "none")" >> $GITHUB_ENV
          echo "HIGH_QUALITY_AVAILABLE=$([ "$IMAGEN4_ULTRA_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "FAST_GENERATION_AVAILABLE=$([ "$IMAGEN4_FAST_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          echo "🎨 Image generation service tests completed"
          
          # 出力設定
          echo "services_ready=true" >> $GITHUB_OUTPUT
          echo "recommended_service=$RECOMMENDED_IMAGE_SERVICE" >> $GITHUB_OUTPUT

  # Phase 2: コンセプト開発段階
  prompt-analysis:
    needs: connectivity-test
    runs-on: ubuntu-latest
    outputs:
      prompt_analysis: ${{ steps.analyze.outputs.prompt_analysis }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Analyze input prompt
        id: analyze
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔍 Analyzing input prompt for image generation..."
          
          mkdir -p .logs/concept-development
          
          # 入力プロンプトを取得
          INPUT_PROMPT="${{ github.event.inputs.main_prompt }}"
          echo "Input prompt: $INPUT_PROMPT"
          
          # Claude Code でプロンプト分析
          claude-code --prompt "以下の画像生成要求を詳細に分析してください：
          
          入力プロンプト: $INPUT_PROMPT
          
          以下の形式でJSONで回答してください：
          {
            \"image_type\": \"portrait|landscape|illustration|photo|abstract|logo|icon|concept_art\",
            \"style_category\": \"photorealistic|artistic|cartoon|anime|vintage|modern|minimalist|detailed\",
            \"subject_matter\": \"主要な被写体・テーマ\",
            \"mood_tone\": \"明るい|暗い|神秘的|活気のある|静寂な|ドラマチック\",
            \"color_palette\": [\"推奨される色彩のリスト\"],
            \"technical_requirements\": {
              \"aspect_ratio\": \"1:1|16:9|9:16|4:3|3:4\",
              \"resolution\": \"recommended resolution\",
              \"style_strength\": \"high|medium|low\"
            },
            \"creative_direction\": \"創作の方向性説明\",
            \"potential_challenges\": [\"生成時に注意すべき点\"],
            \"enhancement_suggestions\": [\"より良い結果のための提案\"]
          }" > .logs/concept-development/prompt-analysis.json
          
          PROMPT_ANALYSIS=$(cat .logs/concept-development/prompt-analysis.json)
          echo "prompt_analysis<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT_ANALYSIS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Prompt analysis completed"

  concept-planning:
    needs: prompt-analysis
    runs-on: ubuntu-latest
    outputs:
      visual_concept: ${{ steps.plan.outputs.visual_concept }}
    steps:
      - name: Plan visual concept
        id: plan
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎯 Planning visual concept..."
          
          # ビジュアルコンセプトの詳細計画
          PROMPT_ANALYSIS='${{ needs.prompt-analysis.outputs.prompt_analysis }}'
          claude-code --prompt "以下の分析結果を基に、具体的なビジュアルコンセプトを計画してください：
          
          プロンプト分析: $PROMPT_ANALYSIS
          
          以下の形式でJSONで回答してください：
          {
            \"composition_plan\": {
              \"main_focus\": \"メインの焦点要素\",
              \"background\": \"背景の描写\",
              \"foreground\": \"前景の要素\",
              \"depth_layers\": [\"奥行きを構成する層のリスト\"]
            },
            \"lighting_plan\": {
              \"light_source\": \"光源の種類と位置\",
              \"shadow_direction\": \"影の方向\",
              \"ambient_lighting\": \"環境光の特徴\",
              \"mood_lighting\": \"ムードを作る照明効果\"
            },
            \"color_scheme\": {
              \"primary_colors\": [\"主要色のリスト\"],
              \"accent_colors\": [\"アクセント色のリスト\"],
              \"color_temperature\": \"warm|cool|neutral\",
              \"contrast_level\": \"high|medium|low\"
            },
            \"detail_specifications\": {
              \"texture_details\": [\"テクスチャの詳細\"],
              \"material_properties\": [\"素材の特性\"],
              \"fine_details\": [\"細かなディテール\"]
            },
            \"generation_strategy\": {
              \"primary_approach\": \"生成の主要アプローチ\",
              \"fallback_options\": [\"代替案のリスト\"],
              \"iteration_plan\": \"反復改善の計画\"
            }
          }" > .logs/concept-development/visual-concept.json
          
          VISUAL_CONCEPT=$(cat .logs/concept-development/visual-concept.json)
          echo "visual_concept<<EOF" >> $GITHUB_OUTPUT
          echo "$VISUAL_CONCEPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Visual concept planning completed"

  # Phase 3: プロンプト設計段階
  prompt-engineering:
    needs: concept-planning
    runs-on: ubuntu-latest
    outputs:
      engineered_prompts: ${{ steps.engineer.outputs.engineered_prompts }}
    steps:
      - name: Engineer detailed prompts
        id: engineer
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "⚙️ Engineering detailed generation prompts..."
          
          mkdir -p .logs/prompt-engineering
          
          # 詳細なプロンプト設計
          PROMPT_ANALYSIS='${{ needs.prompt-analysis.outputs.prompt_analysis }}'
          VISUAL_CONCEPT='${{ needs.concept-planning.outputs.visual_concept }}'
          claude-code --prompt "以下の情報を基に、AI画像生成用の最適化されたプロンプトを作成してください：
          
          元のプロンプト分析: $PROMPT_ANALYSIS
          ビジュアルコンセプト: $VISUAL_CONCEPT
          
          以下の形式でJSONで回答してください：
          {
            \"primary_prompt\": \"メインの生成プロンプト（詳細で具体的）\",
            \"negative_prompt\": \"除外したい要素のプロンプト\",
            \"style_prompts\": {
              \"photorealistic\": \"写実的スタイル用プロンプト\",
              \"artistic\": \"芸術的スタイル用プロンプト\",
              \"alternative\": \"代替スタイル用プロンプト\"
            },
            \"technical_parameters\": {
              \"recommended_steps\": \"推奨ステップ数\",
              \"cfg_scale\": \"推奨CFGスケール\",
              \"seed_strategy\": \"シード値の戦略\",
              \"batch_settings\": \"バッチ生成設定\"
            },
            \"quality_enhancers\": [\"品質向上のためのプロンプト要素\"],
            \"variation_prompts\": [\"バリエーション生成用のプロンプト案\"],
            \"prompt_weights\": {\"重要度に応じたプロンプト要素の重み付け\": \"値\"}
          }" > .logs/prompt-engineering/engineered-prompts.json
          
          ENGINEERED_PROMPTS=$(cat .logs/prompt-engineering/engineered-prompts.json)
          echo "engineered_prompts<<EOF" >> $GITHUB_OUTPUT
          echo "$ENGINEERED_PROMPTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Prompt engineering completed"

  prompt-optimization:
    needs: prompt-engineering
    runs-on: ubuntu-latest
    outputs:
      optimized_prompts: ${{ steps.optimize.outputs.optimized_prompts }}
    steps:
      - name: Optimize and validate prompts
        id: optimize
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔧 Optimizing and validating prompts..."
          
          # プロンプトの最適化と検証
          ENGINEERED_PROMPTS='${{ needs.prompt-engineering.outputs.engineered_prompts }}'
          claude-code --prompt "以下のエンジニアリングされたプロンプトを最適化し、検証してください：
          
          エンジニアリングプロンプト: $ENGINEERED_PROMPTS
          
          最適化のポイント:
          - プロンプトの長さと効率性
          - 矛盾する指示の削除
          - キーワードの優先順位付け
          - AI生成モデルとの互換性
          
          以下の形式でJSONで回答してください：
          {
            \"optimized_primary_prompt\": \"最適化されたメインプロンプト\",
            \"optimized_negative_prompt\": \"最適化されたネガティブプロンプト\",
            \"prompt_validation\": {
              \"clarity_score\": \"1-10点での明確性評価\",
              \"specificity_score\": \"1-10点での具体性評価\",
              \"compatibility_score\": \"1-10点でのAI互換性評価\",
              \"potential_issues\": [\"潜在的な問題点\"],
              \"improvement_notes\": [\"改善ポイント\"]
            },
            \"final_generation_config\": {
              \"prompt\": \"最終的な生成用プロンプト\",
              \"negative_prompt\": \"最終的なネガティブプロンプト\",
              \"parameters\": {\"技術パラメータ\": \"値\"}
            }
          }" > .logs/prompt-engineering/optimized-prompts.json
          
          OPTIMIZED_PROMPTS=$(cat .logs/prompt-engineering/optimized-prompts.json)
          echo "optimized_prompts<<EOF" >> $GITHUB_OUTPUT
          echo "$OPTIMIZED_PROMPTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Prompt optimization completed"

  # Phase 4: 生成実行段階
  initial-generation:
    needs: [connectivity-test, prompt-optimization]
    runs-on: ubuntu-latest
    outputs:
      generation_results: ${{ steps.generate.outputs.generation_results }}
    steps:
      - name: Generate initial images
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎨 Generating initial images..."
          
          mkdir -p .logs/generation .outputs/images
          
          # 最適化されたプロンプトを取得
          OPTIMIZED_PROMPTS='${{ needs.prompt-optimization.outputs.optimized_prompts }}'
          FINAL_PROMPT=$(echo "$OPTIMIZED_PROMPTS" | jq -r '.final_generation_config.prompt')
          NEGATIVE_PROMPT=$(echo "$OPTIMIZED_PROMPTS" | jq -r '.final_generation_config.negative_prompt')
          
          echo "Final prompt: $FINAL_PROMPT"
          echo "Negative prompt: $NEGATIVE_PROMPT"
          
          # 推奨サービスを使用した画像生成
          RECOMMENDED_SERVICE="${{ needs.connectivity-test.outputs.recommended_service }}"
          echo "Using recommended service: $RECOMMENDED_SERVICE"
          
          # メイン画像生成
          echo "Generating primary image with $RECOMMENDED_SERVICE..."
          if [ "$RECOMMENDED_SERVICE" = "t2i-fal-imagen4-ultra" ]; then
            # 高品質生成（Imagen4 Ultra）
            if claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra \
              --prompt "$FINAL_PROMPT" \
              --negative-prompt "$NEGATIVE_PROMPT" \
              --output ".outputs/images/primary_image.png" \
              --config '{"quality": "ultra", "aspect_ratio": "1:1", "safety_level": "standard"}' \
              > .logs/generation/primary-generation.log 2>&1; then
              PRIMARY_STATUS="success"
              echo "✅ Primary image generated with Imagen4 Ultra"
            else
              PRIMARY_STATUS="failed"
              echo "❌ Imagen4 Ultra generation failed"
            fi
            
          elif [ "$RECOMMENDED_SERVICE" = "t2i-fal-imagen4-fast" ]; then
            # 高速生成（Imagen4 Fast）
            if claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast \
              --prompt "$FINAL_PROMPT" \
              --negative-prompt "$NEGATIVE_PROMPT" \
              --output ".outputs/images/primary_image.png" \
              --config '{"speed": "fast", "aspect_ratio": "1:1"}' \
              > .logs/generation/primary-generation.log 2>&1; then
              PRIMARY_STATUS="success"
              echo "✅ Primary image generated with Imagen4 Fast"
            else
              PRIMARY_STATUS="failed"
              echo "❌ Imagen4 Fast generation failed"
            fi
            
          elif [ "$RECOMMENDED_SERVICE" = "t2i-google-imagen3" ]; then
            # Google Imagen3 生成
            if claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-google-imagen3 \
              --prompt "$FINAL_PROMPT" \
              --negative-prompt "$NEGATIVE_PROMPT" \
              --output ".outputs/images/primary_image.png" \
              > .logs/generation/primary-generation.log 2>&1; then
              PRIMARY_STATUS="success"
              echo "✅ Primary image generated with Google Imagen3"
            else
              PRIMARY_STATUS="failed"
              echo "❌ Google Imagen3 generation failed"
            fi
          else
            PRIMARY_STATUS="failed"
            echo "❌ No available image generation service"
          fi
          
          # バリエーション生成（高速サービス使用）
          echo "Generating variation with fast service..."
          if [ "$FAST_GENERATION_AVAILABLE" = "true" ]; then
            if claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast \
              --prompt "$FINAL_PROMPT, artistic variation, creative interpretation" \
              --negative-prompt "$NEGATIVE_PROMPT" \
              --output ".outputs/images/variant_1.png" \
              --config '{"speed": "fast", "variation": "high"}' \
              > .logs/generation/variant1-generation.log 2>&1; then
              VARIANT1_STATUS="success"
              echo "✅ Variant 1 generated with fast service"
            else
              VARIANT1_STATUS="failed"
              echo "⚠️ Variant 1 generation failed"
            fi
          else
            VARIANT1_STATUS="skipped"
            echo "⚠️ Fast generation not available, skipping variant"
          fi
          
          # 生成結果をログ保存
          cat > .logs/generation/generation-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "primary_image": {
              "status": "$PRIMARY_STATUS",
              "path": ".outputs/images/primary_image.png",
              "prompt_used": "$FINAL_PROMPT",
              "generation_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            },
            "variant_1": {
              "status": "$VARIANT1_STATUS",
              "path": ".outputs/images/variant_1.png"
            },
            "overall_success": $([ "$PRIMARY_STATUS" = "success" ] && echo "true" || echo "false")
          }
          EOF
          
          echo "generation_results<<EOF" >> $GITHUB_OUTPUT
          cat .logs/generation/generation-results.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "🎨 Initial image generation completed"

  quality-analysis:
    needs: [initial-generation, prompt-analysis]
    runs-on: ubuntu-latest
    outputs:
      quality_analysis: ${{ steps.analyze.outputs.quality_analysis }}
    steps:
      - name: Analyze image quality
        id: analyze
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔍 Analyzing generated image quality..."
          
          mkdir -p .logs/quality-analysis
          
          # 生成された画像の品質分析
          GENERATION_RESULTS='${{ needs.initial-generation.outputs.generation_results }}'
          PROMPT_ANALYSIS='${{ needs.prompt-analysis.outputs.prompt_analysis }}'
          claude-code --prompt "生成された画像を分析して品質評価を行ってください：
          
          生成結果: $GENERATION_RESULTS
          元の要求: $PROMPT_ANALYSIS
          
          以下の画像ファイルを参照して分析してください：
          - .outputs/images/primary_image.png
          - .outputs/images/variant_1.png（存在する場合）
          
          以下の形式でJSONで回答してください：
          {
            \"primary_image_analysis\": {
              \"technical_quality\": \"1-10点での技術品質評価\",
              \"prompt_adherence\": \"1-10点でのプロンプト忠実度\",
              \"artistic_merit\": \"1-10点での芸術的価値\",
              \"composition_quality\": \"1-10点での構図品質\",
              \"color_harmony\": \"1-10点での色彩調和\",
              \"detail_level\": \"1-10点での詳細度\",
              \"overall_rating\": \"1-10点での総合評価\"
            },
            \"strengths\": [\"画像の優れている点\"],
            \"weaknesses\": [\"改善が必要な点\"],
            \"improvement_suggestions\": [\"具体的な改善提案\"],
            \"regeneration_needed\": $([ "$OVERALL_SUCCESS" = "true" ] && echo "false" || echo "true"),
            \"refinement_areas\": [\"重点的に改善すべき領域\"]
          }" > .logs/quality-analysis/quality-assessment.json
          
          QUALITY_ANALYSIS=$(cat .logs/quality-analysis/quality-assessment.json)
          echo "quality_analysis<<EOF" >> $GITHUB_OUTPUT
          echo "$QUALITY_ANALYSIS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Image quality analysis completed"

  metadata-extraction:
    needs: [initial-generation, prompt-optimization]
    runs-on: ubuntu-latest
    outputs:
      image_metadata: ${{ steps.extract.outputs.image_metadata }}
    steps:
      - name: Extract image metadata
        id: extract
        run: |
          echo "📊 Extracting image metadata..."
          
          mkdir -p .logs/metadata
          
          # 画像ファイルのメタデータ抽出
          if [ -f ".outputs/images/primary_image.png" ]; then
            # ファイルサイズと基本情報
            FILE_SIZE=$(stat -f%z ".outputs/images/primary_image.png" 2>/dev/null || stat -c%s ".outputs/images/primary_image.png" 2>/dev/null || echo "unknown")
            
            # 画像の基本情報（可能な場合）
            if command -v identify >/dev/null 2>&1; then
              IMAGE_INFO=$(identify ".outputs/images/primary_image.png" 2>/dev/null || echo "ImageMagick not available")
            else
              IMAGE_INFO="Image analysis tools not available"
            fi
            
            # メタデータJSON作成
            OPTIMIZED_PROMPTS='${{ needs.prompt-optimization.outputs.optimized_prompts }}'
            cat > .logs/metadata/image-metadata.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "primary_image": {
              "filename": "primary_image.png",
              "file_size_bytes": $FILE_SIZE,
              "generation_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "image_info": "$IMAGE_INFO"
            },
            "generation_parameters": {
              "prompt_used": $(echo "$OPTIMIZED_PROMPTS" | jq '.final_generation_config.prompt'),
              "negative_prompt": $(echo "$OPTIMIZED_PROMPTS" | jq '.final_generation_config.negative_prompt'),
              "technical_config": $(echo "$OPTIMIZED_PROMPTS" | jq '.final_generation_config.parameters')
            }
          }
          EOF
            
            echo "✅ Metadata extracted for primary image"
          else
            echo "⚠️ No primary image found for metadata extraction"
          fi
          
          IMAGE_METADATA=$(cat .logs/metadata/image-metadata.json)
          echo "image_metadata<<EOF" >> $GITHUB_OUTPUT
          echo "$IMAGE_METADATA" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Phase 5: 品質改善段階
  image-refinement:
    needs: [quality-analysis, metadata-extraction, prompt-optimization]
    runs-on: ubuntu-latest
    outputs:
      refinement_status: ${{ steps.refine.outputs.refinement_status }}
    steps:
      - name: Refine and improve images
        id: refine
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "✨ Refining and improving images..."
          
          mkdir -p .outputs/refined
          
          # 品質分析結果を確認
          QUALITY_ANALYSIS='${{ needs.quality-analysis.outputs.quality_analysis }}'
          OPTIMIZED_PROMPTS='${{ needs.prompt-optimization.outputs.optimized_prompts }}'
          REGENERATION_NEEDED=$(echo "$QUALITY_ANALYSIS" | jq -r '.regeneration_needed')
          OVERALL_RATING=$(echo "$QUALITY_ANALYSIS" | jq -r '.primary_image_analysis.overall_rating // 0')
          
          if [ "$REGENERATION_NEEDED" = "true" ] || [ "$OVERALL_RATING" -lt 7 ]; then
            echo "🔄 Regenerating image with improvements..."
            
            # 改善提案を取得
            IMPROVEMENT_SUGGESTIONS=$(echo "$QUALITY_ANALYSIS" | jq -r '.improvement_suggestions[]' | head -3 | tr '\n' ', ')
            
            # 改善されたプロンプトで再生成
            IMPROVED_PROMPT=$(echo "$OPTIMIZED_PROMPTS" | jq -r '.final_generation_config.prompt')", $IMPROVEMENT_SUGGESTIONS, enhanced quality, masterpiece"
            
            if claude-code --mcp image-generation \
              --prompt "$IMPROVED_PROMPT" \
              --negative-prompt "$(echo "$OPTIMIZED_PROMPTS" | jq -r '.final_generation_config.negative_prompt'), low quality, blurry, artifacts" \
              --output ".outputs/refined/improved_primary.png" \
              --config '{"steps": 40, "cfg_scale": 8.5, "width": 1024, "height": 1024}' \
              > .logs/generation/refinement-generation.log 2>&1; then
              echo "✅ Improved image generated"
              REFINEMENT_STATUS="success"
            else
              echo "⚠️ Image refinement failed, using original"
              cp ".outputs/images/primary_image.png" ".outputs/refined/improved_primary.png" 2>/dev/null || true
              REFINEMENT_STATUS="fallback_to_original"
            fi
          else
            echo "✅ Original image quality is good, copying to refined folder"
            cp ".outputs/images/primary_image.png" ".outputs/refined/improved_primary.png"
            REFINEMENT_STATUS="no_refinement_needed"
          fi
          
          # カスタム画像処理（利用可能な場合）
          if [ "$KAMUICODE_STATUS" = "success" ]; then
            echo "🎨 Applying custom image processing..."
            claude-code --mcp kamuicode \
              --function enhance-image \
              --input ".outputs/refined/improved_primary.png" \
              --output ".outputs/refined/enhanced_primary.png" \
              > .logs/generation/enhancement.log 2>&1 || echo "Custom enhancement failed"
          fi
          
          # 精細化結果をログ保存
          cat > .logs/generation/refinement-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "refinement_status": "$REFINEMENT_STATUS",
            "regeneration_performed": $([ "$REGENERATION_NEEDED" = "true" ] && echo "true" || echo "false"),
            "original_rating": $OVERALL_RATING,
            "refinement_approach": "$IMPROVEMENT_SUGGESTIONS",
            "output_files": [
              ".outputs/refined/improved_primary.png"
            ]
          }
          EOF
          
          echo "refinement_status=$REFINEMENT_STATUS" >> $GITHUB_OUTPUT
          echo "✨ Image refinement completed"

  final-validation:
    needs: [image-refinement, prompt-analysis, initial-generation]
    runs-on: ubuntu-latest
    outputs:
      final_assessment: ${{ steps.validate.outputs.final_assessment }}
      ready_for_delivery: ${{ steps.validate.outputs.ready_for_delivery }}
    steps:
      - name: Validate final image quality
        id: validate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🏁 Performing final quality validation..."
          
          mkdir -p .logs/final-validation
          
          # 最終画像の品質検証
          PROMPT_ANALYSIS='${{ needs.prompt-analysis.outputs.prompt_analysis }}'
          GENERATION_RESULTS='${{ needs.initial-generation.outputs.generation_results }}'
          claude-code --prompt "最終的に生成された画像の品質を検証してください：
          
          元の要求: $PROMPT_ANALYSIS
          生成プロセス: $GENERATION_RESULTS
          精細化結果: $(cat .logs/generation/refinement-results.json)
          
          最終画像を確認してください: .outputs/refined/improved_primary.png
          
          以下の形式でJSONで回答してください：
          {
            \"final_quality_assessment\": {
              \"meets_requirements\": \"true|false\",
              \"quality_score\": \"1-10点での最終品質評価\",
              \"prompt_fulfillment\": \"1-10点での要求達成度\",
              \"technical_excellence\": \"1-10点での技術的完成度\",
              \"ready_for_delivery\": \"true|false\"
            },
            \"final_strengths\": [\"最終画像の優れた点\"],
            \"remaining_issues\": [\"残存する問題点（あれば）\"],
            \"delivery_recommendation\": \"配信に関する推奨事項\",
            \"success_summary\": \"成功ポイントの要約\"
          }" > .logs/final-validation/final-assessment.json
          
          FINAL_ASSESSMENT=$(cat .logs/final-validation/final-assessment.json)
          echo "final_assessment<<EOF" >> $GITHUB_OUTPUT
          echo "$FINAL_ASSESSMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 配信可否判定
          READY_FOR_DELIVERY=$(echo "$FINAL_ASSESSMENT" | jq -r '.final_quality_assessment.ready_for_delivery')
          echo "ready_for_delivery=$READY_FOR_DELIVERY" >> $GITHUB_OUTPUT
          
          echo "🏁 Final quality validation completed"

  # Phase 6: 出力準備段階
  format-optimization:
    needs: final-validation
    runs-on: ubuntu-latest
    steps:
      - name: Optimize image formats
        run: |
          echo "🔧 Optimizing image formats..."
          
          mkdir -p .final-output/{web,print,social}
          
          # Web用最適化（JPEG, WebP）
          if [ -f ".outputs/refined/improved_primary.png" ]; then
            echo "Creating web-optimized versions..."
            
            # JPEG版（品質85%）
            if command -v convert >/dev/null 2>&1; then
              convert ".outputs/refined/improved_primary.png" -quality 85 ".final-output/web/image.jpg" 2>/dev/null || echo "JPEG conversion failed"
              
              # WebP版（品質80%）
              convert ".outputs/refined/improved_primary.png" -quality 80 ".final-output/web/image.webp" 2>/dev/null || echo "WebP conversion failed"
              
              # サムネイル版（500x500）
              convert ".outputs/refined/improved_primary.png" -resize 500x500 ".final-output/web/thumbnail.png" 2>/dev/null || echo "Thumbnail creation failed"
            else
              echo "ImageMagick not available, copying original"
              cp ".outputs/refined/improved_primary.png" ".final-output/web/image.png"
            fi
            
            # 印刷用高品質版
            cp ".outputs/refined/improved_primary.png" ".final-output/print/high_quality.png"
            
            # SNS用正方形版（1080x1080）
            if command -v convert >/dev/null 2>&1; then
              convert ".outputs/refined/improved_primary.png" -resize 1080x1080^ -gravity center -extent 1080x1080 ".final-output/social/square.png" 2>/dev/null || \
              cp ".outputs/refined/improved_primary.png" ".final-output/social/square.png"
            else
              cp ".outputs/refined/improved_primary.png" ".final-output/social/square.png"
            fi
            
            echo "✅ Format optimization completed"
          else
            echo "❌ No refined image found for optimization"
          fi

  metadata-compilation:
    needs: [final-validation, prompt-analysis, initial-generation, quality-analysis, metadata-extraction]
    runs-on: ubuntu-latest
    steps:
      - name: Compile comprehensive metadata
        run: |
          echo "📋 Compiling comprehensive metadata..."
          
          mkdir -p .final-output
          
          # 包括的なメタデータファイル作成
          PROMPT_ANALYSIS='${{ needs.prompt-analysis.outputs.prompt_analysis }}'
          GENERATION_RESULTS='${{ needs.initial-generation.outputs.generation_results }}'
          QUALITY_ANALYSIS='${{ needs.quality-analysis.outputs.quality_analysis }}'
          FINAL_ASSESSMENT='${{ needs.final-validation.outputs.final_assessment }}'
          IMAGE_METADATA='${{ needs.metadata-extraction.outputs.image_metadata }}'
          
          cat > .final-output/image-info.json << EOF
          {
            "project_info": {
              "creation_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "workflow_run_id": "${{ github.run_id }}",
              "generated_by": "AI Image Generation Workflow"
            },
            "original_request": $PROMPT_ANALYSIS,
            "generation_process": {
              "generation_results": $GENERATION_RESULTS,
              "quality_analysis": $QUALITY_ANALYSIS,
              "final_assessment": $FINAL_ASSESSMENT
            },
            "output_files": {
              "primary_png": ".final-output/print/high_quality.png",
              "web_jpg": ".final-output/web/image.jpg",
              "web_webp": ".final-output/web/image.webp",
              "thumbnail": ".final-output/web/thumbnail.png",
              "social_square": ".final-output/social/square.png"
            },
            "usage_recommendations": {
              "web_display": "Use image.webp for modern browsers, image.jpg as fallback",
              "print_usage": "Use high_quality.png for print applications",
              "social_media": "Use square.png for social media platforms",
              "thumbnail": "Use thumbnail.png for gallery views"
            },
            "technical_specs": $IMAGE_METADATA,
            "quality_metrics": {
              "final_quality_score": $(echo "$FINAL_ASSESSMENT" | jq '.final_quality_assessment.quality_score // 0'),
              "prompt_fulfillment": $(echo "$FINAL_ASSESSMENT" | jq '.final_quality_assessment.prompt_fulfillment // 0'),
              "ready_for_delivery": $(echo "$FINAL_ASSESSMENT" | jq '.final_quality_assessment.ready_for_delivery // false')
            }
          }
          EOF
          
          echo "✅ Metadata compilation completed"

  package-creation:
    needs: [format-optimization, metadata-compilation, final-validation]
    runs-on: ubuntu-latest
    steps:
      - name: Create final delivery package
        run: |
          echo "📦 Creating final delivery package..."
          
          # ZIPパッケージ作成
          cd .final-output && zip -r ../ai-generated-images.zip . && cd ..
          
          # パッケージ情報
          PACKAGE_SIZE=$(stat -f%z "ai-generated-images.zip" 2>/dev/null || stat -c%s "ai-generated-images.zip" 2>/dev/null || echo "unknown")
          
          # 配信パッケージ情報
          READY_FOR_DELIVERY='${{ needs.final-validation.outputs.ready_for_delivery }}'
          cat > .final-output/package-info.json << EOF
          {
            "package_created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "package_size_bytes": $PACKAGE_SIZE,
            "package_contents": [
              "print/high_quality.png",
              "web/image.jpg",
              "web/image.webp", 
              "web/thumbnail.png",
              "social/square.png",
              "image-info.json"
            ],
            "delivery_status": "ready",
            "quality_approved": $READY_FOR_DELIVERY
          }
          EOF
          
          echo "📦 Final package created successfully"
      
      - name: Upload Image Generation Package
        uses: actions/upload-artifact@v4
        with:
          name: ai-image-generation-package-${{ github.run_number }}
          path: .final-output/
          retention-days: 30

