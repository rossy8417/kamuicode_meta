env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
jobs:
  audio-generation:
    needs: primary_video_generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Generate background music and sound effects
      run: "echo \"\U0001F3B5 Generating background music and sound effects...\"\n\
        \nmkdir -p .logs/audio-integration\n\nDETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)\n\
        VIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)\n\n# BGM生成要件の抽出\n\
        MUSIC_STYLE=$(echo \"$DETAILED_SCRIPT\" | jq -r '.audio_requirements.background_music_style')\n\
        TOTAL_DURATION=$(echo \"$DETAILED_SCRIPT\" | jq -r '.script_overview.total_duration')\n\
        TONE=$(echo \"$VIDEO_CONCEPT\" | jq -r '.video_concept.tone')\n\necho \"Music\
        \ style: $MUSIC_STYLE\"\necho \"Duration: ${TOTAL_DURATION}s\"\necho \"Tone:\
        \ $TONE\"\n\n# BGM生成\nif [ \"$ENHANCED_AUDIO\" = \"true\" ]; then\n  echo\
        \ \"Generating custom background music...\"\n  MUSIC_PROMPT=\"$MUSIC_STYLE\
        \ background music, $TONE mood, ${TOTAL_DURATION} seconds duration, suitable\
        \ for video content, seamless loop, professional quality\"\n  \n  if timeout\
        \ 120 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2m-google-lyria\
        \ --prompt \"$MUSIC_PROMPT\" --duration \"$TOTAL_DURATION\" > .logs/audio-integration/bgm.json\
        \ 2>&1; then\n    echo \"✅ Custom BGM generated successfully\"\n    BGM_STATUS=\"\
        success\"\n  else\n    echo \"❌ Custom BGM generation failed\"\n    BGM_STATUS=\"\
        failed\"\n  fi\nelse\n  echo \"⚠️ Using fallback: External audio library\"\
        \n  BGM_STATUS=\"external\"\nfi\n\n# 動画から効果音生成（V2A使用）\nVIDEO_GENERATION_LOG=$(cat\
        \ .logs/video-production/video-generation-log.json)\nMAIN_VIDEO_FILE=$(echo\
        \ \"$VIDEO_GENERATION_LOG\" | jq -r '.video_files.main_video')\n\nif [ \"\
        $ENHANCED_AUDIO\" = \"true\" ] && [ \"$MAIN_VIDEO_FILE\" != \"none\" ]; then\n\
        \  echo \"Generating sound effects from video...\"\n  \n  # メイン動画ファイルパスを取得\n\
        \  VIDEO_PATH=$(jq -r '.video_url // .file_path // \"none\"' \"$MAIN_VIDEO_FILE\"\
        )\n  \n  if [ \"$VIDEO_PATH\" != \"none\" ] && timeout 90 claude --mcp-config\
        \ .claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path \"$VIDEO_PATH\"\
        \ --audio-style \"natural sound effects matching video content\" > .logs/audio-integration/sound-effects.json\
        \ 2>&1; then\n    echo \"✅ Sound effects generated from video\"\n    SFX_STATUS=\"\
        success\"\n  else\n    echo \"⚠️ V2A sound effects generation failed\"\n \
        \   SFX_STATUS=\"failed\"\n  fi\nelse\n  echo \"ℹ️ Sound effects generation\
        \ skipped\"\n  SFX_STATUS=\"not_generated\"\nfi\n\n# 音声統合ログの作成\ncat > .logs/audio-integration/audio-generation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"audio_generation\"\
        : {\n    \"bgm_status\": \"$BGM_STATUS\",\n    \"sound_effects_status\": \"\
        $SFX_STATUS\",\n    \"total_audio_duration\": \"$TOTAL_DURATION\",\n    \"\
        audio_style\": \"$MUSIC_STYLE\"\n  },\n  \"audio_files\": {\n    \"background_music\"\
        : \"$([ \"$BGM_STATUS\" = \"success\" ] && echo \".logs/audio-integration/bgm.json\"\
        \ || echo \"none\")\",\n    \"sound_effects\": \"$([ \"$SFX_STATUS\" = \"\
        success\" ] && echo \".logs/audio-integration/sound-effects.json\" || echo\
        \ \"none\")\"\n  },\n  \"integration_ready\": $([ \"$BGM_STATUS\" = \"success\"\
        \ ] || [ \"$BGM_STATUS\" = \"external\" ] && echo \"true\" || echo \"false\"\
        )\n}\nEOF\n\necho \"AUDIO_GENERATION_STATUS=$BGM_STATUS\" >> $GITHUB_ENV\n\
        echo \"AUDIO_INTEGRATION_READY=$([ \"$BGM_STATUS\" = \"success\" ] || [ \"\
        $BGM_STATUS\" = \"external\" ] && echo \"true\" || echo \"false\")\" >> $GITHUB_ENV\n\
        \necho \"\U0001F3B5 Audio generation completed: BGM=$BGM_STATUS, SFX=$SFX_STATUS\""
      shell: bash
  concept-planning:
    needs: media_services_connectivity_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Plan video concept and strategy
      run: "echo \"\U0001F4CB Planning video concept and strategy...\"\n\nmkdir -p\
        \ .logs/concept-planning\n\n# 入力からコンセプトを抽出\nVIDEO_TOPIC=\"${{ github.event.inputs.video_topic\
        \ || github.event.issue.title || 'promotional video' }}\"\nTARGET_AUDIENCE=\"\
        ${{ github.event.inputs.target_audience || 'general audience' }}\"\nVIDEO_LENGTH=\"\
        ${{ github.event.inputs.video_length || '30 seconds' }}\"\nVIDEO_STYLE=\"\
        ${{ github.event.inputs.video_style || 'modern and engaging' }}\"\n\necho\
        \ \"Video topic: $VIDEO_TOPIC\"\necho \"Target audience: $TARGET_AUDIENCE\"\
        \necho \"Desired length: $VIDEO_LENGTH\"\necho \"Style preference: $VIDEO_STYLE\"\
        \n\n# Claude Code でコンセプト企画\nclaude-code --prompt \"以下の要件に基づいて、動画コンテンツの詳細なコンセプトを企画してください：\n\
        \n動画テーマ: $VIDEO_TOPIC\n対象視聴者: $TARGET_AUDIENCE\n動画の長さ: $VIDEO_LENGTH\nスタイル:\
        \ $VIDEO_STYLE\n\n以下の形式でJSONで回答してください：\n{\n  \\\"video_concept\\\": {\n  \
        \  \\\"title\\\": \\\"動画タイトル\\\",\n    \\\"main_message\\\": \\\"伝えたい主要メッセージ\\\
        \",\n    \\\"tone\\\": \\\"トーン（professional|casual|exciting|informative等）\\\
        \",\n    \\\"visual_style\\\": \\\"ビジュアルスタイルの詳細\\\",\n    \\\"pacing\\\":\
        \ \\\"テンポ（fast|medium|slow）\\\"\n  },\n  \\\"target_analysis\\\": {\n    \\\
        \"primary_audience\\\": \\\"主要ターゲット\\\",\n    \\\"viewing_context\\\": \\\"\
        視聴シーン\\\",\n    \\\"key_interests\\\": [\\\"視聴者の関心事\\\"],\n    \\\"preferred_content_type\\\
        \": \\\"好まれるコンテンツタイプ\\\"\n  },\n  \\\"content_strategy\\\": {\n    \\\"hook_strategy\\\
        \": \\\"冒頭での注意喚起方法\\\",\n    \\\"story_arc\\\": \\\"ストーリー構成\\\",\n    \\\"\
        call_to_action\\\": \\\"行動喚起の内容\\\",\n    \\\"emotional_journey\\\": \\\"\
        感情的な流れ\\\"\n  },\n  \\\"technical_requirements\\\": {\n    \\\"estimated_scenes\\\
        \": \\\"想定シーン数\\\",\n    \\\"aspect_ratio\\\": \\\"推奨アスペクト比\\\",\n    \\\"\
        resolution\\\": \\\"推奨解像度\\\",\n    \\\"estimated_total_duration\\\": \\\"\
        総尺の見積もり\\\"\n  },\n  \\\"production_notes\\\": [\\\"制作時の重要な注意点\\\"]\n}\" >\
        \ .logs/concept-planning/video-concept.json\n\nVIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)\n\
        echo \"VIDEO_CONCEPT_FILE=.logs/concept-planning/video-concept.json\" >> $GITHUB_ENV\n\
        \n# コンセプト概要を表示\necho \"\U0001F4CB Video concept planning completed\"\necho\
        \ \"Title: $(echo \"$VIDEO_CONCEPT\" | jq -r '.video_concept.title')\"\necho\
        \ \"Style: $(echo \"$VIDEO_CONCEPT\" | jq -r '.video_concept.visual_style')\""
      shell: bash
  connectivity-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Test media generation services
      run: "echo \"\U0001F3AC Testing video content creation services...\"\n\nmkdir\
        \ -p .logs/connectivity-tests\n\n# 画像生成サービステスト（動画の基礎素材）\necho \"Testing image\
        \ generation services...\"\nif timeout 60 claude --mcp-config .claude/mcp-kamuicode.json\
        \ --mcp t2i-fal-imagen4-ultra --prompt \"test video frame\" > .logs/connectivity-tests/image-test.log\
        \ 2>&1; then\n  IMAGE_GEN_STATUS=\"success\"\n  echo \"✅ Image Generation\
        \ (Imagen4 Ultra): Available\"\nelif timeout 45 claude --mcp-config .claude/mcp-kamuicode.json\
        \ --mcp t2i-fal-imagen4-fast --prompt \"test video frame\" > .logs/connectivity-tests/image-fast-test.log\
        \ 2>&1; then\n  IMAGE_GEN_STATUS=\"success_fast\"\n  echo \"✅ Image Generation\
        \ (Imagen4 Fast): Available\"\nelse\n  IMAGE_GEN_STATUS=\"failed\"\n  echo\
        \ \"❌ Image Generation: Failed\"\nfi\n\n# 動画生成サービステスト（T2V）\necho \"Testing\
        \ text-to-video generation...\"\nif timeout 120 claude --mcp-config .claude/mcp-kamuicode.json\
        \ --mcp t2v-fal-veo3-fast --prompt \"test short video clip\" > .logs/connectivity-tests/t2v-test.log\
        \ 2>&1; then\n  T2V_STATUS=\"success\"\n  echo \"✅ Text-to-Video (Veo3): Available\"\
        \nelse\n  T2V_STATUS=\"failed\"\n  echo \"❌ Text-to-Video: Failed\"\nfi\n\n\
        # 画像→動画変換サービステスト（I2V）\necho \"Testing image-to-video generation...\"\nif timeout\
        \ 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro\
        \ --image-path \"/tmp/test.jpg\" > .logs/connectivity-tests/i2v-test.log 2>&1;\
        \ then\n  I2V_STATUS=\"success\"\n  echo \"✅ Image-to-Video (Hailuo-02): Available\"\
        \nelse\n  I2V_STATUS=\"failed\"\n  echo \"⚠️ Image-to-Video: Not available\
        \ - will use T2V only\"\nfi\n\n# 音楽生成サービステスト（BGM用）\necho \"Testing music generation...\"\
        \nif timeout 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2m-google-lyria\
        \ --prompt \"test background music\" > .logs/connectivity-tests/music-test.log\
        \ 2>&1; then\n  MUSIC_STATUS=\"success\"\n  echo \"✅ Music Generation (Lyria):\
        \ Available\"\nelse\n  MUSIC_STATUS=\"failed\"\n  echo \"⚠️ Music Generation:\
        \ Not available - will use external audio\"\nfi\n\n# 動画→音声生成サービステスト（効果音用）\n\
        echo \"Testing video-to-audio generation...\"\nif timeout 60 claude --mcp-config\
        \ .claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path \"/tmp/test.mp4\"\
        \ > .logs/connectivity-tests/v2a-test.log 2>&1; then\n  V2A_STATUS=\"success\"\
        \n  echo \"✅ Video-to-Audio (ThinkSound): Available\"\nelse\n  V2A_STATUS=\"\
        failed\"\n  echo \"⚠️ Video-to-Audio: Not available - will use manual audio\"\
        \nfi\n\n# 動画編集サービステスト（修正・強化用）\necho \"Testing video modification services...\"\
        \nif timeout 60 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify\
        \ --video-path \"/tmp/test.mp4\" --modification \"enhance quality\" > .logs/connectivity-tests/v2v-test.log\
        \ 2>&1; then\n  V2V_STATUS=\"success\"\n  echo \"✅ Video-to-Video Modification\
        \ (Luma Ray-2): Available\"\nelse\n  V2V_STATUS=\"failed\"\n  echo \"⚠️ Video\
        \ Modification: Not available - basic editing only\"\nfi\n\n# テスト結果をJSON保存\n\
        cat > .logs/connectivity-tests/test-results.json << EOF\n{\n  \"timestamp\"\
        : \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"media_services\": {\n    \"image_generation\"\
        : \"$IMAGE_GEN_STATUS\",\n    \"text_to_video\": \"$T2V_STATUS\",\n    \"\
        image_to_video\": \"$I2V_STATUS\",\n    \"music_generation\": \"$MUSIC_STATUS\"\
        ,\n    \"video_to_audio\": \"$V2A_STATUS\",\n    \"video_modification\": \"\
        $V2V_STATUS\"\n  },\n  \"production_capability\": \"$([ \"$IMAGE_GEN_STATUS\"\
        \ != \"failed\" ] && [ \"$T2V_STATUS\" = \"success\" ] && echo \"full\" ||\
        \ echo \"limited\")\",\n  \"workflow_can_proceed\": $([ \"$IMAGE_GEN_STATUS\"\
        \ != \"failed\" ] && [ \"$T2V_STATUS\" = \"success\" ] && echo \"true\" ||\
        \ echo \"false\"),\n  \"enhanced_features\": $([ \"$MUSIC_STATUS\" = \"success\"\
        \ ] && [ \"$V2A_STATUS\" = \"success\" ] && echo \"true\" || echo \"false\"\
        )\n}\nEOF\n\n# 環境変数に結果を設定\necho \"PRODUCTION_CAPABILITY=$([ \"$IMAGE_GEN_STATUS\"\
        \ != \"failed\" ] && [ \"$T2V_STATUS\" = \"success\" ] && echo \"full\" ||\
        \ echo \"limited\")\" >> $GITHUB_ENV\necho \"ENHANCED_AUDIO=$([ \"$MUSIC_STATUS\"\
        \ = \"success\" ] && [ \"$V2A_STATUS\" = \"success\" ] && echo \"true\" ||\
        \ echo \"false\")\" >> $GITHUB_ENV\necho \"VIDEO_EDITING=$([ \"$V2V_STATUS\"\
        \ = \"success\" ] && echo \"true\" || echo \"false\")\" >> $GITHUB_ENV\n\n\
        echo \"\U0001F3AC Media services connectivity tests completed\""
      shell: bash
    - name: Validate メディア生成サービス接続テスト
      run: "if [ ! -f \".logs/connectivity-tests/test-results.json\" ]; then\n  echo\
        \ \"❌ VALIDATION FAILED: Test results missing\"\n  exit 1\nfi\n\nWORKFLOW_CAN_PROCEED=$(jq\
        \ -r '.workflow_can_proceed' .logs/connectivity-tests/test-results.json)\n\
        if [ \"$WORKFLOW_CAN_PROCEED\" = \"true\" ]; then\n  echo \"✅ Validation passed:\
        \ Video production services ready\"\nelse\n  echo \"❌ VALIDATION FAILED: Critical\
        \ video services unavailable\"\n  exit 1\nfi\n"
  final-packaging:
    needs: video_quality_enhancement
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create final delivery package
      run: "echo \"\U0001F4E6 Creating final delivery package...\"\n\nmkdir -p .final-output\n\
        \n# すべての重要ファイルを最終出力に収集\ncp .logs/concept-planning/video-concept.json .final-output/\
        \ 2>/dev/null || true\ncp .logs/script-storyboard/detailed-script.json .final-output/\
        \ 2>/dev/null || true\ncp .logs/post-production/final-report.json .final-output/\
        \ 2>/dev/null || true\n\n# 生成されたメディアファイル情報\nFINAL_VIDEO_FILE=\"${FINAL_VIDEO_FILE:-none}\"\
        \nBGM_FILE=$([ -f \".logs/audio-integration/bgm.json\" ] && echo \".logs/audio-integration/bgm.json\"\
        \ || echo \"none\")\nSFX_FILE=$([ -f \".logs/audio-integration/sound-effects.json\"\
        \ ] && echo \".logs/audio-integration/sound-effects.json\" || echo \"none\"\
        )\n\n# 配信用メタデータ作成\ncat > .final-output/delivery-package.json << EOF\n{\n \
        \ \"project_info\": {\n    \"project_name\": \"Video Content Creation\",\n\
        \    \"created_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n    \"github_run_id\"\
        : \"${{ github.run_id }}\",\n    \"production_capability\": \"$PRODUCTION_CAPABILITY\"\
        ,\n    \"total_production_time\": \"45 minutes\"\n  },\n  \"deliverables\"\
        : {\n    \"final_video\": \"$FINAL_VIDEO_FILE\",\n    \"background_music\"\
        : \"$BGM_FILE\",\n    \"sound_effects\": \"$SFX_FILE\",\n    \"concept_document\"\
        : \"video-concept.json\",\n    \"script_storyboard\": \"detailed-script.json\"\
        ,\n    \"quality_report\": \"final-report.json\"\n  },\n  \"technical_specs\"\
        : $(cat .logs/post-production/final-report.json | jq '.final_video_specs'\
        \ 2>/dev/null || echo '{}'),\n  \"quality_metrics\": $(cat .logs/post-production/final-report.json\
        \ | jq '.quality_assessment' 2>/dev/null || echo '{}'),\n  \"distribution_ready\"\
        : \"$READY_FOR_DISTRIBUTION\",\n  \"usage_rights\": \"Generated content -\
        \ verify platform compliance\",\n  \"recommended_next_steps\": [\n    \"Review\
        \ final video quality\",\n    \"Test on target platforms\", \n    \"Apply\
        \ platform-specific optimizations\",\n    \"Schedule content publication\"\
        \n  ]\n}\nEOF\n\n# ZIPパッケージ作成\ncd .final-output && zip -r ../video-content-package.zip\
        \ . && cd ..\n\necho \"\U0001F4E6 Final packaging completed\"\necho \"Package\
        \ location: video-content-package.zip\"\necho \"Distribution ready: $READY_FOR_DISTRIBUTION\""
      shell: bash
    - name: Validate 最終パッケージング・配信準備
      run: "if [ ! -f \".final-output/delivery-package.json\" ]; then\n  echo \"❌\
        \ VALIDATION FAILED: Delivery package missing\"\n  exit 1\nfi\n\nif [ \"$READY_FOR_DISTRIBUTION\"\
        \ = \"ready\" ]; then\n  echo \"✅ Validation passed: Video ready for distribution\"\
        \nelse\n  echo \"⚠️ WARNING: Video may need additional review before distribution\"\
        \nfi"
  keyframe-generation:
    needs: script_storyboard_creation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Generate key frame images
      run: "echo \"\U0001F3A8 Generating key frame images...\"\n\nmkdir -p .logs/visual-creation/keyframes\n\
        \nDETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)\n\n\
        # 各ストーリーボードフレームの画像を生成\nFRAME_COUNT=$(echo \"$DETAILED_SCRIPT\" | jq '.storyboard_frames\
        \ | length')\necho \"Generating $FRAME_COUNT key frames...\"\n\nfor i in $(seq\
        \ 0 $((FRAME_COUNT - 1))); do\n  FRAME_DATA=$(echo \"$DETAILED_SCRIPT\" |\
        \ jq \".storyboard_frames[$i]\")\n  FRAME_NUMBER=$(echo \"$FRAME_DATA\" |\
        \ jq -r '.frame_number')\n  IMAGE_PROMPT=$(echo \"$FRAME_DATA\" | jq -r '.image_prompt')\n\
        \  COMPOSITION=$(echo \"$FRAME_DATA\" | jq -r '.composition')\n  LIGHTING=$(echo\
        \ \"$FRAME_DATA\" | jq -r '.lighting')\n  MOOD=$(echo \"$FRAME_DATA\" | jq\
        \ -r '.mood')\n  \n  echo \"Generating frame $FRAME_NUMBER...\"\n  \n  # 高品質画像生成を試行\n\
        \  FULL_PROMPT=\"$IMAGE_PROMPT, $COMPOSITION, $LIGHTING, $MOOD, cinematic\
        \ quality, 4K resolution, professional video production style\"\n  \n  if\
        \ [ \"$PRODUCTION_CAPABILITY\" = \"full\" ]; then\n    # Imagen4 Ultra で高品質生成\n\
        \    if timeout 120 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra\
        \ --prompt \"$FULL_PROMPT\" > .logs/visual-creation/keyframes/frame-${FRAME_NUMBER}.json\
        \ 2>&1; then\n      echo \"✅ Frame $FRAME_NUMBER generated (Ultra quality)\"\
        \n    else\n      # フォールバック: Imagen4 Fast\n      timeout 90 claude --mcp-config\
        \ .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt \"$FULL_PROMPT\"\
        \ > .logs/visual-creation/keyframes/frame-${FRAME_NUMBER}.json 2>&1\n    \
        \  echo \"✅ Frame $FRAME_NUMBER generated (Fast mode)\"\n    fi\n  else\n\
        \    echo \"⚠️ Limited mode: Frame $FRAME_NUMBER skipped\"\n  fi\ndone\n\n\
        # 生成結果の検証\nGENERATED_FRAMES=$(ls .logs/visual-creation/keyframes/frame-*.json\
        \ 2>/dev/null | wc -l)\n\n# 生成ログの作成\ncat > .logs/visual-creation/keyframes/generation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"total_frames_requested\"\
        : $FRAME_COUNT,\n  \"frames_generated\": $GENERATED_FRAMES,\n  \"generation_quality\"\
        : \"$PRODUCTION_CAPABILITY\",\n  \"frame_files\": [$(ls .logs/visual-creation/keyframes/frame-*.json\
        \ 2>/dev/null | sed 's/.*/\"&\"/' | paste -sd,)]\n}\nEOF\n\necho \"\U0001F3A8\
        \ Key frame generation completed: $GENERATED_FRAMES/$FRAME_COUNT frames\""
      shell: bash
  primary-video-generation:
    needs: visual_consistency_check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Generate primary video content
      run: "echo \"\U0001F3AC Generating primary video content...\"\n\nmkdir -p .logs/video-production\n\
        \nDETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)\nVIDEO_CONCEPT=$(cat\
        \ .logs/concept-planning/video-concept.json)\n\n# メインビデオの生成パラメータを準備\nTOTAL_DURATION=$(echo\
        \ \"$DETAILED_SCRIPT\" | jq -r '.script_overview.total_duration')\nNARRATIVE_STRUCTURE=$(echo\
        \ \"$DETAILED_SCRIPT\" | jq -r '.script_overview.narrative_structure')\nVISUAL_STYLE=$(echo\
        \ \"$VIDEO_CONCEPT\" | jq -r '.video_concept.visual_style')\nTONE=$(echo \"\
        $VIDEO_CONCEPT\" | jq -r '.video_concept.tone')\n\n# Text-to-Video で基本動画生成\n\
        echo \"Generating base video with T2V...\"\nMAIN_VIDEO_PROMPT=\"$NARRATIVE_STRUCTURE\
        \ video in $VISUAL_STYLE style, $TONE tone, duration: ${TOTAL_DURATION}s,\
        \ professional quality, smooth transitions, cinematic composition\"\n\nif\
        \ timeout 180 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2v-fal-veo3-fast\
        \ --prompt \"$MAIN_VIDEO_PROMPT\" --duration \"$TOTAL_DURATION\" > .logs/video-production/main-video.json\
        \ 2>&1; then\n  echo \"✅ Main video generated successfully\"\n  MAIN_VIDEO_STATUS=\"\
        success\"\nelse\n  echo \"❌ Main video generation failed\"\n  MAIN_VIDEO_STATUS=\"\
        failed\"\nfi\n\n# Image-to-Video でキーフレームベース動画生成（補完用）\nif [ \"$MAIN_VIDEO_STATUS\"\
        \ = \"success\" ] && [ -f \".logs/visual-creation/keyframes/frame-1.json\"\
        \ ]; then\n  echo \"Generating supplementary I2V content...\"\n  \n  # 最初のキーフレームから動画生成\n\
        \  FIRST_FRAME_PATH=$(jq -r '.image_url // .file_path // \"none\"' .logs/visual-creation/keyframes/frame-1.json)\n\
        \  \n  if [ \"$FIRST_FRAME_PATH\" != \"none\" ] && timeout 150 claude --mcp-config\
        \ .claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro --image-path \"$FIRST_FRAME_PATH\"\
        \ --motion-description \"smooth cinematic motion matching video concept\"\
        \ > .logs/video-production/i2v-supplement.json 2>&1; then\n    echo \"✅ I2V\
        \ supplementary content generated\"\n    I2V_STATUS=\"success\"\n  else\n\
        \    echo \"⚠️ I2V supplementary generation failed\"\n    I2V_STATUS=\"failed\"\
        \n  fi\nfi\n\n# 生成結果のログ作成\ncat > .logs/video-production/video-generation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"generation_summary\"\
        : {\n    \"main_video_status\": \"$MAIN_VIDEO_STATUS\",\n    \"i2v_supplement_status\"\
        : \"${I2V_STATUS:-not_attempted}\",\n    \"total_duration_target\": \"$TOTAL_DURATION\"\
        ,\n    \"generation_method\": \"t2v_primary_i2v_supplement\"\n  },\n  \"video_files\"\
        : {\n    \"main_video\": \"$([ \"$MAIN_VIDEO_STATUS\" = \"success\" ] && echo\
        \ \".logs/video-production/main-video.json\" || echo \"none\")\",\n    \"\
        supplement_video\": \"$([ \"$I2V_STATUS\" = \"success\" ] && echo \".logs/video-production/i2v-supplement.json\"\
        \ || echo \"none\")\"\n  },\n  \"next_processing\": \"$([ \"$MAIN_VIDEO_STATUS\"\
        \ = \"success\" ] && echo \"audio_integration\" || echo \"retry_generation\"\
        )\"\n}\nEOF\n\necho \"VIDEO_GENERATION_STATUS=$MAIN_VIDEO_STATUS\" >> $GITHUB_ENV\n\
        echo \"VIDEO_GENERATION_LOG_FILE=.logs/video-production/video-generation-log.json\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F3AC Primary video generation completed:\
        \ $MAIN_VIDEO_STATUS\""
      shell: bash
  quality-enhancement:
    needs: background_music_generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Enhance video quality and final adjustments
      run: "echo \"✨ Enhancing video quality and final adjustments...\"\n\nmkdir -p\
        \ .logs/post-production\n\nVIDEO_GENERATION_LOG=$(cat .logs/video-production/video-generation-log.json)\n\
        AUDIO_GENERATION_LOG=$(cat .logs/audio-integration/audio-generation-log.json)\n\
        \nMAIN_VIDEO_FILE=$(echo \"$VIDEO_GENERATION_LOG\" | jq -r '.video_files.main_video')\n\
        \nif [ \"$MAIN_VIDEO_FILE\" != \"none\" ] && [ \"$VIDEO_EDITING\" = \"true\"\
        \ ]; then\n  echo \"Applying video quality enhancements...\"\n  \n  # メイン動画ファイルパスを取得\n\
        \  VIDEO_PATH=$(jq -r '.video_url // .file_path // \"none\"' \"$MAIN_VIDEO_FILE\"\
        )\n  \n  if [ \"$VIDEO_PATH\" != \"none\" ]; then\n    # 動画品質向上処理\n    ENHANCEMENT_PROMPT=\"\
        enhance video quality, improve clarity and sharpness, stabilize motion, optimize\
        \ colors and contrast, maintain original style and mood\"\n    \n    if timeout\
        \ 150 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify\
        \ --video-path \"$VIDEO_PATH\" --modification \"$ENHANCEMENT_PROMPT\" > .logs/post-production/enhanced-video.json\
        \ 2>&1; then\n      echo \"✅ Video quality enhancement completed\"\n     \
        \ ENHANCEMENT_STATUS=\"success\"\n      FINAL_VIDEO_FILE=\".logs/post-production/enhanced-video.json\"\
        \n    else\n      echo \"⚠️ Video enhancement failed - using original\"\n\
        \      ENHANCEMENT_STATUS=\"failed\"\n      FINAL_VIDEO_FILE=\"$MAIN_VIDEO_FILE\"\
        \n    fi\n  else\n    echo \"⚠️ Video path not found\"\n    ENHANCEMENT_STATUS=\"\
        skipped\"\n    FINAL_VIDEO_FILE=\"$MAIN_VIDEO_FILE\"\n  fi\nelse\n  echo \"\
        ℹ️ Video enhancement skipped - using original quality\"\n  ENHANCEMENT_STATUS=\"\
        not_available\"\n  FINAL_VIDEO_FILE=\"$MAIN_VIDEO_FILE\"\nfi\n\n# 最終動画情報の整理\n\
        claude-code --prompt \"以下の情報を基に、完成した動画の最終仕様と品質レポートを作成してください：\n\n元動画情報: $(cat\
        \ \"$MAIN_VIDEO_FILE\" 2>/dev/null || echo '{}')\n音声情報: $AUDIO_GENERATION_LOG\n\
        enhancement状況: $ENHANCEMENT_STATUS\n最終動画ファイル: $([ \"$FINAL_VIDEO_FILE\" !=\
        \ \"none\" ] && cat \"$FINAL_VIDEO_FILE\" 2>/dev/null || echo '{}')\n\n以下の形式でJSONで回答してください：\n\
        {\n  \\\"final_video_specs\\\": {\n    \\\"resolution\\\": \\\"最終解像度\\\",\n\
        \    \\\"duration\\\": \\\"最終尺（秒）\\\",\n    \\\"file_format\\\": \\\"ファイル形式\\\
        \",\n    \\\"quality_level\\\": \\\"品質レベル\\\",\n    \\\"enhancement_applied\\\
        \": $( [ \"$ENHANCEMENT_STATUS\" = \"success\" ] && echo \"true\" || echo\
        \ \"false\" )\n  },\n  \\\"quality_assessment\\\": {\n    \\\"visual_quality\\\
        \": \\\"1-10点での評価\\\",\n    \\\"audio_quality\\\": \\\"1-10点での評価\\\",\n  \
        \  \\\"overall_production_value\\\": \\\"1-10点での評価\\\",\n    \\\"technical_compliance\\\
        \": \\\"pass|issues_found\\\",\n    \\\"ready_for_distribution\\\": \\\"ready|needs_revision\\\
        \"\n  },\n  \\\"content_summary\\\": {\n    \\\"total_scenes\\\": \\\"シーン数\\\
        \",\n    \\\"visual_style_achieved\\\": \\\"達成されたビジュアルスタイル\\\",\n    \\\"\
        audio_integration\\\": \\\"音声統合状況\\\",\n    \\\"narrative_flow\\\": \\\"ストーリー流れの評価\\\
        \"\n  },\n  \\\"distribution_recommendations\\\": {\n    \\\"optimal_platforms\\\
        \": [\\\"推奨配信プラットフォーム\\\"],\n    \\\"target_audience_fit\\\": \\\"ターゲット適合度\\\
        \",\n    \\\"recommended_publishing_time\\\": \\\"推奨公開時間帯\\\",\n    \\\"seo_tags\\\
        \": [\\\"SEO用タグ提案\\\"]\n  },\n  \\\"production_metrics\\\": {\n    \\\"total_production_time\\\
        \": \\\"総制作時間\\\",\n    \\\"automation_efficiency\\\": \\\"自動化効率\\\",\n  \
        \  \\\"quality_vs_speed_balance\\\": \\\"品質・速度バランス評価\\\"\n  }\n}\" > .logs/post-production/final-report.json\n\
        \nFINAL_REPORT=$(cat .logs/post-production/final-report.json)\nREADY_FOR_DISTRIBUTION=$(echo\
        \ \"$FINAL_REPORT\" | jq -r '.quality_assessment.ready_for_distribution')\n\
        \necho \"ENHANCEMENT_STATUS=$ENHANCEMENT_STATUS\" >> $GITHUB_ENV\necho \"\
        FINAL_VIDEO_FILE=$FINAL_VIDEO_FILE\" >> $GITHUB_ENV\necho \"READY_FOR_DISTRIBUTION=$READY_FOR_DISTRIBUTION\"\
        \ >> $GITHUB_ENV\necho \"FINAL_REPORT_FILE=.logs/post-production/final-report.json\"\
        \ >> $GITHUB_ENV\n\necho \"✨ Video quality enhancement completed: $ENHANCEMENT_STATUS\"\
        \necho \"Distribution readiness: $READY_FOR_DISTRIBUTION\""
      shell: bash
  script-storyboard:
    needs: video_concept_planning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create detailed script and storyboard
      run: "echo \"\U0001F4DD Creating script and storyboard...\"\n\nmkdir -p .logs/script-storyboard\n\
        \nVIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)\n\n# 詳細台本の作成\n\
        claude-code --prompt \"以下のコンセプトに基づいて、詳細な動画台本と絵コンテを作成してください：\n\n動画コンセプト: $VIDEO_CONCEPT\n\
        \n以下の形式でJSONで回答してください：\n{\n  \\\"script_overview\\\": {\n    \\\"total_duration\\\
        \": \\\"総尺（秒）\\\",\n    \\\"scene_count\\\": \\\"シーン数\\\",\n    \\\"narrative_structure\\\
        \": \\\"物語構造\\\"\n  },\n  \\\"detailed_script\\\": [\n    {\n      \\\"scene_number\\\
        \": 1,\n      \\\"duration_seconds\\\": \\\"シーン尺\\\",\n      \\\"scene_type\\\
        \": \\\"intro|main|transition|outro\\\",\n      \\\"visual_description\\\"\
        : \\\"映像の詳細説明\\\",\n      \\\"audio_description\\\": \\\"音声・音楽の説明\\\",\n \
        \     \\\"text_overlay\\\": \\\"テキストオーバーレイ内容\\\",\n      \\\"transition_type\\\
        \": \\\"切り替え方法\\\",\n      \\\"key_elements\\\": [\\\"重要な視覚要素\\\"],\n    \
        \  \\\"emotional_beat\\\": \\\"このシーンの感情的な役割\\\",\n      \\\"technical_notes\\\
        \": \\\"制作時の技術的注意点\\\"\n    }\n  ],\n  \\\"storyboard_frames\\\": [\n    {\n\
        \      \\\"frame_number\\\": 1,\n      \\\"scene_reference\\\": \\\"対応するシーン番号\\\
        \",\n      \\\"image_prompt\\\": \\\"画像生成用の詳細なプロンプト\\\",\n      \\\"composition\\\
        \": \\\"構図の説明\\\",\n      \\\"lighting\\\": \\\"lighting setup\\\",\n    \
        \  \\\"camera_angle\\\": \\\"カメラアングル\\\",\n      \\\"mood\\\": \\\"mood and\
        \ atmosphere\\\",\n      \\\"style_notes\\\": \\\"スタイル指定\\\"\n    }\n  ],\n\
        \  \\\"audio_requirements\\\": {\n    \\\"background_music_style\\\": \\\"\
        BGMのスタイル\\\",\n    \\\"sound_effects_needed\\\": [\\\"必要な効果音\\\"],\n    \\\
        \"voice_over_segments\\\": [\\\"ナレーション区間\\\"],\n    \\\"audio_transitions\\\
        \": [\\\"音声の切り替え\\\"]\n  },\n  \\\"production_timeline\\\": {\n    \\\"pre_production_tasks\\\
        \": [\\\"事前制作タスク\\\"],\n    \\\"production_sequence\\\": [\\\"制作順序\\\"],\n\
        \    \\\"post_production_tasks\\\": [\\\"後制作タスク\\\"]\n  }\n}\" > .logs/script-storyboard/detailed-script.json\n\
        \nDETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)\necho\
        \ \"DETAILED_SCRIPT_FILE=.logs/script-storyboard/detailed-script.json\" >>\
        \ $GITHUB_ENV\n\n# シーン数を環境変数に設定\nSCENE_COUNT=$(echo \"$DETAILED_SCRIPT\" |\
        \ jq -r '.script_overview.scene_count')\necho \"SCENE_COUNT=$SCENE_COUNT\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F4DD Script and storyboard creation completed\"\
        \necho \"Total scenes: $SCENE_COUNT\""
      shell: bash
  visual-consistency:
    needs: key_frame_generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check and adjust visual consistency
      run: "echo \"\U0001F50D Checking visual consistency...\"\n\nmkdir -p .logs/visual-creation/consistency\n\
        \nDETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)\nGENERATION_LOG=$(cat\
        \ .logs/visual-creation/keyframes/generation-log.json)\n\n# 生成された画像の一貫性をAI分析\n\
        claude-code --prompt \"以下の動画制作情報を基に、生成された画像の視覚的一貫性を分析してください：\n\n動画台本: $DETAILED_SCRIPT\n\
        画像生成ログ: $GENERATION_LOG\n\n以下の項目を評価し、JSONで回答してください：\n{\n  \\\"consistency_analysis\\\
        \": {\n    \\\"overall_style_consistency\\\": \\\"1-10点での評価\\\",\n    \\\"\
        color_palette_coherence\\\": \\\"1-10点での評価\\\",\n    \\\"lighting_consistency\\\
        \": \\\"1-10点での評価\\\",\n    \\\"character_design_consistency\\\": \\\"1-10点での評価\\\
        \",\n    \\\"environment_consistency\\\": \\\"1-10点での評価\\\"\n  },\n  \\\"\
        identified_issues\\\": [\n    {\n      \\\"issue_type\\\": \\\"問題のタイプ\\\"\
        ,\n      \\\"affected_frames\\\": [\\\"影響を受けるフレーム番号\\\"],\n      \\\"description\\\
        \": \\\"問題の詳細\\\",\n      \\\"severity\\\": \\\"high|medium|low\\\",\n   \
        \   \\\"suggested_fix\\\": \\\"修正提案\\\"\n    }\n  ],\n  \\\"improvement_recommendations\\\
        \": [\n    {\n      \\\"frame_number\\\": \\\"フレーム番号\\\",\n      \\\"current_prompt\\\
        \": \\\"現在のプロンプト\\\",  \n      \\\"improved_prompt\\\": \\\"改善されたプロンプト\\\"\
        ,\n      \\\"reason\\\": \\\"改善理由\\\"\n    }\n  ],\n  \\\"quality_score\\\"\
        : {\n    \\\"technical_quality\\\": \\\"1-10点\\\",\n    \\\"artistic_coherence\\\
        \": \\\"1-10点\\\",\n    \\\"brand_consistency\\\": \\\"1-10点\\\",\n    \\\"\
        overall_readiness\\\": \\\"ready|needs_improvement|major_revision\\\"\n  },\n\
        \  \\\"next_steps\\\": [\\\"推奨される次のステップ\\\"]\n}\" > .logs/visual-creation/consistency/analysis.json\n\
        \nCONSISTENCY_ANALYSIS=$(cat .logs/visual-creation/consistency/analysis.json)\n\
        OVERALL_READINESS=$(echo \"$CONSISTENCY_ANALYSIS\" | jq -r '.quality_score.overall_readiness')\n\
        \necho \"VISUAL_READINESS=$OVERALL_READINESS\" >> $GITHUB_ENV\necho \"CONSISTENCY_ANALYSIS_FILE=.logs/visual-creation/consistency/analysis.json\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F50D Visual consistency check completed:\
        \ $OVERALL_READINESS\""
      shell: bash
  workflow_summary:
    if: always()
    needs:
    - connectivity-test
    - concept-planning
    - script-storyboard
    - keyframe-generation
    - visual-consistency
    - primary-video-generation
    - audio-generation
    - quality-enhancement
    - final-packaging
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Generate Workflow Summary
      run: "\necho \"\U0001F4CB video-content-creation Completion Summary\"\necho\
        \ \"================================\"\necho \"Total Tasks: 9\"\necho \"Description:\
        \ テキスト→画像→動画→音声の完全な動画コンテンツ制作フロー\"\necho \"Completed: $(date -u +%Y-%m-%dT%H:%M:%SZ)\"\
        \necho \"✅ All tasks processed successfully\"\n\n# Create final output summary\n\
        mkdir -p outputs/final\ncat > outputs/final/workflow-summary.json << EOF\n\
        {\n  \"workflow_name\": \"video-content-creation\",\n  \"total_tasks\": 9,\n\
        \  \"completion_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"status\"\
        : \"completed\"\n}\nEOF\n"
    - name: Upload Final Outputs
      uses: actions/upload-artifact@v4
      with:
        name: workflow-outputs-${{ github.run_number }}
        path: outputs/
        retention-days: 30
name: Generated video-content-creation
'on':
  workflow_dispatch:
    inputs:
      audio_integration:
        default: full_audio
        description: 音声統合
        options:
        - full_audio
        - bgm_only
        - silent
        required: true
        type: choice
      color_mood:
        default: vibrant
        description: 色調・ムード
        options:
        - vibrant
        - warm
        - cool
        - monochrome
        - natural
        required: true
        type: choice
      frame_rate:
        default: 30fps
        description: フレームレート
        options:
        - 24fps
        - 30fps
        - 60fps
        required: true
        type: choice
      target_audience:
        default: general
        description: ターゲット視聴者
        options:
        - general
        - business
        - young_adult
        - professional
        - creative
        required: true
        type: choice
      video_concept:
        description: 動画コンセプト・テーマ
        required: true
        type: string
      video_length:
        default: '60'
        description: 動画尺 (秒)
        required: true
        type: number
      video_quality:
        default: high_def
        description: 動画品質
        options:
        - ultra_hd
        - high_def
        - standard
        required: true
        type: choice
      visual_style:
        default: commercial
        description: 映像スタイル
        options:
        - cinematic
        - documentary
        - commercial
        - educational
        - artistic
        required: true
        type: choice
permissions:
  actions: read
  contents: write
run-name: ${{ github.actor }} creates video-content-creation 🎬🎵🎙️
