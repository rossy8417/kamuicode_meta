# ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú - Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
name: "Hybrid Optimized Workflow (Stepback Enhanced)"
description: "„ÉÜ„Ç≠„Çπ„Éà‚ÜíÁîªÂÉè‚ÜíÂãïÁîª‚ÜíÈü≥Â£∞„ÅÆÂÆåÂÖ®„Å™ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„Éï„É≠„Éº"
category: "multimedia-content-creation"
complexity_level: 5
estimated_duration_minutes: 45

# ÂãïÁöÑ„É¢„Éº„ÉÄ„É´ÂÖ•Âäõ‰ªïÊßò (Dynamic Modal Input Specification)
dynamic_inputs_spec:
  modal_title: "ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰ΩúË®≠ÂÆö"
  modal_description: "„ÉÜ„Ç≠„Çπ„Éà‚ÜíÁîªÂÉè‚ÜíÂãïÁîª‚ÜíÈü≥Â£∞„ÅÆÂÆåÂÖ®„Å™ÂãïÁîªÂà∂‰Ωú„Éë„É©„É°„Éº„Çø„ÇíË®≠ÂÆö"
  form_sections:
    - section_name: "„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰ºÅÁîª"
      section_description: "ÂãïÁîª„ÅÆÂü∫Êú¨„Ç≥„É≥„Çª„Éó„Éà„Å®„Çπ„Éà„Éº„É™„Éº"
      inputs:
        - name: "video_concept"
          label: "ÂãïÁîª„Ç≥„É≥„Çª„Éó„Éà„Éª„ÉÜ„Éº„Éû"
          type: "textarea"
          required: true
          placeholder: "‰æã: ÂïÜÂìÅÁ¥π‰ªãÂãïÁîª„ÄÅÁæé„Åó„ÅÑÈ¢®ÊôØ„Å®ÂÖ±„Å´Êñ∞Ë£ΩÂìÅ„ÅÆÈ≠ÖÂäõ„Çí‰ºù„Åà„Çã"
          description: "ÂãïÁîªÂÖ®‰Ωì„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„Å®„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË©≥Á¥∞„Å´ÂÖ•Âäõ"
          validation:
            min_length: 20
            max_length: 800
        
        - name: "target_audience"
          label: "„Çø„Éº„Ç≤„ÉÉ„ÉàË¶ñËÅ¥ËÄÖ"
          type: "select"
          required: true
          options:
            - value: "general"
              label: "üåç ‰∏ÄËà¨Ë¶ñËÅ¥ËÄÖ (ÂπÖÂ∫É„ÅÑÂπ¥ÈΩ¢Â±§)"
            - value: "business"
              label: "üíº „Éì„Ç∏„Éç„Çπ„Éª‰ºÅÊ•≠Âêë„Åë"
            - value: "young_adult"
              label: "üéØ Ëã•Âπ¥Â±§ (20-35Ê≠≥)"
            - value: "professional"
              label: "üëî Â∞ÇÈñÄËÅ∑„ÉªÊäÄË°ìËÄÖÂêë„Åë"
            - value: "creative"
              label: "üé® „ÇØ„É™„Ç®„Ç§„Çø„Éº„Éª„Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÂêë„Åë"
          default: "general"
        
        - name: "video_length"
          label: "ÂãïÁîªÂ∞∫ (Áßí)"
          type: "range"
          required: true
          min: 15
          max: 300
          default: 60
          step: 15
          description: "ÁîüÊàê„Åô„ÇãÂãïÁîª„ÅÆÈï∑„Åï (15Áßí-5ÂàÜ)"

    - section_name: "„Éì„Ç∏„É•„Ç¢„É´Ë®≠ÂÆö"
      section_description: "Êò†ÂÉè„Çπ„Çø„Ç§„É´„Å®ÂìÅË≥™„Éë„É©„É°„Éº„Çø"
      inputs:
        - name: "visual_style"
          label: "Êò†ÂÉè„Çπ„Çø„Ç§„É´"
          type: "select"
          required: true
          options:
            - value: "cinematic"
              label: "üé¨ „Ç∑„Éç„Éû„ÉÜ„Ç£„ÉÉ„ÇØ (Êò†ÁîªÁöÑ„Éª„Éâ„É©„Éû„ÉÜ„Ç£„ÉÉ„ÇØ)"
            - value: "documentary"
              label: "üì∫ „Éâ„Ç≠„É•„É°„É≥„Çø„É™„Éº („É™„Ç¢„É´„ÉªÊÉÖÂ†±ÈáçË¶ñ)"
            - value: "commercial"
              label: "üì∫ „Ç≥„Éû„Éº„Ç∑„É£„É´ (ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„ÇπÁ¥π‰ªã)"
            - value: "educational"
              label: "üìö ÊïôËÇ≤„ÉªËß£Ë™¨ (ÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊßãÊàê)"
            - value: "artistic"
              label: "üé® „Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ (ÂâµÈÄ†ÁöÑ„ÉªÂÆüÈ®ìÁöÑ)"
          default: "commercial"
        
        - name: "color_mood"
          label: "Ëâ≤Ë™ø„Éª„É†„Éº„Éâ"
          type: "select"
          required: true
          options:
            - value: "vibrant"
              label: "üåà ÈÆÆ„ÇÑ„Åã„ÉªÊ¥ªÂãïÁöÑ"
            - value: "warm"
              label: "üåÖ ÊöñËâ≤„ÉªË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ"
            - value: "cool"
              label: "‚ùÑÔ∏è ÂØíËâ≤„Éª„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´"
            - value: "monochrome"
              label: "‚ö´ „É¢„Éé„ÇØ„É≠„Éº„É†„Éª„Ç∑„ÉÉ„ÇØ"
            - value: "natural"
              label: "üåø Ëá™ÁÑ∂„Éª„Ç™„Éº„Ç¨„Éã„ÉÉ„ÇØ"
          default: "vibrant"

    - section_name: "ÊäÄË°ìË®≠ÂÆö"
      section_description: "ÂãïÁîªÂìÅË≥™„Å®ÁîüÊàê„Éë„É©„É°„Éº„Çø"
      inputs:
        - name: "video_quality"
          label: "ÂãïÁîªÂìÅË≥™"
          type: "select"
          required: true
          options:
            - value: "ultra_hd"
              label: "üî• Ultra HD (ÊúÄÈ´òÂìÅË≥™„ÉªÊôÇÈñì„Åå„Åã„Åã„Çã)"
            - value: "high_def"
              label: "‚ú® High Definition (È´òÂìÅË≥™„Éª„Éê„É©„É≥„Çπ)"
            - value: "standard"
              label: "üì∫ Standard (Ê®ôÊ∫ñÂìÅË≥™„ÉªÈ´òÈÄü)"
          default: "high_def"
        
        - name: "frame_rate"
          label: "„Éï„É¨„Éº„É†„É¨„Éº„Éà"
          type: "select"
          required: true
          options:
            - value: "24fps"
              label: "üé¨ 24fps (Êò†ÁîªÁöÑ)"
            - value: "30fps"
              label: "üì∫ 30fps (Ê®ôÊ∫ñ)"
            - value: "60fps"
              label: "‚ö° 60fps (Êªë„Çâ„Åã)"
          default: "30fps"
        
        - name: "audio_integration"
          label: "Èü≥Â£∞Áµ±Âêà"
          type: "select"
          required: true
          options:
            - value: "full_audio"
              label: "üéµ „Éï„É´Èü≥Â£∞ (BGM + ÂäπÊûúÈü≥ + „Éä„É¨„Éº„Ç∑„Éß„É≥)"
            - value: "bgm_only"
              label: "üé∂ BGM„ÅÆ„Åø"
            - value: "silent"
              label: "üîá ÁÑ°Èü≥ (Êò†ÂÉè„ÅÆ„Åø)"
          default: "full_audio"

# GitHub Actions inputsÂ§âÊèõ„Éû„ÉÉ„Éî„É≥„Ç∞
github_actions_inputs_mapping:
  inputs_conversion:
    textarea: "string"
    select: "choice"
    range: "number"
  
  generated_inputs_preview:
    video_concept:
      description: "ÂãïÁîª„Ç≥„É≥„Çª„Éó„Éà„Éª„ÉÜ„Éº„Éû"
      required: true
      type: string
    visual_style:
      description: "Êò†ÂÉè„Çπ„Çø„Ç§„É´"
      required: true
      type: choice
      options: ["cinematic", "documentary", "commercial", "educational", "artistic"]
      default: "commercial"

# ‰∫∫Èñì„ÅÆÁÑ°ÊÑèË≠òÊÄùËÄÉ„Éó„É≠„Çª„Çπ
human_process:
  - phase: "concept_planning"
    description: "„Ç≥„É≥„Çª„Éó„Éà‰ºÅÁîªÊÆµÈöéÔºàÁõÆÁöÑ„ÉªÂØæË±°„ÉªÊßãÊàê„ÅÆÊ±∫ÂÆöÔºâ"
  - phase: "script_storyboard"
    description: "Âè∞Êú¨„ÉªÁµµ„Ç≥„É≥„ÉÜÊÆµÈöéÔºàÂÜÖÂÆπË®≠Ë®à„ÉªË¶ñË¶öÊßãÊàêÔºâ"
  - phase: "visual_creation" 
    description: "„Éì„Ç∏„É•„Ç¢„É´Âà∂‰ΩúÊÆµÈöéÔºàÁîªÂÉè„Éª„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØÁîüÊàêÔºâ"
  - phase: "video_production"
    description: "ÂãïÁîªÂà∂‰ΩúÊÆµÈöéÔºàÂãïÁîªÁîüÊàê„ÉªÁ∑®ÈõÜ„ÉªË™øÊï¥Ôºâ"
  - phase: "audio_integration"
    description: "Èü≥Â£∞Áµ±ÂêàÊÆµÈöéÔºàBGM„ÉªÂäπÊûúÈü≥„Éª„Éä„É¨„Éº„Ç∑„Éß„É≥Ôºâ"
  - phase: "post_production"
    description: "„Éù„Çπ„Éà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥ÊÆµÈöéÔºàÊúÄÁµÇÁ∑®ÈõÜ„ÉªÂìÅË≥™ÁÆ°ÁêÜ„ÉªÈÖç‰ø°Ê∫ñÂÇôÔºâ"

# GitHub Actions „Éé„Éº„ÉâË®≠Ë®à
github_actions_config:
  workflow_name: "Video Content Creation Pipeline"
  on_triggers: ["workflow_dispatch", "issues"]
  permissions:
    contents: "write"
    issues: "write"
    actions: "read"
  artifacts_retention_days: 30
  max_parallel_jobs: 3

# Ë∂ÖË©≥Á¥∞„Çø„Çπ„ÇØÂàÜËß£
tasks:
  # === ‰∫ãÂâç„ÉÜ„Çπ„ÉàÊÆµÈöé ===
  - id: "media-services-connectivity-test"
    name: "„É°„Éá„Ç£„Ç¢ÁîüÊàê„Çµ„Éº„Éì„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà"
    phase: "pre_validation"
    github_job: "connectivity-test"
    type: "validation"
    implementation: "mcp"
    duration_minutes: 4
    dependencies: []
    parallel_group: null
    
    github_steps:
      - name: "Test media generation services"
        shell: "bash"
        script: |
          echo "üé¨ Testing video content creation services..."
          
          mkdir -p .logs/connectivity-tests
          
          # ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàÂãïÁîª„ÅÆÂü∫Á§éÁ¥†ÊùêÔºâ
          echo "Testing image generation services..."
          if timeout 60 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt "test video frame" > .logs/connectivity-tests/image-test.log 2>&1; then
            IMAGE_GEN_STATUS="success"
            echo "‚úÖ Image Generation (Imagen4 Ultra): Available"
          elif timeout 45 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "test video frame" > .logs/connectivity-tests/image-fast-test.log 2>&1; then
            IMAGE_GEN_STATUS="success_fast"
            echo "‚úÖ Image Generation (Imagen4 Fast): Available"
          else
            IMAGE_GEN_STATUS="failed"
            echo "‚ùå Image Generation: Failed"
          fi
          
          # ÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàT2VÔºâ
          echo "Testing text-to-video generation..."
          if timeout 120 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2v-fal-veo3-fast --prompt "test short video clip" > .logs/connectivity-tests/t2v-test.log 2>&1; then
            T2V_STATUS="success"
            echo "‚úÖ Text-to-Video (Veo3): Available"
          else
            T2V_STATUS="failed"
            echo "‚ùå Text-to-Video: Failed"
          fi
          
          # ÁîªÂÉè‚ÜíÂãïÁîªÂ§âÊèõ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàI2VÔºâ
          echo "Testing image-to-video generation..."
          if timeout 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro --image-path "/tmp/test.jpg" > .logs/connectivity-tests/i2v-test.log 2>&1; then
            I2V_STATUS="success"
            echo "‚úÖ Image-to-Video (Hailuo-02): Available"
          else
            I2V_STATUS="failed"
            echo "‚ö†Ô∏è Image-to-Video: Not available - will use T2V only"
          fi
          
          # Èü≥Ê•ΩÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàBGMÁî®Ôºâ
          echo "Testing music generation..."
          if timeout 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "test background music" > .logs/connectivity-tests/music-test.log 2>&1; then
            MUSIC_STATUS="success"
            echo "‚úÖ Music Generation (Lyria): Available"
          else
            MUSIC_STATUS="failed"
            echo "‚ö†Ô∏è Music Generation: Not available - will use external audio"
          fi
          
          # ÂãïÁîª‚ÜíÈü≥Â£∞ÁîüÊàê„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºàÂäπÊûúÈü≥Áî®Ôºâ
          echo "Testing video-to-audio generation..."
          if timeout 60 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "/tmp/test.mp4" > .logs/connectivity-tests/v2a-test.log 2>&1; then
            V2A_STATUS="success"
            echo "‚úÖ Video-to-Audio (ThinkSound): Available"
          else
            V2A_STATUS="failed"
            echo "‚ö†Ô∏è Video-to-Audio: Not available - will use manual audio"
          fi
          
          # ÂãïÁîªÁ∑®ÈõÜ„Çµ„Éº„Éì„Çπ„ÉÜ„Çπ„ÉàÔºà‰øÆÊ≠£„ÉªÂº∑ÂåñÁî®Ôºâ
          echo "Testing video modification services..."
          if timeout 60 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify --video-path "/tmp/test.mp4" --modification "enhance quality" > .logs/connectivity-tests/v2v-test.log 2>&1; then
            V2V_STATUS="success"
            echo "‚úÖ Video-to-Video Modification (Luma Ray-2): Available"
          else
            V2V_STATUS="failed"
            echo "‚ö†Ô∏è Video Modification: Not available - basic editing only"
          fi
          
          # „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíJSON‰øùÂ≠ò
          cat > .logs/connectivity-tests/test-results.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "media_services": {
              "image_generation": "$IMAGE_GEN_STATUS",
              "text_to_video": "$T2V_STATUS",
              "image_to_video": "$I2V_STATUS",
              "music_generation": "$MUSIC_STATUS",
              "video_to_audio": "$V2A_STATUS",
              "video_modification": "$V2V_STATUS"
            },
            "production_capability": "$([ "$IMAGE_GEN_STATUS" != "failed" ] && [ "$T2V_STATUS" = "success" ] && echo "full" || echo "limited")",
            "workflow_can_proceed": $([ "$IMAGE_GEN_STATUS" != "failed" ] && [ "$T2V_STATUS" = "success" ] && echo "true" || echo "false"),
            "enhanced_features": $([ "$MUSIC_STATUS" = "success" ] && [ "$V2A_STATUS" = "success" ] && echo "true" || echo "false")
          }
          EOF
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å´ÁµêÊûú„ÇíË®≠ÂÆö
          echo "PRODUCTION_CAPABILITY=$([ "$IMAGE_GEN_STATUS" != "failed" ] && [ "$T2V_STATUS" = "success" ] && echo "full" || echo "limited")" >> $GITHUB_ENV
          echo "ENHANCED_AUDIO=$([ "$MUSIC_STATUS" = "success" ] && [ "$V2A_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "VIDEO_EDITING=$([ "$V2V_STATUS" = "success" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          echo "üé¨ Media services connectivity tests completed"
          
    validation:
      criteria:
        - "ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éì„Çπ„ÅåÂà©Áî®ÂèØËÉΩ"
        - "ÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„ÅåÂà©Áî®ÂèØËÉΩ"
        - "„ÉÜ„Çπ„ÉàÁµêÊûú„ÅåJSONÂΩ¢Âºè„Åß‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".logs/connectivity-tests/test-results.json" ]; then
          echo "‚ùå VALIDATION FAILED: Test results missing"
          exit 1
        fi
        
        WORKFLOW_CAN_PROCEED=$(jq -r '.workflow_can_proceed' .logs/connectivity-tests/test-results.json)
        if [ "$WORKFLOW_CAN_PROCEED" = "true" ]; then
          echo "‚úÖ Validation passed: Video production services ready"
        else
          echo "‚ùå VALIDATION FAILED: Critical video services unavailable"
          exit 1
        fi

  # === „Ç≥„É≥„Çª„Éó„Éà‰ºÅÁîªÊÆµÈöé ===
  - id: "video-concept-planning"
    name: "ÂãïÁîª„Ç≥„É≥„Çª„Éó„Éà„Éª‰ºÅÁîªÁ´ãÊ°à"
    phase: "concept_planning"
    github_job: "concept-planning"
    type: "planning"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["media-services-connectivity-test"]
    parallel_group: null
    
    github_steps:
      - name: "Plan video concept and strategy"
        shell: "bash"
        script: |
          echo "üìã Planning video concept and strategy..."
          
          mkdir -p .logs/concept-planning
          
          # ÂÖ•Âäõ„Åã„Çâ„Ç≥„É≥„Çª„Éó„Éà„ÇíÊäΩÂá∫
          VIDEO_TOPIC="${{ github.event.inputs.video_topic || github.event.issue.title || 'promotional video' }}"
          TARGET_AUDIENCE="${{ github.event.inputs.target_audience || 'general audience' }}"
          VIDEO_LENGTH="${{ github.event.inputs.video_length || '30 seconds' }}"
          VIDEO_STYLE="${{ github.event.inputs.video_style || 'modern and engaging' }}"
          
          echo "Video topic: $VIDEO_TOPIC"
          echo "Target audience: $TARGET_AUDIENCE"
          echo "Desired length: $VIDEO_LENGTH"
          echo "Style preference: $VIDEO_STYLE"
          
          # Claude Code „Åß„Ç≥„É≥„Çª„Éó„Éà‰ºÅÁîª
          claude-code --prompt "‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË©≥Á¥∞„Å™„Ç≥„É≥„Çª„Éó„Éà„Çí‰ºÅÁîª„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ÂãïÁîª„ÉÜ„Éº„Éû: $VIDEO_TOPIC
          ÂØæË±°Ë¶ñËÅ¥ËÄÖ: $TARGET_AUDIENCE
          ÂãïÁîª„ÅÆÈï∑„Åï: $VIDEO_LENGTH
          „Çπ„Çø„Ç§„É´: $VIDEO_STYLE
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"video_concept\": {
              \"title\": \"ÂãïÁîª„Çø„Ç§„Éà„É´\",
              \"main_message\": \"‰ºù„Åà„Åü„ÅÑ‰∏ªË¶Å„É°„ÉÉ„Çª„Éº„Ç∏\",
              \"tone\": \"„Éà„Éº„É≥Ôºàprofessional|casual|exciting|informativeÁ≠âÔºâ\",
              \"visual_style\": \"„Éì„Ç∏„É•„Ç¢„É´„Çπ„Çø„Ç§„É´„ÅÆË©≥Á¥∞\",
              \"pacing\": \"„ÉÜ„É≥„ÉùÔºàfast|medium|slowÔºâ\"
            },
            \"target_analysis\": {
              \"primary_audience\": \"‰∏ªË¶Å„Çø„Éº„Ç≤„ÉÉ„Éà\",
              \"viewing_context\": \"Ë¶ñËÅ¥„Ç∑„Éº„É≥\",
              \"key_interests\": [\"Ë¶ñËÅ¥ËÄÖ„ÅÆÈñ¢ÂøÉ‰∫ã\"],
              \"preferred_content_type\": \"Â•Ω„Åæ„Çå„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó\"
            },
            \"content_strategy\": {
              \"hook_strategy\": \"ÂÜíÈ†≠„Åß„ÅÆÊ≥®ÊÑèÂñöËµ∑ÊñπÊ≥ï\",
              \"story_arc\": \"„Çπ„Éà„Éº„É™„ÉºÊßãÊàê\",
              \"call_to_action\": \"Ë°åÂãïÂñöËµ∑„ÅÆÂÜÖÂÆπ\",
              \"emotional_journey\": \"ÊÑüÊÉÖÁöÑ„Å™ÊµÅ„Çå\"
            },
            \"technical_requirements\": {
              \"estimated_scenes\": \"ÊÉ≥ÂÆö„Ç∑„Éº„É≥Êï∞\",
              \"aspect_ratio\": \"Êé®Â•®„Ç¢„Çπ„Éö„ÇØ„ÉàÊØî\",
              \"resolution\": \"Êé®Â•®Ëß£ÂÉèÂ∫¶\",
              \"estimated_total_duration\": \"Á∑èÂ∞∫„ÅÆË¶ãÁ©ç„ÇÇ„Çä\"
            },
            \"production_notes\": [\"Âà∂‰ΩúÊôÇ„ÅÆÈáçË¶Å„Å™Ê≥®ÊÑèÁÇπ\"]
          }" > .logs/concept-planning/video-concept.json
          
          VIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)
          echo "VIDEO_CONCEPT_FILE=.logs/concept-planning/video-concept.json" >> $GITHUB_ENV
          
          # „Ç≥„É≥„Çª„Éó„ÉàÊ¶ÇË¶Å„ÇíË°®Á§∫
          echo "üìã Video concept planning completed"
          echo "Title: $(echo "$VIDEO_CONCEPT" | jq -r '.video_concept.title')"
          echo "Style: $(echo "$VIDEO_CONCEPT" | jq -r '.video_concept.visual_style')"

  - id: "script-storyboard-creation"
    name: "Âè∞Êú¨„ÉªÁµµ„Ç≥„É≥„ÉÜ‰ΩúÊàê"
    phase: "script_storyboard"
    github_job: "script-storyboard"
    type: "creation"
    implementation: "ai"
    duration_minutes: 6
    dependencies: ["video-concept-planning"]
    parallel_group: null
    
    github_steps:
      - name: "Create detailed script and storyboard"
        shell: "bash"
        script: |
          echo "üìù Creating script and storyboard..."
          
          mkdir -p .logs/script-storyboard
          
          VIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)
          
          # Ë©≥Á¥∞Âè∞Êú¨„ÅÆ‰ΩúÊàê
          claude-code --prompt "‰ª•‰∏ã„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅË©≥Á¥∞„Å™ÂãïÁîªÂè∞Êú¨„Å®Áµµ„Ç≥„É≥„ÉÜ„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ÂãïÁîª„Ç≥„É≥„Çª„Éó„Éà: $VIDEO_CONCEPT
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"script_overview\": {
              \"total_duration\": \"Á∑èÂ∞∫ÔºàÁßíÔºâ\",
              \"scene_count\": \"„Ç∑„Éº„É≥Êï∞\",
              \"narrative_structure\": \"Áâ©Ë™ûÊßãÈÄ†\"
            },
            \"detailed_script\": [
              {
                \"scene_number\": 1,
                \"duration_seconds\": \"„Ç∑„Éº„É≥Â∞∫\",
                \"scene_type\": \"intro|main|transition|outro\",
                \"visual_description\": \"Êò†ÂÉè„ÅÆË©≥Á¥∞Ë™¨Êòé\",
                \"audio_description\": \"Èü≥Â£∞„ÉªÈü≥Ê•Ω„ÅÆË™¨Êòé\",
                \"text_overlay\": \"„ÉÜ„Ç≠„Çπ„Éà„Ç™„Éº„Éê„Éº„É¨„Ç§ÂÜÖÂÆπ\",
                \"transition_type\": \"Âàá„ÇäÊõø„ÅàÊñπÊ≥ï\",
                \"key_elements\": [\"ÈáçË¶Å„Å™Ë¶ñË¶öË¶ÅÁ¥†\"],
                \"emotional_beat\": \"„Åì„ÅÆ„Ç∑„Éº„É≥„ÅÆÊÑüÊÉÖÁöÑ„Å™ÂΩπÂâ≤\",
                \"technical_notes\": \"Âà∂‰ΩúÊôÇ„ÅÆÊäÄË°ìÁöÑÊ≥®ÊÑèÁÇπ\"
              }
            ],
            \"storyboard_frames\": [
              {
                \"frame_number\": 1,
                \"scene_reference\": \"ÂØæÂøú„Åô„Çã„Ç∑„Éº„É≥Áï™Âè∑\",
                \"image_prompt\": \"ÁîªÂÉèÁîüÊàêÁî®„ÅÆË©≥Á¥∞„Å™„Éó„É≠„É≥„Éó„Éà\",
                \"composition\": \"ÊßãÂõ≥„ÅÆË™¨Êòé\",
                \"lighting\": \"lighting setup\",
                \"camera_angle\": \"„Ç´„É°„É©„Ç¢„É≥„Ç∞„É´\",
                \"mood\": \"mood and atmosphere\",
                \"style_notes\": \"„Çπ„Çø„Ç§„É´ÊåáÂÆö\"
              }
            ],
            \"audio_requirements\": {
              \"background_music_style\": \"BGM„ÅÆ„Çπ„Çø„Ç§„É´\",
              \"sound_effects_needed\": [\"ÂøÖË¶Å„Å™ÂäπÊûúÈü≥\"],
              \"voice_over_segments\": [\"„Éä„É¨„Éº„Ç∑„Éß„É≥Âå∫Èñì\"],
              \"audio_transitions\": [\"Èü≥Â£∞„ÅÆÂàá„ÇäÊõø„Åà\"]
            },
            \"production_timeline\": {
              \"pre_production_tasks\": [\"‰∫ãÂâçÂà∂‰Ωú„Çø„Çπ„ÇØ\"],
              \"production_sequence\": [\"Âà∂‰ΩúÈ†ÜÂ∫è\"],
              \"post_production_tasks\": [\"ÂæåÂà∂‰Ωú„Çø„Çπ„ÇØ\"]
            }
          }" > .logs/script-storyboard/detailed-script.json
          
          DETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)
          echo "DETAILED_SCRIPT_FILE=.logs/script-storyboard/detailed-script.json" >> $GITHUB_ENV
          
          # „Ç∑„Éº„É≥Êï∞„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
          SCENE_COUNT=$(echo "$DETAILED_SCRIPT" | jq -r '.script_overview.scene_count')
          echo "SCENE_COUNT=$SCENE_COUNT" >> $GITHUB_ENV
          
          echo "üìù Script and storyboard creation completed"
          echo "Total scenes: $SCENE_COUNT"

  # === „Éì„Ç∏„É•„Ç¢„É´Âà∂‰ΩúÊÆµÈöé ===
  - id: "key-frame-generation"
    name: "„Ç≠„Éº„Éï„É¨„Éº„É†ÁîªÂÉèÁîüÊàê"
    phase: "visual_creation"
    github_job: "keyframe-generation"
    type: "generation"
    implementation: "mcp"
    tool: "image-generation"
    duration_minutes: 8
    dependencies: ["script-storyboard-creation"]
    parallel_group: "visual_creation_parallel"
    
    github_steps:
      - name: "Generate key frame images"
        shell: "bash"
        script: |
          echo "üé® Generating key frame images..."
          
          mkdir -p .logs/visual-creation/keyframes
          
          DETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)
          
          # ÂêÑ„Çπ„Éà„Éº„É™„Éº„Éú„Éº„Éâ„Éï„É¨„Éº„É†„ÅÆÁîªÂÉè„ÇíÁîüÊàê
          FRAME_COUNT=$(echo "$DETAILED_SCRIPT" | jq '.storyboard_frames | length')
          echo "Generating $FRAME_COUNT key frames..."
          
          for i in $(seq 0 $((FRAME_COUNT - 1))); do
            FRAME_DATA=$(echo "$DETAILED_SCRIPT" | jq ".storyboard_frames[$i]")
            FRAME_NUMBER=$(echo "$FRAME_DATA" | jq -r '.frame_number')
            IMAGE_PROMPT=$(echo "$FRAME_DATA" | jq -r '.image_prompt')
            COMPOSITION=$(echo "$FRAME_DATA" | jq -r '.composition')
            LIGHTING=$(echo "$FRAME_DATA" | jq -r '.lighting')
            MOOD=$(echo "$FRAME_DATA" | jq -r '.mood')
            
            echo "Generating frame $FRAME_NUMBER..."
            
            # È´òÂìÅË≥™ÁîªÂÉèÁîüÊàê„ÇíË©¶Ë°å
            FULL_PROMPT="$IMAGE_PROMPT, $COMPOSITION, $LIGHTING, $MOOD, cinematic quality, 4K resolution, professional video production style"
            
            if [ "$PRODUCTION_CAPABILITY" = "full" ]; then
              # Imagen4 Ultra „ÅßÈ´òÂìÅË≥™ÁîüÊàê
              if timeout 120 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt "$FULL_PROMPT" > .logs/visual-creation/keyframes/frame-${FRAME_NUMBER}.json 2>&1; then
                echo "‚úÖ Frame $FRAME_NUMBER generated (Ultra quality)"
              else
                # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Imagen4 Fast
                timeout 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt "$FULL_PROMPT" > .logs/visual-creation/keyframes/frame-${FRAME_NUMBER}.json 2>&1
                echo "‚úÖ Frame $FRAME_NUMBER generated (Fast mode)"
              fi
            else
              echo "‚ö†Ô∏è Limited mode: Frame $FRAME_NUMBER skipped"
            fi
          done
          
          # ÁîüÊàêÁµêÊûú„ÅÆÊ§úË®º
          GENERATED_FRAMES=$(ls .logs/visual-creation/keyframes/frame-*.json 2>/dev/null | wc -l)
          
          # ÁîüÊàê„É≠„Ç∞„ÅÆ‰ΩúÊàê
          cat > .logs/visual-creation/keyframes/generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "total_frames_requested": $FRAME_COUNT,
            "frames_generated": $GENERATED_FRAMES,
            "generation_quality": "$PRODUCTION_CAPABILITY",
            "frame_files": [$(ls .logs/visual-creation/keyframes/frame-*.json 2>/dev/null | sed 's/.*/"&"/' | paste -sd,)]
          }
          EOF
          
          echo "üé® Key frame generation completed: $GENERATED_FRAMES/$FRAME_COUNT frames"

  - id: "visual-consistency-check"
    name: "„Éì„Ç∏„É•„Ç¢„É´‰∏ÄË≤´ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„ÉªË™øÊï¥"
    phase: "visual_creation"
    github_job: "visual-consistency"
    type: "validation"
    implementation: "ai"
    duration_minutes: 4
    dependencies: ["key-frame-generation"]
    parallel_group: "visual_creation_parallel"
    
    github_steps:
      - name: "Check and adjust visual consistency"
        shell: "bash"
        script: |
          echo "üîç Checking visual consistency..."
          
          mkdir -p .logs/visual-creation/consistency
          
          DETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)
          GENERATION_LOG=$(cat .logs/visual-creation/keyframes/generation-log.json)
          
          # ÁîüÊàê„Åï„Çå„ÅüÁîªÂÉè„ÅÆ‰∏ÄË≤´ÊÄß„ÇíAIÂàÜÊûê
          claude-code --prompt "‰ª•‰∏ã„ÅÆÂãïÁîªÂà∂‰ΩúÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅÁîüÊàê„Åï„Çå„ÅüÁîªÂÉè„ÅÆË¶ñË¶öÁöÑ‰∏ÄË≤´ÊÄß„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ÂãïÁîªÂè∞Êú¨: $DETAILED_SCRIPT
          ÁîªÂÉèÁîüÊàê„É≠„Ç∞: $GENERATION_LOG
          
          ‰ª•‰∏ã„ÅÆÈ†ÖÁõÆ„ÇíË©ï‰æ°„Åó„ÄÅJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"consistency_analysis\": {
              \"overall_style_consistency\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"color_palette_coherence\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"lighting_consistency\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"character_design_consistency\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"environment_consistency\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\"
            },
            \"identified_issues\": [
              {
                \"issue_type\": \"ÂïèÈ°å„ÅÆ„Çø„Ç§„Éó\",
                \"affected_frames\": [\"ÂΩ±Èüø„ÇíÂèó„Åë„Çã„Éï„É¨„Éº„É†Áï™Âè∑\"],
                \"description\": \"ÂïèÈ°å„ÅÆË©≥Á¥∞\",
                \"severity\": \"high|medium|low\",
                \"suggested_fix\": \"‰øÆÊ≠£ÊèêÊ°à\"
              }
            ],
            \"improvement_recommendations\": [
              {
                \"frame_number\": \"„Éï„É¨„Éº„É†Áï™Âè∑\",
                \"current_prompt\": \"ÁèæÂú®„ÅÆ„Éó„É≠„É≥„Éó„Éà\",  
                \"improved_prompt\": \"ÊîπÂñÑ„Åï„Çå„Åü„Éó„É≠„É≥„Éó„Éà\",
                \"reason\": \"ÊîπÂñÑÁêÜÁî±\"
              }
            ],
            \"quality_score\": {
              \"technical_quality\": \"1-10ÁÇπ\",
              \"artistic_coherence\": \"1-10ÁÇπ\",
              \"brand_consistency\": \"1-10ÁÇπ\",
              \"overall_readiness\": \"ready|needs_improvement|major_revision\"
            },
            \"next_steps\": [\"Êé®Â•®„Åï„Çå„ÇãÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó\"]
          }" > .logs/visual-creation/consistency/analysis.json
          
          CONSISTENCY_ANALYSIS=$(cat .logs/visual-creation/consistency/analysis.json)
          OVERALL_READINESS=$(echo "$CONSISTENCY_ANALYSIS" | jq -r '.quality_score.overall_readiness')
          
          echo "VISUAL_READINESS=$OVERALL_READINESS" >> $GITHUB_ENV
          echo "CONSISTENCY_ANALYSIS_FILE=.logs/visual-creation/consistency/analysis.json" >> $GITHUB_ENV
          
          echo "üîç Visual consistency check completed: $OVERALL_READINESS"

  # === ÂãïÁîªÂà∂‰ΩúÊÆµÈöé ===
  - id: "primary-video-generation"
    name: "„É°„Ç§„É≥ÂãïÁîªÁîüÊàê"
    phase: "video_production"
    github_job: "primary-video-generation"
    type: "generation"
    implementation: "mcp"
    tool: "video-generation"
    duration_minutes: 10
    dependencies: ["visual-consistency-check"]
    parallel_group: null
    
    github_steps:
      - name: "Generate primary video content"
        shell: "bash"
        script: |
          echo "üé¨ Generating primary video content..."
          
          mkdir -p .logs/video-production
          
          DETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)
          VIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)
          
          # „É°„Ç§„É≥„Éì„Éá„Ç™„ÅÆÁîüÊàê„Éë„É©„É°„Éº„Çø„ÇíÊ∫ñÂÇô
          TOTAL_DURATION=$(echo "$DETAILED_SCRIPT" | jq -r '.script_overview.total_duration')
          NARRATIVE_STRUCTURE=$(echo "$DETAILED_SCRIPT" | jq -r '.script_overview.narrative_structure')
          VISUAL_STYLE=$(echo "$VIDEO_CONCEPT" | jq -r '.video_concept.visual_style')
          TONE=$(echo "$VIDEO_CONCEPT" | jq -r '.video_concept.tone')
          
          # Text-to-Video „ÅßÂü∫Êú¨ÂãïÁîªÁîüÊàê
          echo "Generating base video with T2V..."
          MAIN_VIDEO_PROMPT="$NARRATIVE_STRUCTURE video in $VISUAL_STYLE style, $TONE tone, duration: ${TOTAL_DURATION}s, professional quality, smooth transitions, cinematic composition"
          
          if timeout 180 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2v-fal-veo3-fast --prompt "$MAIN_VIDEO_PROMPT" --duration "$TOTAL_DURATION" > .logs/video-production/main-video.json 2>&1; then
            echo "‚úÖ Main video generated successfully"
            MAIN_VIDEO_STATUS="success"
          else
            echo "‚ùå Main video generation failed"
            MAIN_VIDEO_STATUS="failed"
          fi
          
          # Image-to-Video „Åß„Ç≠„Éº„Éï„É¨„Éº„É†„Éô„Éº„ÇπÂãïÁîªÁîüÊàêÔºàË£úÂÆåÁî®Ôºâ
          if [ "$MAIN_VIDEO_STATUS" = "success" ] && [ -f ".logs/visual-creation/keyframes/frame-1.json" ]; then
            echo "Generating supplementary I2V content..."
            
            # ÊúÄÂàù„ÅÆ„Ç≠„Éº„Éï„É¨„Éº„É†„Åã„ÇâÂãïÁîªÁîüÊàê
            FIRST_FRAME_PATH=$(jq -r '.image_url // .file_path // "none"' .logs/visual-creation/keyframes/frame-1.json)
            
            if [ "$FIRST_FRAME_PATH" != "none" ] && timeout 150 claude --mcp-config .claude/mcp-kamuicode.json --mcp i2v-fal-hailuo-02-pro --image-path "$FIRST_FRAME_PATH" --motion-description "smooth cinematic motion matching video concept" > .logs/video-production/i2v-supplement.json 2>&1; then
              echo "‚úÖ I2V supplementary content generated"
              I2V_STATUS="success"
            else
              echo "‚ö†Ô∏è I2V supplementary generation failed"
              I2V_STATUS="failed"
            fi
          fi
          
          # ÁîüÊàêÁµêÊûú„ÅÆ„É≠„Ç∞‰ΩúÊàê
          cat > .logs/video-production/video-generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "generation_summary": {
              "main_video_status": "$MAIN_VIDEO_STATUS",
              "i2v_supplement_status": "${I2V_STATUS:-not_attempted}",
              "total_duration_target": "$TOTAL_DURATION",
              "generation_method": "t2v_primary_i2v_supplement"
            },
            "video_files": {
              "main_video": "$([ "$MAIN_VIDEO_STATUS" = "success" ] && echo ".logs/video-production/main-video.json" || echo "none")",
              "supplement_video": "$([ "$I2V_STATUS" = "success" ] && echo ".logs/video-production/i2v-supplement.json" || echo "none")"
            },
            "next_processing": "$([ "$MAIN_VIDEO_STATUS" = "success" ] && echo "audio_integration" || echo "retry_generation")"
          }
          EOF
          
          echo "VIDEO_GENERATION_STATUS=$MAIN_VIDEO_STATUS" >> $GITHUB_ENV
          echo "VIDEO_GENERATION_LOG_FILE=.logs/video-production/video-generation-log.json" >> $GITHUB_ENV
          
          echo "üé¨ Primary video generation completed: $MAIN_VIDEO_STATUS"

  # === Èü≥Â£∞Áµ±ÂêàÊÆµÈöé ===
  - id: "background-music-generation"
    name: "BGM„ÉªÂäπÊûúÈü≥ÁîüÊàê"
    phase: "audio_integration"
    github_job: "audio-generation"
    type: "generation"
    implementation: "mcp"
    tool: "audio-generation"
    duration_minutes: 6
    dependencies: ["primary-video-generation"]
    parallel_group: "audio_parallel"
    
    github_steps:
      - name: "Generate background music and sound effects"
        shell: "bash"
        script: |
          echo "üéµ Generating background music and sound effects..."
          
          mkdir -p .logs/audio-integration
          
          DETAILED_SCRIPT=$(cat .logs/script-storyboard/detailed-script.json)
          VIDEO_CONCEPT=$(cat .logs/concept-planning/video-concept.json)
          
          # BGMÁîüÊàêË¶Å‰ª∂„ÅÆÊäΩÂá∫
          MUSIC_STYLE=$(echo "$DETAILED_SCRIPT" | jq -r '.audio_requirements.background_music_style')
          TOTAL_DURATION=$(echo "$DETAILED_SCRIPT" | jq -r '.script_overview.total_duration')
          TONE=$(echo "$VIDEO_CONCEPT" | jq -r '.video_concept.tone')
          
          echo "Music style: $MUSIC_STYLE"
          echo "Duration: ${TOTAL_DURATION}s"
          echo "Tone: $TONE"
          
          # BGMÁîüÊàê
          if [ "$ENHANCED_AUDIO" = "true" ]; then
            echo "Generating custom background music..."
            MUSIC_PROMPT="$MUSIC_STYLE background music, $TONE mood, ${TOTAL_DURATION} seconds duration, suitable for video content, seamless loop, professional quality"
            
            if timeout 120 claude --mcp-config .claude/mcp-kamuicode.json --mcp t2m-google-lyria --prompt "$MUSIC_PROMPT" --duration "$TOTAL_DURATION" > .logs/audio-integration/bgm.json 2>&1; then
              echo "‚úÖ Custom BGM generated successfully"
              BGM_STATUS="success"
            else
              echo "‚ùå Custom BGM generation failed"
              BGM_STATUS="failed"
            fi
          else
            echo "‚ö†Ô∏è Using fallback: External audio library"
            BGM_STATUS="external"
          fi
          
          # ÂãïÁîª„Åã„ÇâÂäπÊûúÈü≥ÁîüÊàêÔºàV2A‰ΩøÁî®Ôºâ
          VIDEO_GENERATION_LOG=$(cat .logs/video-production/video-generation-log.json)
          MAIN_VIDEO_FILE=$(echo "$VIDEO_GENERATION_LOG" | jq -r '.video_files.main_video')
          
          if [ "$ENHANCED_AUDIO" = "true" ] && [ "$MAIN_VIDEO_FILE" != "none" ]; then
            echo "Generating sound effects from video..."
            
            # „É°„Ç§„É≥ÂãïÁîª„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÂèñÂæó
            VIDEO_PATH=$(jq -r '.video_url // .file_path // "none"' "$MAIN_VIDEO_FILE")
            
            if [ "$VIDEO_PATH" != "none" ] && timeout 90 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2a-fal-thinksound --video-path "$VIDEO_PATH" --audio-style "natural sound effects matching video content" > .logs/audio-integration/sound-effects.json 2>&1; then
              echo "‚úÖ Sound effects generated from video"
              SFX_STATUS="success"
            else
              echo "‚ö†Ô∏è V2A sound effects generation failed"
              SFX_STATUS="failed"
            fi
          else
            echo "‚ÑπÔ∏è Sound effects generation skipped"
            SFX_STATUS="not_generated"
          fi
          
          # Èü≥Â£∞Áµ±Âêà„É≠„Ç∞„ÅÆ‰ΩúÊàê
          cat > .logs/audio-integration/audio-generation-log.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "audio_generation": {
              "bgm_status": "$BGM_STATUS",
              "sound_effects_status": "$SFX_STATUS",
              "total_audio_duration": "$TOTAL_DURATION",
              "audio_style": "$MUSIC_STYLE"
            },
            "audio_files": {
              "background_music": "$([ "$BGM_STATUS" = "success" ] && echo ".logs/audio-integration/bgm.json" || echo "none")",
              "sound_effects": "$([ "$SFX_STATUS" = "success" ] && echo ".logs/audio-integration/sound-effects.json" || echo "none")"
            },
            "integration_ready": $([ "$BGM_STATUS" = "success" ] || [ "$BGM_STATUS" = "external" ] && echo "true" || echo "false")
          }
          EOF
          
          echo "AUDIO_GENERATION_STATUS=$BGM_STATUS" >> $GITHUB_ENV
          echo "AUDIO_INTEGRATION_READY=$([ "$BGM_STATUS" = "success" ] || [ "$BGM_STATUS" = "external" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          
          echo "üéµ Audio generation completed: BGM=$BGM_STATUS, SFX=$SFX_STATUS"

  # === „Éù„Çπ„Éà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥ÊÆµÈöé ===
  - id: "video-quality-enhancement"
    name: "ÂãïÁîªÂìÅË≥™Âêë‰∏ä„ÉªÊúÄÁµÇË™øÊï¥"
    phase: "post_production"
    github_job: "quality-enhancement"
    type: "optimization"
    implementation: "mcp"
    tool: "video-enhancement"
    duration_minutes: 8
    dependencies: ["background-music-generation"]
    parallel_group: null
    
    github_steps:
      - name: "Enhance video quality and final adjustments"
        shell: "bash"
        script: |
          echo "‚ú® Enhancing video quality and final adjustments..."
          
          mkdir -p .logs/post-production
          
          VIDEO_GENERATION_LOG=$(cat .logs/video-production/video-generation-log.json)
          AUDIO_GENERATION_LOG=$(cat .logs/audio-integration/audio-generation-log.json)
          
          MAIN_VIDEO_FILE=$(echo "$VIDEO_GENERATION_LOG" | jq -r '.video_files.main_video')
          
          if [ "$MAIN_VIDEO_FILE" != "none" ] && [ "$VIDEO_EDITING" = "true" ]; then
            echo "Applying video quality enhancements..."
            
            # „É°„Ç§„É≥ÂãïÁîª„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÂèñÂæó
            VIDEO_PATH=$(jq -r '.video_url // .file_path // "none"' "$MAIN_VIDEO_FILE")
            
            if [ "$VIDEO_PATH" != "none" ]; then
              # ÂãïÁîªÂìÅË≥™Âêë‰∏äÂá¶ÁêÜ
              ENHANCEMENT_PROMPT="enhance video quality, improve clarity and sharpness, stabilize motion, optimize colors and contrast, maintain original style and mood"
              
              if timeout 150 claude --mcp-config .claude/mcp-kamuicode.json --mcp v2v-fal-luma-ray2-modify --video-path "$VIDEO_PATH" --modification "$ENHANCEMENT_PROMPT" > .logs/post-production/enhanced-video.json 2>&1; then
                echo "‚úÖ Video quality enhancement completed"
                ENHANCEMENT_STATUS="success"
                FINAL_VIDEO_FILE=".logs/post-production/enhanced-video.json"
              else
                echo "‚ö†Ô∏è Video enhancement failed - using original"
                ENHANCEMENT_STATUS="failed"
                FINAL_VIDEO_FILE="$MAIN_VIDEO_FILE"
              fi
            else
              echo "‚ö†Ô∏è Video path not found"
              ENHANCEMENT_STATUS="skipped"
              FINAL_VIDEO_FILE="$MAIN_VIDEO_FILE"
            fi
          else
            echo "‚ÑπÔ∏è Video enhancement skipped - using original quality"
            ENHANCEMENT_STATUS="not_available"
            FINAL_VIDEO_FILE="$MAIN_VIDEO_FILE"
          fi
          
          # ÊúÄÁµÇÂãïÁîªÊÉÖÂ†±„ÅÆÊï¥ÁêÜ
          claude-code --prompt "‰ª•‰∏ã„ÅÆÊÉÖÂ†±„ÇíÂü∫„Å´„ÄÅÂÆåÊàê„Åó„ÅüÂãïÁîª„ÅÆÊúÄÁµÇ‰ªïÊßò„Å®ÂìÅË≥™„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ÂÖÉÂãïÁîªÊÉÖÂ†±: $(cat "$MAIN_VIDEO_FILE" 2>/dev/null || echo '{}')
          Èü≥Â£∞ÊÉÖÂ†±: $AUDIO_GENERATION_LOG
          enhancementÁä∂Ê≥Å: $ENHANCEMENT_STATUS
          ÊúÄÁµÇÂãïÁîª„Éï„Ç°„Ç§„É´: $([ "$FINAL_VIDEO_FILE" != "none" ] && cat "$FINAL_VIDEO_FILE" 2>/dev/null || echo '{}')
          
          ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßJSON„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          {
            \"final_video_specs\": {
              \"resolution\": \"ÊúÄÁµÇËß£ÂÉèÂ∫¶\",
              \"duration\": \"ÊúÄÁµÇÂ∞∫ÔºàÁßíÔºâ\",
              \"file_format\": \"„Éï„Ç°„Ç§„É´ÂΩ¢Âºè\",
              \"quality_level\": \"ÂìÅË≥™„É¨„Éô„É´\",
              \"enhancement_applied\": $( [ "$ENHANCEMENT_STATUS" = "success" ] && echo "true" || echo "false" )
            },
            \"quality_assessment\": {
              \"visual_quality\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"audio_quality\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"overall_production_value\": \"1-10ÁÇπ„Åß„ÅÆË©ï‰æ°\",
              \"technical_compliance\": \"pass|issues_found\",
              \"ready_for_distribution\": \"ready|needs_revision\"
            },
            \"content_summary\": {
              \"total_scenes\": \"„Ç∑„Éº„É≥Êï∞\",
              \"visual_style_achieved\": \"ÈÅîÊàê„Åï„Çå„Åü„Éì„Ç∏„É•„Ç¢„É´„Çπ„Çø„Ç§„É´\",
              \"audio_integration\": \"Èü≥Â£∞Áµ±ÂêàÁä∂Ê≥Å\",
              \"narrative_flow\": \"„Çπ„Éà„Éº„É™„ÉºÊµÅ„Çå„ÅÆË©ï‰æ°\"
            },
            \"distribution_recommendations\": {
              \"optimal_platforms\": [\"Êé®Â•®ÈÖç‰ø°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†\"],
              \"target_audience_fit\": \"„Çø„Éº„Ç≤„ÉÉ„ÉàÈÅ©ÂêàÂ∫¶\",
              \"recommended_publishing_time\": \"Êé®Â•®ÂÖ¨ÈñãÊôÇÈñìÂ∏Ø\",
              \"seo_tags\": [\"SEOÁî®„Çø„Ç∞ÊèêÊ°à\"]
            },
            \"production_metrics\": {
              \"total_production_time\": \"Á∑èÂà∂‰ΩúÊôÇÈñì\",
              \"automation_efficiency\": \"Ëá™ÂãïÂåñÂäπÁéá\",
              \"quality_vs_speed_balance\": \"ÂìÅË≥™„ÉªÈÄüÂ∫¶„Éê„É©„É≥„ÇπË©ï‰æ°\"
            }
          }" > .logs/post-production/final-report.json
          
          FINAL_REPORT=$(cat .logs/post-production/final-report.json)
          READY_FOR_DISTRIBUTION=$(echo "$FINAL_REPORT" | jq -r '.quality_assessment.ready_for_distribution')
          
          echo "ENHANCEMENT_STATUS=$ENHANCEMENT_STATUS" >> $GITHUB_ENV
          echo "FINAL_VIDEO_FILE=$FINAL_VIDEO_FILE" >> $GITHUB_ENV
          echo "READY_FOR_DISTRIBUTION=$READY_FOR_DISTRIBUTION" >> $GITHUB_ENV
          echo "FINAL_REPORT_FILE=.logs/post-production/final-report.json" >> $GITHUB_ENV
          
          echo "‚ú® Video quality enhancement completed: $ENHANCEMENT_STATUS"
          echo "Distribution readiness: $READY_FOR_DISTRIBUTION"

  - id: "final-packaging-delivery"
    name: "ÊúÄÁµÇ„Éë„ÉÉ„Ç±„Éº„Ç∏„É≥„Ç∞„ÉªÈÖç‰ø°Ê∫ñÂÇô"
    phase: "post_production"
    github_job: "final-packaging"
    type: "packaging"
    implementation: "script"
    duration_minutes: 3
    dependencies: ["video-quality-enhancement"]
    parallel_group: null
    
    github_steps:
      - name: "Create final delivery package"
        shell: "bash"
        script: |
          echo "üì¶ Creating final delivery package..."
          
          mkdir -p .final-output
          
          # „Åô„Åπ„Å¶„ÅÆÈáçË¶Å„Éï„Ç°„Ç§„É´„ÇíÊúÄÁµÇÂá∫Âäõ„Å´ÂèéÈõÜ
          cp .logs/concept-planning/video-concept.json .final-output/ 2>/dev/null || true
          cp .logs/script-storyboard/detailed-script.json .final-output/ 2>/dev/null || true
          cp .logs/post-production/final-report.json .final-output/ 2>/dev/null || true
          
          # ÁîüÊàê„Åï„Çå„Åü„É°„Éá„Ç£„Ç¢„Éï„Ç°„Ç§„É´ÊÉÖÂ†±
          FINAL_VIDEO_FILE="${FINAL_VIDEO_FILE:-none}"
          BGM_FILE=$([ -f ".logs/audio-integration/bgm.json" ] && echo ".logs/audio-integration/bgm.json" || echo "none")
          SFX_FILE=$([ -f ".logs/audio-integration/sound-effects.json" ] && echo ".logs/audio-integration/sound-effects.json" || echo "none")
          
          # ÈÖç‰ø°Áî®„É°„Çø„Éá„Éº„Çø‰ΩúÊàê
          cat > .final-output/delivery-package.json << EOF
          {
            "project_info": {
              "project_name": "Video Content Creation",
              "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "github_run_id": "${{ github.run_id }}",
              "production_capability": "$PRODUCTION_CAPABILITY",
              "total_production_time": "45 minutes"
            },
            "deliverables": {
              "final_video": "$FINAL_VIDEO_FILE",
              "background_music": "$BGM_FILE",
              "sound_effects": "$SFX_FILE",
              "concept_document": "video-concept.json",
              "script_storyboard": "detailed-script.json",
              "quality_report": "final-report.json"
            },
            "technical_specs": $(cat .logs/post-production/final-report.json | jq '.final_video_specs' 2>/dev/null || echo '{}'),
            "quality_metrics": $(cat .logs/post-production/final-report.json | jq '.quality_assessment' 2>/dev/null || echo '{}'),
            "distribution_ready": "$READY_FOR_DISTRIBUTION",
            "usage_rights": "Generated content - verify platform compliance",
            "recommended_next_steps": [
              "Review final video quality",
              "Test on target platforms", 
              "Apply platform-specific optimizations",
              "Schedule content publication"
            ]
          }
          EOF
          
          # ZIP„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
          cd .final-output && zip -r ../video-content-package.zip . && cd ..
          
          echo "üì¶ Final packaging completed"
          echo "Package location: video-content-package.zip"
          echo "Distribution ready: $READY_FOR_DISTRIBUTION"
          
    success_links:
      package_download: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
      final_report: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/final-report.json"
      concept_document: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/video-concept.json"
      script_storyboard: "${{ github.server_url }}/${{ github.repository }}/blob/main/.final-output/detailed-script.json"

    validation:
      criteria:
        - "ÊúÄÁµÇÂãïÁîª„Éï„Ç°„Ç§„É´„ÅåÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
        - "ÈÖç‰ø°Ê∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã"
        - "ÂìÅË≥™„É¨„Éù„Éº„Éà„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã"
      validation_script: |
        if [ ! -f ".final-output/delivery-package.json" ]; then
          echo "‚ùå VALIDATION FAILED: Delivery package missing"
          exit 1
        fi
        
        if [ "$READY_FOR_DISTRIBUTION" = "ready" ]; then
          echo "‚úÖ Validation passed: Video ready for distribution"
        else
          echo "‚ö†Ô∏è WARNING: Video may need additional review before distribution"
        fi