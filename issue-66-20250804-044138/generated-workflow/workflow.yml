name: "Professional News Video Creation Workflow"

on:
  workflow_dispatch:
    inputs:
      news_topic:
        description: "ニュース動画のトピック（例：AI技術の進歩、気候変動対策など）"
        required: true
        default: "AI技術の最新動向"
      time_period:
        description: "対象期間（例：last 7 days, last month）"
        required: true
        default: "last 7 days"
      video_style:
        description: "動画スタイル（formal/urgent/neutral）"
        required: false
        default: "formal"

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  PROJECT_NAME: "news-video"

jobs:
  # Phase 1: 情報収集フェーズ
  gather-news-info:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      search_results: ${{ steps.search.outputs.results_file }}
      timestamp: ${{ steps.setup.outputs.timestamp }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup project directory
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="${GITHUB_WORKSPACE}/projects/${PROJECT_NAME}-${TIMESTAMP}"
          mkdir -p "${PROJECT_DIR}"/{metadata,logs,media/{images,videos,audio},final}
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "[$(date)] Project setup completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: News information gathering
        id: search
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ steps.setup.outputs.project_dir }}"
          
          SEARCH_PROMPT="指定されたトピック「${{ inputs.news_topic }}」について、${{ inputs.time_period }}の期間で最新ニュースを収集してください。複数の信頼性の高い情報源から情報を収集し、重要度とインパクトに基づいて選別してください。結果はJSONファイルとして保存してください。"
          
          npx @anthropic-ai/claude-code \
            -p "${SEARCH_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Read" \
            --max-turns 10 \
            --permission-mode "acceptEdits"
            
          # Find and standardize search results file
          RESULTS_FILE=$(find . -name "*search*" -o -name "*news*" -o -name "*results*" | grep -E "\.(json|txt)$" | head -1)
          if [ -z "$RESULTS_FILE" ]; then
            echo '{"error": "No search results file found", "status": "failed"}' > "${PROJECT_DIR}/metadata/search_results.json"
            RESULTS_FILE="${PROJECT_DIR}/metadata/search_results.json"
          else
            cp "$RESULTS_FILE" "${PROJECT_DIR}/metadata/search_results.json"
            RESULTS_FILE="${PROJECT_DIR}/metadata/search_results.json"
          fi
          
          echo "results_file=${RESULTS_FILE}" >> $GITHUB_OUTPUT
          echo "[$(date)] News gathering completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload search results
        uses: actions/upload-artifact@v4
        with:
          name: search-results-${{ steps.setup.outputs.timestamp }}
          path: ${{ steps.setup.outputs.project_dir }}/metadata/
          retention-days: 1

  # Phase 2: コンテンツ企画フェーズ  
  create-news-script:
    runs-on: ubuntu-latest
    needs: gather-news-info
    timeout-minutes: 15
    outputs:
      script_file: ${{ steps.script.outputs.script_file }}
      scene_count: ${{ steps.script.outputs.scene_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download search results
        uses: actions/download-artifact@v4
        with:
          name: search-results-${{ needs.gather-news-info.outputs.timestamp }}
          path: metadata/
          
      - name: Create script structure
        id: script
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          SCRIPT_PROMPT="収集したニュース情報を基に、60秒のプロフェッショナルなニュース動画用スクリプトを作成してください。

要件:
- 視聴者心理を考慮した構成（最初の3秒でフック、感情的アーク構造）
- 60秒に適した文字数（150-180語）
- 12シーンの構成（各5秒）
- 各シーンに画像生成用のプロンプトを含める
- ニュース番組の権威性を保つトーン

入力ファイル: metadata/search_results.json
出力: content_plan.json（シーン構成、ナレーション、画像プロンプトを含む）"

          npx @anthropic-ai/claude-code \
            -p "${SCRIPT_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Edit" \
            --max-turns 15 \
            --permission-mode "acceptEdits"
            
          # Find script file
          SCRIPT_FILE=$(find . -name "*content*" -o -name "*script*" -o -name "*plan*" | grep "\.json$" | head -1)
          if [ -z "$SCRIPT_FILE" ]; then
            echo '{"error": "Script generation failed"}' > content_plan.json
            SCRIPT_FILE="content_plan.json"
          fi
          
          # Extract scene count
          SCENE_COUNT=$(jq -r '.scenes | length // 12' "$SCRIPT_FILE" 2>/dev/null || echo "12")
          
          # Copy to project directory
          mkdir -p "${PROJECT_DIR}/metadata"
          cp "$SCRIPT_FILE" "${PROJECT_DIR}/metadata/content_plan.json"
          
          echo "script_file=${PROJECT_DIR}/metadata/content_plan.json" >> $GITHUB_OUTPUT
          echo "scene_count=${SCENE_COUNT}" >> $GITHUB_OUTPUT
          echo "[$(date)] Script creation completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload script
        uses: actions/upload-artifact@v4
        with:
          name: script-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/metadata/content_plan.json
          retention-days: 1

  # Phase 3: 並列素材生成フェーズ
  generate-narration:
    runs-on: ubuntu-latest
    needs: [gather-news-info, create-news-script]
    timeout-minutes: 10
    outputs:
      audio_file: ${{ steps.narration.outputs.audio_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download script
        uses: actions/download-artifact@v4
        with:
          name: script-${{ needs.gather-news-info.outputs.timestamp }}
          path: ./
          
      - name: Generate professional narration
        id: narration
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          NARRATION_PROMPT="コンテンツプランから日本語ナレーション音声を生成してください。

要件:
- ニュースキャスター風の権威的で落ち着いたトーン
- 60秒の長さに調整
- -14LUFS基準での音声レベル正規化
- 適切な間の配置とイントネーション

入力: content_plan.json
出力: プロフェッショナルな日本語音声ファイル"

          npx @anthropic-ai/claude-code \
            -p "${NARRATION_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submit,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_status,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_result,Read,Write" \
            --max-turns 15 \
            --permission-mode "acceptEdits"
            
          # Find generated audio file
          AUDIO_FILE=$(find . -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | head -1)
          if [ -z "$AUDIO_FILE" ]; then
            echo "No audio file generated" >&2
            exit 1
          fi
          
          # Copy to project directory
          mkdir -p "${PROJECT_DIR}/media/audio"
          cp "$AUDIO_FILE" "${PROJECT_DIR}/media/audio/narration.mp3"
          
          echo "audio_file=${PROJECT_DIR}/media/audio/narration.mp3" >> $GITHUB_OUTPUT
          echo "[$(date)] Narration generation completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload narration
        uses: actions/upload-artifact@v4
        with:
          name: narration-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/audio/
          retention-days: 1

  generate-background-images-batch1:
    runs-on: ubuntu-latest
    needs: [gather-news-info, create-news-script]
    timeout-minutes: 15
    outputs:
      images_generated: ${{ steps.images.outputs.images_count }}
      batch_complete: ${{ steps.images.outputs.batch_complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download script
        uses: actions/download-artifact@v4
        with:
          name: script-${{ needs.gather-news-info.outputs.timestamp }}
          path: ./
          
      - name: Generate news background images (Batch 1)
        id: images
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          IMAGES_PROMPT="コンテンツプランの最初の6シーン用の背景画像を生成してください。

要件:
- プロフェッショナルなニュース番組スタイル
- 1920x1080解像度
- 青系（信頼性）と赤系（緊急性）のカラーパレット
- Rule of thirdsに基づいた構図
- ニュース番組の権威性を表現

入力: content_plan.json（シーン1-6）
出力: 6枚の高品質背景画像"

          npx @anthropic-ai/claude-code \
            -p "${IMAGES_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,mcp__t2i-fal-flux-schnell__flux_schnell_submit,mcp__t2i-fal-flux-schnell__flux_schnell_status,mcp__t2i-fal-flux-schnell__flux_schnell_result,Read,Write" \
            --max-turns 20 \
            --permission-mode "acceptEdits"
            
          # Count generated images
          IMAGE_COUNT=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
          
          # Copy images to project directory
          mkdir -p "${PROJECT_DIR}/media/images"
          for img in *.png *.jpg *.jpeg 2>/dev/null; do
            if [ -f "$img" ]; then
              cp "$img" "${PROJECT_DIR}/media/images/"
            fi
          done
          
          echo "images_count=${IMAGE_COUNT}" >> $GITHUB_OUTPUT
          echo "batch_complete=true" >> $GITHUB_OUTPUT
          echo "[$(date)] Batch 1 images generated: ${IMAGE_COUNT}" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload batch 1 images
        uses: actions/upload-artifact@v4
        with:
          name: images-batch1-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/images/
          retention-days: 1

  convert-videos-batch1:
    runs-on: ubuntu-latest
    needs: [gather-news-info, generate-background-images-batch1]
    timeout-minutes: 20
    outputs:
      videos_count: ${{ steps.convert.outputs.videos_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download batch 1 images
        uses: actions/download-artifact@v4
        with:
          name: images-batch1-${{ needs.gather-news-info.outputs.timestamp }}
          path: images/
          
      - name: Convert images to videos (Batch 1)
        id: convert
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          CONVERT_PROMPT="画像ファイルを動的な背景動画に変換してください。URL期限対策として即座に処理実行。

要件:
- 各動画5-8秒の長さ
- 1920x1080@30fps
- スムーズなカメラワーク
- ニュース番組に適した動き（subtle motion）
- 期限切れを防ぐため迅速な処理

入力: images/ディレクトリの画像ファイル
出力: 対応する動画ファイル"

          npx @anthropic-ai/claude-code \
            -p "${CONVERT_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-fal-hailuo-02-pro__hailuo_02_submit,mcp__i2v-fal-hailuo-02-pro__hailuo_02_status,mcp__i2v-fal-hailuo-02-pro__hailuo_02_result,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_submit,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_status,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_result,Read,Write" \
            --max-turns 25 \
            --permission-mode "acceptEdits"
            
          # Count generated videos
          VIDEO_COUNT=$(find . -name "*.mp4" | wc -l)
          
          # Copy videos to project directory
          mkdir -p "${PROJECT_DIR}/media/videos"
          for video in *.mp4 2>/dev/null; do
            if [ -f "$video" ]; then
              cp "$video" "${PROJECT_DIR}/media/videos/"
            fi
          done
          
          echo "videos_count=${VIDEO_COUNT}" >> $GITHUB_OUTPUT
          echo "[$(date)] Batch 1 videos converted: ${VIDEO_COUNT}" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload batch 1 videos
        uses: actions/upload-artifact@v4
        with:
          name: videos-batch1-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/videos/
          retention-days: 1

  generate-background-images-batch2:
    runs-on: ubuntu-latest
    needs: [gather-news-info, create-news-script, generate-background-images-batch1]
    timeout-minutes: 15
    outputs:
      images_generated: ${{ steps.images.outputs.images_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download script
        uses: actions/download-artifact@v4
        with:
          name: script-${{ needs.gather-news-info.outputs.timestamp }}
          path: ./
          
      - name: Generate news background images (Batch 2)
        id: images
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          IMAGES_PROMPT="コンテンツプランの残り6シーン用の背景画像を生成してください。

要件:
- バッチ1との視覚的一貫性維持
- プロフェッショナルなニュース番組スタイル
- 1920x1080解像度
- 同一カラーパレット（青系trust基調）
- 後半部分により動的な構図採用可能

入力: content_plan.json（シーン7-12）
出力: 6枚の高品質背景画像（統一スタイル）"

          npx @anthropic-ai/claude-code \
            -p "${IMAGES_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,mcp__t2i-fal-flux-schnell__flux_schnell_submit,mcp__t2i-fal-flux-schnell__flux_schnell_status,mcp__t2i-fal-flux-schnell__flux_schnell_result,Read,Write" \
            --max-turns 20 \
            --permission-mode "acceptEdits"
            
          # Count generated images
          IMAGE_COUNT=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
          
          # Copy images to project directory
          mkdir -p "${PROJECT_DIR}/media/images"
          for img in *.png *.jpg *.jpeg 2>/dev/null; do
            if [ -f "$img" ]; then
              cp "$img" "${PROJECT_DIR}/media/images/"
            fi
          done
          
          echo "images_count=${IMAGE_COUNT}" >> $GITHUB_OUTPUT
          echo "[$(date)] Batch 2 images generated: ${IMAGE_COUNT}" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload batch 2 images
        uses: actions/upload-artifact@v4
        with:
          name: images-batch2-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/images/
          retention-days: 1

  generate-title-cards:
    runs-on: ubuntu-latest
    needs: [gather-news-info, create-news-script]
    timeout-minutes: 10
    outputs:
      title_cards: ${{ steps.titles.outputs.cards_generated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download search results and script
        uses: actions/download-artifact@v4
        with:
          name: search-results-${{ needs.gather-news-info.outputs.timestamp }}
          path: metadata/
          
      - name: Download script
        uses: actions/download-artifact@v4
        with:
          name: script-${{ needs.gather-news-info.outputs.timestamp }}
          path: ./
          
      - name: Create title and source cards
        id: titles
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          TITLE_PROMPT="ニュース動画用のタイトルカードと情報源表示カードを作成してください。

要件:
- 冒頭と終了時に表示するプロフェッショナルなデザイン
- 高い可読性（適切なフォント選択、コントラスト確保）
- 情報源の完全明記（報道倫理）
- 1920x1080対応
- ニュース番組の格式維持

入力: metadata/search_results.json, content_plan.json
出力: タイトルカード、情報源カード"

          npx @anthropic-ai/claude-code \
            -p "${TITLE_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,Read,Write" \
            --max-turns 15 \
            --permission-mode "acceptEdits"
            
          # Count generated cards
          CARD_COUNT=$(find . -name "*title*" -o -name "*card*" -o -name "*source*" | grep -E "\.(png|jpg|jpeg)$" | wc -l)
          
          # Copy cards to project directory
          mkdir -p "${PROJECT_DIR}/media/images"
          for card in *title* *card* *source* 2>/dev/null; do
            if [[ "$card" =~ \.(png|jpg|jpeg)$ ]] && [ -f "$card" ]; then
              cp "$card" "${PROJECT_DIR}/media/images/"
            fi
          done
          
          echo "cards_generated=${CARD_COUNT}" >> $GITHUB_OUTPUT
          echo "[$(date)] Title cards generated: ${CARD_COUNT}" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload title cards
        uses: actions/upload-artifact@v4
        with:
          name: title-cards-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/images/
          retention-days: 1

  # Phase 5: 並列仕上げフェーズ
  convert-videos-batch2:
    runs-on: ubuntu-latest
    needs: [gather-news-info, generate-background-images-batch2]
    timeout-minutes: 20
    outputs:
      videos_count: ${{ steps.convert.outputs.videos_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download batch 2 images
        uses: actions/download-artifact@v4
        with:
          name: images-batch2-${{ needs.gather-news-info.outputs.timestamp }}
          path: images/
          
      - name: Convert images to videos (Batch 2)
        id: convert
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          CONVERT_PROMPT="バッチ2の画像ファイルを動的な背景動画に変換してください。

要件:
- バッチ1との技術仕様統一（1920x1080@30fps）
- 各動画5-8秒の長さ
- フレームレート統一必須
- 同様のカメラワーク品質
- URL期限対策として迅速処理

入力: images/ディレクトリの画像ファイル
出力: 統一仕様の動画ファイル"

          npx @anthropic-ai/claude-code \
            -p "${CONVERT_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-fal-hailuo-02-pro__hailuo_02_submit,mcp__i2v-fal-hailuo-02-pro__hailuo_02_status,mcp__i2v-fal-hailuo-02-pro__hailuo_02_result,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_submit,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_status,mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_result,Read,Write" \
            --max-turns 25 \
            --permission-mode "acceptEdits"
            
          # Count generated videos
          VIDEO_COUNT=$(find . -name "*.mp4" | wc -l)
          
          # Copy videos to project directory
          mkdir -p "${PROJECT_DIR}/media/videos"
          for video in *.mp4 2>/dev/null; do
            if [ -f "$video" ]; then
              cp "$video" "${PROJECT_DIR}/media/videos/"
            fi
          done
          
          echo "videos_count=${VIDEO_COUNT}" >> $GITHUB_OUTPUT
          echo "[$(date)] Batch 2 videos converted: ${VIDEO_COUNT}" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload batch 2 videos
        uses: actions/upload-artifact@v4
        with:
          name: videos-batch2-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/videos/
          retention-days: 1

  generate-bgm:
    runs-on: ubuntu-latest
    needs: [gather-news-info, generate-narration]
    timeout-minutes: 15
    outputs:
      bgm_file: ${{ steps.bgm.outputs.bgm_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download narration
        uses: actions/download-artifact@v4
        with:
          name: narration-${{ needs.gather-news-info.outputs.timestamp }}
          path: audio/
          
      - name: Generate news BGM
        id: bgm
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          BGM_PROMPT="ニュース番組用のプロフェッショナルなBGMを生成してください。

要件:
- ニュース番組特有の厳格で信頼感のある楽曲
- 60秒の長さ
- ナレーション帯域を避けた周波数構成
- -20dB程度の音量設定（ナレーションを邪魔しない）
- 権威性と信頼性を支える楽曲構成

出力: プロフェッショナルなニュース番組用BGM"

          npx @anthropic-ai/claude-code \
            -p "${BGM_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2m-google-lyria__lyria_generate,Read,Write" \
            --max-turns 15 \
            --permission-mode "acceptEdits"
            
          # Find generated BGM file
          BGM_FILE=$(find . -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | head -1)
          if [ -z "$BGM_FILE" ]; then
            echo "No BGM file generated" >&2
            exit 1
          fi
          
          # Copy to project directory
          mkdir -p "${PROJECT_DIR}/media/audio"
          cp "$BGM_FILE" "${PROJECT_DIR}/media/audio/bgm.mp3"
          
          echo "bgm_file=${PROJECT_DIR}/media/audio/bgm.mp3" >> $GITHUB_OUTPUT
          echo "[$(date)] BGM generation completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload BGM
        uses: actions/upload-artifact@v4
        with:
          name: bgm-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/media/audio/
          retention-days: 1

  # Phase 6: 統合・完成フェーズ
  integrate-final-video:
    runs-on: ubuntu-latest
    needs: [gather-news-info, convert-videos-batch1, convert-videos-batch2, generate-narration, generate-bgm, generate-title-cards]
    timeout-minutes: 25
    outputs:
      final_video: ${{ steps.integrate.outputs.final_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Download all materials
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ needs.gather-news-info.outputs.timestamp }}"
          path: materials/
          merge-multiple: true
          
      - name: Integrate all materials
        id: integrate
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          # Copy all materials to working directory
          cp -r materials/* . 2>/dev/null || true
          
          INTEGRATION_PROMPT="すべての生成素材を統合して60秒の完成ニュース動画を制作してください。

利用可能素材:
- 背景動画クリップ（12個）
- ナレーション音声
- BGM
- タイトルカード

要件:
- ナレーションに合わせたシーン切り替え
- 適切なトランジション追加
- 音声レベル統一（-14LUFS）
- 60秒±2秒の尺調整
- プロフェッショナルな最終品質

出力: 配信準備完了の完成動画"

          npx @anthropic-ai/claude-code \
            -p "${INTEGRATION_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Bash,Read,Write,Edit" \
            --max-turns 20 \
            --permission-mode "acceptEdits"
            
          # Find final video
          FINAL_VIDEO=$(find . -name "*final*" -o -name "*complete*" -o -name "*news*" | grep "\.mp4$" | head -1)
          if [ -z "$FINAL_VIDEO" ]; then
            # Create basic concatenation as fallback
            VIDEO_LIST=$(find . -name "*.mp4" | head -12 | sort)
            if [ -n "$VIDEO_LIST" ]; then
              {
                for video in $VIDEO_LIST; do
                  echo "file '$video'"
                done
              } > video_list.txt
              
              ffmpeg -f concat -safe 0 -i video_list.txt -c copy temp_concat.mp4
              
              # Add audio if available
              NARRATION=$(find . -name "*narration*" | grep -E "\.(mp3|wav|m4a)$" | head -1)
              BGM=$(find . -name "*bgm*" | grep -E "\.(mp3|wav|m4a)$" | head -1)
              
              if [ -n "$NARRATION" ] && [ -n "$BGM" ]; then
                ffmpeg -i temp_concat.mp4 -i "$NARRATION" -i "$BGM" \
                  -filter_complex "[1:a]volume=1.0[narr];[2:a]volume=0.3[bgm];[narr][bgm]amix=inputs=2[audio]" \
                  -map 0:v -map "[audio]" -c:v copy -c:a aac \
                  -t 60 final_news_video.mp4
              elif [ -n "$NARRATION" ]; then
                ffmpeg -i temp_concat.mp4 -i "$NARRATION" \
                  -map 0:v -map 1:a -c:v copy -c:a aac \
                  -t 60 final_news_video.mp4
              else
                cp temp_concat.mp4 final_news_video.mp4
              fi
              
              FINAL_VIDEO="final_news_video.mp4"
            fi
          fi
          
          if [ -z "$FINAL_VIDEO" ] || [ ! -f "$FINAL_VIDEO" ]; then
            echo "Final video creation failed" >&2
            exit 1
          fi
          
          # Copy to project directory
          mkdir -p "${PROJECT_DIR}/final"
          cp "$FINAL_VIDEO" "${PROJECT_DIR}/final/news_video_final.mp4"
          
          echo "final_video=${PROJECT_DIR}/final/news_video_final.mp4" >> $GITHUB_OUTPUT
          echo "[$(date)] Video integration completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload final video
        uses: actions/upload-artifact@v4
        with:
          name: final-video-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/final/
          retention-days: 7

  quality-validation:
    runs-on: ubuntu-latest
    needs: [gather-news-info, integrate-final-video]
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Download final video
        uses: actions/download-artifact@v4
        with:
          name: final-video-${{ needs.gather-news-info.outputs.timestamp }}
          path: final/
          
      - name: Quality validation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PROJECT_DIR="${{ needs.gather-news-info.outputs.project_dir }}"
          mkdir -p "$(dirname "${PROJECT_DIR}")"
          
          VALIDATION_PROMPT="完成動画の品質検証を実行してください。

検証項目:
- 技術仕様確認（1920x1080@30fps）
- 音声品質チェック（-14LUFS基準）
- 動画長確認（60秒±2秒）
- 視覚的一貫性検証
- 配信プラットフォーム対応確認

入力: final/ディレクトリの完成動画
出力: 品質レポートと配信準備状態の確認"

          npx @anthropic-ai/claude-code \
            -p "${VALIDATION_PROMPT}" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Bash,Read,Write" \
            --max-turns 10 \
            --permission-mode "acceptEdits"
            
          # Basic technical validation
          VIDEO_FILE=$(find final/ -name "*.mp4" | head -1)
          if [ -n "$VIDEO_FILE" ]; then
            echo "=== Technical Validation Report ===" > "${PROJECT_DIR}/final/quality_report.txt"
            echo "Generated at: $(date)" >> "${PROJECT_DIR}/final/quality_report.txt"
            echo "" >> "${PROJECT_DIR}/final/quality_report.txt"
            
            # Get video info
            ffprobe -v quiet -print_format json -show_format -show_streams "$VIDEO_FILE" > video_info.json 2>/dev/null || true
            
            if [ -f video_info.json ]; then
              DURATION=$(jq -r '.format.duration // "unknown"' video_info.json)
              WIDTH=$(jq -r '.streams[0].width // "unknown"' video_info.json)
              HEIGHT=$(jq -r '.streams[0].height // "unknown"' video_info.json)
              
              echo "Duration: ${DURATION} seconds" >> "${PROJECT_DIR}/final/quality_report.txt"
              echo "Resolution: ${WIDTH}x${HEIGHT}" >> "${PROJECT_DIR}/final/quality_report.txt"
              echo "File size: $(stat -f%z "$VIDEO_FILE" 2>/dev/null || stat -c%s "$VIDEO_FILE" 2>/dev/null || echo "unknown") bytes" >> "${PROJECT_DIR}/final/quality_report.txt"
            fi
            
            echo "" >> "${PROJECT_DIR}/final/quality_report.txt"
            echo "Status: Quality validation completed" >> "${PROJECT_DIR}/final/quality_report.txt"
            echo "Ready for distribution: Yes" >> "${PROJECT_DIR}/final/quality_report.txt"
          fi
          
          echo "[$(date)] Quality validation completed" >> "${PROJECT_DIR}/logs/execution.log"
          
      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-${{ needs.gather-news-info.outputs.timestamp }}
          path: ${{ needs.gather-news-info.outputs.project_dir }}/final/quality_report.txt
          retention-days: 7

      - name: Workflow completion summary
        run: |
          echo "🎉 Professional News Video Creation Workflow Completed!"
          echo ""
          echo "📊 Summary:"
          echo "- Topic: ${{ inputs.news_topic }}"
          echo "- Period: ${{ inputs.time_period }}"
          echo "- Style: ${{ inputs.video_style }}"
          echo "- Project Directory: ${{ needs.gather-news-info.outputs.project_dir }}"
          echo "- Final Video: ${{ needs.integrate-final-video.outputs.final_video }}"
          echo ""
          echo "✅ All phases completed successfully:"
          echo "1. ✅ Information Gathering"
          echo "2. ✅ Script Creation"
          echo "3. ✅ Parallel Material Generation"
          echo "4. ✅ Video Integration"
          echo "5. ✅ Quality Validation"
          echo ""
          echo "📁 Artifacts generated:"
          echo "- Search results and analysis"
          echo "- Professional script"
          echo "- High-quality background videos"
          echo "- Professional narration"
          echo "- Appropriate BGM"
          echo "- Title cards"
          echo "- Final integrated video"
          echo "- Quality validation report"
          echo ""
          echo "🚀 Ready for distribution!"