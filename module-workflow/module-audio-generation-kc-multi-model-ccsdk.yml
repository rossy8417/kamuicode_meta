name: module-audio-generation-kc-multi-model-ccsdk

on:
  workflow_call:
    inputs:
      concept:
        description: '„É¶„Éº„Ç∂„Éº„ÅÆ„Ç≥„É≥„Çª„Éó„Éà'
        required: true
        type: string
      model-type:
        description: '‰ΩøÁî®„Åô„ÇãÈü≥Â£∞ÁîüÊàê„É¢„Éá„É´ (‰æã: t2s-fal-minimax-speech-02-turbo)'
        required: true
        type: string
      text-prompt:
        description: 'Èü≥Â£∞ÁîüÊàêÁî®„ÉÜ„Ç≠„Çπ„Éà„Éó„É≠„É≥„Éó„Éà'
        required: true
        type: string
      voice-settings:
        description: 'Èü≥Â£∞Ë®≠ÂÆöÔºàJSONÂΩ¢Âºè„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥Ôºâ'
        required: false
        type: string
        default: '{}'
      branch-name:
        description: '„ÉØ„Éº„Ç≠„É≥„Ç∞„Éñ„É©„É≥„ÉÅÂêç'
        required: true
        type: string
      folder-name:
        description: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç©„É´„ÉÄÂêç'
        required: true
        type: string
      audio_index:
        description: 'Èü≥Â£∞„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ'
        required: false
        type: string
        default: '1'
    outputs:
      completed:
        description: 'ÂÆå‰∫Ü„Çπ„ÉÜ„Éº„Çø„Çπ'
        value: ${{ jobs.audio-generation.outputs.completed }}
      audio-url:
        description: 'Èü≥Â£∞URL'
        value: ${{ jobs.audio-generation.outputs.audio-url }}
    secrets:
      anthropic_api_key:
        description: 'Anthropic API Key'
        required: true
      github_pat:
        description: 'GitHub Token'
        required: true

jobs:
  audio-generation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      completed: ${{ steps.audio.outputs.completed }}
      audio-url: ${{ steps.audio.outputs.audio-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Install ffmpeg for audio duration check
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Èü≥Â£∞ÁîüÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà („Éû„É´„ÉÅ„É¢„Éá„É´ÂØæÂøú)
        id: audio
        env:
          ANTHROPIC_API_KEY: ${{ secrets.anthropic_api_key }}
        run: |
          echo "::group::üé§ Audio Generation Agent Execution (Multi-Model)"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # Ë®≠ÂÆö
          USER_CONCEPT="${{ inputs.concept }}"
          MODEL_TYPE="${{ inputs.model-type }}"
          TEXT_PROMPT="${{ inputs.text-prompt }}"
          VOICE_SETTINGS="${{ inputs.voice-settings }}"
          FOLDER_NAME="${{ inputs.folder-name }}"
          AUDIO_INDEX="${{ inputs.audio_index }}"
          AUDIO_DIR="$FOLDER_NAME/audio-${AUDIO_INDEX}"
          
          echo "User concept: $USER_CONCEPT"
          echo "Model type: $MODEL_TYPE"
          echo "Text prompt: $TEXT_PROMPT"
          echo "Voice settings: $VOICE_SETTINGS"
          echo "Audio index: $AUDIO_INDEX"
          echo "Target folder: $AUDIO_DIR"
          
          # Èü≥Â£∞„Éï„Ç©„É´„ÉÄ„Çí‰∫ãÂâç„Å´‰ΩúÊàê
          if [ ! -d "$AUDIO_DIR" ]; then
            mkdir -p "$AUDIO_DIR"
            echo "üìÅ Created audio folder: $AUDIO_DIR"
          fi
          
          # MCPË®≠ÂÆö„ÅÆÁ¢∫Ë™ç
          MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
          MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
          
          # MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
          if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
            echo "‚úÖ MCP config file exists at: $MCP_CONFIG_ABS_PATH"
          else
            echo "‚ùå MCP config file not found at: $MCP_CONFIG_ABS_PATH"
            exit 1
          fi
          
          # „Éó„É≠„É≥„Éó„Éà„ÅÆÊßãÁØâ
          PROMPT="ÊåáÂÆö„Åï„Çå„Åü„É¢„Éá„É´„Çø„Ç§„Éó„Çí‰ΩøÁî®„Åó„Å¶Èü≥Â£∞„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

          **ÂÖÉ„ÅÆ„É¶„Éº„Ç∂„ÉºÊåáÁ§∫**: $USER_CONCEPT
          **‰ΩøÁî®„Åô„Çã„É¢„Éá„É´„Çø„Ç§„Éó**: $MODEL_TYPE
          **„ÉÜ„Ç≠„Çπ„Éà„Éó„É≠„É≥„Éó„Éà**: $TEXT_PROMPT
          **Èü≥Â£∞Ë®≠ÂÆö**: $VOICE_SETTINGS

          **ÂÆüË°åÊâãÈ†Ü**:
          1. „Åæ„Åö„ÄÅ\`.github/workflows/kamuicode/kamuicode-usage.md\`„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„ÄÅ„É¢„Éá„É´„Çø„Ç§„Éó„Äå$MODEL_TYPE„Äç„Å´ÂØæÂøú„Åô„ÇãMCP„ÉÑ„Éº„É´Âêç„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          2. „Éï„Ç°„Ç§„É´„Åã„Çâ‰ª•‰∏ã„ÅÆÊÉÖÂ†±„ÇíÊäΩÂá∫:
             - submit„ÉÑ„Éº„É´ÂêçÔºà‰æã: mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submitÔºâ
             - status„ÉÑ„Éº„É´ÂêçÔºà‰æã: mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_statusÔºâ
             - result„ÉÑ„Éº„É´ÂêçÔºà‰æã: mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_resultÔºâ
          3. „É¢„Éá„É´„Çø„Ç§„Éó„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„Éë„É©„É°„Éº„Çø„Çí‰ΩøÁî®:
             - **t2s-„ÅßÂßã„Åæ„ÇãÂ†¥Âêà**: „ÉÜ„Ç≠„Çπ„Éà„Éó„É≠„É≥„Éó„ÉàÔºà$TEXT_PROMPTÔºâ„Å®Èü≥Â£∞Ë®≠ÂÆöÔºà$VOICE_SETTINGSÔºâ„Çí‰ΩøÁî®„Åó„Å¶„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÈü≥Â£∞ÁîüÊàê
          4. submit„ÉÑ„Éº„É´„ÅßÈü≥Â£∞ÁîüÊàê„ÇíÈñãÂßã
          5. status„ÉÑ„Éº„É´„Åß„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™çÔºàÈü≥Â£∞ÁîüÊàê„ÅØÊØîËºÉÁöÑÈ´òÈÄü„Åß„Åô„Åå„ÄÅÈÅ©Â∫¶„Å™ÈñìÈöî„ÅßÁ¢∫Ë™çÔºâ
          6. ÂøÖË¶Å„Å´Âøú„Åò„Å¶Bash„ÉÑ„Éº„É´„Åß \`sleep 30\` „ÇíÂÆüË°å„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç
          7. result„ÉÑ„Éº„É´„ÅßÁµêÊûúÂèñÂæó„Åó„Å¶Èü≥Â£∞URL„ÇíÂèñÂæó
          8. **ÂøÖÈ†à**: ÂèñÂæó„Åó„ÅüÈü≥Â£∞URL„Çí„Äå$AUDIO_DIR/audio-url.txt„Äç„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
          9. **ÂøÖÈ†à**: ÂèñÂæó„Åó„ÅüÈü≥Â£∞URL„ÇíBash„ÉÑ„Éº„É´„Åß„Äå$AUDIO_DIR/audio.mp3„Äç„Åæ„Åü„ÅØ„Äå$AUDIO_DIR/audio.wav„Äç„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰øùÂ≠ò

          **ÈáçË¶Å„Å™Ê≥®ÊÑèÁÇπ**:
          - kamuicode-usage.md„Åã„ÇâÊ≠£„Åó„ÅÑ„ÉÑ„Éº„É´Âêç„ÇíË™≠„ÅøÂèñ„Çã„Åì„Å®
          - Èü≥Â£∞ÁîüÊàê„ÅØÊØîËºÉÁöÑÈ´òÈÄü„Åß„Åô„Åå„ÄÅ„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç„ÅØÈÅ©Â∫¶„Å™ÈñìÈöî„ÅßË°å„ÅÜ„Åì„Å®
          - Google URL„ÅÆÊúâÂäπÊúüÈôê„ÅØÁ¥Ñ1ÊôÇÈñì„ÅÆ„Åü„ÇÅ„ÄÅÁîüÊàêÂæå„Åô„Åê„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          - ÂøÖ„ÅöGoogleÊèê‰æõ„ÅÆË™çË®ºÊ∏àURL„Çí‰ΩøÁî®
          - Èü≥Â£∞„ÅØÂøÖ„Åö„Äå$AUDIO_DIR„Äç„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´‰øùÂ≠ò
          - „Éï„Ç°„Ç§„É´Âêç„ÅØ„Äåaudio.mp3„Äç„Åæ„Åü„ÅØ„Äåaudio.wav„Äç„Å®„Åô„Çã
          - **ÊúÄÈáçË¶Å**: ÁîüÊàêÊôÇ„ÅÆÈü≥Â£∞URL„Çí„Äå$AUDIO_DIR/audio-url.txt„Äç„Å´‰øùÂ≠ò„Åó„ÄÅÊ¨°„ÅÆ„Ç∏„Éß„Éñ„ÅßÂèÇÁÖß„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
          - **‰∏°Êñπ„ÇíÂÆüË°å**: ‚ë†Èü≥Â£∞URL„Çí„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò ‚ë°Èü≥Â£∞URL„Åã„ÇâÈü≥Â£∞„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„É≠„Éº„Ç´„É´‰øùÂ≠ò"
          
          echo "üöÄ Starting Audio Generation Agent Claude Code CLI..."
          echo "üìù Prompt length: ${#PROMPT}"
          
          # Claude Code CLI„ÅÆÂÆüË°åÔºàÈü≥Â£∞ÁîüÊàêÁ≥ª„ÉÑ„Éº„É´„ÅØ„ÉØ„Ç§„É´„Éâ„Ç´„Éº„Éâ„ÅßË®±ÂèØÔºâ
          npx @anthropic-ai/claude-code \
            --mcp-config="$MCP_CONFIG_ABS_PATH" \
            --allowedTools "mcp__t2s-*,Read,Bash" \
            --max-turns 40 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::‚ùå Claude Code CLI execution failed"
              exit 1
            }
          
          # ÁîüÊàê„Åï„Çå„ÅüÈü≥Â£∞„ÅÆÁ¢∫Ë™ç
          echo ""
          echo "üé§ Checking generated audio..."
          if [ -d "$AUDIO_DIR" ]; then
            AUDIO_COUNT=$(find "$AUDIO_DIR" -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | wc -l)
            echo "::notice::üé§ Generated $AUDIO_COUNT audio files using $MODEL_TYPE"
            if [ "$AUDIO_COUNT" -gt 0 ]; then
              # Èü≥Â£∞„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Å®Èï∑„Åï„ÅÆÁ¢∫Ë™çÔºàPixverseÂà∂Èôê: 30Áßí‰ª•ÂÜÖÔºâ
              for audio_file in $(find "$AUDIO_DIR" -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | head -3); do
                if [ -f "$audio_file" ]; then
                  AUDIO_SIZE=$(stat -c%s "$audio_file" 2>/dev/null || stat -f%z "$audio_file" 2>/dev/null || echo "0")
                  echo "::notice::üéµ Audio file: $audio_file (${AUDIO_SIZE} bytes)"
                  
                  if [ "$AUDIO_SIZE" -eq 0 ]; then
                    echo "::error::‚ùå Audio file is empty: $audio_file"
                    exit 1
                  fi
                  
                  # PixverseÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà30Áßí‰ª•ÂÜÖÔºâ
                  # ffprobe„ÅßÈü≥Â£∞„ÅÆÈï∑„Åï„ÇíÂèñÂæó
                  if command -v ffprobe >/dev/null 2>&1; then
                    AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$audio_file" 2>/dev/null || echo "0")
                    AUDIO_DURATION_INT=$(echo "$AUDIO_DURATION" | cut -d. -f1)
                    echo "::notice::‚è±Ô∏è Audio duration: ${AUDIO_DURATION}s"
                    
                    if [ "$AUDIO_DURATION_INT" -gt 30 ]; then
                      echo "::warning::‚ö†Ô∏è Audio file exceeds Pixverse 30s limit: $audio_file (${AUDIO_DURATION}s)"
                      echo "::warning::üí° Audio may not be compatible with Pixverse lipsync but continuing workflow"
                    else
                      echo "::notice::‚úÖ Audio file is within Pixverse 30s limit: ${AUDIO_DURATION}s"
                    fi
                  else
                    echo "::warning::‚ö†Ô∏è ffprobe not available, skipping audio duration check"
                  fi
                fi
              done
              
              # Èü≥Â£∞URL„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç„Å®Âá∫ÂäõË®≠ÂÆö
              AUDIO_URL_FILE="$AUDIO_DIR/audio-url.txt"
              if [ -f "$AUDIO_URL_FILE" ]; then
                AUDIO_URL=$(cat "$AUDIO_URL_FILE")
                echo "‚úÖ Audio URL found: $AUDIO_URL"
                echo "audio-url=$AUDIO_URL" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Audio URL file not found: $AUDIO_URL_FILE"
                echo "Creating empty URL file to continue workflow..."
                echo "" > "$AUDIO_URL_FILE"
                echo "audio-url=" >> $GITHUB_OUTPUT
              fi
            else
              echo "::error::‚ùå No audio files were generated"
              exit 1
            fi
          else
            echo "::error::‚ùå Audio directory not found"
            exit 1
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push audio
        env:
          GH_TOKEN: ${{ secrets.github_pat }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ inputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No audio files to commit"
          else
            git commit -m "Add generated audio using ${{ inputs.model-type }}: ${{ inputs.concept }}
            
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            # ‰∏¶ÂàóÂÆüË°å„Åß„ÅÆÁ´∂Âêà„ÇíÂõûÈÅø„Åô„Çã„Åü„ÇÅ„ÅÆ„É™„Éà„É©„Ç§Âá¶ÁêÜ
            for i in {1..3}; do
              git pull --rebase origin ${{ inputs.branch-name }} || true
              if git push origin ${{ inputs.branch-name }}; then
                echo "‚úÖ Push successful on attempt $i"
                break
              else
                echo "‚ö†Ô∏è Push failed on attempt $i, retrying..."
                # „É©„É≥„ÉÄ„É†„Å™ÂæÖÊ©üÊôÇÈñìÔºà1-5ÁßíÔºâ
                sleep $((RANDOM % 5 + 1))
              fi
            done
          fi