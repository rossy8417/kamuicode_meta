name: "Professional News Video Creation Workflow"

on:
  workflow_dispatch:
    inputs:
      news_topic:
        description: "ニュースのトピック（例：技術革新、政治、経済）"
        required: true
        default: "最新の技術革新ニュース"
      time_period:
        description: "対象期間（例：24時間以内、1週間以内）"
        required: true
        default: "24時間以内"
      project_name:
        description: "プロジェクト名（出力ディレクトリに使用）"
        required: true
        default: "news-video-production"

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  # Phase 1: Foundation - Information Gathering
  phase1-foundation:
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      research_data: ${{ steps.research.outputs.research_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup project structure
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="${GITHUB_WORKSPACE}/projects/${{ inputs.project_name }}-${TIMESTAMP}"
          mkdir -p "${PROJECT_DIR}"/{metadata,logs,media/{images,videos,audio,3d},final,temp}
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "[$(date)] Phase 1: Foundation started" >> "${PROJECT_DIR}/logs/execution.log"
          echo "Project directory: ${PROJECT_DIR}"

      - name: News Research and Information Gathering
        id: research
        run: |
          PROJECT_DIR="${{ steps.setup.outputs.project_dir }}"
          echo "[$(date)] Starting news research for topic: ${{ inputs.news_topic }}" >> "${PROJECT_DIR}/logs/execution.log"
          
          RESEARCH_PROMPT="ニュース情報収集・リサーチタスク：
          トピック: ${{ inputs.news_topic }}
          期間: ${{ inputs.time_period }}
          
          以下の要件で情報収集を実行してください：
          1. 指定されたトピックの最新ニュースを複数の信頼性の高い情報源から収集
          2. 事実確認と情報の信頼性検証
          3. 60秒のニュース動画に適した要点の整理
          4. JSON形式でstructured dataとして保存: ${PROJECT_DIR}/metadata/research_data.json
          
          出力形式:
          {
            \"topic\": \"トピック名\",
            \"sources\": [\"情報源1\", \"情報源2\", \"情報源3\"],
            \"key_facts\": [\"重要事実1\", \"重要事実2\"],
            \"timeline\": \"時系列情報\",
            \"reliability_score\": 0.95
          }"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Read" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$RESEARCH_PROMPT"
          
          if [ -f "${PROJECT_DIR}/metadata/research_data.json" ]; then
            echo "research_data=${PROJECT_DIR}/metadata/research_data.json" >> $GITHUB_OUTPUT
            echo "[$(date)] Research completed successfully" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] ERROR: Research data not generated" >> "${PROJECT_DIR}/logs/execution.log"
            exit 1
          fi

      - name: Upload Phase 1 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase1-foundation
          path: ${{ steps.setup.outputs.project_dir }}/

  # Phase 2: Content Creation - Script and Structure
  phase2-content-creation:
    runs-on: ubuntu-latest
    needs: phase1-foundation
    outputs:
      script_data: ${{ steps.script.outputs.script_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Phase 1 artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase1-foundation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Create News Script and Structure
        id: script
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          RESEARCH_DATA="${{ needs.phase1-foundation.outputs.research_data }}"
          echo "[$(date)] Phase 2: Content creation started" >> "${PROJECT_DIR}/logs/execution.log"
          
          SCRIPT_PROMPT="ニュース原稿・構成作成タスク：
          
          入力データ: ${RESEARCH_DATA}
          目標: 60秒のプロフェッショナルなニュース動画用の構成と原稿作成
          
          以下の要件で原稿を作成してください：
          1. ニュース番組の黄金比：フック(20%) → 本編(60%) → まとめ(20%)
          2. 最初の3秒で視聴者を引きつけるインパクトのあるフック
          3. 明確で聞き取りやすい日本語ナレーション原稿
          4. 10-12シーンの視覚的構成（各5-6秒）
          5. プロフェッショナルなニュースアナウンサー風のトーン
          
          出力: ${PROJECT_DIR}/metadata/script_data.json
          形式:
          {
            \"total_duration\": 60,
            \"structure\": {
              \"hook\": \"最初の3秒のフック文\",
              \"main_content\": \"本編ナレーション\",
              \"conclusion\": \"まとめ文\"
            },
            \"narration_script\": \"完全なナレーション原稿\",
            \"visual_scenes\": [
              {\"scene_id\": 1, \"duration\": 6, \"description\": \"シーン説明\", \"image_prompt\": \"画像生成プロンプト\"},
              {\"scene_id\": 2, \"duration\": 6, \"description\": \"シーン説明\", \"image_prompt\": \"画像生成プロンプト\"}
            ]
          }"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Edit" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$SCRIPT_PROMPT"
          
          if [ -f "${PROJECT_DIR}/metadata/script_data.json" ]; then
            echo "script_data=${PROJECT_DIR}/metadata/script_data.json" >> $GITHUB_OUTPUT
            echo "[$(date)] Script creation completed successfully" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] ERROR: Script data not generated" >> "${PROJECT_DIR}/logs/execution.log"
            exit 1
          fi

      - name: Upload Phase 2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 3A: Audio Generation (Independent Job)
  phase3-audio-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      audio_file: ${{ steps.audio-task.outputs.audio_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Audio Generation Task
        id: audio-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3: Audio generation started" >> "${PROJECT_DIR}/logs/execution.log"
          
          AUDIO_PROMPT="Generate Japanese news narration: Professional announcer voice, clear pronunciation, -14LUFS level. Input: ${SCRIPT_DATA}. Output: narration.mp3"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2s-kamui-minimax-speech,Write,Read" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$AUDIO_PROMPT"
          
          # Check for generated audio
          AUDIO_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*.mp3" -o -name "*.wav" | head -1)
          if [ -n "$AUDIO_FILE" ]; then
            echo "audio_file=${AUDIO_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Audio generation completed: ${AUDIO_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Audio file not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "audio_file=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Audio artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-audio-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 3B: Individual Image Generation Jobs (1-5)
  phase3-image1-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      image1_path: ${{ steps.image1-task.outputs.image1_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Image 1 Generation Task
        id: image1-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3B1: Image 1 generation started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/images/individual"
          
          IMAGE1_PROMPT="単独画像生成タスク（Image 1）：
          
          入力: ${SCRIPT_DATA}
          目標: シーン1用の単独高品質ニュース画像生成
          
          要件:
          1. プロフェッショナルなニュース番組スタイル
          2. 信頼性を表現する青系と緊急性の赤系を効果的に活用
          3. Rule of thirdsに従った構図
          4. 16:9アスペクト比、1920x1080解像度
          5. ニュース内容と一致する視覚的インパクト
          
          処理: スクリプトのシーン1用の画像プロンプトを使用して1枚の画像生成
          出力ファイル: ${PROJECT_DIR}/media/images/individual/scene1.png
          メタデータ: ${PROJECT_DIR}/metadata/image1_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$IMAGE1_PROMPT"
          
          # Check for generated image
          IMAGE1_FILE=$(find "${PROJECT_DIR}/media/images/individual" -name "*scene1*" -o -name "*1.*" | head -1)
          if [ -n "$IMAGE1_FILE" ] && [ -f "$IMAGE1_FILE" ]; then
            echo "image1_path=${IMAGE1_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Image 1 completed: ${IMAGE1_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Image 1 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "image1_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Image 1 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-image1-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase3-image2-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      image2_path: ${{ steps.image2-task.outputs.image2_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Image 2 Generation Task
        id: image2-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3B2: Image 2 generation started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/images/individual"
          
          IMAGE2_PROMPT="単独画像生成タスク（Image 2）：
          
          入力: ${SCRIPT_DATA}
          目標: シーン2用の単独高品質ニュース画像生成
          
          要件:
          1. プロフェッショナルなニュース番組スタイル
          2. 信頼性を表現する青系と緊急性の赤系を効果的に活用
          3. Rule of thirdsに従った構図
          4. 16:9アスペクト比、1920x1080解像度
          5. ニュース内容と一致する視覚的インパクト
          
          処理: スクリプトのシーン2用の画像プロンプトを使用して1枚の画像生成
          出力ファイル: ${PROJECT_DIR}/media/images/individual/scene2.png
          メタデータ: ${PROJECT_DIR}/metadata/image2_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$IMAGE2_PROMPT"
          
          # Check for generated image
          IMAGE2_FILE=$(find "${PROJECT_DIR}/media/images/individual" -name "*scene2*" -o -name "*2.*" | head -1)
          if [ -n "$IMAGE2_FILE" ] && [ -f "$IMAGE2_FILE" ]; then
            echo "image2_path=${IMAGE2_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Image 2 completed: ${IMAGE2_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Image 2 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "image2_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Image 2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-image2-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase3-image3-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      image3_path: ${{ steps.image3-task.outputs.image3_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Image 3 Generation Task
        id: image3-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3B3: Image 3 generation started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/images/individual"
          
          IMAGE3_PROMPT="Generate scene 3 news image: Professional news style, 16:9, 1920x1080, blue/red colors, rule of thirds. Output: scene3.png"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$IMAGE3_PROMPT"
          
          # Check for generated image with graceful fallback
          IMAGE3_FILE=$(find "${PROJECT_DIR}/media/images/individual" -name "*scene3*" -o -name "*3.*" | head -1)
          if [ -n "$IMAGE3_FILE" ] && [ -f "$IMAGE3_FILE" ]; then
            echo "image3_path=${IMAGE3_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Image 3 completed: ${IMAGE3_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Image 3 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "image3_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Image 3 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-image3-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase3-image4-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      image4_path: ${{ steps.image4-task.outputs.image4_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Image 4 Generation Task
        id: image4-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3B4: Image 4 generation started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/images/individual"
          
          IMAGE4_PROMPT="単独画像生成タスク（Image 4）：
          
          入力: ${SCRIPT_DATA}
          目標: シーン4用の単独高品質ニュース画像生成
          
          要件:
          1. プロフェッショナルなニュース番組スタイル
          2. 信頼性を表現する青系と緊急性の赤系を効果的に活用
          3. Rule of thirdsに従った構図
          4. 16:9アスペクト比、1920x1080解像度
          5. ニュース内容と一致する視覚的インパクト
          
          処理: スクリプトのシーン4用の画像プロンプトを使用して1枚の画像生成
          出力ファイル: ${PROJECT_DIR}/media/images/individual/scene4.png
          メタデータ: ${PROJECT_DIR}/metadata/image4_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$IMAGE4_PROMPT"
          
          # Check for generated image
          IMAGE4_FILE=$(find "${PROJECT_DIR}/media/images/individual" -name "*scene4*" -o -name "*4.*" | head -1)
          if [ -n "$IMAGE4_FILE" ] && [ -f "$IMAGE4_FILE" ]; then
            echo "image4_path=${IMAGE4_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Image 4 completed: ${IMAGE4_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Image 4 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "image4_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Image 4 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-image4-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase3-image5-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      image5_path: ${{ steps.image5-task.outputs.image5_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Image 5 Generation Task
        id: image5-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 3B5: Image 5 generation started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/images/individual"
          
          IMAGE5_PROMPT="単独画像生成タスク（Image 5）：
          
          入力: ${SCRIPT_DATA}
          目標: シーン5用の単独高品質ニュース画像生成
          
          要件:
          1. プロフェッショナルなニュース番組スタイル
          2. 信頼性を表現する青系と緊急性の赤系を効果的に活用
          3. Rule of thirdsに従った構図
          4. 16:9アスペクト比、1920x1080解像度
          5. ニュース内容と一致する視覚的インパクト
          
          処理: スクリプトのシーン5用の画像プロンプトを使用して1枚の画像生成
          出力ファイル: ${PROJECT_DIR}/media/images/individual/scene5.png
          メタデータ: ${PROJECT_DIR}/metadata/image5_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$IMAGE5_PROMPT"
          
          # Check for generated image
          IMAGE5_FILE=$(find "${PROJECT_DIR}/media/images/individual" -name "*scene5*" -o -name "*5.*" | head -1)
          if [ -n "$IMAGE5_FILE" ] && [ -f "$IMAGE5_FILE" ]; then
            echo "image5_path=${IMAGE5_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Image 5 completed: ${IMAGE5_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Image 5 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "image5_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Image 5 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-image5-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 3C: BGM Generation (Independent Job) - Relocated from Phase 5
  phase3-bgm-generation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation]
    outputs:
      bgm_file: ${{ steps.bgm.outputs.bgm_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: BGM Generation Task
        id: bgm
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          echo "[$(date)] Phase 3C: BGM generation started" >> "${PROJECT_DIR}/logs/execution.log"
          
          BGM_PROMPT="Generate professional news BGM: 60s instrumental, subtle, trust/urgency balance, -25dB below narration. Output: bgm.mp3"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2m-kamui-lyria,Write,Read" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$BGM_PROMPT"
          
          # Check for generated BGM with graceful fallback
          BGM_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*bgm*" -o -name "*background*" | head -1)
          if [ -n "$BGM_FILE" ]; then
            echo "bgm_file=${BGM_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] BGM generation completed: ${BGM_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: BGM file not generated, continuing without BGM" >> "${PROJECT_DIR}/logs/execution.log"
            echo "bgm_file=none" >> $GITHUB_OUTPUT
          fi

      - name: Upload BGM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase3-bgm-generation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 4: Individual Image→Video Conversion Jobs (1-5)
  phase4-image1-to-video1:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-image1-generation]
    outputs:
      video1_path: ${{ steps.video1-task.outputs.video1_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Image 1 to Video 1 Conversion Task
        id: video1-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          IMAGE1_PATH="${{ needs.phase3-image1-generation.outputs.image1_path }}"
          echo "[$(date)] Phase 4.1: Image 1 → Video 1 conversion started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/videos/individual"
          
          VIDEO1_PROMPT="Convert image to 8s news video: Natural motion, professional quality, 16:9 aspect ratio. Output: scene1_video.mp4"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "i2v-kamui-veo3-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$VIDEO1_PROMPT"
          
          # Check for generated video with retry mechanism
          for retry in 1 2; do
            VIDEO1_FILE=$(find "${PROJECT_DIR}/media/videos/individual" -name "*scene1*" -o -name "*video1*" | head -1)
            if [ -n "$VIDEO1_FILE" ] && [ -f "$VIDEO1_FILE" ]; then
              echo "video1_path=${VIDEO1_FILE}" >> $GITHUB_OUTPUT
              echo "[$(date)] Video 1 completed: ${VIDEO1_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
              break
            elif [ $retry -eq 1 ]; then
              echo "[$(date)] Retry $retry: Video 1 not found, retrying with alternative service..." >> "${PROJECT_DIR}/logs/execution.log"
              npx @anthropic-ai/claude-code \
                --mcp-config ".claude/mcp-kamuicode.json" \
                --allowedTools "i2v-kamui-hailuo-02-fast,Write,Read" \
                --max-turns 40 \
                --permission-mode "acceptEdits" \
                -p "$VIDEO1_PROMPT"
            else
              echo "[$(date)] WARNING: Video 1 not generated after retries, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
              echo "video1_path=placeholder" >> $GITHUB_OUTPUT
            fi
          done

      - name: Upload Video 1 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase4-image1-to-video1
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase4-image2-to-video2:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-image2-generation]
    outputs:
      video2_path: ${{ steps.video2-task.outputs.video2_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Image 2 to Video 2 Conversion Task
        id: video2-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          IMAGE2_PATH="${{ needs.phase3-image2-generation.outputs.image2_path }}"
          echo "[$(date)] Phase 4.2: Image 2 → Video 2 conversion started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/videos/individual"
          
          VIDEO2_PROMPT="単独画像→動画変換タスク（Video 2）：
          
          入力画像: ${IMAGE2_PATH}
          目標: シーン2の画像を6-8秒の動画クリップに変換
          
          要件:
          1. ニュース番組らしい自然な動き
          2. 過度なモーションを避けた上品な動き
          3. static, pan, zoomの効果的活用
          4. プロフェッショナルな品質基準
          5. 16:9アスペクト比維持
          
          処理: Image 2から Video 2への即座変換（URL有効期限対策）
          出力ファイル: ${PROJECT_DIR}/media/videos/individual/scene2_video.mp4
          メタデータ: ${PROJECT_DIR}/metadata/video2_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "i2v-kamui-veo3-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$VIDEO2_PROMPT"
          
          # Check for generated video
          VIDEO2_FILE=$(find "${PROJECT_DIR}/media/videos/individual" -name "*scene2*" -o -name "*video2*" | head -1)
          if [ -n "$VIDEO2_FILE" ] && [ -f "$VIDEO2_FILE" ]; then
            echo "video2_path=${VIDEO2_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Video 2 completed: ${VIDEO2_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Video 2 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "video2_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Video 2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase4-image2-to-video2
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase4-image3-to-video3:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-image3-generation]
    outputs:
      video3_path: ${{ steps.video3-task.outputs.video3_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Image 3 to Video 3 Conversion Task
        id: video3-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          IMAGE3_PATH="${{ needs.phase3-image3-generation.outputs.image3_path }}"
          echo "[$(date)] Phase 4.3: Image 3 → Video 3 conversion started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/videos/individual"
          
          VIDEO3_PROMPT="単独画像→動画変換タスク（Video 3）：
          
          入力画像: ${IMAGE3_PATH}
          目標: シーン3の画像を6-8秒の動画クリップに変換
          
          要件:
          1. ニュース番組らしい自然な動き
          2. 過度なモーションを避けた上品な動き
          3. static, pan, zoomの効果的活用
          4. プロフェッショナルな品質基準
          5. 16:9アスペクト比維持
          
          処理: Image 3から Video 3への即座変換（URL有効期限対策）
          出力ファイル: ${PROJECT_DIR}/media/videos/individual/scene3_video.mp4
          メタデータ: ${PROJECT_DIR}/metadata/video3_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "i2v-kamui-veo3-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$VIDEO3_PROMPT"
          
          # Check for generated video
          VIDEO3_FILE=$(find "${PROJECT_DIR}/media/videos/individual" -name "*scene3*" -o -name "*video3*" | head -1)
          if [ -n "$VIDEO3_FILE" ] && [ -f "$VIDEO3_FILE" ]; then
            echo "video3_path=${VIDEO3_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Video 3 completed: ${VIDEO3_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Video 3 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "video3_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Video 3 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase4-image3-to-video3
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase4-image4-to-video4:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-image4-generation]
    outputs:
      video4_path: ${{ steps.video4-task.outputs.video4_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Image 4 to Video 4 Conversion Task
        id: video4-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          IMAGE4_PATH="${{ needs.phase3-image4-generation.outputs.image4_path }}"
          echo "[$(date)] Phase 4.4: Image 4 → Video 4 conversion started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/videos/individual"
          
          VIDEO4_PROMPT="単独画像→動画変換タスク（Video 4）：
          
          入力画像: ${IMAGE4_PATH}
          目標: シーン4の画像を6-8秒の動画クリップに変換
          
          要件:
          1. ニュース番組らしい自然な動き
          2. 過度なモーションを避けた上品な動き
          3. static, pan, zoomの効果的活用
          4. プロフェッショナルな品質基準
          5. 16:9アスペクト比維持
          
          処理: Image 4から Video 4への即座変換（URL有効期限対策）
          出力ファイル: ${PROJECT_DIR}/media/videos/individual/scene4_video.mp4
          メタデータ: ${PROJECT_DIR}/metadata/video4_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "i2v-kamui-veo3-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$VIDEO4_PROMPT"
          
          # Check for generated video
          VIDEO4_FILE=$(find "${PROJECT_DIR}/media/videos/individual" -name "*scene4*" -o -name "*video4*" | head -1)
          if [ -n "$VIDEO4_FILE" ] && [ -f "$VIDEO4_FILE" ]; then
            echo "video4_path=${VIDEO4_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Video 4 completed: ${VIDEO4_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Video 4 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "video4_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Video 4 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase4-image4-to-video4
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  phase4-image5-to-video5:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-image5-generation]
    outputs:
      video5_path: ${{ steps.video5-task.outputs.video5_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Image 5 to Video 5 Conversion Task
        id: video5-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          IMAGE5_PATH="${{ needs.phase3-image5-generation.outputs.image5_path }}"
          echo "[$(date)] Phase 4.5: Image 5 → Video 5 conversion started" >> "${PROJECT_DIR}/logs/execution.log"
          mkdir -p "${PROJECT_DIR}/media/videos/individual"
          
          VIDEO5_PROMPT="単独画像→動画変換タスク（Video 5）：
          
          入力画像: ${IMAGE5_PATH}
          目標: シーン5の画像を6-8秒の動画クリップに変換
          
          要件:
          1. ニュース番組らしい自然な動き
          2. 過度なモーションを避けた上品な動き
          3. static, pan, zoomの効果的活用
          4. プロフェッショナルな品質基準
          5. 16:9アスペクト比維持
          
          処理: Image 5から Video 5への即座変換（URL有効期限対策）
          出力ファイル: ${PROJECT_DIR}/media/videos/individual/scene5_video.mp4
          メタデータ: ${PROJECT_DIR}/metadata/video5_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "i2v-kamui-veo3-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$VIDEO5_PROMPT"
          
          # Check for generated video
          VIDEO5_FILE=$(find "${PROJECT_DIR}/media/videos/individual" -name "*scene5*" -o -name "*video5*" | head -1)
          if [ -n "$VIDEO5_FILE" ] && [ -f "$VIDEO5_FILE" ]; then
            echo "video5_path=${VIDEO5_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Video 5 completed: ${VIDEO5_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] WARNING: Video 5 not generated, creating placeholder" >> "${PROJECT_DIR}/logs/execution.log"
            echo "video5_path=placeholder" >> $GITHUB_OUTPUT
          fi

      - name: Upload Video 5 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase4-image5-to-video5
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/


  # Phase 5: Opening Creation
  phase5-opening-creation:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-audio-generation, phase3-bgm-generation, phase4-image1-to-video1, phase4-image2-to-video2, phase4-image3-to-video3, phase4-image4-to-video4, phase4-image5-to-video5]
    outputs:
      opening_video: ${{ steps.opening-task.outputs.opening_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Opening Creation Task
        id: opening-task
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          SCRIPT_DATA="${{ needs.phase2-content-creation.outputs.script_data }}"
          echo "[$(date)] Phase 5: Opening creation started" >> "${PROJECT_DIR}/logs/execution.log"
          
          OPENING_PROMPT="オープニング・タイトル作成タスク：
          
          入力: ${SCRIPT_DATA}
          目標: 最初の3秒で視聴継続の50%を決める インパクトのあるオープニング
          
          要件:
          1. 瞬時に注意を引く視覚的インパクト
          2. ニュース番組としての信頼性表現
          3. 信頼性（青系）と緊急性（赤系）の色彩活用
          4. 3秒以内にトピックを明示
          5. プロフェッショナルなニュース番組スタイル
          
          処理手順:
          1. インパクトのあるタイトル画像を生成
          2. 画像を動画に変換（3-5秒）
          
          出力: ${PROJECT_DIR}/media/videos/opening.mp4
          メタデータ: ${PROJECT_DIR}/metadata/opening_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "t2i-kamui-imagen3,i2v-kamui-hailuo-02-fast,Write,Read" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$OPENING_PROMPT"
          
          # Check for generated opening video
          OPENING_FILE=$(find "${PROJECT_DIR}/media/videos" -name "*opening*" | head -1)
          if [ -n "$OPENING_FILE" ]; then
            echo "opening_video=${OPENING_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Opening creation completed: ${OPENING_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] ERROR: Opening video not generated" >> "${PROJECT_DIR}/logs/execution.log"
            exit 1
          fi

      - name: Upload Opening Creation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase5-opening-creation
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 6: Integration - Video Concatenation
  phase6-integration:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase2-content-creation, phase3-bgm-generation, phase4-image1-to-video1, phase4-image2-to-video2, phase4-image3-to-video3, phase4-image4-to-video4, phase4-image5-to-video5, phase5-opening-creation]
    outputs:
      concatenated_video: ${{ steps.concat.outputs.concatenated_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Video Concatenation
        id: concat
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          echo "[$(date)] Phase 6: Video concatenation started" >> "${PROJECT_DIR}/logs/execution.log"
          
          CONCAT_PROMPT="全動画クリップ結合タスク：
          
          入力ファイル (個別動画):
          - オープニング: ${PROJECT_DIR}/media/videos/opening.mp4
          - 個別動画1: ${{ needs.phase4-image1-to-video1.outputs.video1_path }}
          - 個別動画2: ${{ needs.phase4-image2-to-video2.outputs.video2_path }}
          - 個別動画3: ${{ needs.phase4-image3-to-video3.outputs.video3_path }}
          - 個別動画4: ${{ needs.phase4-image4-to-video4.outputs.video4_path }}
          - 個別動画5: ${{ needs.phase4-image5-to-video5.outputs.video5_path }}
          
          目標: プロフェッショナルなニュース動画として統合
          
          要件:
          1. 適切な順序での個別クリップ結合
          2. スムーズなトランジション（fade, cut）
          3. 60秒以内の総時間
          4. ニュース動画のカット間隔（3-8秒）
          5. 情報の流れに沿った自然な構成
          
          処理順序:
          1. オープニング → 個別動画1 → 個別動画2 → 個別動画3 → 個別動画4 → 個別動画5
          2. 各クリップ間にfadeトランジション追加
          3. 総時間の調整（60秒以内）
          
          出力: ${PROJECT_DIR}/media/videos/concatenated.mp4
          メタデータ: ${PROJECT_DIR}/metadata/concatenation_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Bash,Write,Read" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$CONCAT_PROMPT"
          
          # Check for concatenated video
          CONCAT_FILE=$(find "${PROJECT_DIR}/media/videos" -name "*concatenated*" -o -name "*final*" | head -1)
          if [ -n "$CONCAT_FILE" ]; then
            echo "concatenated_video=${CONCAT_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Video concatenation completed: ${CONCAT_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] ERROR: Concatenated video not generated" >> "${PROJECT_DIR}/logs/execution.log"
            exit 1
          fi

      - name: Upload Phase 6 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase6-integration
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 7: Final Audio Mix
  phase7-audio-mix:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase3-audio-generation, phase3-bgm-generation, phase6-integration]
    outputs:
      final_video: ${{ steps.mix.outputs.final_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Audio and BGM Mixing
        id: mix
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          CONCATENATED_VIDEO="${{ needs.phase6-integration.outputs.concatenated_video }}"
          echo "[$(date)] Phase 7: Audio mixing started" >> "${PROJECT_DIR}/logs/execution.log"
          
          # Find audio files
          NARRATION_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*narration*" -o -name "*speech*" | head -1)
          BGM_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*bgm*" -o -name "*background*" | head -1)
          
          MIX_PROMPT="音声・BGMミックスタスク：
          
          入力ファイル:
          - 動画: ${CONCATENATED_VIDEO}
          - ナレーション: ${NARRATION_FILE}
          - BGM: ${BGM_FILE}
          
          目標: プロフェッショナルなニュース番組の音響品質実現
          
          要件:
          1. ナレーション音声レベル: -14LUFS
          2. BGMレベル: ナレーションより20-25dB低く
          3. 音声の明瞭性最優先
          4. 適切な音響バランス
          5. プロフェッショナルな品質基準
          
          処理:
          1. ナレーションを動画に同期
          2. BGMを適切なレベルでミックス
          3. 音声レベルの調整と最適化
          
          出力: ${PROJECT_DIR}/final/professional_news_video.mp4
          メタデータ: ${PROJECT_DIR}/metadata/final_mix_metadata.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Bash,Write,Read" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "$MIX_PROMPT"
          
          # Check for final video
          FINAL_FILE=$(find "${PROJECT_DIR}/final" -name "*.mp4" | head -1)
          if [ -n "$FINAL_FILE" ]; then
            echo "final_video=${FINAL_FILE}" >> $GITHUB_OUTPUT
            echo "[$(date)] Audio mixing completed: ${FINAL_FILE}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "[$(date)] ERROR: Final video not generated" >> "${PROJECT_DIR}/logs/execution.log"
            exit 1
          fi

      - name: Upload Phase 7 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phase7-audio-mix
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

  # Phase 8: Quality Assurance and Final Output
  phase8-quality-assurance:
    runs-on: ubuntu-latest
    needs: [phase1-foundation, phase7-audio-mix]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/
          merge-multiple: true

      - name: Final Quality Check and Export
        id: quality-check
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          FINAL_VIDEO="${{ needs.phase7-audio-mix.outputs.final_video }}"
          echo "[$(date)] Phase 8: Quality assurance started" >> "${PROJECT_DIR}/logs/execution.log"
          
          QC_PROMPT="最終品質チェック・書き出しタスク：
          
          入力: ${FINAL_VIDEO}
          目標: プロフェッショナルなニュース動画として公開準備完了
          
          チェック項目:
          1. 音声レベル確認（-14LUFS基準）
          2. 画質・解像度統一確認
          3. 情報の正確性チェック
          4. 60秒制限時間準拠確認
          5. ニュース番組品質基準満了
          
          最終出力:
          1. 品質チェックレポート: ${PROJECT_DIR}/final/quality_report.json
          2. 最終動画確認・最適化
          3. 配信準備完了状態での保存
          
          品質基準:
          - 技術仕様: 1920x1080, 30fps, H.264
          - 音声: -14LUFS, 明瞭で聞き取りやすい
          - 時間: 60秒以内
          - 内容: 正確で信頼性の高い情報"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Bash,Write,Read" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            -p "$QC_PROMPT"
          
          echo "[$(date)] Quality assurance completed" >> "${PROJECT_DIR}/logs/execution.log"
          
          # Create final summary
          echo "=== PROFESSIONAL NEWS VIDEO CREATION COMPLETED ===" >> "${PROJECT_DIR}/final/completion_report.txt"
          echo "Project: ${{ inputs.project_name }}" >> "${PROJECT_DIR}/final/completion_report.txt"
          echo "Topic: ${{ inputs.news_topic }}" >> "${PROJECT_DIR}/final/completion_report.txt"
          echo "Completed: $(date)" >> "${PROJECT_DIR}/final/completion_report.txt"
          echo "Final video: ${FINAL_VIDEO}" >> "${PROJECT_DIR}/final/completion_report.txt"

      - name: Upload Final Results
        uses: actions/upload-artifact@v4
        with:
          name: final-professional-news-video
          path: ${{ needs.phase1-foundation.outputs.project_dir }}/

      - name: Create workflow summary
        run: |
          PROJECT_DIR="${{ needs.phase1-foundation.outputs.project_dir }}"
          echo "## 🎬 Professional News Video Creation Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Topic:** ${{ inputs.news_topic }}" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** 60 seconds professional news video" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Workflow Phases Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 1: Information Gathering & Research" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 2: Script & Structure Creation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 3: Parallel Audio & Image Generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 4: Parallel Image Batch 2 & Video Conversion" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 5: Parallel Video Production & BGM Creation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 6: Video Integration & Concatenation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 7: Professional Audio Mixing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase 8: Quality Assurance & Final Export" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Output Location" >> $GITHUB_STEP_SUMMARY
          echo "All deliverables saved to: \`${PROJECT_DIR}/final/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Professional Quality Standards Met" >> $GITHUB_STEP_SUMMARY
          echo "- 📺 News broadcast quality visuals" >> $GITHUB_STEP_SUMMARY
          echo "- 🎙️ Professional narrator-style audio (-14LUFS)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ Optimized 60-second information delivery" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Consistent professional styling" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Multi-source verified information" >> $GITHUB_STEP_SUMMARY