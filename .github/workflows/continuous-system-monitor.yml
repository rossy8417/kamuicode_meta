name: Workflow Companion Monitor
run-name: 👥 Monitoring workflow for run ${{ github.event.workflow_run.run_number || 'manual' }}

on:
  workflow_run:
    workflows: ["Kamuicode Meta Generator (Self-Healing)", "Integrated Multimedia Pipeline"]
    types:
      - requested
    # メインワークフロー開始時に監視開始
  workflow_dispatch:
    inputs:
      target_run_id:
        description: '監視対象のワークフローRUN ID'
        required: false
        type: string
      monitoring_enabled:
        description: 'モニタリングを有効にする'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  actions: read
  issues: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # メインワークフロー連動監視
  companion-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && github.event.inputs.monitoring_enabled == 'true')
    outputs:
      critical_issue: ${{ steps.monitor.outputs.critical_issue }}
      immediate_fix_needed: ${{ steps.monitor.outputs.immediate_fix_needed }}
      issue_severity: ${{ steps.monitor.outputs.issue_severity }}
      affected_systems: ${{ steps.monitor.outputs.affected_systems }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Companion Monitoring Loop
        id: monitor
        run: |
          echo "👥 Starting companion monitoring for main workflow..."
          
          # 監視対象のワークフローRUN IDを特定
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            TARGET_RUN_ID="${{ github.event.workflow_run.id }}"
            TARGET_RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          else
            TARGET_RUN_ID="${{ github.event.inputs.target_run_id }}"
            TARGET_RUN_NUMBER="manual"
          fi
          
          echo "🎯 Monitoring target: Run ID $TARGET_RUN_ID (Run #$TARGET_RUN_NUMBER)"
          
          mkdir -p .meta/companion-monitoring/$TARGET_RUN_NUMBER
          
          CRITICAL_ISSUE=false
          IMMEDIATE_FIX_NEEDED=false
          ISSUE_SEVERITY="normal"
          AFFECTED_SYSTEMS=""
          
          # メインワークフローの完了まで継続監視
          echo "🔄 Starting continuous monitoring loop..."
          MONITORING_START=$(date +%s)
          MONITORING_DURATION=0
          CHECK_COUNT=0
          
          while true; do
            CHECK_COUNT=$((CHECK_COUNT + 1))
            CURRENT_TIME=$(date +%s)
            MONITORING_DURATION=$((CURRENT_TIME - MONITORING_START))
            
            echo "🔍 Check #$CHECK_COUNT - Monitoring duration: ${MONITORING_DURATION}s"
            
            # メインワークフローの状態を確認
            if command -v gh &> /dev/null && [ -n "$TARGET_RUN_ID" ]; then
              WORKFLOW_STATUS=$(gh run view $TARGET_RUN_ID --json status,conclusion --jq '.status + ":" + (.conclusion // "null")' 2>/dev/null || echo "unknown:null")
              echo "📊 Main workflow status: $WORKFLOW_STATUS"
              
              case "$WORKFLOW_STATUS" in
                "completed:success")
                  echo "✅ Main workflow completed successfully - ending monitoring"
                  break
                  ;;
                "completed:failure")
                  echo "❌ Main workflow failed - flagging for intervention"
                  CRITICAL_ISSUE=true
                  IMMEDIATE_FIX_NEEDED=true
                  ISSUE_SEVERITY="high"
                  AFFECTED_SYSTEMS="main-workflow-failure"
                  break
                  ;;
                "completed:cancelled")
                  echo "🚫 Main workflow was cancelled - ending monitoring"
                  break
                  ;;
                "in_progress:null"|"queued:null")
                  echo "🔄 Main workflow still running - continuing monitoring"
                  ;;
                *)
                  echo "❓ Unknown workflow status: $WORKFLOW_STATUS"
                  ;;
              esac
            else
              echo "⚠️ Cannot check main workflow status"
            fi
            
            # 最大監視時間の制限（5分に短縮）
            if [ $MONITORING_DURATION -gt 300 ]; then
              echo "⏰ Maximum monitoring time reached (5min) - ending monitoring"
              break
            fi
            
            # 60秒間隔で監視（負荷軽減）
            echo "💤 Waiting 60 seconds before next check..."
            sleep 60
            
          done
          
          echo "🏁 Monitoring completed after $CHECK_COUNT checks (${MONITORING_DURATION}s)"
          
          # 監視結果の記録
          cat > .meta/companion-monitoring/$TARGET_RUN_NUMBER/monitoring-session.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "target_run_id": "$TARGET_RUN_ID",
            "target_run_number": "$TARGET_RUN_NUMBER",
            "monitoring_duration_seconds": $MONITORING_DURATION,
            "check_count": $CHECK_COUNT,
            "final_status": "$WORKFLOW_STATUS",
            "critical_issue": $CRITICAL_ISSUE,
            "immediate_fix_needed": $IMMEDIATE_FIX_NEEDED,
            "issue_severity": "$ISSUE_SEVERITY",
            "affected_systems": "$AFFECTED_SYSTEMS"
          }
          EOF
          
          # GitHub Actions の出力に設定
          echo "critical_issue=$CRITICAL_ISSUE" >> $GITHUB_OUTPUT
          echo "immediate_fix_needed=$IMMEDIATE_FIX_NEEDED" >> $GITHUB_OUTPUT
          echo "issue_severity=$ISSUE_SEVERITY" >> $GITHUB_OUTPUT
          echo "affected_systems=$AFFECTED_SYSTEMS" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_ISSUE" = true ]; then
            echo "🚨 CRITICAL ISSUE DETECTED during monitoring"
          else
            echo "✅ Monitoring completed successfully"
          fi

  # 問題検出時の自動対応
  auto-response:
    needs: companion-monitoring
    runs-on: ubuntu-latest
    if: needs.companion-monitoring.outputs.immediate_fix_needed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Trigger Auto-Fix Workflow
        run: |
          echo "🚨 Critical issue detected - triggering auto-fix workflow..."
          
          if command -v gh &> /dev/null; then
            gh workflow run auto-fix-deployment.yml \
              --field force_analysis=true \
              --field fix_mode=emergency 2>/dev/null || echo "Auto-fix trigger failed"
          fi
          
          echo "🔧 Auto-fix workflow triggered for issue: ${{ needs.companion-monitoring.outputs.affected_systems }}"