name: "Meta Workflow Executor v10 with Claude SDK"
run-name: "🚀 Meta Workflow v10 | Issue #${{ inputs.issue_number }} | ${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for workflow generation request'
        required: true
        default: '60'

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  # ===========================================
  # PHASE 1: ISSUE ANALYSIS & VALIDATION
  # ===========================================
  
  validate-trigger:
    name: "🔍 Issue Analysis & Validation"
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.extract.outputs.issue_number }}
      issue_body: ${{ steps.extract.outputs.issue_body }}
      issue_title: ${{ steps.extract.outputs.issue_title }}
      request_type: ${{ steps.analyze.outputs.request_type }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Extract Issue Information
        id: extract
        run: |
          echo "🔍 Analyzing Issue #${{ inputs.issue_number }}..."
          
          # Get issue details using GitHub CLI
          ISSUE_DATA=$(gh issue view ${{ inputs.issue_number }} --json title,body,number --jq '{title: .title, body: .body, number: .number}')
          
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          ISSUE_NUMBER=$(echo "$ISSUE_DATA" | jq -r '.number')
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          {
            echo 'issue_title<<EOF'
            echo "$ISSUE_TITLE"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          {
            echo 'issue_body<<EOF'
            echo "$ISSUE_BODY"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          echo "✅ Issue #$ISSUE_NUMBER validated: $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Analyze Request Type
        id: analyze
        run: |
          echo "📊 Analyzing request type from issue content..."
          
          # Save issue body to a file to avoid shell interpretation issues
          cat << 'ISSUE_CONTENT_EOF' > /tmp/issue_body.txt
          ${{ steps.extract.outputs.issue_body }}
          ISSUE_CONTENT_EOF
          
          REQUEST_TYPE="unknown"
          
          # Determine request type based on content
          if grep -i "video" /tmp/issue_body.txt > /dev/null; then
            REQUEST_TYPE="video-generation"
          elif grep -i "image" /tmp/issue_body.txt > /dev/null; then
            REQUEST_TYPE="image-generation"
          elif grep -i "audio\|music" /tmp/issue_body.txt > /dev/null; then
            REQUEST_TYPE="audio-generation"
          elif grep -i "data\|analysis" /tmp/issue_body.txt > /dev/null; then
            REQUEST_TYPE="data-analysis"
          elif grep -i "blog\|article" /tmp/issue_body.txt > /dev/null; then
            REQUEST_TYPE="content-creation"
          fi
          
          echo "request_type=$REQUEST_TYPE" >> $GITHUB_OUTPUT
          echo "🎯 Request type identified: $REQUEST_TYPE"

  # ===========================================
  # PHASE 2: ULTRA-DETAILED TASK DECOMPOSITION
  # ===========================================
  
  ultra-task-decomposition:
    name: "🧠 Ultra-Detailed Task Decomposition"
    runs-on: ubuntu-latest
    needs: validate-trigger
    outputs:
      decomposed_tasks: ${{ steps.decompose.outputs.decomposed_tasks }}
      task_count: ${{ steps.decompose.outputs.task_count }}
      execution_phases: ${{ steps.decompose.outputs.execution_phases }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: Perform Ultra-Detailed Task Decomposition
        id: decompose
        run: |
          echo "🧠 Starting ultra-detailed task decomposition..."
          
          # Create project directory
          mkdir -p projects/current-session/{logs,metadata,scripts}
          
          # Save issue body to file
          cat << 'ISSUE_BODY_EOF' > /tmp/issue_body_safe.txt
          ${{ needs.validate-trigger.outputs.issue_body }}
          ISSUE_BODY_EOF
          
          # Issue details
          ISSUE_TITLE="${{ needs.validate-trigger.outputs.issue_title }}"
          ISSUE_NUMBER="${{ needs.validate-trigger.outputs.issue_number }}"
          REQUEST_TYPE="${{ needs.validate-trigger.outputs.request_type }}"
          
          echo "📋 Issue: $ISSUE_TITLE"
          echo "🔢 Number: #$ISSUE_NUMBER"
          echo "📊 Type: $REQUEST_TYPE"
          
          # Dynamic capability detection from issue content
          echo "🔍 Detecting required capabilities..."
          
          CAPABILITIES=""
          
          # Video capabilities
          if grep -qi "動画\|video\|ビデオ" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}video-generation,"
            echo "  ✓ Video generation detected"
          fi
          
          # Image capabilities
          if grep -qi "画像\|image\|写真\|サムネイル" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}image-generation,"
            echo "  ✓ Image generation detected"
          fi
          
          # Audio capabilities
          if grep -qi "音声\|audio\|sound\|BGM\|音楽" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}audio-generation,"
            echo "  ✓ Audio generation detected"
          fi
          
          # Search capabilities
          if grep -qi "検索\|search\|調査\|トレンド" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}web-search,"
            echo "  ✓ Web search detected"
          fi
          
          # Analysis capabilities
          if grep -qi "分析\|analysis\|データ" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}data-analysis,"
            echo "  ✓ Data analysis detected"
          fi
          
          # News capabilities
          if grep -qi "ニュース\|news\|最新" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}news-planning,"
            echo "  ✓ News planning detected"
          fi
          
          # Speech capabilities
          if grep -qi "ナレーション\|speech\|読み上げ" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}text-to-speech,"
            echo "  ✓ Text-to-speech detected"
          fi
          
          # Editing capabilities
          if grep -qi "編集\|editing\|結合" /tmp/issue_body_safe.txt; then
            CAPABILITIES="${CAPABILITIES}video-editing,"
            echo "  ✓ Video editing detected"
          fi
          
          # Remove trailing comma
          CAPABILITIES=$(echo "$CAPABILITIES" | sed 's/,$//')
          
          # Determine complexity
          WORD_COUNT=$(wc -w < /tmp/issue_body_safe.txt)
          if [ "$WORD_COUNT" -gt 200 ]; then
            COMPLEXITY="complex"
            DURATION="45-60 minutes"
          elif [ "$WORD_COUNT" -gt 100 ]; then
            COMPLEXITY="medium"
            DURATION="20-40 minutes"
          else
            COMPLEXITY="simple"
            DURATION="10-20 minutes"
          fi
          
          echo ""
          echo "📊 Analysis Results:"
          echo "  - Capabilities: $CAPABILITIES"
          echo "  - Complexity: $COMPLEXITY"
          echo "  - Duration: $DURATION"
          
          # Try Claude Code SDK first (if available)
          if command -v claude &> /dev/null; then
            echo "🤖 Claude CLI is available, attempting intelligent task decomposition..."
            
            # Create Claude prompt
            cat > /tmp/claude_prompt.txt << 'CLAUDE_PROMPT_EOF'
あなたはMeta Workflow Generatorのタスク分解エージェントです。
以下のイシューから必要なタスクを分解し、適切なミニマルユニットを選択してください。

イシュー情報:
CLAUDE_PROMPT_EOF
            echo "タイトル: $ISSUE_TITLE" >> /tmp/claude_prompt.txt
            echo "内容:" >> /tmp/claude_prompt.txt
            cat /tmp/issue_body_safe.txt >> /tmp/claude_prompt.txt
            
            # Try Claude
            CLAUDE_RESPONSE=$(claude -p "$(cat /tmp/claude_prompt.txt)" --output-format json 2>&1 || echo '{}')
            
            if [ "$CLAUDE_RESPONSE" != "{}" ] && [ -n "$CLAUDE_RESPONSE" ]; then
              echo "✅ Claude Code SDK provided intelligent analysis"
              # Parse Claude response if successful
              # ... (Claude response parsing logic)
            else
              echo "⚠️ Claude Code SDK not available, using keyword-based detection"
            fi
          else
            echo "ℹ️ Claude CLI not installed, using keyword-based detection"
          fi
          
          # Generate workflow metadata
          mkdir -p projects/current-session/metadata
          
          # Export for Python script
          export CAPABILITIES="$CAPABILITIES"
          export COMPLEXITY="$COMPLEXITY"
          export REQUIREMENTS="General workflow request"
          
          # Use pre-created Python script to generate workflow
          if [ -f scripts/generate_dynamic_workflow.py ]; then
            cp scripts/generate_dynamic_workflow.py projects/current-session/scripts/
            cd projects/current-session/scripts
            python3 generate_dynamic_workflow.py
            cd ../../..
          else
            # Fallback: create workflow JSON directly
            cat > projects/current-session/metadata/dynamic_workflow.json << EOF
          {
            "metadata": {
              "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "complexity": "$COMPLEXITY",
              "total_units": $(echo "$CAPABILITIES" | tr ',' '\n' | wc -l),
              "capabilities_detected": [$(echo "$CAPABILITIES" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/' || echo '')]
            },
            "minimal_units": [
          EOF
            
            # Add units based on capabilities
            FIRST=true
            for cap in $(echo "$CAPABILITIES" | tr ',' ' '); do
              [ "$FIRST" = true ] && FIRST=false || echo "," >> projects/current-session/metadata/dynamic_workflow.json
              
              case $cap in
                "web-search")
                  UNIT_PATH="minimal-units/planning/web-search.yml"
                  ;;
                "news-planning")
                  UNIT_PATH="minimal-units/planning/news-planning.yml"
                  ;;
                "image-generation")
                  UNIT_PATH="minimal-units/media/image/t2i-imagen3.yml"
                  ;;
                "video-generation")
                  UNIT_PATH="minimal-units/media/video/t2v-veo3.yml"
                  ;;
                "audio-generation")
                  UNIT_PATH="minimal-units/media/audio/bgm-generate-mcp.yml"
                  ;;
                "text-to-speech")
                  UNIT_PATH="minimal-units/media/audio/t2s-minimax-turbo-mcp.yml"
                  ;;
                "video-editing")
                  UNIT_PATH="minimal-units/postprod/video-concat.yml"
                  ;;
                "data-analysis")
                  UNIT_PATH="minimal-units/planning/data-analysis.yml"
                  ;;
                *)
                  UNIT_PATH="minimal-units/planning/web-search.yml"
                  ;;
              esac
              
              cat >> projects/current-session/metadata/dynamic_workflow.json << EOF
              {
                "capability": "$cap",
                "unit_path": "$UNIT_PATH",
                "estimated_time": "3-5 minutes"
              }
          EOF
            done
            
            cat >> projects/current-session/metadata/dynamic_workflow.json << EOF
            ],
            "execution_pattern": "$( [ "$COMPLEXITY" = "simple" ] && echo "sequential" || echo "mixed_parallel" )"
          }
          EOF
          fi
          
          # Validate and output results
          if [ -f projects/current-session/metadata/dynamic_workflow.json ]; then
            UNIT_COUNT=$(jq '.minimal_units | length' projects/current-session/metadata/dynamic_workflow.json)
            EXECUTION_PATTERN=$(jq -r '.execution_pattern' projects/current-session/metadata/dynamic_workflow.json)
            
            echo "decomposed_tasks=$(cat projects/current-session/metadata/dynamic_workflow.json | jq -c .)" >> $GITHUB_OUTPUT
            echo "task_count=$UNIT_COUNT" >> $GITHUB_OUTPUT
            echo "execution_phases=$EXECUTION_PATTERN" >> $GITHUB_OUTPUT
            
            echo ""
            echo "✅ Dynamic workflow generated with $UNIT_COUNT minimal units"
            echo "📋 Execution pattern: $EXECUTION_PATTERN"
          else
            echo "❌ Dynamic workflow generation failed"
            exit 1
          fi

  # ===========================================
  # PHASE 3: DYNAMIC WORKFLOW GENERATION  
  # ===========================================
  
  dynamic-workflow-generation:
    name: "🚀 Dynamic Workflow Generation"
    runs-on: ubuntu-latest
    needs: [validate-trigger, ultra-task-decomposition]
    outputs:
      generated_workflow: ${{ steps.generation.outputs.generated_workflow }}
      workflow_path: ${{ steps.generation.outputs.workflow_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Generate Dynamic Workflow
        id: generation
        run: |
          echo "🚀 Generating complete executable workflow..."
          
          # Create necessary directories
          mkdir -p projects/current-session/{metadata,generated-workflows}
          
          # Restore workflow metadata from job outputs
          echo '${{ needs.ultra-task-decomposition.outputs.decomposed_tasks }}' > projects/current-session/metadata/dynamic_workflow.json
          
          # Read workflow metadata
          WORKFLOW_DATA=$(cat projects/current-session/metadata/dynamic_workflow.json)
          EXECUTION_PATTERN=$(echo "$WORKFLOW_DATA" | jq -r '.execution_pattern')
          UNIT_COUNT=$(echo "$WORKFLOW_DATA" | jq '.minimal_units | length')
          
          echo "📊 Generating workflow with $UNIT_COUNT units"
          echo "🔄 Execution pattern: $EXECUTION_PATTERN"
          
          # Generate GitHub Actions workflow YAML
          WORKFLOW_FILE="projects/current-session/generated-workflows/dynamic-workflow-${{ inputs.issue_number }}.yml"
          
          # Create workflow header
          cat > "$WORKFLOW_FILE" << 'EOF'
name: "🎯 Dynamic Workflow - Issue #${{ github.event.inputs.issue_number }}"
run-name: "📊 Dynamic | ${{ github.actor }} | Issue #${{ github.event.inputs.issue_number }}"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Source issue number"
        required: true
        default: "${{ github.event.inputs.issue_number }}"

permissions:
  contents: write
  actions: write
  issues: write

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  PROJECT_BASE: "projects/issue-${{ github.event.inputs.issue_number }}"

jobs:
EOF
          
          # Add initialization job
          cat >> "$WORKFLOW_FILE" << 'EOF'
  initialize:
    name: "🚀 Initialize Workflow"
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Project Directory
        id: setup
        run: |
          PROJECT_DIR="${{ env.PROJECT_BASE }}"
          mkdir -p "$PROJECT_DIR"/{logs,metadata,temp,final}
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "✅ Project directory initialized: $PROJECT_DIR"

EOF
          
          # Add jobs for each minimal unit
          JOB_NUMBER=1
          PREVIOUS_JOB="initialize"
          
          # Read minimal units and create jobs
          echo "$WORKFLOW_DATA" | jq -c '.minimal_units[]' | while read -r unit; do
            CAPABILITY=$(echo "$unit" | jq -r '.capability')
            UNIT_PATH=$(echo "$unit" | jq -r '.unit_path')
            
            # Generate safe job name
            JOB_NAME="job_${JOB_NUMBER}_$(echo "$CAPABILITY" | tr '-' '_')"
            
            cat >> "$WORKFLOW_FILE" << EOF
  $JOB_NAME:
    name: "📦 Execute: $CAPABILITY"
    runs-on: ubuntu-latest
    needs: $PREVIOUS_JOB
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Execute $CAPABILITY
        run: |
          echo "🔧 Executing minimal unit: $CAPABILITY"
          echo "📂 Unit path: $UNIT_PATH"
          
          # Here you would include the actual minimal unit
          # For now, we'll simulate execution
          echo "✅ $CAPABILITY completed successfully"
          
          # Save output
          mkdir -p \${{ env.PROJECT_BASE }}/outputs
          echo "Output from $CAPABILITY" > \${{ env.PROJECT_BASE }}/outputs/${JOB_NUMBER}_$CAPABILITY.txt

EOF
            
            # Update for next iteration
            if [ "$EXECUTION_PATTERN" = "mixed_parallel" ] && [ $((JOB_NUMBER % 3)) -eq 0 ]; then
              # Keep same dependency for parallel execution
              PREVIOUS_JOB="$PREVIOUS_JOB"
            else
              PREVIOUS_JOB="$JOB_NAME"
            fi
            
            JOB_NUMBER=$((JOB_NUMBER + 1))
          done
          
          # Add finalization job
          cat >> "$WORKFLOW_FILE" << 'EOF'
  finalize:
    name: "🎉 Finalize Workflow"
    runs-on: ubuntu-latest
    needs: [initialize]
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Generate Summary
        run: |
          echo "## 📊 Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue**: #${{ github.event.inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROJECT_BASE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dynamic workflow execution completed!" >> $GITHUB_STEP_SUMMARY
EOF
          
          # Output workflow information
          WORKFLOW_PATH="$WORKFLOW_FILE"
          echo "workflow_path=$WORKFLOW_PATH" >> $GITHUB_OUTPUT
          
          # Encode workflow for output
          if [ -f "$WORKFLOW_PATH" ]; then
            ENCODED_WORKFLOW=$(base64 -w 0 "$WORKFLOW_PATH" 2>/dev/null || base64 "$WORKFLOW_PATH")
            echo "generated_workflow=$ENCODED_WORKFLOW" >> $GITHUB_OUTPUT
            echo "✅ Dynamic workflow YAML generated successfully"
            echo "📁 Path: $WORKFLOW_PATH"
          else
            echo "❌ Failed to generate workflow file"
            exit 1
          fi

  # ===========================================
  # PHASE 4: WORKFLOW DEPLOYMENT
  # ===========================================
  
  deploy-workflow:
    name: "🚀 Deploy Generated Workflow"
    runs-on: ubuntu-latest
    needs: [validate-trigger, ultra-task-decomposition, dynamic-workflow-generation]
    outputs:
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      deployed_path: ${{ steps.deploy.outputs.deployed_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Deploy Generated Workflow
        id: deploy
        run: |
          echo "🚀 Deploying generated workflow..."
          
          # Create deployment directory
          mkdir -p .github/workflows/generated
          
          # Decode and save workflow
          WORKFLOW_PATH="${{ needs.dynamic-workflow-generation.outputs.workflow_path }}"
          DEPLOYMENT_NAME="issue-${{ inputs.issue_number }}-$(date +%Y%m%d-%H%M%S).yml.disabled"
          DEPLOYMENT_PATH=".github/workflows/generated/$DEPLOYMENT_NAME"
          
          # Restore generated workflow
          echo "${{ needs.dynamic-workflow-generation.outputs.generated_workflow }}" | base64 -d > "$DEPLOYMENT_PATH"
          
          if [ -f "$DEPLOYMENT_PATH" ]; then
            echo "✅ Workflow deployed successfully"
            echo "📁 Deployed to: $DEPLOYMENT_PATH"
            echo "⚠️  Note: Workflow is deployed with .disabled extension for safety"
            echo ""
            echo "To activate the workflow:"
            echo "  1. Review the generated workflow"
            echo "  2. Remove the .disabled extension"
            echo "  3. Commit and push the changes"
            
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            echo "deployed_path=$DEPLOYMENT_PATH" >> $GITHUB_OUTPUT
            
            # Create deployment summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
## 🚀 Workflow Deployment Summary

- **Status**: ✅ Success
- **Issue**: #${{ inputs.issue_number }}
- **Deployed Path**: \`$DEPLOYMENT_PATH\`
- **Activation**: Remove \`.disabled\` extension to activate

### Generated Workflow Details:
- **Units**: ${{ needs.ultra-task-decomposition.outputs.task_count }}
- **Pattern**: ${{ needs.ultra-task-decomposition.outputs.execution_phases }}

EOF
          else
            echo "❌ Deployment failed"
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  # ===========================================
  # PHASE 5: EXECUTION SUMMARY
  # ===========================================
  
  execution-summary:
    name: "📊 Execution Summary"
    runs-on: ubuntu-latest  
    needs: [validate-trigger, ultra-task-decomposition, dynamic-workflow-generation, deploy-workflow]
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Generate Execution Summary
        run: |
          echo "## 📊 Meta Workflow v10 Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Request Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue**: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ needs.validate-trigger.outputs.issue_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ needs.validate-trigger.outputs.request_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Execution Phases" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Issue Validation | ${{ needs.validate-trigger.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧠 Task Decomposition | ${{ needs.ultra-task-decomposition.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Workflow Generation | ${{ needs.dynamic-workflow-generation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Deployment | ${{ needs.deploy-workflow.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-workflow.outputs.deployment_status }}" = "success" ]; then
            echo "### ✅ Success!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Dynamic workflow has been generated and deployed:" >> $GITHUB_STEP_SUMMARY
            echo "- **Location**: \`${{ needs.deploy-workflow.outputs.deployed_path }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Units**: ${{ needs.ultra-task-decomposition.outputs.task_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Pattern**: ${{ needs.ultra-task-decomposition.outputs.execution_phases }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To activate the workflow, remove the \`.disabled\` extension and push the changes." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more information." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Meta Workflow v10 with Claude SDK Integration*" >> $GITHUB_STEP_SUMMARY