name: Professional News Video Generator (60s)

on:
  workflow_dispatch:
    inputs:
      topic:
        description: "News topic to cover"
        required: true
        type: string
        default: "Latest technology developments"
      time_period:
        description: "Time period for news"
        required: true
        type: choice
        options:
          - "today"
          - "this_week"
          - "last_week"
          - "this_month"
        default: "today"
      category:
        description: "News category"
        required: true
        type: choice
        options:
          - "technology"
          - "business"
          - "science"
          - "health"
          - "politics"
          - "sports"
          - "entertainment"
        default: "technology"
      duration:
        description: "Video duration (seconds)"
        required: true
        type: number
        default: 60
      quality:
        description: "Video quality preset"
        required: true
        type: choice
        options:
          - "standard"
          - "high"
          - "ultra"
        default: "high"

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  setup:
    name: "Setup and Initialize Project"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      project_dir: ${{ steps.setup-project.outputs.project_dir }}
      workflow_start: ${{ steps.setup-project.outputs.workflow_start }}
      scene_count: ${{ steps.setup-project.outputs.scene_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Setup Project Environment
        id: setup-project
        run: |
          # Create unique project directory
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          PROJECT_DIR="projects/news-video-${TIMESTAMP}"
          
          # Create directory structure
          mkdir -p "${PROJECT_DIR}/metadata"
          mkdir -p "${PROJECT_DIR}/media/images"
          mkdir -p "${PROJECT_DIR}/media/videos"
          mkdir -p "${PROJECT_DIR}/media/audio"
          mkdir -p "${PROJECT_DIR}/final"
          mkdir -p "${PROJECT_DIR}/logs"
          
          # Calculate scene count (5 seconds per scene)
          SCENE_COUNT=$(echo "scale=0; (${{ inputs.duration }} + 4) / 5" | bc)
          
          # Save project configuration
          echo '{' > "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "topic": "${{ inputs.topic }}",' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "time_period": "${{ inputs.time_period }}",' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "category": "${{ inputs.category }}",' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "duration": ${{ inputs.duration }},' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "quality": "${{ inputs.quality }}",' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "scene_count": '${SCENE_COUNT}',' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "project_dir": "'${PROJECT_DIR}'",' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '  "workflow_start": "'$(date -Iseconds)'"' >> "${PROJECT_DIR}/metadata/project_config.json"
          echo '}' >> "${PROJECT_DIR}/metadata/project_config.json"
          
          # Set outputs
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "workflow_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
          echo "scene_count=${SCENE_COUNT}" >> $GITHUB_OUTPUT
          
          echo "✅ Project initialized: ${PROJECT_DIR}"
          echo "📊 Scene count: ${SCENE_COUNT}"

  news-research:
    name: "News Information Gathering"
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Research News Information
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          RESEARCH_PROMPT="Conduct comprehensive news research:
          Topic: '${{ inputs.topic }}'
          Time Period: ${{ inputs.time_period }}
          Category: ${{ inputs.category }}
          
          Tasks:
          1. Use WebSearch tool to find 3+ reliable news sources
          2. Verify information consistency across sources
          3. Extract key facts, quotes, and statistics
          4. Save research results to ${PROJECT_DIR}/metadata/news_research.json
          5. Create fact-check summary using Write tool
          6. Execute ls -la ${PROJECT_DIR}/metadata/ using Bash tool
          
          Requirements:
          - Focus on credible sources (Reuters, AP, BBC, etc.)
          - Include publication dates and source URLs
          - Identify any conflicting information"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$RESEARCH_PROMPT"

      - name: Upload Research Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: news-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  script-creation:
    name: "News Script Creation"
    runs-on: ubuntu-latest
    needs: [setup, news-research]
    timeout-minutes: 8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Download Research Artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Create News Script
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_COUNT="${{ needs.setup.outputs.scene_count }}"
          
          SCRIPT_PROMPT="Create professional news script:
          Duration: ${{ inputs.duration }} seconds
          Scene Count: ${SCENE_COUNT} scenes (5 seconds each)
          Research Data: Read from ${PROJECT_DIR}/metadata/news_research.json
          
          Tasks:
          1. Read research data using Read tool
          2. Create structured script with intro/main/conclusion
          3. Split script into ${SCENE_COUNT} segments (5 seconds each)
          4. Save complete script to ${PROJECT_DIR}/metadata/news_script.json
          5. Save narration text to ${PROJECT_DIR}/metadata/narration.txt
          6. Create scene breakdown to ${PROJECT_DIR}/metadata/scene_breakdown.json
          7. Execute ls -la ${PROJECT_DIR}/metadata/ using Bash tool
          
          Format Requirements:
          - Professional news anchor tone
          - Clear pronunciation timing
          - Scene-by-scene content breakdown
          - Exact timing for each segment"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$SCRIPT_PROMPT"

      - name: Upload Script Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  anchor-generation:
    name: "News Anchor Generation"
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Generate News Anchor
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SAVE_PATH="${PROJECT_DIR}/media/images/news_anchor.png"
          URL_PATH="${PROJECT_DIR}/media/images/news_anchor-url.txt"
          
          ANCHOR_PROMPT="Generate professional news anchor image:
          Prompt: 'Professional Japanese news anchor, business suit, neutral background, high quality portrait, professional lighting, news studio setting'
          Seed: 42 (for consistency)
          
          Steps:
          1. Generate image using MCP tool mcp__t2i-kamui-imagen3__imagen_t2i with seed 42
          2. Save generated image to ${SAVE_PATH} using Write tool
          3. Save Google Cloud Storage URL to ${URL_PATH} using Write tool
          4. Execute ls -la ${PROJECT_DIR}/media/images/ using Bash tool to verify"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$ANCHOR_PROMPT"
          
          # Immediate URL download
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"
          
          # Multi-pattern file search
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*anchor*.png" 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)
          
          # File validation
          if [ -n "$ANCHOR_IMAGE" ] && [ -f "$ANCHOR_IMAGE" ]; then
            FILE_SIZE=$(stat -c%s "$ANCHOR_IMAGE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 10000 ]; then
              echo "✅ Anchor image generated: $ANCHOR_IMAGE (${FILE_SIZE} bytes)"
            else
              echo "⚠️ File too small: $ANCHOR_IMAGE (${FILE_SIZE} bytes)"
            fi
          fi

      - name: Upload Anchor Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: news-anchor
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

  narration-generation:
    name: "Narration Audio Generation"
    runs-on: ubuntu-latest
    needs: [setup, script-creation]
    timeout-minutes: 6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Download Script Artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Generate Narration Audio
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          AUDIO_PATH="${PROJECT_DIR}/media/audio/narration.mp3"
          
          TTS_PROMPT="Generate professional narration audio:
          Input: Read narration text from ${PROJECT_DIR}/metadata/narration.txt
          Output: ${AUDIO_PATH}
          
          Steps:
          1. Read narration text using Read tool
          2. Generate professional Japanese narration using MCP tool mcp__t2s-fal-minimax-speech-02-turbo
          3. Use voice settings: Professional, clear, news anchor tone
          4. Save audio file to ${AUDIO_PATH} using Write tool
          5. Execute ls -la ${PROJECT_DIR}/media/audio/ using Bash tool to verify"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,mcp__t2s-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$TTS_PROMPT"
          
          # Verify audio file
          ls -la "${PROJECT_DIR}/media/audio/"

      - name: Upload Narration Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: narration-audio
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

  scene-generation:
    name: "Scene Generation (T2I + I2V)"
    runs-on: ubuntu-latest
    needs: [setup, script-creation]
    timeout-minutes: 15
    strategy:
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Download Script Artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Generate Scene ${{ matrix.scene }} Background Image
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          IMAGE_PROMPT="Generate scene ${SCENE_NUM} background image:
          Requirements: Empty professional news studio, no people, professional lighting, modern design
          Reference: Read scene breakdown from ${PROJECT_DIR}/metadata/scene_breakdown.json for scene ${SCENE_NUM} context
          
          Steps:
          1. Read scene content using Read tool from scene_breakdown.json
          2. Generate background image using MCP tool mcp__t2i-kamui-imagen3__imagen_t2i
          3. Save generated image to ${SAVE_PATH} using Write tool
          4. Save Google Cloud Storage URL to ${URL_PATH} using Write tool
          5. Execute ls -la ${PROJECT_DIR}/media/images/ using Bash tool to verify"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$IMAGE_PROMPT"
          
          # Immediate URL download
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"
          
          # Multi-pattern file search
          IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.png" 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)
          
          # File validation
          if [ -n "$IMAGE" ] && [ -f "$IMAGE" ]; then
            FILE_SIZE=$(stat -c%s "$IMAGE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 10000 ]; then
              echo "✅ Scene ${SCENE_NUM} image generated: $IMAGE (${FILE_SIZE} bytes)"
            else
              echo "⚠️ File too small: $IMAGE (${FILE_SIZE} bytes)"
            fi
          fi

      - name: Convert Scene ${{ matrix.scene }} to Video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          LOCAL_IMAGE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          VIDEO_PATH="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}.mp4"
          
          # URL validity check (15-minute window)
          if [ -f "$URL_FILE" ]; then
            IMAGE_URL=$(cat "$URL_FILE")
            if curl -IfsS --max-time 5 "$IMAGE_URL" >/dev/null 2>&1; then
              IMAGE_REF="$IMAGE_URL"
              echo "✅ Using Google Cloud Storage URL for scene ${SCENE_NUM}"
            else
              IMAGE_REF="$LOCAL_IMAGE"
              echo "⚠️ URL expired, using local path for scene ${SCENE_NUM}"
            fi
          else
            IMAGE_REF="$LOCAL_IMAGE"
          fi
          
          I2V_PROMPT="Convert scene ${SCENE_NUM} image to video:
          Input: ${IMAGE_REF}
          Output: ${VIDEO_PATH}
          Duration: 6 seconds
          Quality: High (1920x1080, 30fps)
          
          Steps:
          1. Convert image to video using MCP tool mcp__i2v-fal-hailuo-02-pro
          2. Save video file to ${VIDEO_PATH} using Write tool
          3. Execute ls -la ${PROJECT_DIR}/media/videos/ using Bash tool to verify"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-*,Write,Bash" \
            --max-turns 80 \
            --permission-mode "bypassPermissions" \
            -p "$I2V_PROMPT"
          
          # Verify video file
          ls -la "${PROJECT_DIR}/media/videos/"

      - name: Upload Scene ${{ matrix.scene }} Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene }}
          path: |
            ${{ needs.setup.outputs.project_dir }}/media/images/scene${{ matrix.scene }}.*
            ${{ needs.setup.outputs.project_dir }}/media/videos/scene${{ matrix.scene }}.*

  lip-sync-processing:
    name: "Anchor Lip-Sync Processing"
    runs-on: ubuntu-latest
    needs: [setup, anchor-generation, narration-generation]
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Download Anchor and Narration Artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-anchor
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

      - name: Download Narration Artifacts
        uses: actions/download-artifact@v4
        with:
          name: narration-audio
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Create Lip-Sync Video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          ANCHOR_IMAGE="${PROJECT_DIR}/media/images/news_anchor.png"
          NARRATION_AUDIO="${PROJECT_DIR}/media/audio/narration.mp3"
          LIPSYNC_VIDEO="${PROJECT_DIR}/media/videos/anchor_lipsync.mp4"
          
          # Find anchor image with multiple patterns
          ANCHOR=$(find "$PROJECT_DIR" -name "*anchor*.png" 2>/dev/null | head -1)
          [ -z "$ANCHOR" ] && ANCHOR=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)
          
          # Find narration audio
          AUDIO=$(find "$PROJECT_DIR" -name "*narration*" -o -name "*.mp3" 2>/dev/null | head -1)
          
          if [ -f "$ANCHOR" ] && [ -f "$AUDIO" ]; then
            LIPSYNC_PROMPT="Create lip-sync video:
            Anchor Image: ${ANCHOR}
            Audio: ${AUDIO}
            Output: ${LIPSYNC_VIDEO}
            Duration: ${{ inputs.duration }} seconds
            
            Steps:
            1. Process lip-sync using MCP tool mcp__v2v-fal-creatify-lipsync
            2. Save synchronized video to ${LIPSYNC_VIDEO} using Write tool
            3. Execute ls -la ${PROJECT_DIR}/media/videos/ using Bash tool to verify"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-*,Write,Bash" \
              --max-turns 80 \
              --permission-mode "bypassPermissions" \
              -p "$LIPSYNC_PROMPT"
          else
            echo "⚠️ Missing anchor image or narration audio"
            # Fallback: Create static video with audio
            if [ -f "$ANCHOR" ] && [ -f "$AUDIO" ]; then
              ffmpeg -loop 1 -i "$ANCHOR" -i "$AUDIO" -c:v libx264 -c:a aac -shortest "$LIPSYNC_VIDEO"
            fi
          fi

      - name: Upload Lip-Sync Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: anchor-lipsync
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

  video-editing-plan:
    name: "Video Editing Plan Creation"
    runs-on: ubuntu-latest
    needs: [setup, scene-generation, lip-sync-processing]
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Download All Video Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: scene-*
          path: ${{ needs.setup.outputs.project_dir }}/media/

      - name: Download Lip-Sync Artifacts
        uses: actions/download-artifact@v4
        with:
          name: anchor-lipsync
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

      - name: Create Editing Plan
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          PLAN_PATH="${PROJECT_DIR}/metadata/editing_plan.json"
          
          PLAN_PROMPT="Create professional video editing plan:
          Duration: ${{ inputs.duration }} seconds
          Scene Count: ${{ needs.setup.outputs.scene_count }}
          
          Available Assets:
          - Background videos: scene1.mp4 to scene12.mp4 (5s each)
          - Anchor lip-sync video: anchor_lipsync.mp4
          - Narration audio: narration.mp3
          
          Tasks:
          1. Analyze available video files using Bash tool (ls -la)
          2. Create editing timeline with proper scene transitions
          3. Plan Picture-in-Picture layout (background full screen, anchor 1/3 bottom-right)
          4. Define audio mixing strategy
          5. Save editing plan to ${PLAN_PATH} using Write tool
          6. Execute ls -la ${PROJECT_DIR}/metadata/ using Bash tool"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$PLAN_PROMPT"

      - name: Upload Editing Plan
        uses: actions/upload-artifact@v4
        with:
          name: editing-plan
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  final-composition:
    name: "Final Video Composition"
    runs-on: ubuntu-latest
    needs: [setup, video-editing-plan]
    timeout-minutes: 8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code@latest

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Compose Final Video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          FINAL_VIDEO="${PROJECT_DIR}/final/news_video_final.mp4"
          mkdir -p "${PROJECT_DIR}/final"
          
          # Find all scene videos
          SCENE_VIDEOS=""
          for i in $(seq 1 ${{ needs.setup.outputs.scene_count }}); do
            SCENE_FILE=$(find "$PROJECT_DIR" -name "*scene${i}*.mp4" 2>/dev/null | head -1)
            if [ -f "$SCENE_FILE" ]; then
              SCENE_VIDEOS="$SCENE_VIDEOS -i $SCENE_FILE"
            fi
          done
          
          # Find anchor and audio files
          ANCHOR_VIDEO=$(find "$PROJECT_DIR" -name "*anchor*lipsync*.mp4" -o -name "*lipsync*.mp4" 2>/dev/null | head -1)
          NARRATION_AUDIO=$(find "$PROJECT_DIR" -name "*narration*.mp3" -o -name "*.mp3" 2>/dev/null | head -1)
          
          if [ -n "$SCENE_VIDEOS" ] && [ -f "$ANCHOR_VIDEO" ] && [ -f "$NARRATION_AUDIO" ]; then
            echo "✅ Found all required files for composition"
            
            # Create video concatenation list
            CONCAT_LIST="${PROJECT_DIR}/concat_list.txt"
            > "$CONCAT_LIST"
            for i in $(seq 1 ${{ needs.setup.outputs.scene_count }}); do
              SCENE_FILE=$(find "$PROJECT_DIR" -name "*scene${i}*.mp4" 2>/dev/null | head -1)
              if [ -f "$SCENE_FILE" ]; then
                echo "file '$SCENE_FILE'" >> "$CONCAT_LIST"
              fi
            done
            
            # Concatenate background videos
            BACKGROUND_VIDEO="${PROJECT_DIR}/background_concat.mp4"
            ffmpeg -f concat -safe 0 -i "$CONCAT_LIST" -c copy "$BACKGROUND_VIDEO"
            
            # Create picture-in-picture composition
            ffmpeg -i "$BACKGROUND_VIDEO" -i "$ANCHOR_VIDEO" -i "$NARRATION_AUDIO" \
              -filter_complex "[0:v][1:v]overlay=W*2/3:H*2/3:enable='between(t,0,${{ inputs.duration }})'[v]" \
              -map "[v]" -map 2:a -c:v libx264 -c:a aac -shortest -t ${{ inputs.duration }} \
              "$FINAL_VIDEO"
            
            echo "✅ Final video created: $FINAL_VIDEO"
          else
            echo "⚠️ Missing required files, creating fallback composition"
            # Create a simple fallback video if some files are missing
            FIRST_SCENE=$(find "$PROJECT_DIR" -name "*scene*.mp4" 2>/dev/null | head -1)
            if [ -f "$FIRST_SCENE" ]; then
              cp "$FIRST_SCENE" "$FINAL_VIDEO"
            fi
          fi
          
          # Verify final output
          if [ -f "$FINAL_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            echo "📹 Final video: $(basename $FINAL_VIDEO) (${FILE_SIZE} bytes)"
            ffprobe -v error -show_format -show_streams "$FINAL_VIDEO" 2>/dev/null || echo "Video info unavailable"
          fi

      - name: Upload Final Video
        uses: actions/upload-artifact@v4
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

  quality-verification:
    name: "Quality Verification and Output"
    runs-on: ubuntu-latest
    needs: [setup, final-composition]
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Download Final Video
        uses: actions/download-artifact@v4
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

      - name: Verify Video Quality
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          FINAL_VIDEO=$(find "$PROJECT_DIR" -name "*.mp4" 2>/dev/null | head -1)
          
          if [ -f "$FINAL_VIDEO" ]; then
            echo "=== Video Quality Verification ==="
            
            # File size check
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            echo "📁 File size: ${FILE_SIZE} bytes"
            
            # Duration check
            DURATION=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "$FINAL_VIDEO" 2>/dev/null || echo "0")
            echo "⏱️ Duration: ${DURATION} seconds"
            
            # Resolution check
            RESOLUTION=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$FINAL_VIDEO" 2>/dev/null || echo "unknown")
            echo "📺 Resolution: ${RESOLUTION}"
            
            # Audio check
            AUDIO_INFO=$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$FINAL_VIDEO" 2>/dev/null || echo "no_audio")
            echo "🔊 Audio: ${AUDIO_INFO}"
            
            # Quality validation
            if [ "$FILE_SIZE" -gt 1000000 ]; then
              echo "✅ PASS: File size adequate"
            else
              echo "⚠️ WARN: File size may be too small"
            fi
            
            DURATION_INT=$(echo "$DURATION" | cut -d. -f1)
            if [ "$DURATION_INT" -ge 55 ] && [ "$DURATION_INT" -le 65 ]; then
              echo "✅ PASS: Duration within target range"
            else
              echo "⚠️ WARN: Duration outside target range (55-65s)"
            fi
            
            echo "=== Quality Verification Complete ==="
            echo "📹 Final video: $(basename $FINAL_VIDEO)"
            echo "📂 Location: $FINAL_VIDEO"
            
          else
            echo "❌ FAIL: Final video not found"
            exit 1
          fi

      - name: Create Summary Report
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          echo '# News Video Generation Summary' > "$PROJECT_DIR/final/workflow_summary.md"
          echo '' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '**Topic**: ${{ inputs.topic }}' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '**Category**: ${{ inputs.category }}' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '**Duration**: ${{ inputs.duration }}s' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '**Quality**: ${{ inputs.quality }}' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '**Generated**: '$(date) >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '## Workflow Results' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ News research completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Script creation completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Anchor generation completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Scene generation completed (${{ needs.setup.outputs.scene_count }} scenes)' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Lip-sync processing completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Video composition completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- ✅ Quality verification completed' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '## Files Generated' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Final video: news_video_final.mp4' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Project directory: '$PROJECT_DIR >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '## Technical Specifications' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Resolution: 1920x1080' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Frame rate: 30fps' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Audio: AAC codec' >> "$PROJECT_DIR/final/workflow_summary.md"
          echo '- Scene count: ${{ needs.setup.outputs.scene_count }}' >> "$PROJECT_DIR/final/workflow_summary.md"
          
          echo "📄 Summary report created"

      - name: Final Artifact Upload
        uses: actions/upload-artifact@v4
        with:
          name: complete-news-video-package
          path: ${{ needs.setup.outputs.project_dir }}/final/