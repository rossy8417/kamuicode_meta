name: "最新ニュース動画生成ワークフロー"

on:
  workflow_dispatch:
    inputs:
      video_title:
        description: "動画のタイトル"
        required: true
        default: "今日のニュース"
        type: string
      
      duration:
        description: "動画の長さ"
        required: true
        default: "60s"
        type: choice
        options:
          - "15s"
          - "30s" 
          - "60s"
          - "90s"
          - "3min"
          - "5min"
          - "10min"
          - "15min"
          - "30min"
      
      target_platform:
        description: "配信プラットフォーム"
        required: true
        default: "youtube"
        type: choice
        options:
          - "youtube"
          - "instagram"
          - "tiktok"
          - "twitter"
          - "linkedin"
          - "web"
          - "broadcast"
      
      content_type:
        description: "コンテンツの種類"
        required: true
        default: "news"
        type: choice
        options:
          - "promotional"
          - "educational"
          - "entertainment"
          - "documentary"
          - "tutorial"
          - "news"
          - "music_video"
      
      visual_style:
        description: "ビジュアルスタイル"
        required: true
        default: "documentary"
        type: choice
        options:
          - "cinematic"
          - "anime"
          - "documentary"
          - "corporate"
          - "vlog"
          - "artistic"
          - "minimalist"
      
      narration_voice:
        description: "ナレーション音声"
        required: true
        default: "female_professional"
        type: choice
        options:
          - "male_professional"
          - "female_professional"
          - "male_casual"
          - "female_casual"
          - "ai_neutral"
          - "child"
          - "elderly"
      
      news_topic:
        description: "ニューストピック（実行時指定）"
        required: true
        default: "最新技術動向"
        type: string
      
      news_period:
        description: "ニュース収集期間"
        required: false
        default: "24h"
        type: choice
        options:
          - "6h"
          - "12h"
          - "24h"
          - "48h"
          - "1week"
      
      news_category:
        description: "ニュースカテゴリー"
        required: false
        default: "technology"
        type: choice
        options:
          - "general"
          - "business"
          - "entertainment"
          - "health"
          - "science"
          - "sports"
          - "technology"

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: 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

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.create-project.outputs.project_dir }}
      timestamp: ${{ steps.create-project.outputs.timestamp }}
      scene_count: ${{ steps.create-project.outputs.scene_count }}
    steps:
      - uses: actions/checkout@v4
      
      - name: プロジェクトディレクトリ作成
        id: create-project
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/news-video-${TIMESTAMP}"
          
          mkdir -p "$PROJECT_DIR"/{metadata,logs,media/{images,videos,audio},final}
          
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "scene_count=12" >> $GITHUB_OUTPUT
          
          echo "## 🎬 最新ニュース動画生成ワークフロー開始" >> $GITHUB_STEP_SUMMARY
          echo "- **プロジェクト**: $PROJECT_DIR" >> $GITHUB_STEP_SUMMARY
          echo "- **開始時刻**: $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "- **予定シーン数**: 12" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase1-news-collection:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      news_data_path: ${{ steps.collect-news.outputs.news_data_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: ニュース情報収集・信頼性評価
        id: collect-news
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          NEWS_TOPIC="${{ inputs.news_topic }}"
          NEWS_PERIOD="${{ inputs.news_period }}"
          NEWS_CATEGORY="${{ inputs.news_category }}"
          
          COLLECTION_PROMPT="ニュース情報収集タスク:
          - トピック: ${NEWS_TOPIC}
          - 期間: ${NEWS_PERIOD}
          - カテゴリー: ${NEWS_CATEGORY}
          
          複数の信頼性の高い情報源（NewsAPI、Reddit、arXiv等）から最新ニュースを収集し、以下の要件を満たしてください:
          1. 最低3つの異なる情報源から収集
          2. 信頼性スコア70%以上の情報のみ採用
          3. 情報源URLと発信日時を明記
          4. 結果を${PROJECT_DIR}/metadata/news_data.json に保存
          5. 60秒動画用に要約された内容も含める"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__external-newsapi-search__newsapi_search,mcp__external-reddit-search__reddit_search,WebSearch,Write" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$COLLECTION_PROMPT"
          
          echo "news_data_path=${PROJECT_DIR}/metadata/news_data.json" >> $GITHUB_OUTPUT
          
          echo "## 📰 Phase 1: ニュース情報収集" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **対象トピック**: ${NEWS_TOPIC}" >> $GITHUB_STEP_SUMMARY
          if [ -f "${PROJECT_DIR}/metadata/news_data.json" ]; then
            echo "- **収集結果**: ✅ データファイル生成済み" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **収集結果**: ⚠️ データファイル未生成" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Phase1 Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase1-news-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  phase2-script-creation:
    runs-on: ubuntu-latest
    needs: [setup, phase1-news-collection]
    outputs:
      script_path: ${{ steps.create-script.outputs.script_path }}
      narration_path: ${{ steps.create-script.outputs.narration_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Phase1 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase1-news-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
      
      - name: ニュース構成・台本作成
        id: create-script
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          NEWS_DATA_PATH="${{ needs.phase1-news-collection.outputs.news_data_path }}"
          DURATION="${{ inputs.duration }}"
          
          if [ ! -f "$NEWS_DATA_PATH" ]; then
            echo "⚠️ ニュースデータファイルが見つかりません: $NEWS_DATA_PATH"
            echo '{"error": "news data not found"}' > "${PROJECT_DIR}/metadata/news_data.json"
            NEWS_DATA_PATH="${PROJECT_DIR}/metadata/news_data.json"
          fi
          
          SCRIPT_PROMPT="ニュース台本作成タスク:
          収集されたニュース情報: $(cat "$NEWS_DATA_PATH")
          
          ${DURATION}動画用にニュースアンカースタイルのナレーション台本を作成してください:
          
          要件:
          1. 視聴者心理を考慮した構成（最初の8秒で80%の視聴継続）
          2. 情報階層化（重要度順配置）
          3. 感情的アーク（Setup→Conflict→Resolution）の適用
          4. 5W1Hの完全な提示
          5. 自然な日本語ナレーション
          6. 12シーン分の詳細な構成
          
          出力:
          - ${PROJECT_DIR}/metadata/script.md: 台本
          - ${PROJECT_DIR}/metadata/scene_breakdown.json: シーン別詳細構成
          - ${PROJECT_DIR}/metadata/narration_text.txt: ナレーション原稿"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$SCRIPT_PROMPT"
          
          echo "script_path=${PROJECT_DIR}/metadata/script.md" >> $GITHUB_OUTPUT
          echo "narration_path=${PROJECT_DIR}/metadata/narration_text.txt" >> $GITHUB_OUTPUT
          
          echo "## 📝 Phase 2: ニュース構成・台本作成" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          if [ -f "${PROJECT_DIR}/metadata/script.md" ]; then
            echo "- **台本**: ✅ 作成済み" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **台本**: ⚠️ 未作成" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "${PROJECT_DIR}/metadata/narration_text.txt" ]; then
            echo "- **ナレーション原稿**: ✅ 作成済み" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **ナレーション原稿**: ⚠️ 未作成" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Phase2 Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase2-script-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  phase3-parallel-assets:
    runs-on: ubuntu-latest
    needs: [setup, phase2-script-creation]
    outputs:
      narration_audio_path: ${{ steps.narration.outputs.audio_path }}
      anchor_character_path: ${{ steps.character.outputs.character_path }}
      studio_background_path: ${{ steps.background.outputs.background_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Phase2 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-script-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
      
      - name: ナレーション音声生成
        id: narration
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          NARRATION_PATH="${{ needs.phase2-script-creation.outputs.narration_path }}"
          VOICE_TYPE="${{ inputs.narration_voice }}"
          
          if [ ! -f "$NARRATION_PATH" ]; then
            echo "⚠️ ナレーションファイルが見つかりません。デフォルトテキストを作成します。"
            echo "本日のニュースをお伝えします。" > "${PROJECT_DIR}/metadata/narration_text.txt"
            NARRATION_PATH="${PROJECT_DIR}/metadata/narration_text.txt"
          fi
          
          NARRATION_TEXT=$(cat "$NARRATION_PATH")
          
          AUDIO_PROMPT="ナレーション音声生成:
          テキスト: ${NARRATION_TEXT}
          音声タイプ: ${VOICE_TYPE}
          
          要件:
          1. プロフェッショナルなニュースアンカー音声
          2. 音質基準: -14 LUFS、48kHz
          3. 権威性と親しみやすさのバランス
          4. 明瞭な発音と適切な間の取り方
          
          出力: ${PROJECT_DIR}/media/audio/narration.mp3"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submit,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_status,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_result,Bash,Write" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$AUDIO_PROMPT"
          
          AUDIO_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*.mp3" -o -name "*.wav" | head -1)
          if [ -n "$AUDIO_FILE" ]; then
            echo "audio_path=$AUDIO_FILE" >> $GITHUB_OUTPUT
            echo "✅ ナレーション音声生成成功: $AUDIO_FILE"
          else
            echo "audio_path=${PROJECT_DIR}/media/audio/narration.mp3" >> $GITHUB_OUTPUT
            echo "⚠️ ナレーション音声生成失敗"
          fi
      
      - name: ニュースアンカーキャラクター生成
        id: character
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          CHARACTER_PROMPT="ニュースアンカーキャラクター生成:
          
          要件:
          1. プロフェッショナルなニュース番組アンカー
          2. 信頼性を表現する外観（スーツ、整った髪型、知的な表情）
          3. 高解像度（最低512x512の顔部分）
          4. 日本人、30-40代、性別は問わず
          5. 一貫したキャラクター特徴（seed値固定）
          
          出力: ${PROJECT_DIR}/media/images/anchor_character.png"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$CHARACTER_PROMPT"
          
          CHARACTER_FILE=$(find "${PROJECT_DIR}/media/images" -name "*anchor*" -o -name "*character*" | head -1)
          if [ -n "$CHARACTER_FILE" ]; then
            echo "character_path=$CHARACTER_FILE" >> $GITHUB_OUTPUT
            echo "✅ アンカーキャラクター生成成功: $CHARACTER_FILE"
          else
            echo "character_path=${PROJECT_DIR}/media/images/anchor_character.png" >> $GITHUB_OUTPUT
            echo "⚠️ アンカーキャラクター生成失敗"
          fi
      
      - name: ニューススタジオ背景・グラフィック生成
        id: background
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          BACKGROUND_PROMPT="ニューススタジオ背景・グラフィック生成:
          
          要件:
          1. プロフェッショナルなニュース番組スタジオ背景
          2. ブランドカラー（信頼感のあるブルー系）基調
          3. 情報の視認性を高めるデザイン
          4. 高解像度、1920x1080推奨
          5. ロゴ・チャート用スペース確保
          
          出力: ${PROJECT_DIR}/media/images/studio_background.png"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$BACKGROUND_PROMPT"
          
          BACKGROUND_FILE=$(find "${PROJECT_DIR}/media/images" -name "*studio*" -o -name "*background*" | head -1)
          if [ -n "$BACKGROUND_FILE" ]; then
            echo "background_path=$BACKGROUND_FILE" >> $GITHUB_OUTPUT
            echo "✅ スタジオ背景生成成功: $BACKGROUND_FILE"
          else
            echo "background_path=${PROJECT_DIR}/media/images/studio_background.png" >> $GITHUB_OUTPUT
            echo "⚠️ スタジオ背景生成失敗"
          fi
          
          echo "## 🎭 Phase 3: 並列アセット生成" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **ナレーション音声**: ${{ steps.narration.outputs.audio_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **アンカーキャラクター**: ${{ steps.character.outputs.character_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **スタジオ背景**: ${{ steps.background.outputs.background_path }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Phase3 Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase3-assets
          path: ${{ needs.setup.outputs.project_dir }}/media/

  phase4-scene-videos:
    runs-on: ubuntu-latest
    needs: [setup]  # Phase1と並列実行して早期にMCP接続を利用
    strategy:
      max-parallel: 12
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    outputs:
      scene_videos_ready: ${{ steps.generate-scene.outputs.video_ready }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Phase3 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase3-assets
          path: ${{ needs.setup.outputs.project_dir }}/media/
      
      - name: Download Phase2 Script Data
        uses: actions/download-artifact@v4
        with:
          name: phase2-script-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
      
      - name: シーン{{ matrix.scene }}動画生成（画像→I2V直列処理）
        id: generate-scene
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          VISUAL_STYLE="${{ inputs.visual_style }}"
          
          # MCP接続は最初の12分間のみ有効
          # Phase1-3で約10分使用済みなので、Phase4では使用不可
          # TODO: Phase4をPhase2と並列実行するよう構造を変更する必要がある
          USE_MCP=true
          echo "⚠️ Phase4: MCP接続試行（タイムアウトリスクあり）"
          
          if [ "$USE_MCP" = "true" ]; then
            SCENE_PROMPT="シーン${SCENE_NUM}動画生成:
            
            1. まず、シーン${SCENE_NUM}用の画像を生成してください:
               - ニュース内容に応じた映像（アンカー、資料映像、インフォグラフィック等）
               - スタイル: ${VISUAL_STYLE}
               - 一貫した視覚スタイル維持
               - 解像度: 1920x1080
               - 出力: ${PROJECT_DIR}/media/images/scene${SCENE_NUM}_image.png
            
            2. 生成直後に同一処理内でI2V変換を実行してください（URL期限切れ対策）:
               - 生成した画像を使用
               - 6-8秒の動画
               - 30fps、高品質設定
               - 出力: ${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4
            
            重要: 画像生成→I2V変換を同一実行内で連続実行すること"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,mcp__i2v-kamui-hailuo-02-pro__hailuo_02_submit,mcp__i2v-kamui-hailuo-02-pro__hailuo_02_status,mcp__i2v-kamui-hailuo-02-pro__hailuo_02_result,mcp__i2v-kamui-veo3-fast__veo3_fast_submit,mcp__i2v-kamui-veo3-fast__veo3_fast_status,mcp__i2v-kamui-veo3-fast__veo3_fast_result,Write,Bash" \
              --max-turns 80 \
              --permission-mode "acceptEdits" \
              -p "$SCENE_PROMPT"
          else
            # フォールバック: プレースホルダー動画生成
            echo "⚠️ フォールバック: プレースホルダー動画を生成"
            mkdir -p "${PROJECT_DIR}/media/videos"
            
            # FFmpegでプレースホルダー動画生成
            ffmpeg -f lavfi -i color=c=blue:size=1920x1080:duration=6 \
              -vf "drawtext=fontfile=/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf:text='Scene ${SCENE_NUM}':fontsize=72:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2" \
              -c:v libx264 -pix_fmt yuv420p \
              "${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4" 2>/dev/null || true
          fi
          
          # 生成結果の検証
          VIDEO_FILE="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4"
          if [ -f "$VIDEO_FILE" ] && [ -s "$VIDEO_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$VIDEO_FILE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 300000 ]; then
              echo "video_ready=true" >> $GITHUB_OUTPUT
              echo "✅ シーン${SCENE_NUM}動画生成成功: $VIDEO_FILE (${FILE_SIZE} bytes)"
            else
              echo "video_ready=false" >> $GITHUB_OUTPUT
              echo "⚠️ シーン${SCENE_NUM}動画サイズ不足: $VIDEO_FILE (${FILE_SIZE} bytes)"
            fi
          else
            echo "video_ready=false" >> $GITHUB_OUTPUT
            echo "❌ シーン${SCENE_NUM}動画生成失敗: $VIDEO_FILE"
          fi
      
      - name: Upload Scene {{ matrix.scene }} Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene }}-video
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/scene${{ matrix.scene }}_video.mp4

  phase5-audio-processing:
    runs-on: ubuntu-latest
    needs: [setup, phase3-parallel-assets, phase4-scene-videos]
    outputs:
      lipsync_video_path: ${{ steps.lipsync.outputs.video_path }}
      bgm_audio_path: ${{ steps.bgm.outputs.audio_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Assets
        uses: actions/download-artifact@v4
        with:
          name: phase3-assets
          path: ${{ needs.setup.outputs.project_dir }}/media/
      
      - name: Download Scene Videos
        uses: actions/download-artifact@v4
        with:
          pattern: scene-*-video
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/
      
      - name: アンカーリップシンク処理
        id: lipsync
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          ANCHOR_CHARACTER="${{ needs.phase3-parallel-assets.outputs.anchor_character_path }}"
          NARRATION_AUDIO="${{ needs.phase3-parallel-assets.outputs.narration_audio_path }}"
          
          # アンカーキャラクター画像確認
          if [ ! -f "$ANCHOR_CHARACTER" ]; then
            ANCHOR_CHARACTER=$(find "${PROJECT_DIR}/media/images" -name "*anchor*" -o -name "*character*" | head -1)
          fi
          
          # ナレーション音声確認
          if [ ! -f "$NARRATION_AUDIO" ]; then
            NARRATION_AUDIO=$(find "${PROJECT_DIR}/media/audio" -name "*.mp3" -o -name "*.wav" | head -1)
          fi
          
          if [ -f "$ANCHOR_CHARACTER" ] && [ -f "$NARRATION_AUDIO" ]; then
            LIPSYNC_PROMPT="リップシンク処理:
            キャラクター画像: ${ANCHOR_CHARACTER}
            音声ファイル: ${NARRATION_AUDIO}
            
            要件:
            1. 音素解析による自然な口の動き
            2. 音声と口の動きのズレ<200ms
            3. 自然な表情変化
            4. 音素認識精度>90%
            
            出力: ${PROJECT_DIR}/media/videos/anchor_lipsync.mp4"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-kamui-creatify-lipsync__lipsync_submit,mcp__v2v-kamui-creatify-lipsync__lipsync_status,mcp__v2v-kamui-creatify-lipsync__lipsync_result,mcp__v2v-kamui-pixverse-lipsync__pixverse_lipsync_submit,mcp__v2v-kamui-pixverse-lipsync__pixverse_lipsync_status,mcp__v2v-kamui-pixverse-lipsync__pixverse_lipsync_result,Write,Bash" \
              --max-turns 60 \
              --permission-mode "acceptEdits" \
              -p "$LIPSYNC_PROMPT"
          else
            echo "⚠️ リップシンク用素材不足: キャラクター=${ANCHOR_CHARACTER}, 音声=${NARRATION_AUDIO}"
          fi
          
          LIPSYNC_VIDEO=$(find "${PROJECT_DIR}/media/videos" -name "*lipsync*" -o -name "*anchor*" | head -1)
          if [ -n "$LIPSYNC_VIDEO" ]; then
            echo "video_path=$LIPSYNC_VIDEO" >> $GITHUB_OUTPUT
            echo "✅ リップシンク動画生成成功: $LIPSYNC_VIDEO"
          else
            echo "video_path=" >> $GITHUB_OUTPUT
            echo "⚠️ リップシンク動画生成失敗"
          fi
      
      - name: BGM・効果音追加
        id: bgm
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          BGM_PROMPT="ニュース番組BGM生成:
          
          要件:
          1. プロフェッショナルなニュース番組に適したBGM
          2. 権威性を演出しつつナレーションの邪魔にならない
          3. 60秒長、ループ対応
          4. -18dB レベル（ナレーション-3dBとのバランス）
          5. 品格あるBGM選択
          
          出力: ${PROJECT_DIR}/media/audio/news_bgm.mp3"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2m-google-lyria__lyria_generate,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$BGM_PROMPT"
          
          BGM_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*bgm*" -o -name "*background*" | head -1)
          if [ -n "$BGM_FILE" ]; then
            echo "audio_path=$BGM_FILE" >> $GITHUB_OUTPUT
            echo "✅ BGM生成成功: $BGM_FILE"
          else
            echo "audio_path=" >> $GITHUB_OUTPUT
            echo "⚠️ BGM生成失敗"
          fi
          
          echo "## 🎵 Phase 5: 音声処理" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **リップシンク動画**: ${{ steps.lipsync.outputs.video_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **BGM**: ${{ steps.bgm.outputs.audio_path }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Phase5 Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase5-audio-processing
          path: ${{ needs.setup.outputs.project_dir }}/media/

  phase6-final-editing:
    runs-on: ubuntu-latest
    needs: [setup, phase3-parallel-assets, phase4-scene-videos, phase5-audio-processing]
    outputs:
      final_video_path: ${{ steps.final-edit.outputs.video_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/
      
      - name: Download Scene Videos
        uses: actions/download-artifact@v4
        with:
          pattern: scene-*-video
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/
      
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: 最終動画編集・統合
        id: final-edit
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          VIDEO_TITLE="${{ inputs.video_title }}"
          DURATION="${{ inputs.duration }}"
          
          EDITING_PROMPT="最終動画編集・統合:
          
          素材分析:
          - シーン動画: ${PROJECT_DIR}/media/videos/scene*_video.mp4 (12シーン、各6-8秒)
          - ナレーション音声: ${PROJECT_DIR}/media/audio/narration.mp3 (60秒)
          - BGM: ${PROJECT_DIR}/media/audio/news_bgm.mp3
          - リップシンク動画: ${PROJECT_DIR}/media/videos/anchor_lipsync.mp4
          
          編集要件:
          1. 60秒±5秒の正確な尺
          2. プロフェッショナルなニュース番組品質
          3. オープニング・エンディング追加
          4. 情報源表示、字幕追加
          5. 音声レベル調整（ナレーション-3dB、BGM-18dB）
          6. 1920x1080、30fps、YouTube最適化
          
          最終出力: ${PROJECT_DIR}/final/news_video_final.mp4
          
          FFmpegコマンド生成と実行も含めて完全な編集処理を行ってください。"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 60 \
            --permission-mode "acceptEdits" \
            -p "$EDITING_PROMPT"
          
          # 最終動画の検証と配置
          FINAL_VIDEO=$(find "${PROJECT_DIR}" -name "*final*.mp4" -o -name "*news_video*.mp4" | head -1)
          
          if [ -n "$FINAL_VIDEO" ] && [ -f "$FINAL_VIDEO" ]; then
            # ファイナルディレクトリに移動
            mkdir -p "${PROJECT_DIR}/final"
            cp "$FINAL_VIDEO" "${PROJECT_DIR}/final/news_video_final.mp4"
            echo "video_path=${PROJECT_DIR}/final/news_video_final.mp4" >> $GITHUB_OUTPUT
            echo "✅ 最終動画生成成功: ${PROJECT_DIR}/final/news_video_final.mp4"
            
            # 動画情報取得
            if command -v ffprobe >/dev/null 2>&1; then
              DURATION_ACTUAL=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "${PROJECT_DIR}/final/news_video_final.mp4" 2>/dev/null || echo "不明")
              FILE_SIZE=$(stat -c%s "${PROJECT_DIR}/final/news_video_final.mp4" 2>/dev/null || echo 0)
              FILE_SIZE_MB=$((FILE_SIZE / 1024 / 1024))
              
              echo "## 🎬 Phase 6: 最終動画編集・統合" >> $GITHUB_STEP_SUMMARY
              echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
              echo "- **最終動画**: ${PROJECT_DIR}/final/news_video_final.mp4" >> $GITHUB_STEP_SUMMARY
              echo "- **動画長**: ${DURATION_ACTUAL}秒" >> $GITHUB_STEP_SUMMARY
              echo "- **ファイルサイズ**: ${FILE_SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
            else
              echo "## 🎬 Phase 6: 最終動画編集・統合" >> $GITHUB_STEP_SUMMARY
              echo "- **Status**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
              echo "- **最終動画**: ${PROJECT_DIR}/final/news_video_final.mp4" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "video_path=" >> $GITHUB_OUTPUT
            echo "❌ 最終動画生成失敗"
            
            echo "## 🎬 Phase 6: 最終動画編集・統合" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ⚠️ 失敗" >> $GITHUB_STEP_SUMMARY
            echo "- **最終動画**: 生成失敗" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Final Video
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

  summary-report:
    runs-on: ubuntu-latest
    needs: [setup, phase1-news-collection, phase2-script-creation, phase3-parallel-assets, phase4-scene-videos, phase5-audio-processing, phase6-final-editing]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Final Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: final-*
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/final/
      
      - name: 最終レポート生成
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          
          echo "## 🎯 最新ニュース動画生成ワークフロー完了レポート" >> $GITHUB_STEP_SUMMARY
          echo "**生成時刻**: $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "**プロジェクト**: $PROJECT_DIR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          
          # Phase 1
          if [ "${{ needs.phase1-news-collection.result }}" = "success" ]; then
            echo "- **Phase 1 (ニュース収集)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 1 (ニュース収集)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 2
          if [ "${{ needs.phase2-script-creation.result }}" = "success" ]; then
            echo "- **Phase 2 (台本作成)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 2 (台本作成)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 3
          if [ "${{ needs.phase3-parallel-assets.result }}" = "success" ]; then
            echo "- **Phase 3 (アセット生成)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 3 (アセット生成)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 4
          if [ "${{ needs.phase4-scene-videos.result }}" = "success" ]; then
            echo "- **Phase 4 (シーン動画生成)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 4 (シーン動画生成)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 5
          if [ "${{ needs.phase5-audio-processing.result }}" = "success" ]; then
            echo "- **Phase 5 (音声処理)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 5 (音声処理)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 6
          if [ "${{ needs.phase6-final-editing.result }}" = "success" ]; then
            echo "- **Phase 6 (最終編集)**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Phase 6 (最終編集)**: ❌ 失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 最終動画の詳細
          FINAL_VIDEO="${PROJECT_DIR}/final/news_video_final.mp4"
          if [ -f "$FINAL_VIDEO" ]; then
            echo "### 🎬 最終成果物" >> $GITHUB_STEP_SUMMARY
            echo "- **最終動画**: ✅ 生成完了" >> $GITHUB_STEP_SUMMARY
            echo "- **ファイル**: \`$FINAL_VIDEO\`" >> $GITHUB_STEP_SUMMARY
            
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            FILE_SIZE_MB=$((FILE_SIZE / 1024 / 1024))
            echo "- **ファイルサイズ**: ${FILE_SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🎬 最終成果物" >> $GITHUB_STEP_SUMMARY
            echo "- **最終動画**: ❌ 生成失敗" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 アーティファクト" >> $GITHUB_STEP_SUMMARY
          echo "全ての中間生成物とログは GitHub Actions Artifacts からダウンロード可能です:" >> $GITHUB_STEP_SUMMARY
          echo "- \`final-news-video\`: 最終動画" >> $GITHUB_STEP_SUMMARY
          echo "- \`phase*\`: 各フェーズの中間成果物" >> $GITHUB_STEP_SUMMARY
          echo "- \`scene-*-video\`: 個別シーン動画" >> $GITHUB_STEP_SUMMARY
          
          # ログファイル作成
          mkdir -p "${PROJECT_DIR}/logs"
          {
            echo "# 最新ニュース動画生成ワークフロー実行ログ"
            echo "実行時刻: $TIMESTAMP"
            echo "ワークフロー: ${{ github.workflow }}"
            echo "実行ID: ${{ github.run_id }}"
            echo ""
            echo "## 入力パラメータ"
            echo "- video_title: ${{ inputs.video_title }}"
            echo "- duration: ${{ inputs.duration }}"
            echo "- target_platform: ${{ inputs.target_platform }}"
            echo "- content_type: ${{ inputs.content_type }}"
            echo "- visual_style: ${{ inputs.visual_style }}"
            echo "- narration_voice: ${{ inputs.narration_voice }}"
            echo "- news_topic: ${{ inputs.news_topic }}"
            echo "- news_period: ${{ inputs.news_period }}"
            echo "- news_category: ${{ inputs.news_category }}"
            echo ""
            echo "## 実行結果"
            echo "Phase 1 (ニュース収集): ${{ needs.phase1-news-collection.result }}"
            echo "Phase 2 (台本作成): ${{ needs.phase2-script-creation.result }}"
            echo "Phase 3 (アセット生成): ${{ needs.phase3-parallel-assets.result }}"
            echo "Phase 4 (シーン動画生成): ${{ needs.phase4-scene-videos.result }}"
            echo "Phase 5 (音声処理): ${{ needs.phase5-audio-processing.result }}"
            echo "Phase 6 (最終編集): ${{ needs.phase6-final-editing.result }}"
          } > "${PROJECT_DIR}/logs/execution_log_${TIMESTAMP}.md"
      
      - name: Upload Execution Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: execution-logs
          path: ${{ needs.setup.outputs.project_dir }}/logs/