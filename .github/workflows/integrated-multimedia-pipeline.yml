env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
jobs:
  3d-content-creation:
    needs: hero_image_creation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create 3D models and immersive content
      run: "echo \"\U0001F9CA Creating 3D models and immersive content...\"\n\nmkdir\
        \ -p .logs/multimedia-production/3d\n\nPRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)\n\
        IMAGE_GENERATION_LOG=$(cat .logs/multimedia-production/images/generation-log.json)\n\
        \n# 3D制作対象素材を抽出\nTHREED_ASSETS=$(echo \"$PRODUCTION_PLAN\" | jq -r '.asset_specifications[]\
        \ | select(.media_type == \"3d\") | .asset_id')\nTHREED_COUNT=$(echo \"$THREED_ASSETS\"\
        \ | wc -w)\n\necho \"Found $THREED_COUNT dedicated 3D assets\"\n\nif [ \"\
        $(echo \"$TEST_RESULTS\" | jq -r '.multimedia_services.\"3d_generation\".model_creation')\"\
        \ = \"success\" ]; then\n  echo \"3D generation service available - proceeding\
        \ with creation...\"\n  \n  # 専用3D素材の制作\n  for asset_id in $THREED_ASSETS;\
        \ do\n    ASSET_INFO=$(echo \"$PRODUCTION_PLAN\" | jq \".asset_specifications[]\
        \ | select(.asset_id == \\\"$asset_id\\\")\")\n    ASSET_NAME=$(echo \"$ASSET_INFO\"\
        \ | jq -r '.asset_name')\n    PRODUCTION_PROMPT=$(echo \"$ASSET_INFO\" | jq\
        \ -r '.production_prompt')\n    \n    echo \"Creating 3D asset: $ASSET_NAME\
        \ (ID: $asset_id)...\"\n    \n    # 対応する2D画像を探して3D化\n    CORRESPONDING_IMAGE=$(ls\
        \ .logs/multimedia-production/images/${asset_id}*.json 2>/dev/null | head\
        \ -1)\n    \n    if [ -n \"$CORRESPONDING_IMAGE\" ]; then\n      IMAGE_PATH=$(jq\
        \ -r '.image_url // .file_path // \"none\"' \"$CORRESPONDING_IMAGE\" 2>/dev/null)\n\
        \      \n      if [ \"$IMAGE_PATH\" != \"none\" ]; then\n        echo \"Converting\
        \ 2D image to 3D for $asset_id...\"\n        \n        if timeout 180 claude-code\
        \ --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21 --image-path\
        \ \"$IMAGE_PATH\" > .logs/multimedia-production/3d/${asset_id}.json 2>&1;\
        \ then\n          echo \"✅ $asset_id 3D model created successfully\"\n   \
        \     else\n          echo \"❌ $asset_id 3D conversion failed\"\n        fi\n\
        \      else\n        echo \"⚠️ No valid image path found for $asset_id\"\n\
        \      fi\n    else\n      echo \"⚠️ No corresponding 2D image found for $asset_id\"\
        \n    fi\n  done\n  \n  # 主要画像素材の3D化（追加バリエーション作成）\n  echo \"Creating 3D variations\
        \ of hero images...\"\n  \n  for image_file in .logs/multimedia-production/images/*.json;\
        \ do\n    if [ -f \"$image_file\" ]; then\n      IMAGE_ASSET_ID=$(basename\
        \ \"$image_file\" .json | sed 's/-enhanced$//')\n      IMAGE_PATH=$(jq -r\
        \ '.image_url // .file_path // \"none\"' \"$image_file\" 2>/dev/null)\n  \
        \    \n      # 重複チェック（既に専用3D素材として処理済みでないか）\n      if ! echo \"$THREED_ASSETS\"\
        \ | grep -q \"$IMAGE_ASSET_ID\"; then\n        if [ \"$IMAGE_PATH\" != \"\
        none\" ]; then\n          echo \"Creating 3D variation for image $IMAGE_ASSET_ID...\"\
        \n          \n          if timeout 150 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp i2i3d-fal-hunyuan3d-v21 --image-path \"$IMAGE_PATH\" > .logs/multimedia-production/3d/${IMAGE_ASSET_ID}-3d-variation.json\
        \ 2>&1; then\n            echo \"✅ 3D variation created for $IMAGE_ASSET_ID\"\
        \n          else\n            echo \"⚠️ 3D variation creation failed for $IMAGE_ASSET_ID\"\
        \n          fi\n        fi\n      fi\n    fi\n  done\n  \nelse\n  echo \"\
        ⚠️ 3D generation service not available - skipping 3D content creation\"\n\
        \  \n  # 代替案の提示\n  cat > .logs/multimedia-production/3d/3d-alternatives.json\
        \ << EOF\n  {\n    \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \
        \  \"3d_service_status\": \"unavailable\",\n    \"alternative_approaches\"\
        : [\n      \"Use 2D images with parallax effects for pseudo-3D\",\n      \"\
        Apply depth-of-field effects to existing images\", \n      \"Create layered\
        \ compositions for dimensionality\",\n      \"Use external 3D rendering services\"\
        ,\n      \"Focus on enhanced 2D visuals with motion graphics\"\n    ],\n \
        \   \"recommended_next_steps\": [\n      \"Enhance existing 2D assets with\
        \ depth effects\",\n      \"Create multiple angle variations manually\",\n\
        \      \"Consider external 3D service integration\"\n    ]\n  }\n  EOF\nfi\n\
        \n# 制作結果の統計\nCREATED_3D_COUNT=$(ls .logs/multimedia-production/3d/*.json 2>/dev/null\
        \ | wc -l)\n\n# 3D制作ログ\ncat > .logs/multimedia-production/3d/creation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"3d_creation_summary\"\
        : {\n    \"dedicated_3d_assets_planned\": $THREED_COUNT,\n    \"total_3d_files_created\"\
        : $CREATED_3D_COUNT,\n    \"3d_service_available\": $([ \"$(echo \"$TEST_RESULTS\"\
        \ | jq -r '.multimedia_services.\"3d_generation\".model_creation')\" = \"\
        success\" ] && echo \"true\" || echo \"false\"),\n    \"creation_method\"\
        : \"image_to_3d_conversion\",\n    \"additional_variations_created\": $([\
        \ $CREATED_3D_COUNT -gt $THREED_COUNT ] && echo \"true\" || echo \"false\"\
        )\n  },\n  \"created_assets\": [$(ls .logs/multimedia-production/3d/*.json\
        \ 2>/dev/null | sed 's/.*/\"&\"/' | paste -sd,)]\n}\nEOF\n\necho \"THREED_CREATION_STATUS=completed\"\
        \ >> $GITHUB_ENV\necho \"CREATED_3D_COUNT=$CREATED_3D_COUNT\" >> $GITHUB_ENV\n\
        \necho \"\U0001F9CA 3D content creation completed: $CREATED_3D_COUNT assets\""
      shell: bash
  asset-planning:
    needs: creative_concept_ideation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Plan asset specifications and priorities
      run: "echo \"\U0001F4CB Planning asset specifications and production priorities...\"\
        \n\nmkdir -p .logs/asset-planning\n\nCAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)\n\
        CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)\nTEST_RESULTS=$(cat\
        \ .logs/connectivity-tests/test-results.json)\n\n# 素材制作計画の詳細設計\nclaude-code\
        \ --prompt \"以下の情報を基に、マルチメディア広告キャンペーンの制作素材仕様と優先度を計画してください：\n\nキャンペーン戦略: $CAMPAIGN_STRATEGY\n\
        クリエイティブコンセプト: $CREATIVE_CONCEPTS\n利用可能サービス: $TEST_RESULTS\n\n以下の形式でJSONで回答してください：\n\
        {\n  \\\"production_overview\\\": {\n    \\\"total_assets_planned\\\": \\\"\
        計画素材総数\\\",\n    \\\"production_phases\\\": [\\\"制作フェーズ\\\"],\n    \\\"estimated_timeline\\\
        \": \\\"推定制作時間\\\",\n    \\\"quality_tier\\\": \\\"品質ティア（premium|standard|rapid）\\\
        \"\n  },\n  \\\"asset_specifications\\\": [\n    {\n      \\\"asset_id\\\"\
        : \\\"素材ID\\\",\n      \\\"asset_name\\\": \\\"素材名\\\",\n      \\\"media_type\\\
        \": \\\"image|video|audio|3d|mixed\\\",\n      \\\"primary_use\\\": \\\"主要用途\\\
        \",\n      \\\"target_channels\\\": [\\\"対象チャネル\\\"],\n      \\\"priority_level\\\
        \": \\\"high|medium|low\\\",\n      \\\"production_service\\\": \\\"使用予定サービス（MCPサービス名）\\\
        \",\n      \\\"technical_specs\\\": {\n        \\\"dimensions\\\": \\\"サイズ・解像度\\\
        \",\n        \\\"duration\\\": \\\"尺・時間\\\",\n        \\\"file_format\\\"\
        : \\\"ファイル形式\\\",\n        \\\"quality_level\\\": \\\"品質レベル\\\"\n      },\n\
        \      \\\"creative_requirements\\\": {\n        \\\"visual_style\\\": \\\"\
        ビジュアルスタイル\\\",\n        \\\"color_scheme\\\": \\\"カラースキーム\\\",\n        \\\
        \"messaging\\\": \\\"メッセージング\\\",\n        \\\"mood_tone\\\": \\\"ムード・トーン\\\
        \"\n      },\n      \\\"production_prompt\\\": \\\"生成用詳細プロンプト\\\",\n     \
        \ \\\"quality_criteria\\\": [\\\"品質判定基準\\\"],\n      \\\"fallback_options\\\
        \": [\\\"代替案\\\"]\n    }\n  ],\n  \\\"production_sequence\\\": {\n    \\\"\
        phase_1_assets\\\": [\\\"第1フェーズ制作素材ID\\\"],\n    \\\"phase_2_assets\\\": [\\\
        \"第2フェーズ制作素材ID\\\"],\n    \\\"phase_3_assets\\\": [\\\"第3フェーズ制作素材ID\\\"],\n\
        \    \\\"dependencies\\\": [\\\"制作依存関係\\\"],\n    \\\"parallel_opportunities\\\
        \": [\\\"並行制作可能素材\\\"]\n  },\n  \\\"resource_allocation\\\": {\n    \\\"service_usage_plan\\\
        \": {\n      \\\"image_generation\\\": \\\"画像生成サービス使用計画\\\",\n      \\\"video_generation\\\
        \": \\\"動画生成サービス使用計画\\\",\n      \\\"audio_generation\\\": \\\"音声生成サービス使用計画\\\
        \",\n      \\\"3d_generation\\\": \\\"3D生成サービス使用計画\\\",\n      \\\"enhancement_services\\\
        \": \\\"強化サービス使用計画\\\"\n    },\n    \\\"estimated_processing_time\\\": \\\"\
        推定処理時間\\\",\n    \\\"quality_assurance_plan\\\": \\\"品質保証計画\\\"\n  },\n  \\\
        \"success_metrics\\\": {\n    \\\"production_kpis\\\": [\\\"制作KPI\\\"],\n\
        \    \\\"quality_thresholds\\\": [\\\"品質閾値\\\"],\n    \\\"efficiency_targets\\\
        \": [\\\"効率目標\\\"]\n  }\n}\" > .logs/asset-planning/production-plan.json\n\
        \nPRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)\necho \"\
        PRODUCTION_PLAN_FILE=.logs/asset-planning/production-plan.json\" >> $GITHUB_ENV\n\
        \n# 制作フェーズ情報を環境変数に設定\nTOTAL_ASSETS=$(echo \"$PRODUCTION_PLAN\" | jq -r '.production_overview.total_assets_planned')\n\
        PHASE_1_COUNT=$(echo \"$PRODUCTION_PLAN\" | jq '.production_sequence.phase_1_assets\
        \ | length')\n\necho \"TOTAL_PLANNED_ASSETS=$TOTAL_ASSETS\" >> $GITHUB_ENV\n\
        echo \"PHASE_1_ASSET_COUNT=$PHASE_1_COUNT\" >> $GITHUB_ENV\n\necho \"\U0001F4CB\
        \ Asset planning completed\"\necho \"Total planned assets: $TOTAL_ASSETS\"\
        \necho \"Phase 1 assets: $PHASE_1_COUNT\""
      shell: bash
  audio-creation:
    needs: video_content_production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create background music and audio elements
      run: "echo \"\U0001F3B5 Creating background music and audio elements...\"\n\n\
        mkdir -p .logs/multimedia-production/audio\n\nPRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)\n\
        VIDEO_PRODUCTION_LOG=$(cat .logs/multimedia-production/videos/production-log.json)\n\
        CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)\n\n\
        # 音声制作対象素材を抽出\nAUDIO_ASSETS=$(echo \"$PRODUCTION_PLAN\" | jq -r '.asset_specifications[]\
        \ | select(.media_type == \"audio\") | .asset_id')\nAUDIO_COUNT=$(echo \"\
        $AUDIO_ASSETS\" | wc -w)\n\necho \"Found $AUDIO_COUNT dedicated audio assets\"\
        \n\n# 1. 専用音声素材の制作\nif [ \"$AUDIO_CAPABILITY\" = \"full\" ] || [ \"$AUDIO_CAPABILITY\"\
        \ = \"music_only\" ]; then\n  for asset_id in $AUDIO_ASSETS; do\n    ASSET_INFO=$(echo\
        \ \"$PRODUCTION_PLAN\" | jq \".asset_specifications[] | select(.asset_id ==\
        \ \\\"$asset_id\\\")\")\n    ASSET_NAME=$(echo \"$ASSET_INFO\" | jq -r '.asset_name')\n\
        \    PRODUCTION_PROMPT=$(echo \"$ASSET_INFO\" | jq -r '.production_prompt')\n\
        \    DURATION=$(echo \"$ASSET_INFO\" | jq -r '.technical_specs.duration //\
        \ \"30 seconds\"')\n    \n    echo \"Creating audio: $ASSET_NAME (ID: $asset_id)...\"\
        \n    \n    # T2M (Text-to-Music) で音楽生成\n    MUSIC_PROMPT=\"$PRODUCTION_PROMPT,\
        \ professional advertisement music, ${DURATION} duration, high quality, suitable\
        \ for commercial use\"\n    \n    if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2m-google-lyria --prompt \"$MUSIC_PROMPT\" --duration \"$DURATION\"\
        \ > .logs/multimedia-production/audio/${asset_id}.json 2>&1; then\n      echo\
        \ \"✅ $asset_id music created successfully\"\n    else\n      echo \"❌ $asset_id\
        \ music creation failed\"\n    fi\n  done\nelse\n  echo \"⚠️ Audio generation\
        \ not available - skipping dedicated audio assets\"\nfi\n\n# 2. 動画からの音声生成（V2A）\n\
        if [ \"$AUDIO_CAPABILITY\" = \"full\" ]; then\n  echo \"Generating complementary\
        \ audio from videos...\"\n  \n  for video_file in .logs/multimedia-production/videos/*.json;\
        \ do\n    if [ -f \"$video_file\" ]; then\n      VIDEO_ASSET_ID=$(basename\
        \ \"$video_file\" .json | sed 's/-enhanced$//' | sed 's/-i2v$//' | sed 's/-r2v$//')\n\
        \      VIDEO_PATH=$(jq -r '.video_url // .file_path // \"none\"' \"$video_file\"\
        \ 2>/dev/null)\n      \n      if [ \"$VIDEO_PATH\" != \"none\" ]; then\n \
        \       echo \"Generating complementary audio for video $VIDEO_ASSET_ID...\"\
        \n        \n        # V2A (Video-to-Audio) で効果音・環境音生成\n        AUDIO_STYLE=\"\
        natural sound effects and ambient audio matching the video content, professional\
        \ advertisement quality\"\n        \n        if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp v2a-fal-thinksound --video-path \"$VIDEO_PATH\" --audio-style \"$AUDIO_STYLE\"\
        \ > .logs/multimedia-production/audio/${VIDEO_ASSET_ID}-v2a.json 2>&1; then\n\
        \          echo \"✅ Complementary audio generated for $VIDEO_ASSET_ID\"\n\
        \        else\n          echo \"⚠️ V2A failed for $VIDEO_ASSET_ID\"\n    \
        \    fi\n      fi\n    fi\n  done\nfi\n\n# 3. キャンペーン統一BGMの生成\necho \"Creating\
        \ campaign signature music...\"\nCAMPAIGN_THEME=$(echo \"$CREATIVE_CONCEPTS\"\
        \ | jq -r '.creative_theme.central_concept')\nBRAND_TONE=$(echo \"$CREATIVE_CONCEPTS\"\
        \ | jq -r '.visual_identity.visual_style')\n\nif [ \"$AUDIO_CAPABILITY\" =\
        \ \"full\" ] || [ \"$AUDIO_CAPABILITY\" = \"music_only\" ]; then\n  SIGNATURE_MUSIC_PROMPT=\"\
        campaign signature music, $CAMPAIGN_THEME theme, $BRAND_TONE style, 45 seconds,\
        \ memorable melody, suitable for brand recognition, professional commercial\
        \ quality\"\n  \n  if timeout 150 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2m-google-lyria --prompt \"$SIGNATURE_MUSIC_PROMPT\" --duration \"\
        45\" > .logs/multimedia-production/audio/campaign-signature-music.json 2>&1;\
        \ then\n    echo \"✅ Campaign signature music created\"\n  else\n    echo\
        \ \"⚠️ Campaign signature music creation failed\"\n  fi\nfi\n\n# 制作結果の統計\n\
        CREATED_AUDIO_COUNT=$(ls .logs/multimedia-production/audio/*.json 2>/dev/null\
        \ | wc -l)\n\n# 音声制作ログ\ncat > .logs/multimedia-production/audio/creation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"audio_creation_summary\"\
        : {\n    \"dedicated_audio_assets\": $AUDIO_COUNT,\n    \"total_audio_files_created\"\
        : $CREATED_AUDIO_COUNT,\n    \"audio_capability\": \"$AUDIO_CAPABILITY\",\n\
        \    \"creation_methods\": {\n      \"text_to_music\": $([ \"$AUDIO_CAPABILITY\"\
        \ = \"full\" ] || [ \"$AUDIO_CAPABILITY\" = \"music_only\" ] && echo \"true\"\
        \ || echo \"false\"),\n      \"video_to_audio\": $([ \"$AUDIO_CAPABILITY\"\
        \ = \"full\" ] && echo \"true\" || echo \"false\"),\n      \"signature_music\"\
        : $([ -f \".logs/multimedia-production/audio/campaign-signature-music.json\"\
        \ ] && echo \"true\" || echo \"false\")\n    }\n  },\n  \"created_assets\"\
        : [$(ls .logs/multimedia-production/audio/*.json 2>/dev/null | sed 's/.*/\"\
        &\"/' | paste -sd,)]\n}\nEOF\n\necho \"AUDIO_CREATION_STATUS=completed\" >>\
        \ $GITHUB_ENV\necho \"CREATED_AUDIO_COUNT=$CREATED_AUDIO_COUNT\" >> $GITHUB_ENV\n\
        \necho \"\U0001F3B5 Audio creation completed: $CREATED_AUDIO_COUNT audio files\""
      shell: bash
  concept-ideation:
    needs: campaign_strategy_development
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Develop creative concepts and ideas
      run: "echo \"\U0001F4A1 Developing creative concepts and ideas...\"\n\nmkdir\
        \ -p .logs/creative-concept\n\nCAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)\n\
        \n# クリエイティブコンセプト開発\nclaude-code --prompt \"以下のキャンペーン戦略に基づいて、革新的で効果的なクリエイティブコンセプトを開発してください：\n\
        \nキャンペーン戦略: $CAMPAIGN_STRATEGY\n\n以下の形式でJSONで回答してください：\n{\n  \\\"creative_theme\\\
        \": {\n    \\\"central_concept\\\": \\\"中心的なクリエイティブコンセプト\\\",\n    \\\"visual_metaphor\\\
        \": \\\"視覚的メタファー\\\",\n    \\\"storytelling_approach\\\": \\\"ストーリーテリング手法\\\
        \",\n    \\\"emotional_arc\\\": \\\"感情的な流れ\\\",\n    \\\"memorable_elements\\\
        \": [\\\"記憶に残る要素\\\"]\n  },\n  \\\"visual_identity\\\": {\n    \\\"color_palette\\\
        \": {\n      \\\"primary_colors\\\": [\\\"メインカラー（HEXコード）\\\"],\n      \\\"\
        secondary_colors\\\": [\\\"サブカラー（HEXコード）\\\"],\n      \\\"accent_colors\\\"\
        : [\\\"アクセントカラー（HEXコード）\\\"]\n    },\n    \\\"typography_style\\\": \\\"タイポグラフィスタイル\\\
        \",\n    \\\"visual_style\\\": \\\"全体的なビジュアルスタイル\\\",\n    \\\"imagery_direction\\\
        \": \\\"画像の方向性\\\",\n    \\\"iconography\\\": \\\"アイコノグラフィー方針\\\"\n  },\n\
        \  \\\"content_concepts\\\": [\n    {\n      \\\"concept_name\\\": \\\"コンセプト名\\\
        \",\n      \\\"media_type\\\": \\\"image|video|audio|3d|mixed\\\",\n     \
        \ \\\"core_idea\\\": \\\"核となるアイデア\\\",\n      \\\"visual_description\\\":\
        \ \\\"ビジュアル表現の詳細\\\",\n      \\\"target_emotion\\\": \\\"狙う感情\\\",\n     \
        \ \\\"key_message\\\": \\\"伝えるメッセージ\\\",\n      \\\"production_complexity\\\
        \": \\\"low|medium|high\\\",\n      \\\"estimated_impact\\\": \\\"high|medium|low\\\
        \"\n    }\n  ],\n  \\\"multimedia_integration\\\": {\n    \\\"cross_media_consistency\\\
        \": \\\"メディア間一貫性の方針\\\",\n    \\\"format_adaptation\\\": \\\"フォーマット適応戦略\\\"\
        ,\n    \\\"synergy_opportunities\\\": [\\\"相乗効果の機会\\\"],\n    \\\"user_journey_mapping\\\
        \": \\\"ユーザージャーニーでの活用\\\"\n  },\n  \\\"innovation_elements\\\": {\n    \\\"\
        cutting_edge_techniques\\\": [\\\"最先端技術の活用\\\"],\n    \\\"interactive_features\\\
        \": [\\\"インタラクティブ要素\\\"],\n    \\\"personalization_opportunities\\\": [\\\"\
        パーソナライゼーション機会\\\"],\n    \\\"viral_potential\\\": \\\"バイラル可能性\\\"\n  },\n\
        \  \\\"execution_guidelines\\\": {\n    \\\"quality_standards\\\": \\\"品質基準\\\
        \",\n    \\\"brand_compliance\\\": \\\"ブランド遵守事項\\\",\n    \\\"technical_requirements\\\
        \": [\\\"技術要件\\\"],\n    \\\"approval_criteria\\\": [\\\"承認基準\\\"]\n  }\n\
        }\" > .logs/creative-concept/creative-concepts.json\n\nCREATIVE_CONCEPTS=$(cat\
        \ .logs/creative-concept/creative-concepts.json)\necho \"CREATIVE_CONCEPTS_FILE=.logs/creative-concept/creative-concepts.json\"\
        \ >> $GITHUB_ENV\n\n# コンセプト数を環境変数に設定\nCONCEPT_COUNT=$(echo \"$CREATIVE_CONCEPTS\"\
        \ | jq '.content_concepts | length')\necho \"CONCEPT_COUNT=$CONCEPT_COUNT\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F4A1 Creative concept development completed\"\
        \necho \"Generated concepts: $CONCEPT_COUNT\""
      shell: bash
  connectivity-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Test all multimedia generation services
      run: "echo \"\U0001F3AF Testing comprehensive multimedia ad services...\"\n\n\
        mkdir -p .logs/connectivity-tests\n\n# 画像生成サービステスト（広告メイン素材）\necho \"Testing\
        \ image generation services...\"\nif timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2i-fal-imagen4-ultra --prompt \"professional advertisement image\
        \ test\" > .logs/connectivity-tests/image-ultra-test.log 2>&1; then\n  IMAGE_ULTRA_STATUS=\"\
        success\"\n  echo \"✅ Image Generation (Ultra): Available\"\nelse\n  IMAGE_ULTRA_STATUS=\"\
        failed\"\n  echo \"⚠️ Image Ultra: Not available\"\nfi\n\nif timeout 45 claude-code\
        \ --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast --prompt\
        \ \"advertisement graphics test\" > .logs/connectivity-tests/image-fast-test.log\
        \ 2>&1; then\n  IMAGE_FAST_STATUS=\"success\"\n  echo \"✅ Image Generation\
        \ (Fast): Available\"\nelse\n  IMAGE_FAST_STATUS=\"failed\"\n  echo \"⚠️ Image\
        \ Fast: Not available\"\nfi\n\nif timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2i-google-imagen3 --prompt \"google imagen test\" > .logs/connectivity-tests/image-google-test.log\
        \ 2>&1; then\n  IMAGE_GOOGLE_STATUS=\"success\"\n  echo \"✅ Google Imagen3:\
        \ Available\"\nelse\n  IMAGE_GOOGLE_STATUS=\"failed\"\n  echo \"⚠️ Google\
        \ Imagen3: Not available\"\nfi\n\n# 動画生成サービステスト\necho \"Testing video generation\
        \ services...\"\nif timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2v-fal-veo3-fast --prompt \"test advertisement video\" > .logs/connectivity-tests/video-test.log\
        \ 2>&1; then\n  VIDEO_STATUS=\"success\"\n  echo \"✅ Video Generation (T2V):\
        \ Available\"\nelse\n  VIDEO_STATUS=\"failed\"\n  echo \"⚠️ Video Generation:\
        \ Not available\"\nfi\n\nif timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp i2v-fal-hailuo-02-pro --image-path \"/tmp/test.jpg\" > .logs/connectivity-tests/i2v-test.log\
        \ 2>&1; then\n  I2V_STATUS=\"success\"\n  echo \"✅ Image-to-Video: Available\"\
        \nelse\n  I2V_STATUS=\"failed\"\n  echo \"⚠️ Image-to-Video: Not available\"\
        \nfi\n\n# 音楽・音声生成サービステスト\necho \"Testing audio generation services...\"\n\
        if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2m-google-lyria\
        \ --prompt \"advertisement background music\" > .logs/connectivity-tests/music-test.log\
        \ 2>&1; then\n  MUSIC_STATUS=\"success\"\n  echo \"✅ Music Generation: Available\"\
        \nelse\n  MUSIC_STATUS=\"failed\"\n  echo \"⚠️ Music Generation: Not available\"\
        \nfi\n\nif timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp v2a-fal-thinksound --video-path \"/tmp/test.mp4\" > .logs/connectivity-tests/v2a-test.log\
        \ 2>&1; then\n  V2A_STATUS=\"success\"\n  echo \"✅ Video-to-Audio: Available\"\
        \nelse\n  V2A_STATUS=\"failed\"\n  echo \"⚠️ Video-to-Audio: Not available\"\
        \nfi\n\n# 3D生成サービステスト\necho \"Testing 3D generation services...\"\nif timeout\
        \ 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i3d-fal-hunyuan3d-v21\
        \ --image-path \"/tmp/test.jpg\" > .logs/connectivity-tests/3d-test.log 2>&1;\
        \ then\n  THREED_STATUS=\"success\"\n  echo \"✅ 3D Model Generation: Available\"\
        \nelse\n  THREED_STATUS=\"failed\"\n  echo \"⚠️ 3D Generation: Not available\"\
        \nfi\n\n# 画像強化サービステスト\necho \"Testing image enhancement services...\"\nif\
        \ timeout 60 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp i2i-fal-flux-kontext-max\
        \ --image-path \"/tmp/test.jpg\" > .logs/connectivity-tests/enhancement-test.log\
        \ 2>&1; then\n  ENHANCEMENT_STATUS=\"success\"\n  echo \"✅ Image Enhancement:\
        \ Available\"\nelse\n  ENHANCEMENT_STATUS=\"failed\"\n  echo \"⚠️ Image Enhancement:\
        \ Not available\"\nfi\n\n# 動画編集サービステスト\necho \"Testing video editing services...\"\
        \nif timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp\
        \ v2v-fal-luma-ray2-modify --video-path \"/tmp/test.mp4\" > .logs/connectivity-tests/video-edit-test.log\
        \ 2>&1; then\n  VIDEO_EDIT_STATUS=\"success\"\n  echo \"✅ Video Editing: Available\"\
        \nelse\n  VIDEO_EDIT_STATUS=\"failed\"\n  echo \"⚠️ Video Editing: Not available\"\
        \nfi\n\n# Reference-to-Video サービステスト\necho \"Testing reference-to-video services...\"\
        \nif timeout 100 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp\
        \ r2v-fal-vidu-q1 --reference-path \"/tmp/test.jpg\" > .logs/connectivity-tests/r2v-test.log\
        \ 2>&1; then\n  R2V_STATUS=\"success\"\n  echo \"✅ Reference-to-Video: Available\"\
        \nelse\n  R2V_STATUS=\"failed\"\n  echo \"⚠️ Reference-to-Video: Not available\"\
        \nfi\n\n# サービス可用性の総合評価\nBASIC_CAPABILITY=\"none\"\nADVANCED_CAPABILITY=\"\
        none\"\n\n# 基本機能判定（画像+動画または音楽）\nif [ \"$IMAGE_FAST_STATUS\" = \"success\"\
        \ ] || [ \"$IMAGE_ULTRA_STATUS\" = \"success\" ] || [ \"$IMAGE_GOOGLE_STATUS\"\
        \ = \"success\" ]; then\n  if [ \"$VIDEO_STATUS\" = \"success\" ] || [ \"\
        $MUSIC_STATUS\" = \"success\" ]; then\n    BASIC_CAPABILITY=\"available\"\n\
        \  fi\nfi\n\n# 高度機能判定（3D、高品質動画編集等）\nif [ \"$THREED_STATUS\" = \"success\"\
        \ ] && [ \"$VIDEO_EDIT_STATUS\" = \"success\" ] && [ \"$ENHANCEMENT_STATUS\"\
        \ = \"success\" ]; then\n  ADVANCED_CAPABILITY=\"available\"\nfi\n\n# テスト結果をJSON保存\n\
        cat > .logs/connectivity-tests/test-results.json << EOF\n{\n  \"timestamp\"\
        : \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"multimedia_services\": {\n    \"\
        image_generation\": {\n      \"ultra_quality\": \"$IMAGE_ULTRA_STATUS\",\n\
        \      \"fast_quality\": \"$IMAGE_FAST_STATUS\",\n      \"google_imagen\"\
        : \"$IMAGE_GOOGLE_STATUS\"\n    },\n    \"video_generation\": {\n      \"\
        text_to_video\": \"$VIDEO_STATUS\",\n      \"image_to_video\": \"$I2V_STATUS\"\
        ,\n      \"reference_to_video\": \"$R2V_STATUS\",\n      \"video_editing\"\
        : \"$VIDEO_EDIT_STATUS\"\n    },\n    \"audio_generation\": {\n      \"music_creation\"\
        : \"$MUSIC_STATUS\",\n      \"video_to_audio\": \"$V2A_STATUS\"\n    },\n\
        \    \"3d_generation\": {\n      \"model_creation\": \"$THREED_STATUS\"\n\
        \    },\n    \"enhancement_services\": {\n      \"image_enhancement\": \"\
        $ENHANCEMENT_STATUS\"\n    }\n  },\n  \"capability_assessment\": {\n    \"\
        basic_multimedia_capability\": \"$BASIC_CAPABILITY\",\n    \"advanced_multimedia_capability\"\
        : \"$ADVANCED_CAPABILITY\",\n    \"workflow_can_proceed\": $([ \"$BASIC_CAPABILITY\"\
        \ = \"available\" ] && echo \"true\" || echo \"false\"),\n    \"full_feature_campaign\"\
        : $([ \"$ADVANCED_CAPABILITY\" = \"available\" ] && echo \"true\" || echo\
        \ \"false\")\n  },\n  \"service_priorities\": {\n    \"primary_image_service\"\
        : \"$([ \"$IMAGE_ULTRA_STATUS\" = \"success\" ] && echo \"ultra\" || [ \"\
        $IMAGE_FAST_STATUS\" = \"success\" ] && echo \"fast\" || [ \"$IMAGE_GOOGLE_STATUS\"\
        \ = \"success\" ] && echo \"google\" || echo \"none\")\",\n    \"video_capability\"\
        : \"$([ \"$VIDEO_STATUS\" = \"success\" ] && echo \"full\" || [ \"$I2V_STATUS\"\
        \ = \"success\" ] && echo \"i2v_only\" || echo \"none\")\",\n    \"audio_capability\"\
        : \"$([ \"$MUSIC_STATUS\" = \"success\" ] && [ \"$V2A_STATUS\" = \"success\"\
        \ ] && echo \"full\" || [ \"$MUSIC_STATUS\" = \"success\" ] && echo \"music_only\"\
        \ || echo \"none\")\",\n    \"enhancement_level\": \"$([ \"$ENHANCEMENT_STATUS\"\
        \ = \"success\" ] && [ \"$VIDEO_EDIT_STATUS\" = \"success\" ] && echo \"professional\"\
        \ || echo \"basic\")\"\n  }\n}\nEOF\n\n# 環境変数に結果を設定\necho \"BASIC_CAPABILITY=$BASIC_CAPABILITY\"\
        \ >> $GITHUB_ENV\necho \"ADVANCED_CAPABILITY=$ADVANCED_CAPABILITY\" >> $GITHUB_ENV\n\
        echo \"PRIMARY_IMAGE_SERVICE=$([ \"$IMAGE_ULTRA_STATUS\" = \"success\" ] &&\
        \ echo \"ultra\" || [ \"$IMAGE_FAST_STATUS\" = \"success\" ] && echo \"fast\"\
        \ || [ \"$IMAGE_GOOGLE_STATUS\" = \"success\" ] && echo \"google\" || echo\
        \ \"none\")\" >> $GITHUB_ENV\necho \"VIDEO_CAPABILITY=$([ \"$VIDEO_STATUS\"\
        \ = \"success\" ] && echo \"full\" || [ \"$I2V_STATUS\" = \"success\" ] &&\
        \ echo \"i2v_only\" || echo \"none\")\" >> $GITHUB_ENV\necho \"AUDIO_CAPABILITY=$([\
        \ \"$MUSIC_STATUS\" = \"success\" ] && [ \"$V2A_STATUS\" = \"success\" ] &&\
        \ echo \"full\" || [ \"$MUSIC_STATUS\" = \"success\" ] && echo \"music_only\"\
        \ || echo \"none\")\" >> $GITHUB_ENV\n\necho \"\U0001F3AF Multimedia services\
        \ connectivity tests completed\"\necho \"Basic capability: $BASIC_CAPABILITY\"\
        \necho \"Advanced capability: $ADVANCED_CAPABILITY\""
      shell: bash
    - name: Validate 全マルチメディアサービス接続テスト
      run: "if [ ! -f \".logs/connectivity-tests/test-results.json\" ]; then\n  echo\
        \ \"❌ VALIDATION FAILED: Test results missing\"\n  exit 1\nfi\n\nWORKFLOW_CAN_PROCEED=$(jq\
        \ -r '.capability_assessment.workflow_can_proceed' .logs/connectivity-tests/test-results.json)\n\
        if [ \"$WORKFLOW_CAN_PROCEED\" = \"true\" ]; then\n  echo \"✅ Validation passed:\
        \ Multimedia campaign services ready\"\nelse\n  echo \"❌ VALIDATION FAILED:\
        \ Critical multimedia services unavailable\"\n  exit 1\nfi\n"
  cross-media-optimization:
    needs:
    - audio_music_creation
    - 3d_immersive_content_creation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Optimize cross-media consistency and performance
      run: "echo \"\U0001F504 Optimizing cross-media consistency and performance...\"\
        \n\nmkdir -p .logs/integration-optimization\n\n# 全制作ログを収集\nIMAGE_LOG=$(cat\
        \ .logs/multimedia-production/images/generation-log.json 2>/dev/null || echo\
        \ '{}')\nVIDEO_LOG=$(cat .logs/multimedia-production/videos/production-log.json\
        \ 2>/dev/null || echo '{}')  \nAUDIO_LOG=$(cat .logs/multimedia-production/audio/creation-log.json\
        \ 2>/dev/null || echo '{}')\nTHREED_LOG=$(cat .logs/multimedia-production/3d/creation-log.json\
        \ 2>/dev/null || echo '{}')\n\nCAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)\n\
        CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)\nPRODUCTION_PLAN=$(cat\
        \ .logs/asset-planning/production-plan.json)\n\n# クロスメディア最適化分析\nclaude-code\
        \ --prompt \"以下の制作結果を基に、マルチメディア広告キャンペーンのクロスメディア最適化を実施してください：\n\nキャンペーン戦略:\
        \ $CAMPAIGN_STRATEGY\nクリエイティブコンセプト: $CREATIVE_CONCEPTS\n制作計画: $PRODUCTION_PLAN\n\
        \n制作実績:\n- 画像制作: $IMAGE_LOG\n- 動画制作: $VIDEO_LOG\n- 音声制作: $AUDIO_LOG\n- 3D制作:\
        \ $THREED_LOG\n\n以下の形式でJSONで回答してください：\n{\n  \\\"optimization_analysis\\\"\
        : {\n    \\\"cross_media_consistency\\\": {\n      \\\"visual_consistency_score\\\
        \": \\\"1-10点\\\",\n      \\\"brand_alignment_score\\\": \\\"1-10点\\\",\n\
        \      \\\"message_coherence_score\\\": \\\"1-10点\\\",\n      \\\"style_uniformity_score\\\
        \": \\\"1-10点\\\"\n    },\n    \\\"technical_quality\\\": {\n      \\\"resolution_consistency\\\
        \": \\\"1-10点\\\",\n      \\\"color_accuracy\\\": \\\"1-10点\\\",\n      \\\
        \"audio_quality\\\": \\\"1-10点\\\",\n      \\\"format_compatibility\\\": \\\
        \"1-10点\\\"\n    },\n    \\\"user_experience\\\": {\n      \\\"engagement_potential\\\
        \": \\\"1-10点\\\",\n      \\\"accessibility_score\\\": \\\"1-10点\\\",\n  \
        \    \\\"loading_performance\\\": \\\"1-10点\\\",\n      \\\"mobile_optimization\\\
        \": \\\"1-10点\\\"\n    }\n  },\n  \\\"identified_issues\\\": [\n    {\n  \
        \    \\\"issue_category\\\": \\\"visual|audio|technical|branding\\\",\n  \
        \    \\\"severity\\\": \\\"critical|high|medium|low\\\",\n      \\\"description\\\
        \": \\\"問題の詳細説明\\\",\n      \\\"affected_assets\\\": [\\\"影響を受ける素材ID\\\"],\n\
        \      \\\"impact_assessment\\\": \\\"キャンペーンへの影響評価\\\",\n      \\\"recommended_fix\\\
        \": \\\"推奨修正方法\\\"\n    }\n  ],\n  \\\"optimization_recommendations\\\": [\n\
        \    {\n      \\\"optimization_type\\\": \\\"color_correction|size_optimization|format_conversion|quality_enhancement\\\
        \",\n      \\\"target_assets\\\": [\\\"対象素材ID\\\"],\n      \\\"optimization_goal\\\
        \": \\\"最適化の目標\\\",\n      \\\"implementation_method\\\": \\\"実装方法\\\",\n\
        \      \\\"expected_improvement\\\": \\\"期待される改善効果\\\",\n      \\\"priority_level\\\
        \": \\\"high|medium|low\\\"\n    }\n  ],\n  \\\"channel_specific_adaptations\\\
        \": {\n    \\\"social_media\\\": {\n      \\\"format_requirements\\\": [\\\
        \"SNS向けフォーマット要件\\\"],\n      \\\"sizing_adaptations\\\": [\\\"サイズ調整要件\\\"\
        ],\n      \\\"engagement_optimizations\\\": [\\\"エンゲージメント最適化\\\"]\n    },\n\
        \    \\\"web_advertising\\\": {\n      \\\"banner_variations\\\": [\\\"バナー広告バリエーション\\\
        \"],\n      \\\"loading_optimizations\\\": [\\\"読み込み最適化\\\"],\n      \\\"\
        responsive_design\\\": [\\\"レスポンシブ対応\\\"]\n    },\n    \\\"video_platforms\\\
        \": {\n      \\\"aspect_ratio_variants\\\": [\\\"アスペクト比バリエーション\\\"],\n   \
        \   \\\"duration_adaptations\\\": [\\\"尺調整\\\"],\n      \\\"platform_specific_features\\\
        \": [\\\"プラットフォーム固有機能\\\"]\n    }\n  },\n  \\\"integration_strategy\\\": {\n\
        \    \\\"content_hierarchy\\\": \\\"コンテンツ階層の最適化\\\",\n    \\\"cross_promotion\\\
        \": \\\"クロスプロモーション戦略\\\",\n    \\\"synergy_maximization\\\": \\\"相乗効果最大化方法\\\
        \",\n    \\\"measurement_framework\\\": \\\"効果測定フレームワーク\\\"\n  },\n  \\\"\
        quality_assurance\\\": {\n    \\\"final_checklist\\\": [\\\"最終品質チェックリスト\\\"\
        ],\n    \\\"compliance_verification\\\": [\\\"コンプライアンス確認項目\\\"],\n    \\\"\
        performance_benchmarks\\\": [\\\"パフォーマンス基準\\\"],\n    \\\"approval_workflow\\\
        \": \\\"承認ワークフロー\\\"\n  }\n}\" > .logs/integration-optimization/optimization-analysis.json\n\
        \nOPTIMIZATION_ANALYSIS=$(cat .logs/integration-optimization/optimization-analysis.json)\n\
        \n# 最適化実行の優先度決定\nCRITICAL_ISSUES=$(echo \"$OPTIMIZATION_ANALYSIS\" | jq '[.identified_issues[]\
        \ | select(.severity == \"critical\")] | length')\nHIGH_PRIORITY_OPT=$(echo\
        \ \"$OPTIMIZATION_ANALYSIS\" | jq '[.optimization_recommendations[] | select(.priority_level\
        \ == \"high\")] | length')\n\necho \"CRITICAL_ISSUES_COUNT=$CRITICAL_ISSUES\"\
        \ >> $GITHUB_ENV\necho \"HIGH_PRIORITY_OPTIMIZATIONS=$HIGH_PRIORITY_OPT\"\
        \ >> $GITHUB_ENV\necho \"OPTIMIZATION_ANALYSIS_FILE=.logs/integration-optimization/optimization-analysis.json\"\
        \ >> $GITHUB_ENV\n\n# チャネル別適応版の生成計画\nclaude-code --prompt \"以下の最適化分析結果に基づいて、各配信チャネル向けの適応版制作計画を作成してください：\n\
        \n最適化分析: $OPTIMIZATION_ANALYSIS\n\n以下の形式でJSONで回答してください：\n{\n  \\\"adaptation_plan\\\
        \": {\n    \\\"total_variants_needed\\\": \\\"必要バリエーション総数\\\",\n    \\\"priority_channels\\\
        \": [\\\"優先チャネル\\\"],\n    \\\"adaptation_complexity\\\": \\\"low|medium|high\\\
        \"\n  },\n  \\\"channel_variants\\\": [\n    {\n      \\\"channel_name\\\"\
        : \\\"チャネル名\\\",\n      \\\"required_formats\\\": [\\\"必要フォーマット\\\"],\n  \
        \    \\\"adaptation_tasks\\\": [\\\"適応タスク\\\"],\n      \\\"estimated_effort\\\
        \": \\\"推定作業量\\\",\n      \\\"technical_requirements\\\": [\\\"技術要件\\\"]\n\
        \    }\n  ],\n  \\\"automation_opportunities\\\": [\n    {\n      \\\"task_type\\\
        \": \\\"自動化可能タスク\\\",\n      \\\"automation_method\\\": \\\"自動化方法\\\",\n \
        \     \\\"efficiency_gain\\\": \\\"効率向上度\\\"\n    }\n  ],\n  \\\"manual_review_points\\\
        \": [\\\"手動確認が必要なポイント\\\"],\n  \\\"delivery_timeline\\\": \\\"配信スケジュール\\\"\
        \n}\" > .logs/integration-optimization/adaptation-plan.json\n\nADAPTATION_PLAN=$(cat\
        \ .logs/integration-optimization/adaptation-plan.json)\necho \"ADAPTATION_PLAN_FILE=.logs/integration-optimization/adaptation-plan.json\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F504 Cross-media optimization completed\"\
        \necho \"Critical issues identified: $CRITICAL_ISSUES\"\necho \"High priority\
        \ optimizations: $HIGH_PRIORITY_OPT\""
      shell: bash
  final-packaging:
    needs: campaign_quality_assurance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create comprehensive campaign delivery package
      run: "echo \"\U0001F4E6 Creating comprehensive campaign delivery package...\"\
        \n\nmkdir -p .final-output/{strategy,creative,assets,optimization}\n\n# 戦略・企画ドキュメント\n\
        cp .logs/campaign-strategy/campaign-strategy.json .final-output/strategy/\
        \ 2>/dev/null || true\ncp .logs/creative-concept/creative-concepts.json .final-output/creative/\
        \ 2>/dev/null || true\ncp .logs/asset-planning/production-plan.json .final-output/strategy/\
        \ 2>/dev/null || true\n\n# 制作素材\nmkdir -p .final-output/assets/{images,videos,audio,3d}\n\
        cp .logs/multimedia-production/images/*.json .final-output/assets/images/\
        \ 2>/dev/null || true\ncp .logs/multimedia-production/videos/*.json .final-output/assets/videos/\
        \ 2>/dev/null || true\ncp .logs/multimedia-production/audio/*.json .final-output/assets/audio/\
        \ 2>/dev/null || true  \ncp .logs/multimedia-production/3d/*.json .final-output/assets/3d/\
        \ 2>/dev/null || true\n\n# 最適化・品質保証資料\ncp .logs/integration-optimization/*.json\
        \ .final-output/optimization/ 2>/dev/null || true\ncp .logs/campaign-finalization/*.json\
        \ .final-output/optimization/ 2>/dev/null || true\n\n# マスターキャンペーン情報の作成\ncat\
        \ > .final-output/campaign-master-package.json << EOF\n{\n  \"project_info\"\
        : {\n    \"project_name\": \"Multimedia Ad Campaign Creation\",\n    \"created_at\"\
        : \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n    \"github_run_id\": \"${{ github.run_id\
        \ }}\",\n    \"campaign_type\": \"integrated_multimedia_campaign\",\n    \"\
        total_production_time\": \"60 minutes\"\n  },\n  \"campaign_overview\": {\n\
        \    \"campaign_readiness_score\": \"$CAMPAIGN_READINESS_SCORE/100\",\n  \
        \  \"launch_status\": \"$LAUNCH_STATUS\",\n    \"total_assets_created\": $TOTAL_ASSETS,\n\
        \    \"multimedia_capabilities\": {\n      \"image_generation\": $([ \"$GENERATED_IMAGE_COUNT\"\
        \ -gt 0 ] && echo \"true\" || echo \"false\"),\n      \"video_production\"\
        : $([ \"$PRODUCED_VIDEO_COUNT\" -gt 0 ] && echo \"true\" || echo \"false\"\
        ),\n      \"audio_creation\": $([ \"$CREATED_AUDIO_COUNT\" -gt 0 ] && echo\
        \ \"true\" || echo \"false\"),\n      \"3d_modeling\": $([ \"$CREATED_3D_COUNT\"\
        \ -gt 0 ] && echo \"true\" || echo \"false\")\n    }\n  },\n  \"deliverables\"\
        : {\n    \"strategy_documents\": {\n      \"campaign_strategy\": \"strategy/campaign-strategy.json\"\
        ,\n      \"production_plan\": \"strategy/production-plan.json\"\n    },\n\
        \    \"creative_assets\": {\n      \"creative_concepts\": \"creative/creative-concepts.json\"\
        ,\n      \"image_assets\": \"assets/images/\",\n      \"video_assets\": \"\
        assets/videos/\",\n      \"audio_assets\": \"assets/audio/\",\n      \"3d_assets\"\
        : \"assets/3d/\"\n    },\n    \"optimization_reports\": {\n      \"cross_media_optimization\"\
        : \"optimization/optimization-analysis.json\",\n      \"adaptation_plan\"\
        : \"optimization/adaptation-plan.json\",\n      \"quality_assurance\": \"\
        optimization/quality-assurance-report.json\"\n    }\n  },\n  \"asset_inventory\"\
        : {\n    \"images_created\": $TOTAL_IMAGES,\n    \"videos_produced\": $TOTAL_VIDEOS,\n\
        \    \"audio_files_generated\": $TOTAL_AUDIO,\n    \"3d_models_created\":\
        \ $TOTAL_3D,\n    \"total_multimedia_assets\": $TOTAL_ASSETS\n  },\n  \"technical_capabilities\"\
        : {\n    \"basic_multimedia_capability\": \"$BASIC_CAPABILITY\",\n    \"advanced_multimedia_capability\"\
        : \"$ADVANCED_CAPABILITY\",\n    \"primary_image_service\": \"$PRIMARY_IMAGE_SERVICE\"\
        ,\n    \"video_capability\": \"$VIDEO_CAPABILITY\",\n    \"audio_capability\"\
        : \"$AUDIO_CAPABILITY\"\n  },\n  \"campaign_execution\": {\n    \"immediate_deployment_ready\"\
        : $([ \"$LAUNCH_STATUS\" = \"ready\" ] && echo \"true\" || echo \"false\"\
        ),\n    \"critical_issues_count\": \"$CRITICAL_ISSUES_COUNT\",\n    \"high_priority_optimizations\"\
        : \"$HIGH_PRIORITY_OPTIMIZATIONS\",\n    \"recommended_next_steps\": [\n \
        \     \"Review quality assurance report\",\n      \"Implement high-priority\
        \ optimizations\",\n      \"Conduct stakeholder approval process\",\n    \
        \  \"Execute channel-specific adaptations\",\n      \"Launch measurement framework\"\
        \n    ]\n  },\n  \"usage_guidelines\": {\n    \"asset_modification\": \"Assets\
        \ can be modified using source JSON specifications\",\n    \"brand_compliance\"\
        : \"Ensure all modifications maintain brand consistency\",\n    \"platform_adaptation\"\
        : \"Use adaptation plan for channel-specific versions\",\n    \"quality_maintenance\"\
        : \"Follow QA checklist for any changes\",\n    \"performance_monitoring\"\
        : \"Implement measurement framework for optimization\"\n  },\n  \"support_resources\"\
        : {\n    \"troubleshooting\": \"Check logs/ directory for detailed generation\
        \ information\",\n    \"asset_regeneration\": \"Use production-plan.json specifications\
        \ to recreate assets\",\n    \"optimization_guidance\": \"Follow optimization-analysis.json\
        \ recommendations\",\n    \"compliance_verification\": \"Use quality-assurance-report.json\
        \ compliance checklist\"\n  }\n}\nEOF\n\n# キャンペーン実行ガイドの作成\ncat > .final-output/CAMPAIGN_EXECUTION_GUIDE.md\
        \ << 'EOF'\n# マルチメディア広告キャンペーン実行ガイド\n\n## \U0001F4CA キャンペーン概要\n- 総制作素材数: 統合的なマルチメディア素材\n\
        - 品質評価スコア: 総合品質評価\n- 配信準備状況: 実行可能性レベル\n\n## \U0001F680 実行前チェックリスト\n- [ ] 全素材の品質確認\n\
        - [ ] ブランドガイドライン適合性確認\n- [ ] 各プラットフォーム仕様適合確認\n- [ ] 法的コンプライアンス確認\n- [ ] 測定・トラッキング設定\n\
        \n## \U0001F3AF 配信戦略\n- チャネル別最適化の実施\n- クロスメディア相乗効果の活用\n- パフォーマンス監視体制の構築\n\
        - 継続的最適化プロセスの実装\n\n## \U0001F4C8 成果測定\n- KPI設定と監視\n- A/Bテスト実施\n- ROI測定\n-\
        \ 継続改善サイクル\n\n## \U0001F527 技術的注意事項\n- ファイル形式の互換性確認\n- 読み込み速度の最適化\n- モバイル対応の検証\n\
        - アクセシビリティ対応\nEOF\n\n# ZIPパッケージ作成\ncd .final-output && zip -r ../multimedia-campaign-package.zip\
        \ . && cd ..\n\necho \"\U0001F4E6 Final campaign packaging completed\"\necho\
        \ \"Package includes:\"\necho \"- Campaign strategy and creative concepts\"\
        \necho \"- $TOTAL_ASSETS multimedia assets\"\necho \"- Cross-media optimization\
        \ analysis\"\necho \"- Quality assurance report (score: $CAMPAIGN_READINESS_SCORE/100)\"\
        \necho \"- Channel adaptation guidelines\"\necho \"- Execution and measurement\
        \ framework\"\necho \"Package location: multimedia-campaign-package.zip\""
      shell: bash
    - name: Validate 最終キャンペーンパッケージ・配信準備
      run: "if [ ! -f \".final-output/campaign-master-package.json\" ]; then\n  echo\
        \ \"❌ VALIDATION FAILED: Campaign package missing\"\n  exit 1\nfi\n\nif [\
        \ \"$LAUNCH_STATUS\" = \"ready\" ]; then\n  echo \"✅ Validation passed: Campaign\
        \ ready for launch\"\nelif [ \"$LAUNCH_STATUS\" = \"almost_ready\" ]; then\n\
        \  echo \"⚠️ WARNING: Minor adjustments recommended before launch\"\nelse\n\
        \  echo \"❌ VALIDATION FAILED: Major work needed before campaign launch\"\n\
        \  exit 1\nfi"
  hero-image-creation:
    needs: asset_specification_planning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create hero images and main visuals
      run: "echo \"\U0001F5BC️ Creating hero images and main visuals...\"\n\nmkdir\
        \ -p .logs/multimedia-production/images\n\nPRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)\n\
        CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)\n\n\
        # Phase 1 画像素材を抽出・生成\nPHASE_1_ASSETS=$(echo \"$PRODUCTION_PLAN\" | jq -r '.production_sequence.phase_1_assets[]')\n\
        \necho \"Creating Phase 1 image assets...\"\n\nfor asset_id in $PHASE_1_ASSETS;\
        \ do\n  # 該当素材の詳細情報を取得\n  ASSET_INFO=$(echo \"$PRODUCTION_PLAN\" | jq \".asset_specifications[]\
        \ | select(.asset_id == \\\"$asset_id\\\")\")\n  MEDIA_TYPE=$(echo \"$ASSET_INFO\"\
        \ | jq -r '.media_type')\n  \n  if [ \"$MEDIA_TYPE\" = \"image\" ] || [ \"\
        $MEDIA_TYPE\" = \"mixed\" ]; then\n    ASSET_NAME=$(echo \"$ASSET_INFO\" |\
        \ jq -r '.asset_name')\n    PRODUCTION_PROMPT=$(echo \"$ASSET_INFO\" | jq\
        \ -r '.production_prompt')\n    QUALITY_LEVEL=$(echo \"$ASSET_INFO\" | jq\
        \ -r '.technical_specs.quality_level')\n    \n    echo \"Generating $ASSET_NAME\
        \ (ID: $asset_id)...\"\n    \n    # サービス選択と生成実行\n    if [ \"$PRIMARY_IMAGE_SERVICE\"\
        \ = \"ultra\" ] && [ \"$QUALITY_LEVEL\" = \"premium\" ]; then\n      echo\
        \ \"Using Ultra quality service for $asset_id...\"\n      if timeout 120 claude-code\
        \ --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-ultra --prompt\
        \ \"$PRODUCTION_PROMPT\" > .logs/multimedia-production/images/${asset_id}.json\
        \ 2>&1; then\n        echo \"✅ $asset_id generated with Ultra quality\"\n\
        \        GENERATION_STATUS=\"success_ultra\"\n      else\n        echo \"\
        ⚠️ Ultra generation failed for $asset_id, trying fast...\"\n        if timeout\
        \ 90 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp t2i-fal-imagen4-fast\
        \ --prompt \"$PRODUCTION_PROMPT\" > .logs/multimedia-production/images/${asset_id}.json\
        \ 2>&1; then\n          echo \"✅ $asset_id generated with Fast quality\"\n\
        \          GENERATION_STATUS=\"success_fast\"\n        else\n          echo\
        \ \"❌ $asset_id generation failed\"\n          GENERATION_STATUS=\"failed\"\
        \n        fi\n      fi\n    elif [ \"$PRIMARY_IMAGE_SERVICE\" = \"fast\" ]\
        \ || [ \"$PRIMARY_IMAGE_SERVICE\" = \"google\" ]; then\n      SERVICE_NAME=$([\
        \ \"$PRIMARY_IMAGE_SERVICE\" = \"fast\" ] && echo \"t2i-fal-imagen4-fast\"\
        \ || echo \"t2i-google-imagen3\")\n      echo \"Using $SERVICE_NAME for $asset_id...\"\
        \n      if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp $SERVICE_NAME --prompt \"$PRODUCTION_PROMPT\" > .logs/multimedia-production/images/${asset_id}.json\
        \ 2>&1; then\n        echo \"✅ $asset_id generated successfully\"\n      \
        \  GENERATION_STATUS=\"success\"\n      else\n        echo \"❌ $asset_id generation\
        \ failed\"\n        GENERATION_STATUS=\"failed\"\n      fi\n    else\n   \
        \   echo \"⚠️ No suitable image generation service available for $asset_id\"\
        \n      GENERATION_STATUS=\"service_unavailable\"\n    fi\n    \n    # 生成結果の品質向上（可能な場合）\n\
        \    if [ \"$GENERATION_STATUS\" != \"failed\" ] && [ \"$GENERATION_STATUS\"\
        \ != \"service_unavailable\" ]; then\n      IMAGE_FILE_PATH=$(jq -r '.image_url\
        \ // .file_path // \"none\"' .logs/multimedia-production/images/${asset_id}.json\
        \ 2>/dev/null)\n      \n      if [ \"$IMAGE_FILE_PATH\" != \"none\" ] && [\
        \ \"$(echo \"$TEST_RESULTS\" | jq -r '.multimedia_services.enhancement_services.image_enhancement')\"\
        \ = \"success\" ]; then\n        echo \"Enhancing quality for $asset_id...\"\
        \n        if timeout 90 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp i2i-fal-flux-kontext-max --image-path \"$IMAGE_FILE_PATH\" --enhancement\
        \ \"professional advertisement quality, sharp details, vibrant colors\" >\
        \ .logs/multimedia-production/images/${asset_id}-enhanced.json 2>&1; then\n\
        \          echo \"✅ $asset_id enhanced successfully\"\n        fi\n      fi\n\
        \    fi\n  fi\ndone\n\n# 生成結果の統計\nGENERATED_COUNT=$(ls .logs/multimedia-production/images/*.json\
        \ 2>/dev/null | wc -l)\n\n# 生成ログの作成\ncat > .logs/multimedia-production/images/generation-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"image_generation_summary\"\
        : {\n    \"total_requested\": $PHASE_1_ASSET_COUNT,\n    \"successfully_generated\"\
        : $GENERATED_COUNT,\n    \"primary_service_used\": \"$PRIMARY_IMAGE_SERVICE\"\
        ,\n    \"quality_enhancement_applied\": $([ \"$(echo \"$TEST_RESULTS\" | jq\
        \ -r '.multimedia_services.enhancement_services.image_enhancement')\" = \"\
        success\" ] && echo \"true\" || echo \"false\")\n  },\n  \"generated_assets\"\
        : [$(ls .logs/multimedia-production/images/*.json 2>/dev/null | sed 's/.*/\"\
        &\"/' | paste -sd,)]\n}\nEOF\n\necho \"IMAGE_GENERATION_STATUS=completed\"\
        \ >> $GITHUB_ENV\necho \"GENERATED_IMAGE_COUNT=$GENERATED_COUNT\" >> $GITHUB_ENV\n\
        \necho \"\U0001F5BC️ Hero image creation completed: $GENERATED_COUNT images\""
      shell: bash
  quality-assurance:
    needs: cross_media_optimization
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Comprehensive quality assurance and final validation
      run: "echo \"\U0001F50D Conducting comprehensive quality assurance...\"\n\n\
        mkdir -p .logs/campaign-finalization\n\n# 全制作成果物の統計\nTOTAL_IMAGES=$(ls .logs/multimedia-production/images/*.json\
        \ 2>/dev/null | wc -l)\nTOTAL_VIDEOS=$(ls .logs/multimedia-production/videos/*.json\
        \ 2>/dev/null | wc -l)\nTOTAL_AUDIO=$(ls .logs/multimedia-production/audio/*.json\
        \ 2>/dev/null | wc -l)\nTOTAL_3D=$(ls .logs/multimedia-production/3d/*.json\
        \ 2>/dev/null | wc -l)\nTOTAL_ASSETS=$((TOTAL_IMAGES + TOTAL_VIDEOS + TOTAL_AUDIO\
        \ + TOTAL_3D))\n\n# 全データの統合\nCAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)\n\
        CREATIVE_CONCEPTS=$(cat .logs/creative-concept/creative-concepts.json)\nPRODUCTION_PLAN=$(cat\
        \ .logs/asset-planning/production-plan.json)\nOPTIMIZATION_ANALYSIS=$(cat\
        \ .logs/integration-optimization/optimization-analysis.json)\n\n# 包括的品質保証分析\n\
        claude-code --prompt \"以下の情報を基に、マルチメディア広告キャンペーンの包括的な品質保証評価を実施してください：\n\nキャンペーン戦略:\
        \ $CAMPAIGN_STRATEGY\nクリエイティブコンセプト: $CREATIVE_CONCEPTS\n制作計画: $PRODUCTION_PLAN\n\
        最適化分析: $OPTIMIZATION_ANALYSIS\n\n制作実績統計:\n- 画像素材: $TOTAL_IMAGES 件\n- 動画素材:\
        \ $TOTAL_VIDEOS 件\n- 音声素材: $TOTAL_AUDIO 件\n- 3D素材: $TOTAL_3D 件\n- 総素材数: $TOTAL_ASSETS\
        \ 件\n\n以下の形式でJSONで回答してください：\n{\n  \\\"overall_assessment\\\": {\n    \\\"\
        campaign_readiness_score\\\": \\\"1-100点での総合評価\\\",\n    \\\"strategic_alignment\\\
        \": \\\"1-10点での戦略整合性\\\",\n    \\\"creative_excellence\\\": \\\"1-10点でのクリエイティブ品質\\\
        \",\n    \\\"technical_quality\\\": \\\"1-10点での技術品質\\\",\n    \\\"brand_consistency\\\
        \": \\\"1-10点でのブランド一貫性\\\",\n    \\\"market_competitiveness\\\": \\\"1-10点での市場競争力\\\
        \"\n  },\n  \\\"quality_metrics\\\": {\n    \\\"content_completeness\\\":\
        \ \\\"$TOTAL_ASSETS/$TOTAL_PLANNED_ASSETS 達成率\\\",\n    \\\"production_efficiency\\\
        \": \\\"制作効率評価\\\",\n    \\\"innovation_level\\\": \\\"革新性レベル評価\\\",\n   \
        \ \\\"scalability_potential\\\": \\\"拡張可能性評価\\\"\n  },\n  \\\"compliance_check\\\
        \": {\n    \\\"brand_guidelines\\\": \\\"ブランドガイドライン準拠\\\",\n    \\\"technical_standards\\\
        \": \\\"技術基準適合\\\",\n    \\\"accessibility_compliance\\\": \\\"アクセシビリティ対応\\\
        \",\n    \\\"platform_requirements\\\": \\\"プラットフォーム要件適合\\\",\n    \\\"legal_compliance\\\
        \": \\\"法的コンプライアンス\\\"\n  },\n  \\\"risk_assessment\\\": {\n    \\\"high_risk_factors\\\
        \": [\\\"高リスク要因\\\"],\n    \\\"medium_risk_factors\\\": [\\\"中リスク要因\\\"],\n\
        \    \\\"mitigation_strategies\\\": [\\\"リスク軽減策\\\"],\n    \\\"contingency_plans\\\
        \": [\\\"緊急時対応計画\\\"]\n  },\n  \\\"performance_predictions\\\": {\n    \\\"\
        expected_engagement_rate\\\": \\\"予想エンゲージメント率\\\",\n    \\\"conversion_potential\\\
        \": \\\"コンバージョン可能性\\\",\n    \\\"viral_potential\\\": \\\"バイラル可能性\\\",\n \
        \   \\\"brand_impact_score\\\": \\\"ブランドインパクト予測\\\"\n  },\n  \\\"launch_readiness\\\
        \": {\n    \\\"immediate_launch\\\": \\\"即座実行可能素材\\\",\n    \\\"minor_adjustments_needed\\\
        \": \\\"微調整必要素材\\\",\n    \\\"major_revisions_required\\\": \\\"大幅修正必要素材\\\
        \",\n    \\\"overall_launch_status\\\": \\\"ready|almost_ready|needs_work\\\
        \"\n  },\n  \\\"success_optimization\\\": {\n    \\\"high_impact_improvements\\\
        \": [\\\"高インパクト改善案\\\"],\n    \\\"quick_wins\\\": [\\\"即効性改善案\\\"],\n    \\\
        \"long_term_enhancements\\\": [\\\"長期的強化案\\\"],\n    \\\"competitive_advantages\\\
        \": [\\\"競合優位要素\\\"]\n  },\n  \\\"measurement_framework\\\": {\n    \\\"primary_kpis\\\
        \": [\\\"主要KPI設定\\\"],\n    \\\"tracking_implementation\\\": \\\"トラッキング実装方針\\\
        \",\n    \\\"reporting_schedule\\\": \\\"レポーティングスケジュール\\\",\n    \\\"optimization_triggers\\\
        \": [\\\"最適化実行トリガー\\\"]\n  }\n}\" > .logs/campaign-finalization/quality-assurance-report.json\n\
        \nQA_REPORT=$(cat .logs/campaign-finalization/quality-assurance-report.json)\n\
        CAMPAIGN_READINESS=$(echo \"$QA_REPORT\" | jq -r '.overall_assessment.campaign_readiness_score')\n\
        LAUNCH_STATUS=$(echo \"$QA_REPORT\" | jq -r '.launch_readiness.overall_launch_status')\n\
        \necho \"CAMPAIGN_READINESS_SCORE=$CAMPAIGN_READINESS\" >> $GITHUB_ENV\necho\
        \ \"LAUNCH_STATUS=$LAUNCH_STATUS\" >> $GITHUB_ENV\necho \"QA_REPORT_FILE=.logs/campaign-finalization/quality-assurance-report.json\"\
        \ >> $GITHUB_ENV\n\necho \"\U0001F50D Quality assurance completed\"\necho\
        \ \"Campaign readiness score: $CAMPAIGN_READINESS/100\"\necho \"Launch status:\
        \ $LAUNCH_STATUS\""
      shell: bash
  strategy-development:
    needs: multimedia_services_connectivity_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Develop comprehensive campaign strategy
      run: "echo \"\U0001F3AF Developing comprehensive campaign strategy...\"\n\n\
        mkdir -p .logs/campaign-strategy\n\n# 入力からキャンペーン要件を抽出\nCAMPAIGN_OBJECTIVE=\"\
        ${{ github.event.inputs.campaign_objective || github.event.issue.title ||\
        \ 'Brand Awareness Campaign' }}\"\nTARGET_AUDIENCE=\"${{ github.event.inputs.target_audience\
        \ || 'general consumers' }}\"\nBUDGET_RANGE=\"${{ github.event.inputs.budget_range\
        \ || 'medium budget' }}\"\nCAMPAIGN_DURATION=\"${{ github.event.inputs.campaign_duration\
        \ || '4 weeks' }}\"\nCHANNELS=\"${{ github.event.inputs.channels || 'digital\
        \ channels' }}\"\nBRAND_TONE=\"${{ github.event.inputs.brand_tone || 'professional\
        \ and friendly' }}\"\n\necho \"Campaign objective: $CAMPAIGN_OBJECTIVE\"\n\
        echo \"Target audience: $TARGET_AUDIENCE\"\necho \"Budget range: $BUDGET_RANGE\"\
        \necho \"Duration: $CAMPAIGN_DURATION\"\necho \"Channels: $CHANNELS\"\necho\
        \ \"Brand tone: $BRAND_TONE\"\n\n# Claude Code でキャンペーン戦略開発\nclaude-code --prompt\
        \ \"以下の要件に基づいて、包括的なマルチメディア広告キャンペーン戦略を開発してください：\n\nキャンペーン目標: $CAMPAIGN_OBJECTIVE\n\
        対象顧客: $TARGET_AUDIENCE\n予算規模: $BUDGET_RANGE\n実施期間: $CAMPAIGN_DURATION\n活用チャネル:\
        \ $CHANNELS\nブランドトーン: $BRAND_TONE\n\n以下の形式でJSONで回答してください：\n{\n  \\\"campaign_overview\\\
        \": {\n    \\\"campaign_name\\\": \\\"キャンペーン名\\\",\n    \\\"primary_objective\\\
        \": \\\"主要目標\\\",\n    \\\"success_metrics\\\": [\\\"成功指標\\\"],\n    \\\"\
        unique_value_proposition\\\": \\\"独自価値提案\\\",\n    \\\"competitive_advantage\\\
        \": \\\"競合優位性\\\"\n  },\n  \\\"target_analysis\\\": {\n    \\\"primary_persona\\\
        \": {\n      \\\"demographics\\\": \\\"人口統計的特徴\\\",\n      \\\"psychographics\\\
        \": \\\"心理的特徴\\\",\n      \\\"pain_points\\\": [\\\"課題・ニーズ\\\"],\n      \\\
        \"media_consumption\\\": [\\\"メディア接触習慣\\\"],\n      \\\"decision_factors\\\
        \": [\\\"購買決定要因\\\"]\n    },\n    \\\"secondary_personas\\\": [\\\"サブターゲット群\\\
        \"],\n    \\\"market_size\\\": \\\"市場規模推定\\\",\n    \\\"growth_potential\\\
        \": \\\"成長可能性\\\"\n  },\n  \\\"messaging_strategy\\\": {\n    \\\"core_message\\\
        \": \\\"核となるメッセージ\\\",\n    \\\"supporting_messages\\\": [\\\"サポートメッセージ\\\"\
        ],\n    \\\"emotional_triggers\\\": [\\\"感情的訴求ポイント\\\"],\n    \\\"rational_benefits\\\
        \": [\\\"理性的ベネフィット\\\"],\n    \\\"call_to_action\\\": \\\"行動喚起メッセージ\\\"\n\
        \  },\n  \\\"channel_strategy\\\": {\n    \\\"primary_channels\\\": [\\\"\
        主要チャネル\\\"],\n    \\\"secondary_channels\\\": [\\\"補助チャネル\\\"],\n    \\\"\
        channel_mix_rationale\\\": \\\"チャネルミックスの理由\\\",\n    \\\"cross_channel_synergy\\\
        \": \\\"チャネル間相乗効果\\\"\n  },\n  \\\"multimedia_requirements\\\": {\n    \\\"\
        content_types_needed\\\": [\\\"必要なコンテンツタイプ\\\"],\n    \\\"format_specifications\\\
        \": {\n      \\\"images\\\": [\\\"画像仕様要件\\\"],\n      \\\"videos\\\": [\\\"\
        動画仕様要件\\\"],\n      \\\"audio\\\": [\\\"音声仕様要件\\\"],\n      \\\"3d_content\\\
        \": [\\\"3Dコンテンツ要件\\\"]\n    },\n    \\\"quality_standards\\\": \\\"品質基準\\\
        \",\n    \\\"brand_consistency\\\": \\\"ブランド一貫性要件\\\"\n  },\n  \\\"campaign_timeline\\\
        \": {\n    \\\"phase_1\\\": \\\"第1フェーズ（準備・制作）\\\",\n    \\\"phase_2\\\": \\\
        \"第2フェーズ（実行・展開）\\\",\n    \\\"phase_3\\\": \\\"第3フェーズ（最適化・拡張）\\\",\n    \\\
        \"key_milestones\\\": [\\\"重要マイルストーン\\\"],\n    \\\"optimization_points\\\"\
        : [\\\"最適化ポイント\\\"]\n  },\n  \\\"success_measurement\\\": {\n    \\\"kpis\\\
        \": [\\\"主要業績指標\\\"],\n    \\\"tracking_methods\\\": [\\\"測定方法\\\"],\n   \
        \ \\\"reporting_frequency\\\": \\\"レポート頻度\\\",\n    \\\"optimization_triggers\\\
        \": [\\\"最適化実行トリガー\\\"]\n  }\n}\" > .logs/campaign-strategy/campaign-strategy.json\n\
        \nCAMPAIGN_STRATEGY=$(cat .logs/campaign-strategy/campaign-strategy.json)\n\
        echo \"CAMPAIGN_STRATEGY_FILE=.logs/campaign-strategy/campaign-strategy.json\"\
        \ >> $GITHUB_ENV\n\n# 必要コンテンツタイプを環境変数に設定\nCONTENT_TYPES=$(echo \"$CAMPAIGN_STRATEGY\"\
        \ | jq -r '.multimedia_requirements.content_types_needed | join(\",\")')\n\
        echo \"REQUIRED_CONTENT_TYPES=$CONTENT_TYPES\" >> $GITHUB_ENV\n\necho \"\U0001F3AF\
        \ Campaign strategy development completed\"\necho \"Required content types:\
        \ $CONTENT_TYPES\""
      shell: bash
  video-production:
    needs: hero_image_creation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create video content and animations
      run: "echo \"\U0001F3AC Creating video content and animations...\"\n\nmkdir\
        \ -p .logs/multimedia-production/videos\n\nPRODUCTION_PLAN=$(cat .logs/asset-planning/production-plan.json)\n\
        IMAGE_GENERATION_LOG=$(cat .logs/multimedia-production/images/generation-log.json)\n\
        \n# 動画制作対象素材を抽出\necho \"Identifying video assets for production...\"\n\nVIDEO_ASSETS=$(echo\
        \ \"$PRODUCTION_PLAN\" | jq -r '.asset_specifications[] | select(.media_type\
        \ == \"video\" or .media_type == \"mixed\") | .asset_id')\nVIDEO_COUNT=$(echo\
        \ \"$VIDEO_ASSETS\" | wc -w)\n\necho \"Found $VIDEO_COUNT video assets to\
        \ produce\"\n\nfor asset_id in $VIDEO_ASSETS; do\n  ASSET_INFO=$(echo \"$PRODUCTION_PLAN\"\
        \ | jq \".asset_specifications[] | select(.asset_id == \\\"$asset_id\\\")\"\
        )\n  ASSET_NAME=$(echo \"$ASSET_INFO\" | jq -r '.asset_name')\n  PRODUCTION_PROMPT=$(echo\
        \ \"$ASSET_INFO\" | jq -r '.production_prompt')\n  DURATION=$(echo \"$ASSET_INFO\"\
        \ | jq -r '.technical_specs.duration // \"15 seconds\"')\n  PRIORITY=$(echo\
        \ \"$ASSET_INFO\" | jq -r '.priority_level')\n  \n  echo \"Producing video:\
        \ $ASSET_NAME (ID: $asset_id, Priority: $PRIORITY)...\"\n  \n  # 制作方法の決定\n\
        \  PRODUCTION_METHOD=\"none\"\n  \n  if [ \"$VIDEO_CAPABILITY\" = \"full\"\
        \ ]; then\n    # T2V (Text-to-Video) で直接生成\n    echo \"Using T2V for $asset_id...\"\
        \n    ENHANCED_PROMPT=\"$PRODUCTION_PROMPT, professional advertisement video,\
        \ high quality, engaging, $DURATION duration, smooth motion, commercial grade\"\
        \n    \n    if timeout 180 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp t2v-fal-veo3-fast --prompt \"$ENHANCED_PROMPT\" --duration \"$DURATION\"\
        \ > .logs/multimedia-production/videos/${asset_id}.json 2>&1; then\n     \
        \ echo \"✅ $asset_id created with T2V\"\n      PRODUCTION_METHOD=\"t2v\"\n\
        \    else\n      echo \"⚠️ T2V failed for $asset_id, trying I2V...\"\n   \
        \   PRODUCTION_METHOD=\"failed_t2v\"\n    fi\n  fi\n  \n  # I2V (Image-to-Video)\
        \ フォールバック\n  if [ \"$PRODUCTION_METHOD\" = \"failed_t2v\" ] || [ \"$VIDEO_CAPABILITY\"\
        \ = \"i2v_only\" ]; then\n    # 対応する画像ファイルを探す\n    CORRESPONDING_IMAGE=$(ls\
        \ .logs/multimedia-production/images/${asset_id}*.json 2>/dev/null | head\
        \ -1)\n    \n    if [ -n \"$CORRESPONDING_IMAGE\" ]; then\n      IMAGE_PATH=$(jq\
        \ -r '.image_url // .file_path // \"none\"' \"$CORRESPONDING_IMAGE\" 2>/dev/null)\n\
        \      \n      if [ \"$IMAGE_PATH\" != \"none\" ]; then\n        echo \"Using\
        \ I2V for $asset_id with corresponding image...\"\n        MOTION_DESCRIPTION=\"\
        $PRODUCTION_PROMPT, cinematic motion, smooth transitions, professional advertisement\
        \ style\"\n        \n        if timeout 150 claude-code --mcp-config=.claude/mcp-kamuicode.json\
        \ --mcp i2v-fal-hailuo-02-pro --image-path \"$IMAGE_PATH\" --motion-description\
        \ \"$MOTION_DESCRIPTION\" > .logs/multimedia-production/videos/${asset_id}-i2v.json\
        \ 2>&1; then\n          echo \"✅ $asset_id created with I2V\"\n          PRODUCTION_METHOD=\"\
        i2v\"\n        else\n          echo \"❌ I2V failed for $asset_id\"\n     \
        \     PRODUCTION_METHOD=\"failed\"\n        fi\n      fi\n    else\n     \
        \ echo \"⚠️ No corresponding image found for I2V production of $asset_id\"\
        \n      PRODUCTION_METHOD=\"no_image\"\n    fi\n  fi\n  \n  # R2V (Reference-to-Video)\
        \ 試行（可能な場合）\n  if [ \"$PRODUCTION_METHOD\" = \"failed\" ] && [ \"$(echo \"\
        $TEST_RESULTS\" | jq -r '.multimedia_services.video_generation.reference_to_video')\"\
        \ = \"success\" ]; then\n    REFERENCE_IMAGE=$(ls .logs/multimedia-production/images/*.json\
        \ 2>/dev/null | head -1)\n    if [ -n \"$REFERENCE_IMAGE\" ]; then\n     \
        \ REFERENCE_PATH=$(jq -r '.image_url // .file_path // \"none\"' \"$REFERENCE_IMAGE\"\
        \ 2>/dev/null)\n      if [ \"$REFERENCE_PATH\" != \"none\" ]; then\n     \
        \   echo \"Trying R2V for $asset_id...\"\n        if timeout 120 claude-code\
        \ --mcp-config=.claude/mcp-kamuicode.json --mcp r2v-fal-vidu-q1 --reference-path\
        \ \"$REFERENCE_PATH\" --description \"$PRODUCTION_PROMPT\" > .logs/multimedia-production/videos/${asset_id}-r2v.json\
        \ 2>&1; then\n          echo \"✅ $asset_id created with R2V\"\n          PRODUCTION_METHOD=\"\
        r2v\"\n        fi\n      fi\n    fi\n  fi\n  \n  # 動画品質向上（可能な場合）\n  if [ \"\
        $PRODUCTION_METHOD\" != \"failed\" ] && [ \"$PRODUCTION_METHOD\" != \"none\"\
        \ ] && [ \"$PRODUCTION_METHOD\" != \"no_image\" ]; then\n    VIDEO_FILE=$(ls\
        \ .logs/multimedia-production/videos/${asset_id}*.json | head -1)\n    VIDEO_PATH=$(jq\
        \ -r '.video_url // .file_path // \"none\"' \"$VIDEO_FILE\" 2>/dev/null)\n\
        \    \n    if [ \"$VIDEO_PATH\" != \"none\" ] && [ \"$(echo \"$TEST_RESULTS\"\
        \ | jq -r '.multimedia_services.video_generation.video_editing')\" = \"success\"\
        \ ]; then\n      echo \"Enhancing video quality for $asset_id...\"\n     \
        \ if timeout 120 claude-code --mcp-config=.claude/mcp-kamuicode.json --mcp\
        \ v2v-fal-luma-ray2-modify --video-path \"$VIDEO_PATH\" --modification \"\
        enhance quality, improve sharpness, optimize colors, professional advertisement\
        \ standard\" > .logs/multimedia-production/videos/${asset_id}-enhanced.json\
        \ 2>&1; then\n        echo \"✅ $asset_id video enhanced\"\n      fi\n    fi\n\
        \  fi\ndone\n\n# 制作結果の統計\nPRODUCED_COUNT=$(ls .logs/multimedia-production/videos/*.json\
        \ 2>/dev/null | wc -l)\n\n# 動画制作ログ\ncat > .logs/multimedia-production/videos/production-log.json\
        \ << EOF\n{\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"video_production_summary\"\
        : {\n    \"total_video_assets_planned\": $VIDEO_COUNT,\n    \"successfully_produced\"\
        : $PRODUCED_COUNT,\n    \"video_capability_used\": \"$VIDEO_CAPABILITY\",\n\
        \    \"primary_production_methods\": [\"t2v\", \"i2v\", \"r2v\"],\n    \"\
        quality_enhancement_applied\": $([ \"$(echo \"$TEST_RESULTS\" | jq -r '.multimedia_services.video_generation.video_editing')\"\
        \ = \"success\" ] && echo \"true\" || echo \"false\")\n  },\n  \"produced_assets\"\
        : [$(ls .logs/multimedia-production/videos/*.json 2>/dev/null | sed 's/.*/\"\
        &\"/' | paste -sd,)]\n}\nEOF\n\necho \"VIDEO_PRODUCTION_STATUS=completed\"\
        \ >> $GITHUB_ENV\necho \"PRODUCED_VIDEO_COUNT=$PRODUCED_COUNT\" >> $GITHUB_ENV\n\
        \necho \"\U0001F3AC Video production completed: $PRODUCED_COUNT videos\""
      shell: bash
  workflow_summary:
    if: always()
    needs:
    - connectivity-test
    - strategy-development
    - concept-ideation
    - asset-planning
    - hero-image-creation
    - video-production
    - audio-creation
    - 3d-content-creation
    - cross-media-optimization
    - quality-assurance
    - final-packaging
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Generate Workflow Summary
      run: "\necho \"\U0001F4CB multimedia-ad-campaign Completion Summary\"\necho\
        \ \"================================\"\necho \"Total Tasks: 11\"\necho \"\
        Description: 統合的なマルチメディア広告キャンペーンの完全制作フロー（画像・動画・音楽・3D統合）\"\necho \"Completed:\
        \ $(date -u +%Y-%m-%dT%H:%M:%SZ)\"\necho \"✅ All tasks processed successfully\"\
        \n\n# Create final output summary\nmkdir -p outputs/final\ncat > outputs/final/workflow-summary.json\
        \ << EOF\n{\n  \"workflow_name\": \"multimedia-ad-campaign\",\n  \"total_tasks\"\
        : 11,\n  \"completion_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"status\"\
        : \"completed\"\n}\nEOF\n"
    - name: Upload Final Outputs
      uses: actions/upload-artifact@v4
      with:
        name: workflow-outputs-${{ github.run_number }}
        path: outputs/
        retention-days: 30
name: "Integrated Multimedia Pipeline"
'on':
  workflow_dispatch:
    inputs:
      content_topic:
        description: コンテンツのテーマ・内容
        required: true
        type: string
      quality_level:
        default: high
        description: 品質設定
        options:
        - standard
        - high
        - ultra
        required: false
        type: choice
permissions:
  actions: read
  contents: write
run-name: ${{ github.actor }} creates multimedia-ad-campaign 🎬🎵🎙️
