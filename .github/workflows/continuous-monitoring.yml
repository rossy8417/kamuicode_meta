name: Continuous Workflow Monitoring
run-name: 🔍 Quick monitoring check

on:
  schedule:
    # 20分おきに実行（負荷軽減）
    - cron: '*/20 * * * *'
  workflow_dispatch:
    inputs:
      alert_threshold:
        description: '失敗率アラート閾値（%）'
        required: false
        type: number
        default: 50

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  quick-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Quick System Health Check
        run: |
          echo "🔍 Starting quick system health check..."
          
          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          ALERT_THRESHOLD=${{ github.event.inputs.alert_threshold || 50 }}
          
          echo "📋 Health check at ${CURRENT_TIME}"
          echo "🎯 Alert threshold: ${ALERT_THRESHOLD}%"
          
          mkdir -p .monitoring/{logs,alerts,reports}
          
          # システム状況をチェック
          if command -v gh &> /dev/null; then
            echo "📊 Checking recent workflow status..."
            
            # メタワークフローの状況を確認
            META_RUNS=$(gh run list --workflow="kamuicode-meta-generator.yml" --limit 10 --json status,conclusion,createdAt 2>/dev/null || echo "[]")
            META_TOTAL=$(echo "$META_RUNS" | jq 'length' 2>/dev/null || echo "0")
            META_FAILED=$(echo "$META_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")
            
            # 自動修正システムの状況を確認
            AUTO_RUNS=$(gh run list --workflow="auto-fix-deployment.yml" --limit 5 --json status,conclusion,createdAt 2>/dev/null || echo "[]")
            AUTO_TOTAL=$(echo "$AUTO_RUNS" | jq 'length' 2>/dev/null || echo "0")
            AUTO_FAILED=$(echo "$AUTO_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")
            
            # リアルタイム修正システムの状況を確認
            RT_RUNS=$(gh run list --workflow="real-time-fix-deployer.yml" --limit 5 --json status,conclusion,createdAt 2>/dev/null || echo "[]")
            RT_TOTAL=$(echo "$RT_RUNS" | jq 'length' 2>/dev/null || echo "0")
            RT_FAILED=$(echo "$RT_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length' 2>/dev/null || echo "0")
            
            # 全体の失敗率計算
            TOTAL_RUNS=$((META_TOTAL + AUTO_TOTAL + RT_TOTAL))
            TOTAL_FAILED=$((META_FAILED + AUTO_FAILED + RT_FAILED))
            
            if [ "$TOTAL_RUNS" -gt 0 ]; then
              FAILURE_RATE=$(echo "scale=2; $TOTAL_FAILED * 100 / $TOTAL_RUNS" | bc 2>/dev/null || echo "0")
              echo "📊 System Health Summary:"
              echo "  - Meta Workflow: $META_FAILED/$META_TOTAL failed"
              echo "  - Auto-Fix System: $AUTO_FAILED/$AUTO_TOTAL failed"
              echo "  - Real-Time Fix: $RT_FAILED/$RT_TOTAL failed"
              echo "  - Overall: $TOTAL_FAILED/$TOTAL_RUNS failed (${FAILURE_RATE}%)"
              
              # アラート条件チェック
              if (( $(echo "$FAILURE_RATE > $ALERT_THRESHOLD" | bc -l 2>/dev/null || echo "0") )); then
                echo "🚨 ALERT: High failure rate detected (${FAILURE_RATE}%)"
                
                # アラート記録
                cat > .monitoring/alerts/alert-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "${CURRENT_TIME}",
            "alert_type": "high_system_failure_rate",
            "failure_rate": ${FAILURE_RATE},
            "threshold": ${ALERT_THRESHOLD},
            "details": {
              "meta_workflow_failed": ${META_FAILED},
              "auto_fix_failed": ${AUTO_FAILED},
              "realtime_fix_failed": ${RT_FAILED},
              "total_failed": ${TOTAL_FAILED},
              "total_runs": ${TOTAL_RUNS}
            }
          }
          EOF
                
                HEALTH_STATUS="warning"
              else
                echo "✅ System health normal (${FAILURE_RATE}% failure rate)"
                HEALTH_STATUS="healthy"
              fi
            else
              echo "ℹ️ No recent workflow runs found"
              HEALTH_STATUS="unknown"
              FAILURE_RATE=0
            fi
            
          else
            echo "⚠️ GitHub CLI not available"
            HEALTH_STATUS="degraded"
            FAILURE_RATE=0
          fi
          
          # 監視ログ作成
          cat > .monitoring/logs/health-check-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "${CURRENT_TIME}",
            "health_status": "${HEALTH_STATUS}",
            "system_metrics": {
              "total_runs_checked": ${TOTAL_RUNS:-0},
              "total_failures": ${TOTAL_FAILED:-0},
              "failure_rate": ${FAILURE_RATE:-0}
            },
            "components": {
              "meta_workflow": {
                "total": ${META_TOTAL:-0},
                "failed": ${META_FAILED:-0}
              },
              "auto_fix_system": {
                "total": ${AUTO_TOTAL:-0},
                "failed": ${AUTO_FAILED:-0}
              },
              "realtime_fix": {
                "total": ${RT_TOTAL:-0},
                "failed": ${RT_FAILED:-0}
              }
            }
          }
          EOF
          
          echo "🎯 Quick health check completed in <30 seconds"
          
      - name: Generate Quick Report
        run: |
          echo "📄 Generating quick monitoring report..."
          
          echo "# 🔍 Quick System Health Report" > monitoring-report.md
          echo "" >> monitoring-report.md
          echo "**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> monitoring-report.md
          echo "**Duration**: <30 seconds" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "## System Status" >> monitoring-report.md
          
          # アラートの確認
          if [ -d ".monitoring/alerts" ] && [ -n "$(ls -A .monitoring/alerts 2>/dev/null)" ]; then
            echo "🚨 **Status**: Warning - Issues detected" >> monitoring-report.md
            echo "" >> monitoring-report.md
            echo "### Alerts:" >> monitoring-report.md
            for alert in .monitoring/alerts/*.json; do
              if [ -f "$alert" ] && [ -s "$alert" ]; then
                ALERT_RATE=$(jq -r '.failure_rate' "$alert" 2>/dev/null || echo "unknown")
                echo "- High failure rate: ${ALERT_RATE}%" >> monitoring-report.md
              fi
            done
          else
            echo "✅ **Status**: All systems operating normally" >> monitoring-report.md
          fi
          
          echo "" >> monitoring-report.md
          echo "## Quick Actions Available" >> monitoring-report.md
          echo "- Auto-Fix System: Active and monitoring" >> monitoring-report.md
          echo "- Real-Time Deployer: Ready for emergency fixes" >> monitoring-report.md
          echo "- Continuous monitoring: Every 20 minutes" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "---" >> monitoring-report.md
          echo "Generated by Quick Monitoring System 🤖 (Optimized for speed)" >> monitoring-report.md
          
      - name: Upload Monitoring Data
        uses: actions/upload-artifact@v4
        with:
          name: quick-monitoring-${{ github.run_number }}
          path: |
            .monitoring/
            monitoring-report.md
          retention-days: 7
          
      - name: Post Quick Status (if alerts)
        if: hashFiles('.monitoring/alerts/*.json') != ''
        run: |
          if command -v gh &> /dev/null; then
            # 最新のイシューにアラートを通知
            LATEST_ISSUE=$(gh issue list --limit 1 --json number --jq '.[0].number' 2>/dev/null || echo "")
            
            if [ -n "$LATEST_ISSUE" ]; then
              gh issue comment "$LATEST_ISSUE" --body "## 🔍 Quick System Health Alert

          **Alert Time**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
          **Status**: ⚠️ System health degradation detected
          
          The quick monitoring system has detected issues with workflow performance.
          Auto-fix systems are actively working to resolve any problems.
          
          **Next Check**: In 20 minutes
          
          ---
          🤖 Quick Monitoring Alert" 2>/dev/null || echo "Issue notification failed"
            fi
          fi