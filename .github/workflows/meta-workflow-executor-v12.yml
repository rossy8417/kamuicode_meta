name: "Meta Workflow Executor v12 with Domain Templates"
run-name: "🚀 Meta Workflow v12 | Issue #${{ inputs.issue_number || github.event.issue.number }} | ${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for workflow generation request'
        required: true
        default: '66'
  
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  bootstrap:
    name: "🧩 Bootstrap Diagnostics"
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request == null && contains(github.event.comment.body, '/execute'))
    steps:
      - name: Print event context
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "actor=${{ github.actor }}"
          echo "ref=${{ github.ref }}"
          echo "issue_number_from_dispatch=${{ inputs.issue_number }}"
          echo "is_issue_comment=$([ "${{ github.event_name }}" = "issue_comment" ] && echo true || echo false)"
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "comment_body<<EOT"
            echo "${{ github.event.comment.body }}"
            echo "EOT"
          fi
          echo "Bootstrap OK"
  
  # ===========================================
  # PHASE 1: ISSUE VALIDATION & DOMAIN DETECTION
  # ===========================================
  
  validate-and-detect:
    name: "🔍 Issue Validation & Domain Detection"
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request == null && contains(github.event.comment.body, '/execute'))
    outputs:
      issue_number: ${{ steps.extract.outputs.issue_number }}
      issue_title: ${{ steps.extract.outputs.issue_title }}
      primary_domain: ${{ steps.detect.outputs.primary_domain }}
      detected_domains: ${{ steps.detect.outputs.detected_domains }}
      domain_count: ${{ steps.detect.outputs.domain_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
        
      - name: Extract Issue Information
        id: extract
        run: |
          # Check if this is a valid trigger
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            # Use printf to safely handle quotes in comment body
            COMMENT_BODY=$(printf '%s' '${{ github.event.comment.body }}')
            # For issue comments, check if it's a start command
            if ! echo "$COMMENT_BODY" | grep -qE '(/start|/execute|^start$|^実行$|^execute$)'; then
              echo "::notice::Skipping - Comment does not contain start command"
              echo "issue_number=skip" >> $GITHUB_OUTPUT
              exit 0
            fi
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          else
            # workflow_dispatch always proceeds
            ISSUE_NUMBER="${{ inputs.issue_number }}"
          fi
          
          echo "🔍 Analyzing Issue #$ISSUE_NUMBER..."
          
          # Get issue details using GitHub CLI
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --json title,body,number --jq '{title: .title, body: .body, number: .number}')
          
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          ISSUE_NUMBER=$(echo "$ISSUE_DATA" | jq -r '.number')
          
          # Save to artifacts for next jobs
          mkdir -p artifacts
          echo "$ISSUE_TITLE" > artifacts/issue_title.txt
          echo "$ISSUE_BODY" > artifacts/issue_body.txt
          echo "$ISSUE_NUMBER" > artifacts/issue_number.txt
          
          # Combine title and body for domain detection
          echo -e "$ISSUE_TITLE\n\n$ISSUE_BODY" > artifacts/issue_content.txt
          
          # Output minimal data
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          echo "✅ Issue #$ISSUE_NUMBER validated: $ISSUE_TITLE"
          
          # Initialize Progressive Report in GitHub Actions Summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🎯 Meta Workflow v12 実行レポート
          
          ## 📋 実行概要
          EOF
          
          echo "- **Issue番号**: #${ISSUE_NUMBER}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue タイトル**: ${ISSUE_TITLE}" >> $GITHUB_STEP_SUMMARY  
          echo "- **実行開始時刻**: $(date '+%Y年%m月%d日 %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **実行状況**: 🔄 進行中..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔍 Phase 1: Issue検証 & ドメイン検出" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Issue #${ISSUE_NUMBER} 内容取得完了" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ドメイン検出: (pending)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Detect Domain from Issue
        id: detect
        run: |
          echo "🎯 Detecting domain from issue content..."
          
          python scripts/domain-template-loader.py \
            --action detect \
            --issue artifacts/issue_content.txt \
            --output artifacts/domain_detection.json
          
          # Extract results
          PRIMARY_DOMAIN=$(jq -r '.primary_domain' artifacts/domain_detection.json)
          DETECTED_DOMAINS=$(jq -c '.detected_domains' artifacts/domain_detection.json)
          DOMAIN_COUNT=$(jq '.detected_domains | length' artifacts/domain_detection.json)
          
          echo "primary_domain=$PRIMARY_DOMAIN" >> $GITHUB_OUTPUT
          echo "detected_domains=$DETECTED_DOMAINS" >> $GITHUB_OUTPUT
          echo "domain_count=$DOMAIN_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Primary domain detected: $PRIMARY_DOMAIN"
          echo "📊 Total domains detected: $DOMAIN_COUNT"
          
      - name: Upload Issue and Domain Data
        uses: actions/upload-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/

      - name: Report Detected Domain
        run: |
          PRIMARY_DOMAIN="${{ steps.detect.outputs.primary_domain }}"
          COUNT="${{ steps.detect.outputs.domain_count }}"
          echo "- ✅ ドメイン検出: ${PRIMARY_DOMAIN} (${COUNT} detected)" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # PHASE 2: DOMAIN TEMPLATE LOADING
  # ===========================================
  
  load-domain-templates:
    name: "📚 Load Domain Templates"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect']
    if: |
      needs.validate-and-detect.outputs.issue_number != 'skip' &&
      needs.validate-and-detect.outputs.primary_domain != 'null'
    outputs:
      template_summary: ${{ steps.load.outputs.template_summary }}
      chunk_count: ${{ steps.load.outputs.chunk_count }}
      input_schema: ${{ steps.inputs.outputs.input_schema }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
      - name: Download Issue Data
        uses: actions/download-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/
          
      - name: Load Primary Domain Template
        id: load
        run: |
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          echo "📚 Loading template for domain: $PRIMARY_DOMAIN"
          
          # Get domain summary for task decomposition
          python scripts/domain-template-loader.py \
            --action summary-for-decomposition \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/domain_decomposition_data.json
          
          # Also get standard summary for reference
          python scripts/domain-template-loader.py \
            --action summary \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/domain_summary.json
          
          # Split template into chunks
          python scripts/domain-template-loader.py \
            --action split \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/template_chunks.json
          
          # Extract basic info only (not full JSON)
          DOMAIN_NAME=$(jq -r '.domain_info.name' artifacts/domain_decomposition_data.json)
          EXPERT_ROLE=$(jq -r '.domain_info.expert' artifacts/domain_decomposition_data.json)
          CHUNK_COUNT=$(jq '.total_chunks' artifacts/template_chunks.json)
          
          echo "domain_name=$DOMAIN_NAME" >> $GITHUB_OUTPUT
          echo "expert_role=$EXPERT_ROLE" >> $GITHUB_OUTPUT
          echo "chunk_count=$CHUNK_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Template loaded: $DOMAIN_NAME ($CHUNK_COUNT chunks)"
          
          # Add Phase 2 Report
          echo "## 📚 Phase 2: ドメインテンプレート読み込み" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ドメイン: ${DOMAIN_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 専門家役割: ${EXPERT_ROLE}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ テンプレートチャンク数: ${CHUNK_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Locate and Copy Domain Input Schema
        id: inputs
        run: |
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          SCHEMA_PATH="meta/domain-templates/$PRIMARY_DOMAIN/input-schema.yaml"
          mkdir -p artifacts/domain-input-schema
          if [ -f "$SCHEMA_PATH" ]; then
            cp "$SCHEMA_PATH" artifacts/domain-input-schema/input-schema.yaml
            echo "input_schema=artifacts/domain-input-schema/input-schema.yaml" >> $GITHUB_OUTPUT
            echo "✅ Input schema found: $SCHEMA_PATH"
            echo "- ✅ 入力スキーマ検出: $PRIMARY_DOMAIN/input-schema.yaml" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Input schema not found for domain: $PRIMARY_DOMAIN"
            echo "input_schema=" >> $GITHUB_OUTPUT
            echo "- ❌ 入力スキーマ未検出" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Locate Domain Checklists
        id: checklists
        run: |
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          LIST=$(ls -1 "meta/domain-templates/$PRIMARY_DOMAIN"/checklist-*-specific.md 2>/dev/null || true)
          mkdir -p artifacts
          if [ -n "$LIST" ]; then
            echo "$LIST" > artifacts/domain-checklists.txt
            COUNT=$(echo "$LIST" | wc -l | tr -d ' ')
            echo "checklist_count=$COUNT" >> $GITHUB_OUTPUT
            echo "- ✅ ドメインチェックリスト検出 ($COUNT 件):" >> $GITHUB_STEP_SUMMARY
            echo "$LIST" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "📚 Using domain checklists (detected $COUNT):"
            echo "$LIST" | sed 's/^/- /'
          else
            echo "checklist_count=0" >> $GITHUB_OUTPUT
            echo "- ❌ ドメインチェックリスト未検出" >> $GITHUB_STEP_SUMMARY
            echo "📚 Using domain checklists: (none found)"
          fi
          
      - name: Upload Template Data
        uses: actions/upload-artifact@v4
        with:
          name: domain-template-data
          path: artifacts/

  # ===========================================
  # PHASE 3: PROFESSIONAL TASK DECOMPOSITION
  # ===========================================
  
  professional-task-decomposition:
    name: "🧠 Professional Task Decomposition"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates']
    outputs:
      task_count: ${{ steps.decompose.outputs.task_count }}
      dependency_groups: ${{ steps.decompose.outputs.dependency_groups }}
      estimated_duration: ${{ steps.decompose.outputs.estimated_duration }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
      - name: Download and Merge Previous Artifacts
        run: |
          echo "📥 Downloading artifacts from previous jobs..."
          
          # Download artifacts selectively
          mkdir -p artifacts
          
          # Download issue-domain-data
          echo "Downloading issue-domain-data..."
          gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            --jq '.artifacts[] | select(.name == "issue-domain-data") | .id' | \
          while read -r artifact_id; do
            gh api "/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
              --header "Accept: application/vnd.github+json" \
              > artifacts/issue-domain-data.zip
            unzip -q -o artifacts/issue-domain-data.zip -d artifacts/issue-domain-data/
            rm artifacts/issue-domain-data.zip
          done
          
          # Download domain-template-data
          echo "Downloading domain-template-data..."
          gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            --jq '.artifacts[] | select(.name == "domain-template-data") | .id' | \
          while read -r artifact_id; do
            gh api "/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
              --header "Accept: application/vnd.github+json" \
              > artifacts/domain-template-data.zip
            unzip -q -o artifacts/domain-template-data.zip -d artifacts/domain-template-data/
            rm artifacts/domain-template-data.zip
          done
          
          # Merge artifacts to flat structure
          echo "Merging artifacts..."
          find artifacts -type f -name "*.json" -o -name "*.txt" -o -name "*.yaml" | while read -r file; do
            filename=$(basename "$file")
            if [ ! -f "artifacts/$filename" ]; then
              cp "$file" "artifacts/$filename"
            fi
          done
          
          echo "✅ Artifacts downloaded and merged"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Professional Task Decomposition with Domain Knowledge
        id: decompose
        run: |
          echo "🧠 Starting professional task decomposition..."
          
          # Create decomposition prompt using file references
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          EXPERT_ROLE="${{ needs.load-domain-templates.outputs.expert_role }}"
          
          cat > decomposition_prompt.txt << 'EOF'
          専門的なタスク分解を実行してください。
          
          以下のファイルを読み込んでタスク分解を行ってください：
          1. ドメイン専門知識: artifacts/domain-template-data/domain_decomposition_data.json
          2. ユーザーリクエスト: artifacts/issue-domain-data/issue_content.txt
          
          ドメイン専門知識ファイルには以下が含まれています：
          - expert_context: 専門家の完全な知識
          - task_decomposition_context: ワークフローパターンと最適化情報
          - constraints_and_requirements: すべての制約事項
          - implementation_resources: 利用可能なリソース
          - complex_thinking_guide: 思考プロセスのガイド
          
          タスク分解の手順：
          1. domain_decomposition_data.jsonのexpert_contextを完全に理解
          2. task_decomposition_contextのワークフローパターンを参照
          3. constraints_and_requirementsのすべての制約を考慮
          4. complex_thinking_guideに従って複雑な思考プロセスを実行
          5. implementation_resourcesから最適なリソースを選択
          
          出力をartifacts/professional_task_decomposition.jsonに保存してください。
          
          出力形式：
          {
            "professional_analysis": {
              "understanding": "リクエストの専門的理解（詳細）",
              "considerations": ["考慮事項のリスト"],
              "thinking_process": "思考プロセスの詳細な記録"
            },
            "tasks": [
              {
                "id": "task-1",
                "name": "タスク名",
                "description": "詳細な説明",
                "reasoning": "なぜこのタスクが必要か",
                "minimal_units": ["unit1", "unit2"],
                "dependencies": [],
                "estimated_duration": "5-10分",
                "professional_notes": "専門的な注意点",
                "quality_criteria": "品質基準"
              }
            ],
            "workflow_optimization": {
              "parallel_groups": [],
              "critical_path": [],
              "optimization_rationale": "最適化の理由"
            },
            "workflow_generation_parameters": {
              "calculated_scene_count": "constraints.yamlのscene_calculationに基づいて計算した数値",
              "matrix_scene_list": "[1, 2, 3, ...]の形式で計算されたシーンリスト",
              "max_parallel": "calculated_scene_countと同じ値",
              "assumed_scene_duration": "計算で使用した1シーンあたりの秒数",
              "per_scene_job_structure": "CRITICAL: T2I→I2V must be in SAME job (prevents URL expiry)"
            },
            "total_estimated_duration": "30分",
            "domain_specific_constraints": []
          }
          EOF
          
          # Add expert role context
          echo "あなたは${EXPERT_ROLE}です。" > final_prompt.txt
          echo "" >> final_prompt.txt
          cat decomposition_prompt.txt >> final_prompt.txt
          
          # Execute Claude Code for task decomposition
          npx @anthropic-ai/claude-code \
            -p "$(cat final_prompt.txt)" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits" \
            > claude_output.log 2>&1
          
          # Check if execution was successful
          if [ $? -eq 0 ]; then
            echo "✅ Claude Code execution completed"
            
            # Try multiple methods to find the generated file
            if [ -f "artifacts/professional_task_decomposition.json" ]; then
              echo "✅ Found file at expected location"
            elif [ -f "professional_task_decomposition.json" ]; then
              echo "📁 Found file in current directory, moving to artifacts"
              mv professional_task_decomposition.json artifacts/
            else
              # Search for any JSON file that might contain the task decomposition
              echo "🔍 Searching for generated JSON files..."
              find . -name "*.json" -type f -newer final_prompt.txt -exec grep -l "professional_analysis" {} \; | while read -r file; do
                echo "📁 Found potential task decomposition at: $file"
                cp "$file" artifacts/professional_task_decomposition.json
                break
              done
            fi
            
            # Final check
            if [ ! -f "artifacts/professional_task_decomposition.json" ]; then
              echo "❌ Could not find task decomposition file"
              echo "📋 Claude output:"
              cat claude_output.log
              exit 1
            fi
          else
            echo "❌ Claude Code execution failed"
            cat claude_output.log
            exit 1
          fi
          
          # Extract results
          if [ -f "artifacts/professional_task_decomposition.json" ]; then
            TASK_COUNT=$(jq '.tasks | length' artifacts/professional_task_decomposition.json)
            DEPENDENCY_GROUPS=$(jq -c '.dependency_groups' artifacts/professional_task_decomposition.json)
            ESTIMATED_DURATION=$(jq -r '.total_estimated_duration' artifacts/professional_task_decomposition.json)
            
            echo "task_count=$TASK_COUNT" >> $GITHUB_OUTPUT
            echo "dependency_groups=$DEPENDENCY_GROUPS" >> $GITHUB_OUTPUT
            echo "estimated_duration=$ESTIMATED_DURATION" >> $GITHUB_OUTPUT
            
            echo "✅ Decomposed into $TASK_COUNT tasks"
            echo "⏱️ Estimated duration: $ESTIMATED_DURATION"
            
            # Add Phase 3 Report
            echo "## 🧠 Phase 3: プロフェッショナルタスク分解" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ タスク数: ${TASK_COUNT}個" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 推定実行時間: ${ESTIMATED_DURATION}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 依存関係グループ分析完了" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Task decomposition failed"
            exit 1
          fi
          
      - name: Upload Task Decomposition
        uses: actions/upload-artifact@v4
        with:
          name: task-decomposition
          path: artifacts/professional_task_decomposition.json

  # ===========================================
  # PHASE 4: TASK ORDER OPTIMIZATION
  # ===========================================
  
  optimize-task-order:
    name: "🔄 Optimize Task Execution Order"
    runs-on: ubuntu-latest
    needs: ['professional-task-decomposition']
    outputs:
      optimized_order: ${{ steps.optimize.outputs.order }}
      mermaid_available: ${{ steps.optimize.outputs.mermaid_available }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Task Decomposition
        uses: actions/download-artifact@v4
        with:
          name: task-decomposition
          path: artifacts/
          
      - name: Analyze and Optimize Task Order
        id: optimize
        run: |
          echo "🔄 タスク実行順序の最適化..."
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Run Claude Code SDK with specialized prompt file for reliable Mermaid generation
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            -p "$(cat meta/prompts/task-order-optimization-with-mermaid.md)" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits"
          
          # 結果を確認
          if [ -f "artifacts/optimized_task_order.json" ]; then
            echo "order=true" >> $GITHUB_OUTPUT
            
            # Add Phase 4 Report with Task Order
            echo "## 🔄 Phase 4: タスク実行順序の最適化" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 依存関係分析完了" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 並列処理グループ特定" >> $GITHUB_STEP_SUMMARY
            
            # 動的テキスト図を生成（最適化されたタスクから自動生成）
            if [ -f "artifacts/optimized_task_order.json" ]; then
              echo "- ✅ 最適化された実行順序生成完了" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📊 実行フロー図（動的生成）" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              
              # JSONから動的にタスクフローを生成（単一行で実行）
              if [ -f "artifacts/optimized_task_order.json" ]; then
                python3 -c "import json; data=json.load(open('artifacts/optimized_task_order.json')); print('タスク実行フロー（動的生成・並列処理最適化済み）:'); print(); [print(f\"⚡ {phase.get('phase', f'Phase {i+1}')} [{phase.get('execution_type', 'sequential').upper()}]\") if phase.get('execution_type') == 'parallel' else print(f\"📋 {phase.get('phase', f'Phase {i+1}')} [{phase.get('execution_type', 'sequential').upper()}]\") for i, phase in enumerate(data.get('optimized_execution_order', []))]" >> $GITHUB_STEP_SUMMARY
                echo "⏱️ 最適化により並列処理を活用した効率的な実行順序を生成" >> $GITHUB_STEP_SUMMARY
              else
                echo "タスクフロー情報が利用できません" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "mermaid_available=true" >> $GITHUB_OUTPUT
            else
              echo "- ❌ 最適化順序の生成に失敗" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "mermaid_available=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "order=false" >> $GITHUB_OUTPUT
          fi
          
      # Summary display moved to final report for better organization
          
      - name: Upload Optimized Order
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: optimized-task-order
          path: artifacts/
          if-no-files-found: warn

  # ===========================================
  # PHASE 5: CONSTRAINT-AWARE WORKFLOW GENERATION
  # ===========================================
  
  generate-professional-workflow:
    name: "⚡ Generate Professional Workflow"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates', 'professional-task-decomposition', 'optimize-task-order']
    outputs:
      workflow_path: ${{ steps.generate.outputs.workflow_path }}
      workflow_name: ${{ steps.generate.outputs.workflow_name }}
      project_dir: ${{ steps.generate.outputs.project_dir }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
          
      - name: Generate Professional Workflow
        id: generate
        run: |
          echo "⚡ Generating professional workflow..."
          
          # Prepare all necessary data
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create generation directory with absolute path
          # Use GITHUB_WORKSPACE for consistency across jobs
          if [ -n "$GITHUB_WORKSPACE" ]; then
            BASE_DIR="$GITHUB_WORKSPACE"
          else
            BASE_DIR="$(pwd)"
          fi
          PROJECT_DIR="${BASE_DIR}/projects/issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          mkdir -p "$PROJECT_DIR/generated-workflow"
          
          echo "📁 Project directory: $PROJECT_DIR"
          
          # Load template chunks progressively
          CHUNKS=$(jq -r '.chunks[].id' artifacts/domain-template-data/template_chunks.json)
          
          # Create comprehensive generation prompt (domain-agnostic with strict domain enforcement when provided)
          # Copy the template prompt and replace PROJECT_DIR_PLACEHOLDER
          cp meta/prompts/generation-prompt-template.txt generation_prompt.txt
          sed -i "s|PROJECT_DIR_PLACEHOLDER|$PROJECT_DIR|g" generation_prompt.txt
          
          # Add visibility in logs: which checklists will be referenced
          echo "📚 Using domain checklists:" >> $GITHUB_STEP_SUMMARY
          if [ -f artifacts/domain-template-data/domain-checklists.txt ]; then
            cat artifacts/domain-template-data/domain-checklists.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          elif [ -f artifacts/domain-checklists.txt ]; then
            cat artifacts/domain-checklists.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "- (none found)" >> $GITHUB_STEP_SUMMARY
          fi

          # Also list rule references if present in constraints
          if [ -f artifacts/domain-template-data/domain_summary.json ]; then
            echo "### Domain Rule References" >> $GITHUB_STEP_SUMMARY
            jq -r '.constraints.rule_references[]?.path' artifacts/domain-template-data/domain_summary.json 2>/dev/null | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
          
          # Note: do not inject domain-specific helper jobs inline. All domain rules are enforced via referenced checklists during validation/auto-fix.
          
          # Execute workflow generation with explicit output
          echo "📝 Generating workflow with Claude Code SDK..."
          echo "Target: $PROJECT_DIR/generated-workflow/workflow.yml"
          
          npx @anthropic-ai/claude-code \
            -p "$(cat generation_prompt.txt)" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Read,MultiEdit,Bash" \
            --permission-mode "acceptEdits" \
            --max-turns 50 \
            > /dev/null 2>&1 || echo "Claude Code execution completed"
          
          # Verify workflow was created
          WORKFLOW_PATH="$PROJECT_DIR/generated-workflow/workflow.yml"
          if [ -f "$WORKFLOW_PATH" ]; then
            echo "📋 Post-processing generated workflow..."
            
            # Clean up any function call artifacts that might have been included
            if grep -q "<function_calls>" "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ Found function call artifacts, cleaning up..."
              # Remove everything from <function_calls> onwards
              sed -i '/<function_calls>/,$d' "$WORKFLOW_PATH"
            fi
            
            # Note: Do NOT quote the "on" field - GitHub Actions requires it unquoted
            # Make sure it's unquoted (in case Claude Code quoted it)
            sed -i 's/^"on":$/on:/' "$WORKFLOW_PATH"
            
            # Replace SECRETS_PLACEHOLDER or actual token values with the proper secrets reference
            if grep -q "SECRETS_PLACEHOLDER" "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ Replacing SECRETS_PLACEHOLDER with actual secrets reference..."
              sed -i 's/SECRETS_PLACEHOLDER/${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}/g' "$WORKFLOW_PATH"
            fi
            
            # Also check for actual token patterns and replace them
            if grep -E "sk-ant-oat[0-9]{2}-[A-Za-z0-9_-]{80,}" "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ WARNING: Actual OAuth token detected! Replacing with secrets reference..."
              sed -i -E 's/sk-ant-oat[0-9]{2}-[A-Za-z0-9_-]{80,}/${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}/g' "$WORKFLOW_PATH"
            fi
            
            # Replace full-width quotes with half-width quotes
            if grep -q '[""'']' "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ Replacing full-width quotes with half-width quotes..."
              sed -i 's/"/"/g; s/"/"/g; s/'/'"'"'/g; s/'/'"'"'/g' "$WORKFLOW_PATH"
            fi
            
            # CRITICAL: Remove any actual OAUTH_TOKEN values that were directly inserted
            if grep -q "sk-ant-" "$WORKFLOW_PATH" 2>/dev/null; then
              echo "🚨 CRITICAL: Found exposed OAUTH_TOKEN value, replacing with secrets reference..."
              sed -i 's/sk-ant-[^[:space:]]*/${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}/g' "$WORKFLOW_PATH"
            fi
            
            # Remove invalid matrix references in outputs section
            # GitHub Actions doesn't allow ${{ matrix.* }} in job outputs
            if grep -q 'outputs:.*matrix\.' "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ Found invalid matrix references in outputs, removing..."
              # Remove lines with matrix references in outputs sections
              sed -i '/^\s*outputs:/,/^\s*steps:/{/matrix\./d}' "$WORKFLOW_PATH"
            fi
            
            # Fix GCS URL handling - proper solution
            if grep -q 'gs://' "$WORKFLOW_PATH" 2>/dev/null; then
              echo "⚠️ Found GCS URLs, converting to HTTPS URLs..."
              
              # Simple replacement: gs://bucket/path -> https://storage.googleapis.com/bucket/path
              sed -i 's|gs://\([^/]*\)/|https://storage.googleapis.com/\1/|g' "$WORKFLOW_PATH" 2>/dev/null || true
              
              echo "  ✅ Converted GCS URLs to HTTPS format"
            fi
            
            # Fix common YAML syntax issues with simple sed commands
            echo "⚠️ Fixing common YAML syntax issues..."
            
            # Remove max-parallel to allow unlimited parallelization
            sed -i '/^\s*max-parallel:/d' "$WORKFLOW_PATH" 2>/dev/null || true
            echo "  ✅ Removed max-parallel to allow dynamic parallelization"
            
            # Fix heredoc issues - escape $(date) in cat << EOF blocks
            sed -i 's/Generated: $(date)/Generated: \\$(date)/g' "$WORKFLOW_PATH" 2>/dev/null || true
            echo "  ✅ Fixed heredoc syntax issues"
            
            # Ensure workflow ends properly (no trailing content)
            # Add a newline at the end if missing
            if [ -n "$(tail -c 1 "$WORKFLOW_PATH")" ]; then
              echo "" >> "$WORKFLOW_PATH"
            fi
            
            WORKFLOW_NAME="professional-workflow-${PRIMARY_DOMAIN}-${TIMESTAMP}"
            
            echo "workflow_path=$WORKFLOW_PATH" >> $GITHUB_OUTPUT
            echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
            echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
            
            echo "✅ Workflow generated and cleaned: $WORKFLOW_NAME"
            
            # Add Phase 5 Report
            echo "## ⚡ Phase 5: プロフェッショナルワークフロー生成" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ ワークフロー名: ${WORKFLOW_NAME}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ ドメイン: ${PRIMARY_DOMAIN}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ GitHub Actions形式で生成完了" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Workflow generation failed"
            exit 1
          fi
          
      - name: Upload Generated Workflow
        uses: actions/upload-artifact@v4
        with:
          name: generated-workflow
          path: |
            projects/issue-${{ needs.validate-and-detect.outputs.issue_number }}-*

  # ===========================================
  # PHASE 6: VALIDATION & DEPLOYMENT
  # ==========================================
  
  validate-workflow:
    name: "🔍 Validate Workflow"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect','generate-professional-workflow']
    outputs:
      validation_passed: ${{ steps.validate.outputs.passed }}
      validation_report: ${{ steps.validate.outputs.report_path }}
      error_count: ${{ steps.validate.outputs.error_count }}
      warning_count: ${{ steps.validate.outputs.warning_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Generated Workflow
        uses: actions/download-artifact@v4
        with:
          name: generated-workflow
          path: projects/

      - name: Download Domain Template Data (for input schema)
        uses: actions/download-artifact@v4
        with:
          name: domain-template-data
          path: artifacts/

      - name: Validate Startup Requirements
        id: startup-validation
        run: |
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          echo "🔍 Startup validation..."
          ERRORS=0
          
          # Check for push event handling
          if ! grep -q "paths-ignore:" "$WORKFLOW_PATH" 2>/dev/null; then
            if ! grep -q "push:" "$WORKFLOW_PATH" 2>/dev/null; then
              echo "❌ ERROR: No push event handling - workflow will fail on git push"
              ERRORS=$((ERRORS + 1))
            fi
          fi
          
          # Check for default values on required inputs
          if grep -q "required: true" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "⚠️ Checking for defaults on required inputs..."
          fi
          
          # Check for environment variables
          if ! grep -q "^env:" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "❌ ERROR: No environment variables defined at workflow level"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check for timeout on jobs
          if ! grep -q "timeout-minutes:" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "⚠️ WARNING: No timeout-minutes defined for jobs"
          fi
          
          echo "startup_errors=$ERRORS" >> $GITHUB_OUTPUT
          
      - name: Validate Data Flow Pattern
        run: |
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          echo "🔍 データフロー検証..."
          
          # Claude Code実行部分の検証
          if ! grep -q "Write.*media/images" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "⚠️ WARNING: 明示的なファイル保存指示が不足している可能性があります"
            echo "  推奨: Writeツールで明示的にパスを指定してください"
          fi
          
          if ! grep -q "ls -la.*media" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "⚠️ WARNING: ファイル保存確認コマンドが不足している可能性があります"
            echo "  推奨: ls -laコマンドで保存を確認してください"
          fi
          
          if ! grep -q "curl.*-[Lo].*url" "$WORKFLOW_PATH" 2>/dev/null; then
            echo "⚠️ WARNING: URLダウンロード処理が不足している可能性があります"
            echo "  推奨: URLファイル検出時はcurlで即座にダウンロードしてください"
          fi
          
          # findコマンドのパターン数を確認
          FIND_COUNT=$(grep -c "find.*PROJECT_DIR" "$WORKFLOW_PATH" 2>/dev/null || echo 0)
          if [ "$FIND_COUNT" -lt 3 ]; then
            echo "⚠️ WARNING: ファイル検索パターンが少ない可能性があります（現在: $FIND_COUNT回）"
            echo "  推奨: 最低3パターンで検索（特定名、時間ベース、汎用）"
          fi
          
          # Check for invalid matrix references in outputs
          if grep -q 'outputs:.*matrix\.' "$WORKFLOW_PATH" 2>/dev/null; then
            echo "❌ ERROR: Invalid matrix references found in outputs section"
            echo "  GitHub Actions does not allow \${{ matrix.* }} in job outputs"
            echo "  Found: $(grep 'outputs:.*matrix\.' "$WORKFLOW_PATH")"
          fi
          
          # Check for GCS URL handling
          if grep -q 'curl.*gs://' "$WORKFLOW_PATH" 2>/dev/null; then
            echo "❌ ERROR: Direct curl of GCS URLs detected"
            echo "  curl does not support gs:// protocol"
            echo "  Use gsutil or convert to signed https:// URL"
            VALIDATION_PASSED=false
          fi
          
          # Check for URL validity checks that don't handle GCS
          if grep -q 'curl -IfsS.*URL' "$WORKFLOW_PATH" 2>/dev/null; then
            if ! grep -B2 -A2 'curl -IfsS' "$WORKFLOW_PATH" | grep -q 'if.*gs://'; then
              echo "⚠️ WARNING: URL validity checks may fail on GCS URLs"
              echo "  Consider adding GCS URL detection before curl checks"
            fi
          fi
          
          echo "✅ データフロー検証完了"
          
      - name: Check for Common Syntax Errors
        run: |
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          echo "🔍 Checking for common syntax errors..."
          
          ERRORS=0
          
          # Check for HEREDOC usage
          if grep -q '<<.*EOF' "$WORKFLOW_PATH"; then
            echo "❌ ERROR: HEREDOC detected - use echo commands instead"
            echo "  Found: $(grep -n '<<.*EOF' "$WORKFLOW_PATH" | head -3)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check for full-width quotes
          if grep -q '[""'']' "$WORKFLOW_PATH"; then
            echo "❌ ERROR: Full-width quotes detected"
            echo "  Found: $(grep -n '[""'']' "$WORKFLOW_PATH" | head -3)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check for incorrect bash arithmetic
          if grep -E '\$\{[A-Z_]+\s*-\s*[0-9]+\}' "$WORKFLOW_PATH"; then
            echo "❌ ERROR: Invalid bash arithmetic detected"
            echo "  Use \$((VAR - N)) instead of \${VAR - N}"
            echo "  Found: $(grep -En '\$\{[A-Z_]+\s*-\s*[0-9]+\}' "$WORKFLOW_PATH" | head -3)"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check for exposed credentials
          if grep -E 'ghp_|sk-|key-[A-Za-z0-9]{32}' "$WORKFLOW_PATH"; then
            echo "❌ ERROR: Potential credential exposure detected"
            echo "  Use GitHub Secrets instead"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ Found $ERRORS syntax errors - these MUST be fixed"
            exit 1
          else
            echo "✅ No common syntax errors detected"
          fi
          
      - name: Comprehensive Workflow Validation and Auto-Fix
        run: |
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          
          echo "🔍 Running comprehensive validation..."
          
          # Use unified validator with auto-fix
          if python3 scripts/workflow-validator.py "$WORKFLOW_PATH" --auto-fix; then
            echo "✅ Workflow validation passed"
          else
            echo "⚠️ Validation failed, checking report..."
            
            # Check if critical errors remain
            if [ -f "$(dirname "$WORKFLOW_PATH")/validation_report.json" ]; then
              CRITICAL_ERRORS=$(jq -r '.errors | length' "$(dirname "$WORKFLOW_PATH")/validation_report.json")
              if [ "$CRITICAL_ERRORS" -gt 0 ]; then
                echo "❌ Critical errors remain after auto-fix"
                jq -r '.errors[]' "$(dirname "$WORKFLOW_PATH")/validation_report.json" | while read error; do
                  echo "  • $error"
                done
                exit 1
              fi
            fi
          fi
          
      - name: Inject required inputs into generated workflow from schema
        run: |
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          # Schema file downloaded from 'domain-template-data' artifact into artifacts/
          SCHEMA_PATH="artifacts/domain-input-schema/input-schema.yaml"
          if [ -f "$SCHEMA_PATH" ] && [ -f "$WORKFLOW_PATH" ]; then
            python -c "import yaml,sys; wf_path='$WORKFLOW_PATH'; schema_path='$SCHEMA_PATH'; wf=yaml.safe_load(open(wf_path)) or {}; schema=yaml.safe_load(open(schema_path)) or {}; req=(schema.get('inputs') or {}).get('required') or {}; on=wf.setdefault('on',{}); wd=on.setdefault('workflow_dispatch',{}); inputs=wd.setdefault('inputs',{}); [ (inputs.setdefault(k,{}).update({'description':(v.get('description',k)), 'required':True}) or (inputs[k].update({'default':v['default']}) if 'default' in v else None) or (inputs[k].update({'type':'choice','options':v['enum']}) if 'enum' in v else inputs[k].pop('type', None)) ) for k,v in req.items() ]; open(wf_path,'w').write(yaml.safe_dump(wf, sort_keys=False))"
            echo "✅ Injected required inputs into workflow_dispatch"
          else
            echo "::warning::Schema or workflow file not found; skip injection"
          fi

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
      - name: Validate Workflow
        id: validate
        run: |
          echo "✅ Validating generated workflow..."
          
          # Use generated workflow path
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          
          # 🔒 SECURITY VALIDATION FIRST (CRITICAL)
          echo "🔒 Checking for security issues..."
          SECURITY_ISSUES=0
          
          # Check for exposed OAuth tokens
          if grep -q 'CLAUDE_CODE_OAUTH_TOKEN:\s*sk-ant-' "$WORKFLOW_PATH" 2>/dev/null; then
            echo "🚨 CRITICAL: OAuth token exposed! Should use secrets.CLAUDE_CODE_OAUTH_TOKEN"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for HEREDOC with GitHub Actions variables (causes YAML parsing errors)
          if awk '/cat.*<<.*EOF/,/^EOF$/' "$WORKFLOW_PATH" 2>/dev/null | grep -qE '\$\{\{'; then
            echo "🚨 CRITICAL: HEREDOC with GitHub Actions variables detected! This causes YAML parsing errors"
            echo "  Lines with issues:"
            awk '/cat.*<<.*EOF/,/^EOF$/' "$WORKFLOW_PATH" | grep -n '\$\{\{' | head -5
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for any exposed tokens or API keys (not using secrets)
          if grep -E '(api[_-]key|token|bearer|secret)\s*:\s*["\047]?[A-Za-z0-9_-]{20,}' "$WORKFLOW_PATH" 2>/dev/null | grep -v 'secrets\.' >/dev/null; then
            echo "🚨 CRITICAL: Exposed API keys or tokens detected!"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for hardcoded passwords
          if grep -Ei 'password\s*:\s*["\047]' "$WORKFLOW_PATH" 2>/dev/null | grep -v 'secrets\.' >/dev/null; then
            echo "🚨 CRITICAL: Hardcoded passwords detected!"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # If security issues found, fail immediately
          if [ "$SECURITY_ISSUES" -gt 0 ]; then
            echo "❌ SECURITY VALIDATION FAILED - $SECURITY_ISSUES critical issues found"
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "security_failed=true" >> $GITHUB_OUTPUT
            echo "error_count=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
            echo "warning_count=0" >> $GITHUB_OUTPUT
            
            # Create security failure report
            echo '{' > validation_result.json
            echo '  "overall_result": "FAILED",' >> validation_result.json
            echo '  "security_validation": "FAILED",' >> validation_result.json
            echo '  "critical_security_issues": true,' >> validation_result.json
            echo '  "failed_items": [' >> validation_result.json
            echo '    "Exposed OAuth token - must use secrets.CLAUDE_CODE_OAUTH_TOKEN",' >> validation_result.json
            echo '    "Hardcoded credentials detected - use GitHub Secrets"' >> validation_result.json
            echo '  ],' >> validation_result.json
            echo '  "details": {' >> validation_result.json
            echo '    "security_validation": {' >> validation_result.json
            echo '      "status": "FAILED",' >> validation_result.json
            echo '      "message": "Critical security vulnerabilities detected. Workflow must not contain exposed tokens or credentials."' >> validation_result.json
            echo '    }' >> validation_result.json
            echo '  }' >> validation_result.json
            echo '}' >> validation_result.json
            exit 0
          fi
          
          echo "✅ Security validation passed"
          
          # YAML syntax validation
          python -c "import yaml; yaml.safe_load(open('$WORKFLOW_PATH'))"
          echo "✅ YAML syntax valid"
          
          # GitHub Actions structure validation (robust against quoted keys)
          python -c "import yaml,sys; wf_path='$WORKFLOW_PATH'; wf=yaml.safe_load(open(wf_path)) or {}; sys.exit(0 if isinstance(wf, dict) and 'name' in wf and 'on' in wf and 'jobs' in wf else 1)"
          if [ $? -eq 0 ]; then
            echo "✅ GitHub Actions structure valid"

            # Input schema compliance validation (file-referenced, no inline duplication)
            if [ -f "artifacts/domain-input-schema/input-schema.yaml" ]; then
              python -c "import yaml,sys; wf_path='$WORKFLOW_PATH'; schema_path='artifacts/domain-input-schema/input-schema.yaml'; wf=yaml.safe_load(open(wf_path)) or {}; schema=yaml.safe_load(open(schema_path)) or {}; wf_inputs=(((wf.get('on') or {}).get('workflow_dispatch') or {}).get('inputs') or {}); groups=(schema.get('inputs') or {}); required=(groups.get('required') or {}); missing=[k for k in required.keys() if k not in wf_inputs]; (print('Missing inputs in workflow:', missing) or sys.exit(1)) if missing else None"
              echo "✅ Input schema alignment (required): OK"
            else
              echo "::warning::No input schema file found for validation"
            fi

            # Static structural checks (non-domain specific)
            echo "🔎 Static structural checks..."
            python3 -c "import os, re, sys, yaml; wf_path='$WORKFLOW_PATH'; text=open(wf_path,'r',encoding='utf-8').read(); data=yaml.safe_load(text) or {}; jobs=data.get('jobs') or {}; warnings=[]; [warnings.append(f\"Local action reference detected in job '{job_name}': uses={uses}\") if uses.startswith(('./','../')) else warnings.append(f\"Suspicious action reference (missing @) in job '{job_name}': uses={uses}\") if '@' not in uses and not uses.startswith('docker://') else None for job_name,job in (jobs or {}).items() for step in (job or {}).get('steps',[]) or [] if isinstance(step,dict) and 'uses' in step for uses in [str(step['uses']).strip()]]; warnings.append('No \${PROJECT_DIR}/ occurrences found') if '\${PROJECT_DIR}/' not in text else None; warnings.append('actions/upload-artifact not found') if not re.search(r'actions/upload-artifact@',text) else None; warnings.append('actions/download-artifact not found') if not re.search(r'actions/download-artifact@',text) else None; [print(f'::warning ::{w}') for w in warnings]; print(f'Static checks: {len(warnings)} warning(s)')"
            
            # Domain-aware validation (generic, non-specialized)
            echo "🔍 Executing domain-aware validation (generic)..."
            DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
            CONSTRAINTS_PATH="meta/domain-templates/$DOMAIN/constraints.yaml"
            {
              echo "基本検証と（存在する場合）ドメイン制約の検証を行い、validation_result.json を作成してください。";
              echo;
              echo "対象ワークフロー: $WORKFLOW_PATH";
              echo "制約ファイル: $CONSTRAINTS_PATH (存在する場合のみ)";
              echo;
              echo "基本検証:";
              echo "- uses: でローカルパス参照が無いこと";
              echo "- 生成物は projects/ 配下に保存されていること";
              echo "- ジョブ間共有に artifacts を使用していること";
              echo "- ハードコードされたパスが無いこと（動的参照を使用）";
              echo "- シェルスクリプトで複数行文字列が正しく処理されていること";
              echo "- video-productionドメインの場合:";
              echo "  * 各シーン画像生成が独立ジョブ（phase3-scene-N-image）として存在";
              echo "  * 各シーン動画変換が独立ジョブ（phase4-scene-N-video）として存在";
              echo "  * phase4がphase3の対応するシーンに依存（needs）していること";
              echo "  * ニュースキャスター用の固定seed値が設定されていること";
              echo "  * シーン数が動的に計算された値を使用していること";
              echo;
              echo "制約検証（任意）:";
              echo "- constraints.composition_rules があれば、その要件（pipeline/matrix/max_parallel/duration_allocation）に沿っていること";
              echo "- constraints.rule_references と checklist_references が示すファイルを順に読み、MUSTを優先して妥当性を確認すること";
              echo "- 直列/並列/matrix/命名/一貫性/時間配分などの規則があれば適用されていること";
              echo;
              echo '{"overall_result":"PASSED","failed_items":[],"details":{}}';
            } > validation_prompt.txt
            
            # Replace placeholder with actual path
            sed -i "s|WORKFLOW_PATH_PLACEHOLDER|$WORKFLOW_PATH|g" validation_prompt.txt
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "Read,Write" \
              --permission-mode "acceptEdits" \
              --max-turns 30 \
              -p "$(cat validation_prompt.txt)"
            
            # Ensure validation_result.json exists (create minimal PASSED if missing)
            if [ ! -f "validation_result.json" ]; then
              echo "⚠️ validation_result.json not created - creating minimal PASSED report"
              echo '{"overall_result":"PASSED","failed_items":[],"details":{}}' > validation_result.json
            fi

            # Domain rule structural checks (non-blocking warnings)
            echo "🔎 Domain rule structural checks..."
            python3 -c "import os, re, sys, yaml, json; wf_path='$WORKFLOW_PATH'; domain='${{ needs.validate-and-detect.outputs.primary_domain }}'; constraints_path=f'meta/domain-templates/{domain}/constraints.yaml'; constraints=yaml.safe_load(open(constraints_path, 'r', encoding='utf-8')) if os.path.exists(constraints_path) else {}; rule_refs=constraints.get('rule_references') or []; rules_by_name={}; [rules_by_name.update({p: yaml.safe_load(open(p, 'r', encoding='utf-8')) if os.path.exists(p) and p.endswith(('.yaml','.yml')) else None}) for ref in rule_refs if (p:=(ref or {}).get('path'))]; text=open(wf_path, 'r', encoding='utf-8').read(); data=yaml.safe_load(text) or {}; jobs=data.get('jobs') or {}; warns=[]; orc=next((v for k,v in rules_by_name.items() if k.endswith('/rules/orchestration.yaml') and isinstance(v, dict)), None); matrix_key=(((orc.get('matrix') or {}).get('key')) or 'scene') if orc else 'scene'; max_parallel_lim=((orc.get('matrix') or {}).get('max_parallel')) if orc else None; found=any(matrix_key in ((job or {}).get('strategy') or {}).get('matrix', {}) for job in (jobs or {}).values() if isinstance(((job or {}).get('strategy') or {}).get('matrix'), dict)); warns.append(f\"No job with strategy.matrix containing key '{matrix_key}' found\") if orc and not found else None; cons=next((v for k,v in rules_by_name.items() if k.endswith('/rules/consistency.yaml') and isinstance(v, dict)), None); img_pat=((cons.get('naming') or {}).get('image_pattern')) if cons else None; vid_pat=((cons.get('naming') or {}).get('video_pattern')) if cons else None; warns.append('Scene image naming pattern not referenced in workflow text (scene_)') if img_pat and 'scene_' not in text else None; warns.append('Scene video naming pattern not referenced in workflow text (scene_)') if vid_pat and 'scene_' not in text else None; [print(f'::warning ::{w}') for w in warns]; print(f'Domain rule checks: {len(warns)} warning(s)')"
            
            # Check validation result from JSON
            if [ -f "validation_result.json" ]; then
              VALIDATION_RESULT=$(jq -r '.overall_result' validation_result.json 2>/dev/null || echo "FAILED")
              CRITICAL_PASS=$(jq -r '.critical_pass_count' validation_result.json 2>/dev/null || echo "0/10")
              FAILED_ITEMS=$(jq -r '.failed_items[]' validation_result.json 2>/dev/null || echo "Unknown")
              
              echo "📊 Validation Result: $VALIDATION_RESULT"
              echo "📊 Critical Requirements: $CRITICAL_PASS"
              
              if [ "$VALIDATION_RESULT" = "PASSED" ]; then
                echo "✅ STRICT validation PASSED - All critical requirements met"
                echo "passed=true" >> $GITHUB_OUTPUT
                
                # Add detailed validation report to summary
                echo "### 🎯 Strict Validation Report" >> $GITHUB_STEP_SUMMARY
                echo "- **Result**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
                echo "- **Critical Requirements**: $CRITICAL_PASS" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ STRICT validation FAILED - Critical requirements not met"
                echo "❌ Failed items: $FAILED_ITEMS"
                
                # Add failure report to summary
                echo "### 🚨 Strict Validation Report" >> $GITHUB_STEP_SUMMARY
                echo "- **Result**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
                echo "- **Critical Requirements**: $CRITICAL_PASS" >> $GITHUB_STEP_SUMMARY
                echo "- **Failed Items**:" >> $GITHUB_STEP_SUMMARY
                echo "$FAILED_ITEMS" | while read item; do
                  echo "  - $item" >> $GITHUB_STEP_SUMMARY
                done
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "- **Action**: Attempting auto-fix..." >> $GITHUB_STEP_SUMMARY

                echo "🔧 Attempting generic auto-fix based on domain constraints..."

                # Build rule file list from constraints (if any) for precise autofix
                RULE_FILES=$(jq -r '.constraints.rule_references[]?.path' artifacts/domain-template-data/domain_summary.json 2>/dev/null || true)
                CHECKLIST_FILES=$(jq -r '.constraints.checklist_references[]?.path' artifacts/domain-template-data/domain_summary.json 2>/dev/null || true)

                echo "🔧 AI auto-fix with explicit domain rule inputs..."
                npx @anthropic-ai/claude-code \
                  --mcp-config ".claude/mcp-kamuicode.json" \
                  --allowedTools "Read,Write" \
                  --permission-mode "acceptEdits" \
                  --max-turns 40 \
                  -p "次のファイルを読み込み、検証失敗を修正してください。

                  対象ワークフロー: $WORKFLOW_PATH
                  検証結果: validation_result.json
                  ドメイン: $DOMAIN
                  制約: $CONSTRAINTS_PATH
                  ルールファイル一覧:\n$RULE_FILES
                  チェックリスト一覧:\n$CHECKLIST_FILES

                  必須修正（MUST）:
                  1) ローカル uses の排除 / すべての出力を ${PROJECT_DIR} 配下へ / artifacts による共有
                  2) constraints.composition_rules / rules/orchestration.yaml に従い、該当タスクがある場合:
                     - per-item/perscene 直列チェーン（例: generate_image -> image_to_video）を同一ジョブ内で実行
                     - strategy.matrix を導入し、matrix.key（rulesのmatrix.key）で並列化
                     - strategy.max-parallel を rulesの max_parallel 以下に設定
                  3) rules/consistency.yaml の命名規約（image_pattern / video_pattern）と解像度/音声基準を満たすよう命名・設定
                  4) paths: ${PROJECT_DIR}/media/{images|videos|audio}/ および ${PROJECT_DIR}/metadata/ に整える

                  推奨修正（SHOULD）:
                  - checklist の MUST/SHOULD のうち、実装可能な項目は適用

                  変更は $WORKFLOW_PATH に上書き保存。fix_summary.txt に修正点の要約（適用したルール、変更箇所）を記録。"

                # Safety cap for max-parallel if still exceeding rule limit
                echo "Applying safety cap for max-parallel..."
              
                if [ $? -eq 0 ]; then
                  echo "✅ Auto-fix completed - Re-validating..."
                  
                  # Re-validate after fix
                npx @anthropic-ai/claude-code \
                  --mcp-config ".claude/mcp-kamuicode.json" \
                  --allowedTools "Read,Write" \
                  --permission-mode "acceptEdits" \
                  --max-turns 10 \
                  -p "修正後のワークフローを再検証してください。

                  対象: $WORKFLOW_PATH
                  ドメイン: $DOMAIN
                  制約: $CONSTRAINTS_PATH（存在すれば）
                  
                  1) 基本検証（ローカルuses禁止、artifacts利用、構造妥当性）
                  2) 制約がある場合のみ composition_rules の適用確認
                  結果を revalidation_result.json に保存"
                  
                  if [ -f "revalidation_result.json" ]; then
                    REVALIDATION_RESULT=$(jq -r '.overall_result' revalidation_result.json 2>/dev/null || echo "FAILED")
                    if [ "$REVALIDATION_RESULT" = "PASSED" ]; then
                      echo "✅ Re-validation PASSED - All issues fixed"
                      echo "passed=true" >> $GITHUB_OUTPUT
                    else
                      echo "❌ Re-validation FAILED - Some issues remain"
                      echo "passed=false" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "❌ Re-validation failed to complete"
                    echo "passed=false" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "❌ Auto-fix failed - manual intervention required"
                  echo "passed=false" >> $GITHUB_OUTPUT
                fi
              fi
            else
              echo "❌ Validation result file not found"
              echo "passed=false" >> $GITHUB_OUTPUT
            fi
            
            # Add Phase 6 Report with detailed validation results
            echo "## 🔍 Phase 6: 詳細検証レポート" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ YAML構文検証: 正常" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ GitHub Actions構造検証: 正常" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 ドメイン特化検証: 完了" >> $GITHUB_STEP_SUMMARY
            
            # Add detailed error/warning counts
            if [ -f "validation_result.json" ]; then
              ERROR_COUNT=$(jq -r '.errors | length' validation_result.json 2>/dev/null || echo "0")
              WARNING_COUNT=$(jq -r '.warnings | length' validation_result.json 2>/dev/null || echo "0")
              echo "- 🚨 エラー数: $ERROR_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ 警告数: $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
              
              # Output counts for next job
              echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
              echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
              echo "report_path=validation_result.json" >> $GITHUB_OUTPUT
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Invalid GitHub Actions structure"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: |
            validation_result.json
            revalidation_result.json
          if-no-files-found: warn
          
      - name: Generate Detailed Validation Report
        id: detailed-report
        if: always()
        run: |
          echo "📊 Generating detailed validation report..."
          
          WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          
          # Create comprehensive validation report
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits" \
            --max-turns 20 \
            -p "詳細な検証レポートを作成してください。
            
            対象ワークフロー: $WORKFLOW_PATH
            ドメイン: $DOMAIN
            
            検証項目:
            1. 汎用的な問題:
               - HEREDOC + GitHub Actions変数の混在
               - ローカル uses: 参照
               - ハードコードされたパス
               - artifactの不適切な使用
            
            2. ドメイン特化の問題 ($DOMAIN):
               - キャスター分離システムの実装
               - 5秒セグメントリップシンク
               - 背景に人物が含まれていないか
            
            3. 構造的な問題:
               - ジョブ依存関係の正しさ
               - matrixの使用方法
               - パラレル実行の最適性
            
            レポートを detailed_validation_report.json に保存:
            {
              \"total_errors\": 0,
              \"total_warnings\": 0,
              \"critical_issues\": [],
              \"generic_issues\": [],
              \"domain_specific_issues\": [],
              \"structural_issues\": [],
              \"fix_priority\": [],
              \"auto_fixable\": [],
              \"manual_fix_required\": []
            }"
          
      - name: Post Validation Summary to Issue
        if: always()
        run: |
          # Use input parameter for workflow_dispatch, or job output for issue_comment
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          fi
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          VALIDATION_RESULT="${{ steps.validate.outputs.passed }}"
          
          if [ "$VALIDATION_RESULT" = "true" ]; then
            gh issue comment "$ISSUE_NUMBER" --body "## ✅ Workflow Generation & Validation Complete!
            
            **Workflow**: \`$WORKFLOW_NAME\`
            **Domain**: $DOMAIN
            **Validation**: ✅ PASSED
            
            ### 🎯 All checks passed:
            - YAML syntax valid
            - GitHub Actions structure correct
            - Domain-specific requirements met
            
            ### 📦 Download:
            Download the validated workflow from run artifacts.
            
            ---
            *Meta Workflow v12*"
          else
            ERROR_COUNT="${{ steps.validate.outputs.error_count }}"
            WARNING_COUNT="${{ steps.validate.outputs.warning_count }}"
            
            gh issue comment "$ISSUE_NUMBER" --body "## ⚠️ Workflow Validation Failed
            
            **Workflow**: \`$WORKFLOW_NAME\`
            **Domain**: $DOMAIN
            **Validation**: ❌ FAILED
            
            ### 💡 Issues Found:
            - **Errors**: $ERROR_COUNT
            - **Warnings**: $WARNING_COUNT
            
            ### 🔄 Next Action:
            Triggering automatic regeneration with fixes...
            
            ---
            *Check the regeneration job for updated workflow*"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===========================================
  # PHASE 7: ERROR FIX LOOP (IF NEEDED)
  # ===========================================
  
  regeneration-loop:
    name: "🔧 エラー修正ループ"
    runs-on: ubuntu-latest
    needs: ['validate-workflow', 'validate-and-detect', 'load-domain-templates']
    if: |
      always() && 
      needs.validate-workflow.result == 'success' &&
      needs.validate-workflow.outputs.validation_passed == 'false'
    outputs:
      regeneration_attempt: ${{ steps.attempt.outputs.regeneration_attempt }}
      regeneration_success: ${{ steps.fix-workflow.outputs.success }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml
          
      - name: Download All Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Record Fix Attempt
        id: attempt
        run: |
          echo "🔧 検証失敗によるエラー修正を開始..."
          ATTEMPT_COUNT=1
          echo "regeneration_attempt=$ATTEMPT_COUNT" >> $GITHUB_OUTPUT
          
          echo "## 🔧 Phase 7: エラー修正ループ" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 初回生成の検証失敗を検出" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 ピンポイント修正を実行中..." >> $GITHUB_STEP_SUMMARY
          
      - name: Analyze Validation Failures
        id: analyze
        run: |
          echo "🔍 検証失敗の詳細分析..."
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          
          # Extract specific failure reasons from previous validation
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits" \
            --max-turns 20 \
            -p "検証失敗の原因を詳細分析してください:
            
          参照ファイル:
          1. artifacts/validation-report/detailed_validation_report.json (詳細検証レポート)
          2. artifacts/validation-report/validation_result.json (基本検証結果)
          3. projects/workflow-execution-logs/meta-workflow-construction-checklist.md (汎用失敗パターン)
          4. meta/domain-templates/$DOMAIN/checklists/ (ドメイン特化チェックリスト)
          5. docs/CLAUDE_CODE_DATA_PERSISTENCE_GUIDE.md (データ永続化パターン)
          6. docs/YAML_CONSTRUCTION_GUIDELINES.md (YAML構築ガイドライン)
          
          分析項目:
          - HEREDOCとGitHub Actions変数の混在問題
          - ローカルuses:参照の問題
          - ファイルパスのハードコード問題
          - アーティファクト共有の問題
          - ドメイン特有の要件違反（キャスター分離、リップシンク等）
          
          分析結果をartifacts/failure_analysis.jsonに保存してください:
          {
            \"failure_reasons\": [\"原因1\", \"原因2\"],
            \"critical_issues\": [\"重要な問題1\", \"重要な問題2\"],
            \"improvement_strategy\": \"改善戦略の詳細\",
            \"regeneration_focus\": [\"再生成で特に注意すべき点1\", \"点2\"],
            \"heredoc_issues\": [\"HEREDOC問題のある行番号\"],
            \"local_uses_issues\": [\"ローカルuses参照の場所\"],
            \"domain_specific_issues\": [\"ドメイン特有の問題\"]
          }"
          
          if [ -f "artifacts/failure_analysis.json" ]; then
            echo "✅ 失敗分析完了"
            echo "- ✅ 失敗原因の特定完了" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失敗分析に失敗 - Fallbackを作成"
            # Fallback: use validation report to craft minimal analysis
            REPORT_DIR="artifacts/validation-report"
            REPORT_FILE=""
            if [ -f "$REPORT_DIR/validation_result.json" ]; then
              REPORT_FILE="$REPORT_DIR/validation_result.json"
            elif [ -f "validation_result.json" ]; then
              REPORT_FILE="validation_result.json"
            fi
            mkdir -p artifacts
            if [ -n "$REPORT_FILE" ]; then
              jq -n --argjson failed "$(jq -r '.failed_items // []' "$REPORT_FILE" 2>/dev/null || echo '[]')" '{failure_reasons:$failed, critical_issues:$failed, improvement_strategy:"Auto-fallback from validation_result.json", regeneration_focus:$failed}' > artifacts/failure_analysis.json || echo '{"failure_reasons":[],"critical_issues":[],"improvement_strategy":"fallback","regeneration_focus":[]}' > artifacts/failure_analysis.json
              echo "- ⚠️ Fallback failure_analysis.json を作成" >> $GITHUB_STEP_SUMMARY
            else
              echo '{"failure_reasons":[],"critical_issues":[],"improvement_strategy":"no-report","regeneration_focus":[]}' > artifacts/failure_analysis.json
              echo "- ⚠️ 検証レポート未検出のため空の分析を作成" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Fix Workflow Errors (Pinpoint Fixes)
        id: fix-workflow
        run: |
          echo "🔧 エラー箇所のピンポイント修正を実行..."
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          PROJECT_DIR="${{ needs.generate-professional-workflow.outputs.project_dir }}"
          
          # Get the previously generated workflow path
          PREVIOUS_WORKFLOW=$(find artifacts/generated-workflow -name "*.yml" -type f | head -1)
          
          if [ -z "$PREVIOUS_WORKFLOW" ]; then
            echo "❌ 前回生成したワークフローが見つかりません"
            exit 1
          fi
          
          echo "📝 修正対象ワークフロー: $PREVIOUS_WORKFLOW"
          
          # Create fix directory
          FIX_DIR="projects/issue-$ISSUE_NUMBER-fixes-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$FIX_DIR/logs"
          
          # Copy original workflow for backup
          cp "$PREVIOUS_WORKFLOW" "$FIX_DIR/original-workflow.yml"
          
          # Fix loop - up to 5 iterations for thorough fixes
          MAX_FIX_ATTEMPTS=5
          FIX_SUCCESS=false
          
          for fix_attempt in $(seq 1 $MAX_FIX_ATTEMPTS); do
            echo "🔄 修正試行 $fix_attempt/$MAX_FIX_ATTEMPTS"
            
            # Collect detailed error information before fix
            echo "📋 エラー詳細を収集中..."
            ERROR_DETAILS=""
            
            # Check for HEREDOC with GitHub Actions variables (HIGHEST PRIORITY)
            if awk '/cat.*<<.*EOF/,/^EOF$/' "$PREVIOUS_WORKFLOW" 2>/dev/null | grep -qE '\$\{\{'; then
              HEREDOC_LINES=$(awk '/cat.*<<.*EOF/,/^EOF$/' "$PREVIOUS_WORKFLOW" | grep -n '\$\{\{' | head -5)
              ERROR_DETAILS="${ERROR_DETAILS}
            HEREDOC内のGitHub Actions変数（YAML構文エラーの原因）:
            ${HEREDOC_LINES}"
              echo "🚨 HEREDOC with GitHub Actions variables detected"
            fi
            
            # Check for exposed tokens with line numbers
            if grep -n 'sk-ant-' "$PREVIOUS_WORKFLOW" 2>/dev/null; then
              TOKEN_LINES=$(grep -n 'sk-ant-' "$PREVIOUS_WORKFLOW" | head -3)
              ERROR_DETAILS="${ERROR_DETAILS}
            露出したOAuthトークン:
            ${TOKEN_LINES}"
            fi
            
            # Check for hardcoded paths with line numbers
            if grep -n -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" 2>/dev/null | grep -vF '${' | grep -q .; then
              PATH_LINES=$(grep -n -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" | grep -vF '${' | head -3)
              ERROR_DETAILS="${ERROR_DETAILS}
            ハードコードされたパス:
            ${PATH_LINES}"
            fi
            
            # Apply pinpoint fixes with detailed error information
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "Read,Write,Edit,MultiEdit" \
              --permission-mode "acceptEdits" \
              --max-turns 40 \
              -p "ワークフローのエラーをピンポイント修正してください:
              
            対象ワークフロー: $PREVIOUS_WORKFLOW
            
            検出されたエラー（行番号付き）:
            $ERROR_DETAILS
            
            【重要】修正手順（必ずこの順番で実行）:
            1. Read ツールでファイルを読み込む: $PREVIOUS_WORKFLOW
            2. 以下のパターンをすべて検索して修正:
               - sk-ant-で始まるトークン → \${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
               - /home/runner/work/kamuicode_meta/kamuicode_meta/ → \${{ github.workspace }}/
               - HEREDOCとGitHub Actions変数 → echoコマンドに変換
               - uses: ./ → インライン実装
               - outputs:.*matrix\\. → 正しい構文に修正
            3. MultiEdit または Edit ツールで修正を適用
            4. Write ツールで修正内容を保存: $PREVIOUS_WORKFLOW（必須）
            5. Write ツールでサマリー保存: $FIX_DIR/logs/fix_attempt_${fix_attempt}.txt
            
            重要な制約:
            - 既存の機能やステップを削除しない
            - ジョブの構造を維持する
            - 必要な処理は全て残す
            - 必ずWriteツールで明示的に保存する
            
            参照ガイドライン（必ず読んでパターンを適用）:
            - docs/WORKFLOW_FIX_PATTERNS.md （修正パターン集 - 最優先）
            - docs/YAML_CONSTRUCTION_GUIDELINES.md
            - docs/CLAUDE_CODE_DATA_PERSISTENCE_GUIDE.md"
            CLI_STATUS=$?
            
            # Log Claude Code execution status
            echo "📝 Claude Code実行ステータス: $CLI_STATUS"
            
            if [ $CLI_STATUS -eq 0 ]; then
              echo "✅ Claude Code実行成功"
              # Don't break yet - verify fixes first
            else
              echo "❌ Claude Code実行失敗"
              continue
            fi
            
            # Re-validate after fix
            echo "🔍 修正後の再検証..."
            python3 -c "import yaml; yaml.safe_load(open('$PREVIOUS_WORKFLOW'))" 2>/dev/null
            if [ $? -eq 0 ]; then
              echo "✅ YAML構文: 正常"
              
              # Check for common issues with more accurate patterns
              ERROR_COUNT=0
              
              # Check for HEREDOC with GitHub Actions variables (more precise check)
              # Look for HEREDOC blocks that contain dollar-brace within them
              if awk '/cat.*<<.*EOF/,/^EOF$/' "$PREVIOUS_WORKFLOW" | grep -qE '\$\{|github\.|needs\.|matrix\.'; then
                echo "⚠️ HEREDOCとGitHub Actions変数の混在がまだ存在"
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
              
              # Check for local uses references
              if grep -q 'uses:.*\./' "$PREVIOUS_WORKFLOW"; then
                echo "⚠️ ローカルuses参照がまだ存在"
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
              
              # Check for hardcoded absolute paths (more precise pattern)
              # Look for paths that are not using GitHub Actions variables
              if grep -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" 2>/dev/null | grep -vF '${' | grep -q .; then
                echo "⚠️ ハードコードされた絶対パスがまだ存在"
                echo "  検出された行:"
                grep -n -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" | grep -vF '${' | head -3
                ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
              
              if [ $ERROR_COUNT -eq 0 ]; then
                echo "✅ 修正成功 - 全てのエラーが解決"
                FIX_SUCCESS=true
                break
              else
                echo "⚠️ まだ $ERROR_COUNT 個のエラーが残っています"
                if [ $fix_attempt -lt $MAX_FIX_ATTEMPTS ]; then
                  echo "🔄 次の修正試行を準備..."
                  sleep 5
                fi
              fi
            else
              echo "❌ YAML構文エラーが残っています"
              if [ $fix_attempt -lt $MAX_FIX_ATTEMPTS ]; then
                echo "🔄 構文エラーを修正して再試行..."
              fi
            fi
          done
          
          # Final verification and result
          if [ "$FIX_SUCCESS" = "true" ]; then
            # Double-check that critical errors are actually fixed
            FINAL_VERIFICATION_PASSED=true
            echo "🔍 最終検証を実行中..."
            
            # Check for exposed OAuth tokens
            if grep -q 'sk-ant-' "$PREVIOUS_WORKFLOW" 2>/dev/null; then
              echo "❌ 最終検証失敗: OAuthトークンがまだ露出しています"
              FINAL_VERIFICATION_PASSED=false
            fi
            
            # Check for hardcoded paths
            if grep -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" 2>/dev/null | grep -vF '${' | grep -q .; then
              echo "❌ 最終検証失敗: ハードコードパスがまだ存在します"
              grep -n -E '"/home/runner/work/[^"]*"' "$PREVIOUS_WORKFLOW" | grep -vF '${' | head -3
              FINAL_VERIFICATION_PASSED=false
            fi
            
            if [ "$FINAL_VERIFICATION_PASSED" = "true" ]; then
              echo "✅ ワークフロー修正完了"
              echo "success=true" >> $GITHUB_OUTPUT
              
              # Copy fixed workflow to output location
              cp "$PREVIOUS_WORKFLOW" "$FIX_DIR/fixed-workflow.yml"
              
              echo "- ✅ ピンポイント修正完了" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ 全エラー解決" >> $GITHUB_STEP_SUMMARY
              echo "- 📁 修正済みワークフロー: $FIX_DIR/fixed-workflow.yml" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ 修正は実行されましたが、検証に失敗しました"
              echo "success=partial" >> $GITHUB_OUTPUT
              
              # Still copy the workflow for analysis
              cp "$PREVIOUS_WORKFLOW" "$FIX_DIR/fixed-workflow.yml"
              
              echo "- ⚠️ 修正試行は実行されました" >> $GITHUB_STEP_SUMMARY
              echo "- ❌ 最終検証で一部のエラーが残存" >> $GITHUB_STEP_SUMMARY
              echo "- 📁 部分修正ワークフロー: $FIX_DIR/fixed-workflow.yml" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 手動での追加修正が必要です" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ 修正が完了できませんでした"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "- ❌ 一部のエラーが解決できませんでした" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 手動での確認が必要です" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload Fixed Workflow
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fixed-workflow
          path: |
            projects/issue-${{ needs.validate-and-detect.outputs.issue_number }}-fixes-*/fixed-workflow.yml
            projects/issue-${{ needs.validate-and-detect.outputs.issue_number }}-fixes-*/logs/
          if-no-files-found: warn

  # ===========================================
  # PHASE 8: FINAL REPORT DISPLAY
  # ===========================================
  
  display-final-report:
    name: "📊 実行完了"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates', 'professional-task-decomposition', 'optimize-task-order', 'generate-professional-workflow', 'validate-workflow', 'regeneration-loop']
    if: always()
    steps:
          
      - name: Add Completion Summary
        run: |
          echo "📊 実行完了サマリーを追加中..."
          
          # 基本情報
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          VALIDATION_STATUS="${{ needs.validate-workflow.outputs.validation_passed }}"
          
          # 実行完了サマリーを追加
          echo "## 🎉 実行完了" >> $GITHUB_STEP_SUMMARY
          echo "- **完了時刻**: $(date '+%Y年%m月%d日 %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          
          # 再生成結果の確認
          REGENERATION_SUCCESS="${{ needs.regeneration-loop.outputs.regeneration_success }}"
          REGENERATION_ATTEMPTED="${{ needs.regeneration-loop.outputs.regeneration_attempt }}"
          
          if [ "$VALIDATION_STATUS" = "true" ]; then
            echo "- **全体実行結果**: ✅ 成功（初回生成）" >> $GITHUB_STEP_SUMMARY
          elif [ "$REGENERATION_SUCCESS" = "true" ]; then
            echo "- **全体実行結果**: ✅ 成功（再生成により修正）" >> $GITHUB_STEP_SUMMARY
            echo "- **再生成実行**: ✅ 完了（検証失敗を自動修正）" >> $GITHUB_STEP_SUMMARY
          elif [ "$REGENERATION_ATTEMPTED" = "1" ]; then
            echo "- **全体実行結果**: ❌ 失敗（再生成でも修正不可）" >> $GITHUB_STEP_SUMMARY
            echo "- **再生成実行**: ❌ 失敗（手動対応が必要）" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **全体実行結果**: ⚠️ 一部エラーあり" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ダウンロード情報
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📥 成果物のダウンロード
          
          ローカルで以下のコマンドを実行してください：
          
          \`\`\`bash
          # すべての成果物をダウンロード
          gh run download ${{ github.run_id }}
          
          # 特定の成果物のみダウンロード
          gh run download ${{ github.run_id }} -n generated-workflow
          EOF
          
          # 再生成された場合の追加情報
          if [ "$REGENERATION_SUCCESS" = "true" ]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          
          # 再生成版ワークフローもダウンロード（推奨）
          gh run download ${{ github.run_id }} -n regenerated-workflow
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          \`\`\`
          EOF
