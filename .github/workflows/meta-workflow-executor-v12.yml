name: "Meta Workflow Executor v12 with Domain Templates"
run-name: "🚀 Meta Workflow v12 | Issue #${{ inputs.issue_number || github.event.issue.number }} | ${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for workflow generation request'
        required: true
        default: '60'
  
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  # ===========================================
  # PHASE 1: ISSUE VALIDATION & DOMAIN DETECTION
  # ===========================================
  
  validate-and-detect:
    name: "🔍 Issue Validation & Domain Detection"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request == null)
    outputs:
      issue_number: ${{ steps.extract.outputs.issue_number }}
      issue_title: ${{ steps.extract.outputs.issue_title }}
      primary_domain: ${{ steps.detect.outputs.primary_domain }}
      detected_domains: ${{ steps.detect.outputs.detected_domains }}
      domain_count: ${{ steps.detect.outputs.domain_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml
        
      - name: Extract Issue Information
        id: extract
        run: |
          # Check if this is a valid trigger
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            # For issue comments, check if it's a start command
            if ! echo "$COMMENT_BODY" | grep -qE '(/start|^start$|^実行$|^execute$)'; then
              echo "::notice::Skipping - Comment does not contain start command"
              echo "issue_number=skip" >> $GITHUB_OUTPUT
              exit 0
            fi
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          else
            # workflow_dispatch always proceeds
            ISSUE_NUMBER="${{ inputs.issue_number }}"
          fi
          
          echo "🔍 Analyzing Issue #$ISSUE_NUMBER..."
          
          # Get issue details using GitHub CLI
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --json title,body,number --jq '{title: .title, body: .body, number: .number}')
          
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          ISSUE_NUMBER=$(echo "$ISSUE_DATA" | jq -r '.number')
          
          # Save to artifacts for next jobs
          mkdir -p artifacts
          echo "$ISSUE_TITLE" > artifacts/issue_title.txt
          echo "$ISSUE_BODY" > artifacts/issue_body.txt
          echo "$ISSUE_NUMBER" > artifacts/issue_number.txt
          
          # Combine title and body for domain detection
          echo -e "$ISSUE_TITLE\n\n$ISSUE_BODY" > artifacts/issue_content.txt
          
          # Output minimal data
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          echo "✅ Issue #$ISSUE_NUMBER validated: $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Detect Domain from Issue
        id: detect
        run: |
          echo "🎯 Detecting domain from issue content..."
          
          python scripts/domain-template-loader.py \
            --action detect \
            --issue artifacts/issue_content.txt \
            --output artifacts/domain_detection.json
          
          # Extract results
          PRIMARY_DOMAIN=$(jq -r '.primary_domain' artifacts/domain_detection.json)
          DETECTED_DOMAINS=$(jq -c '.detected_domains' artifacts/domain_detection.json)
          DOMAIN_COUNT=$(jq '.detected_domains | length' artifacts/domain_detection.json)
          
          echo "primary_domain=$PRIMARY_DOMAIN" >> $GITHUB_OUTPUT
          echo "detected_domains=$DETECTED_DOMAINS" >> $GITHUB_OUTPUT
          echo "domain_count=$DOMAIN_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Primary domain detected: $PRIMARY_DOMAIN"
          echo "📊 Total domains detected: $DOMAIN_COUNT"
          
      - name: Upload Issue and Domain Data
        uses: actions/upload-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/

  # ===========================================
  # PHASE 2: DOMAIN TEMPLATE LOADING
  # ===========================================
  
  load-domain-templates:
    name: "📚 Load Domain Templates"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect']
    if: |
      needs.validate-and-detect.outputs.issue_number != 'skip' &&
      needs.validate-and-detect.outputs.primary_domain != 'null'
    outputs:
      template_summary: ${{ steps.load.outputs.template_summary }}
      chunk_count: ${{ steps.load.outputs.chunk_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml
          
      - name: Download Issue Data
        uses: actions/download-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/
          
      - name: Load Primary Domain Template
        id: load
        run: |
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          echo "📚 Loading template for domain: $PRIMARY_DOMAIN"
          
          # Get domain summary for task decomposition
          python scripts/domain-template-loader.py \
            --action summary-for-decomposition \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/domain_decomposition_data.json
          
          # Also get standard summary for reference
          python scripts/domain-template-loader.py \
            --action summary \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/domain_summary.json
          
          # Split template into chunks
          python scripts/domain-template-loader.py \
            --action split \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/template_chunks.json
          
          # Extract basic info only (not full JSON)
          DOMAIN_NAME=$(jq -r '.domain_info.name' artifacts/domain_decomposition_data.json)
          EXPERT_ROLE=$(jq -r '.domain_info.expert' artifacts/domain_decomposition_data.json)
          CHUNK_COUNT=$(jq '.total_chunks' artifacts/template_chunks.json)
          
          echo "domain_name=$DOMAIN_NAME" >> $GITHUB_OUTPUT
          echo "expert_role=$EXPERT_ROLE" >> $GITHUB_OUTPUT
          echo "chunk_count=$CHUNK_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Template loaded: $DOMAIN_NAME ($CHUNK_COUNT chunks)"
          
      - name: Upload Template Data
        uses: actions/upload-artifact@v4
        with:
          name: domain-template-data
          path: artifacts/

  # ===========================================
  # PHASE 3: PROFESSIONAL TASK DECOMPOSITION
  # ===========================================
  
  professional-task-decomposition:
    name: "🧠 Professional Task Decomposition"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates']
    outputs:
      task_count: ${{ steps.decompose.outputs.task_count }}
      dependency_groups: ${{ steps.decompose.outputs.dependency_groups }}
      estimated_duration: ${{ steps.decompose.outputs.estimated_duration }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml
          
      - name: Download and Merge Previous Artifacts
        run: |
          echo "📥 Downloading artifacts from previous jobs..."
          
          # Download artifacts selectively
          mkdir -p artifacts
          
          # Download issue-domain-data
          echo "Downloading issue-domain-data..."
          gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            --jq '.artifacts[] | select(.name == "issue-domain-data") | .id' | \
          while read -r artifact_id; do
            gh api "/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
              --header "Accept: application/vnd.github+json" \
              > artifacts/issue-domain-data.zip
            unzip -q -o artifacts/issue-domain-data.zip -d artifacts/issue-domain-data/
            rm artifacts/issue-domain-data.zip
          done
          
          # Download domain-template-data
          echo "Downloading domain-template-data..."
          gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            --jq '.artifacts[] | select(.name == "domain-template-data") | .id' | \
          while read -r artifact_id; do
            gh api "/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
              --header "Accept: application/vnd.github+json" \
              > artifacts/domain-template-data.zip
            unzip -q -o artifacts/domain-template-data.zip -d artifacts/domain-template-data/
            rm artifacts/domain-template-data.zip
          done
          
          # Merge artifacts to flat structure
          echo "Merging artifacts..."
          find artifacts -type f -name "*.json" -o -name "*.txt" -o -name "*.yaml" | while read -r file; do
            filename=$(basename "$file")
            if [ ! -f "artifacts/$filename" ]; then
              cp "$file" "artifacts/$filename"
            fi
          done
          
          echo "✅ Artifacts downloaded and merged"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Professional Task Decomposition with Domain Knowledge
        id: decompose
        run: |
          echo "🧠 Starting professional task decomposition..."
          
          # Create decomposition prompt using file references
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          EXPERT_ROLE="${{ needs.load-domain-templates.outputs.expert_role }}"
          
          cat > decomposition_prompt.txt << 'EOF'
          専門的なタスク分解を実行してください。
          
          以下のファイルを読み込んでタスク分解を行ってください：
          1. ドメイン専門知識: artifacts/domain-template-data/domain_decomposition_data.json
          2. ユーザーリクエスト: artifacts/issue-domain-data/issue_content.txt
          
          ドメイン専門知識ファイルには以下が含まれています：
          - expert_context: 専門家の完全な知識
          - task_decomposition_context: ワークフローパターンと最適化情報
          - constraints_and_requirements: すべての制約事項
          - implementation_resources: 利用可能なリソース
          - complex_thinking_guide: 思考プロセスのガイド
          
          タスク分解の手順：
          1. domain_decomposition_data.jsonのexpert_contextを完全に理解
          2. task_decomposition_contextのワークフローパターンを参照
          3. constraints_and_requirementsのすべての制約を考慮
          4. complex_thinking_guideに従って複雑な思考プロセスを実行
          5. implementation_resourcesから最適なリソースを選択
          
          出力をartifacts/professional_task_decomposition.jsonに保存してください。
          
          出力形式：
          {
            "professional_analysis": {
              "understanding": "リクエストの専門的理解（詳細）",
              "considerations": ["考慮事項のリスト"],
              "thinking_process": "思考プロセスの詳細な記録"
            },
            "tasks": [
              {
                "id": "task-1",
                "name": "タスク名",
                "description": "詳細な説明",
                "reasoning": "なぜこのタスクが必要か",
                "minimal_units": ["unit1", "unit2"],
                "dependencies": [],
                "estimated_duration": "5-10分",
                "professional_notes": "専門的な注意点",
                "quality_criteria": "品質基準"
              }
            ],
            "workflow_optimization": {
              "parallel_groups": [],
              "critical_path": [],
              "optimization_rationale": "最適化の理由"
            },
            "total_estimated_duration": "30分",
            "domain_specific_constraints": []
          }
          EOF
          
          # Add expert role context
          echo "あなたは${EXPERT_ROLE}です。" > final_prompt.txt
          echo "" >> final_prompt.txt
          cat decomposition_prompt.txt >> final_prompt.txt
          
          # Execute Claude Code for task decomposition
          npx @anthropic-ai/claude-code \
            -p "$(cat final_prompt.txt)" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits" \
            > claude_output.log 2>&1
          
          # Check if execution was successful
          if [ $? -eq 0 ]; then
            echo "✅ Claude Code execution completed"
            
            # Try multiple methods to find the generated file
            if [ -f "artifacts/professional_task_decomposition.json" ]; then
              echo "✅ Found file at expected location"
            elif [ -f "professional_task_decomposition.json" ]; then
              echo "📁 Found file in current directory, moving to artifacts"
              mv professional_task_decomposition.json artifacts/
            else
              # Search for any JSON file that might contain the task decomposition
              echo "🔍 Searching for generated JSON files..."
              find . -name "*.json" -type f -newer final_prompt.txt -exec grep -l "professional_analysis" {} \; | while read -r file; do
                echo "📁 Found potential task decomposition at: $file"
                cp "$file" artifacts/professional_task_decomposition.json
                break
              done
            fi
            
            # Final check
            if [ ! -f "artifacts/professional_task_decomposition.json" ]; then
              echo "❌ Could not find task decomposition file"
              echo "📋 Claude output:"
              cat claude_output.log
              exit 1
            fi
          else
            echo "❌ Claude Code execution failed"
            cat claude_output.log
            exit 1
          fi
          
          # Extract results
          if [ -f "artifacts/professional_task_decomposition.json" ]; then
            TASK_COUNT=$(jq '.tasks | length' artifacts/professional_task_decomposition.json)
            DEPENDENCY_GROUPS=$(jq -c '.dependency_groups' artifacts/professional_task_decomposition.json)
            ESTIMATED_DURATION=$(jq -r '.total_estimated_duration' artifacts/professional_task_decomposition.json)
            
            echo "task_count=$TASK_COUNT" >> $GITHUB_OUTPUT
            echo "dependency_groups=$DEPENDENCY_GROUPS" >> $GITHUB_OUTPUT
            echo "estimated_duration=$ESTIMATED_DURATION" >> $GITHUB_OUTPUT
            
            echo "✅ Decomposed into $TASK_COUNT tasks"
            echo "⏱️ Estimated duration: $ESTIMATED_DURATION"
          else
            echo "❌ Task decomposition failed"
            exit 1
          fi
          
      - name: Upload Task Decomposition
        uses: actions/upload-artifact@v4
        with:
          name: task-decomposition
          path: artifacts/professional_task_decomposition.json

  # ===========================================
  # PHASE 4: CONSTRAINT-AWARE WORKFLOW GENERATION
  # ===========================================
  
  generate-professional-workflow:
    name: "⚡ Generate Professional Workflow"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates', 'professional-task-decomposition']
    outputs:
      workflow_path: ${{ steps.generate.outputs.workflow_path }}
      workflow_name: ${{ steps.generate.outputs.workflow_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml
          
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Generate Professional Workflow
        id: generate
        run: |
          echo "⚡ Generating professional workflow..."
          
          # Prepare all necessary data
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create generation directory
          PROJECT_DIR="projects/issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          mkdir -p "$PROJECT_DIR/generated-workflow"
          
          # Load template chunks progressively
          CHUNKS=$(jq -r '.chunks[].id' artifacts/domain-template-data/template_chunks.json)
          
          # Create comprehensive generation prompt
          cat > generation_prompt.txt << EOF
          プロフェッショナルなGitHub Actionsワークフローを生成してください。
          
          タスク分解結果：
          ```json
          $(cat artifacts/task-decomposition/professional_task_decomposition.json)
          ```
          
          ドメイン: $PRIMARY_DOMAIN
          
          重要な制約:
          1. uses: でローカルファイルを参照しない
          2. 全てのパスは\${{ needs.setup.outputs.project_dir }}を使用
          3. MCP使用時は--mcp-configを必ず含める
          4. ジョブ間のファイル共有はartifactsを使用
          5. 各ステップは21000文字以内
          
          専門的な品質基準に従って、実務で使えるワークフローを生成してください。
          
          出力ファイル: $PROJECT_DIR/generated-workflow/workflow.yml
          EOF
          
          # Execute workflow generation
          npx @anthropic-ai/claude-code \
            -p "$(cat generation_prompt.txt)" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Read,MultiEdit" \
            --permission-mode "acceptEdits"
          
          # Verify workflow was created
          WORKFLOW_PATH="$PROJECT_DIR/generated-workflow/workflow.yml"
          if [ -f "$WORKFLOW_PATH" ]; then
            WORKFLOW_NAME="professional-workflow-${PRIMARY_DOMAIN}-${TIMESTAMP}"
            
            echo "workflow_path=$WORKFLOW_PATH" >> $GITHUB_OUTPUT
            echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
            
            echo "✅ Workflow generated: $WORKFLOW_NAME"
          else
            echo "❌ Workflow generation failed"
            exit 1
          fi
          
      - name: Upload Generated Workflow
        uses: actions/upload-artifact@v4
        with:
          name: generated-workflow
          path: |
            projects/issue-${{ needs.validate-and-detect.outputs.issue_number }}-*

  # ===========================================
  # PHASE 5: VALIDATION & DEPLOYMENT
  # ===========================================
  
  validate-and-deploy:
    name: "✅ Validate & Deploy"
    runs-on: ubuntu-latest
    needs: ['generate-professional-workflow']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Generated Workflow
        uses: actions/download-artifact@v4
        with:
          name: generated-workflow
          path: projects/
          
      - name: Validate Workflow
        run: |
          echo "✅ Validating generated workflow..."
          
          # Use workflow with inputs if available, otherwise use original
          if [ "${{ needs.generate-professional-inputs.outputs.inputs_generated }}" == "true" ]; then
            WORKFLOW_PATH="${{ needs.generate-professional-inputs.outputs.workflow_path_with_inputs }}"
          else
            WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          fi
          
          # YAML syntax validation
          python -c "import yaml; yaml.safe_load(open('$WORKFLOW_PATH'))"
          echo "✅ YAML syntax valid"
          
          # GitHub Actions structure validation
          if grep -q "^name:" "$WORKFLOW_PATH" && \
             grep -q "^on:" "$WORKFLOW_PATH" && \
             grep -q "^jobs:" "$WORKFLOW_PATH"; then
            echo "✅ GitHub Actions structure valid"
          else
            echo "❌ Invalid GitHub Actions structure"
            exit 1
          fi
          
      - name: Copy Workflow to Final Location
        run: |
          echo "📋 Copying workflow to final location..."
          
          # Use workflow with inputs if available, otherwise use original
          if [ "${{ needs.generate-professional-inputs.outputs.inputs_generated }}" == "true" ]; then
            WORKFLOW_PATH="${{ needs.generate-professional-inputs.outputs.workflow_path_with_inputs }}"
          else
            WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          fi
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          
          # Find the project directory
          PROJECT_DIR=$(find projects -name "issue-${{ needs.validate-and-detect.outputs.issue_number }}-*" -type d | head -1)
          
          # Copy to final location in project directory
          FINAL_DIR="${PROJECT_DIR}/final-workflow"
          mkdir -p "$FINAL_DIR"
          cp "$WORKFLOW_PATH" "$FINAL_DIR/${WORKFLOW_NAME}.yml"
          
          # Create deployment instructions
          cat > "$FINAL_DIR/DEPLOYMENT_INSTRUCTIONS.md" << EOF
          # Workflow Deployment Instructions
          
          ## Generated Workflow
          - **Name**: ${WORKFLOW_NAME}
          - **File**: ${WORKFLOW_NAME}.yml
          - **Domain**: ${{ needs.validate-and-detect.outputs.primary_domain }}
          - **Issue**: #${{ needs.validate-and-detect.outputs.issue_number }}
          
          ## Manual Deployment Steps
          1. Review the generated workflow file
          2. Copy to \`.github/workflows/\` directory if needed
          3. Ensure all required secrets are configured
          4. Test with \`workflow_dispatch\` trigger
          
          ## Workflow Summary
          Generated from professional domain templates with:
          - Domain-specific constraints applied
          - Optimized task dependencies
          - Professional quality standards
          EOF
          
          echo "✅ Workflow saved to: $FINAL_DIR/${WORKFLOW_NAME}.yml"
          echo "📝 Deployment instructions: $FINAL_DIR/DEPLOYMENT_INSTRUCTIONS.md"
          
      - name: Update Issue
        run: |
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          
          # Find the project directory for the issue link
          PROJECT_DIR=$(find projects -name "issue-${ISSUE_NUMBER}-*" -type d | head -1)
          PROJECT_NAME=$(basename "$PROJECT_DIR")
          
          gh issue comment $ISSUE_NUMBER --body "## ✅ Professional Workflow Generated!
          
          **Workflow Name**: \`$WORKFLOW_NAME\`
          **Domain**: $DOMAIN
          **Status**: Successfully generated and validated
          
          ### 📋 Summary:
          - Applied professional domain expertise
          - Incorporated domain-specific constraints
          - Optimized task dependencies
          - Validated GitHub Actions structure
          
          ### 📁 Output Location:
          - **Project Directory**: \`projects/$PROJECT_NAME/\`
          - **Workflow File**: \`final-workflow/${WORKFLOW_NAME}.yml\`
          - **Deployment Guide**: \`final-workflow/DEPLOYMENT_INSTRUCTIONS.md\`
          
          ### 🚀 Next Steps:
          1. Download the workflow from artifacts
          2. Review the generated workflow
          3. Deploy manually to \`.github/workflows/\` if needed
          4. Configure required secrets
          5. Test with \`workflow_dispatch\`
          
          ---
          *Generated by Meta Workflow v12 with Domain Templates*"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}