name: "Meta Workflow Executor v11 with Domain Templates"
run-name: "🚀 Meta Workflow v11 | Issue #${{ inputs.issue_number }} | ${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for workflow generation request'
        required: true
        default: '60'

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  # ===========================================
  # PHASE 1: ISSUE VALIDATION & DOMAIN DETECTION
  # ===========================================
  
  validate-and-detect:
    name: "🔍 Issue Validation & Domain Detection"
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.extract.outputs.issue_number }}
      issue_title: ${{ steps.extract.outputs.issue_title }}
      primary_domain: ${{ steps.detect.outputs.primary_domain }}
      detected_domains: ${{ steps.detect.outputs.detected_domains }}
      domain_count: ${{ steps.detect.outputs.domain_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml
        
      - name: Extract Issue Information
        id: extract
        run: |
          echo "🔍 Analyzing Issue #${{ inputs.issue_number }}..."
          
          # Get issue details using GitHub CLI
          ISSUE_DATA=$(gh issue view ${{ inputs.issue_number }} --json title,body,number --jq '{title: .title, body: .body, number: .number}')
          
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          ISSUE_NUMBER=$(echo "$ISSUE_DATA" | jq -r '.number')
          
          # Save to artifacts for next jobs
          mkdir -p artifacts
          echo "$ISSUE_TITLE" > artifacts/issue_title.txt
          echo "$ISSUE_BODY" > artifacts/issue_body.txt
          echo "$ISSUE_NUMBER" > artifacts/issue_number.txt
          
          # Combine title and body for domain detection
          echo -e "$ISSUE_TITLE\n\n$ISSUE_BODY" > artifacts/issue_content.txt
          
          # Output minimal data
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          echo "✅ Issue #$ISSUE_NUMBER validated: $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Detect Domain from Issue
        id: detect
        run: |
          echo "🎯 Detecting domain from issue content..."
          
          python scripts/domain-template-loader.py \
            --action detect \
            --issue artifacts/issue_content.txt \
            --output artifacts/domain_detection.json
          
          # Extract results
          PRIMARY_DOMAIN=$(jq -r '.primary_domain' artifacts/domain_detection.json)
          DETECTED_DOMAINS=$(jq -c '.detected_domains' artifacts/domain_detection.json)
          DOMAIN_COUNT=$(jq '.detected_domains | length' artifacts/domain_detection.json)
          
          echo "primary_domain=$PRIMARY_DOMAIN" >> $GITHUB_OUTPUT
          echo "detected_domains=$DETECTED_DOMAINS" >> $GITHUB_OUTPUT
          echo "domain_count=$DOMAIN_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Primary domain detected: $PRIMARY_DOMAIN"
          echo "📊 Total domains detected: $DOMAIN_COUNT"
          
      - name: Upload Issue and Domain Data
        uses: actions/upload-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/

  # ===========================================
  # PHASE 2: DOMAIN TEMPLATE LOADING
  # ===========================================
  
  load-domain-templates:
    name: "📚 Load Domain Templates"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect']
    if: needs.validate-and-detect.outputs.primary_domain != 'null'
    outputs:
      template_summary: ${{ steps.load.outputs.template_summary }}
      chunk_count: ${{ steps.load.outputs.chunk_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml
          
      - name: Download Issue Data
        uses: actions/download-artifact@v4
        with:
          name: issue-domain-data
          path: artifacts/
          
      - name: Load Primary Domain Template
        id: load
        run: |
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          echo "📚 Loading template for domain: $PRIMARY_DOMAIN"
          
          # Get domain summary
          python scripts/domain-template-loader.py \
            --action summary \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/domain_summary.json
          
          # Split template into chunks
          python scripts/domain-template-loader.py \
            --action split \
            --domain "$PRIMARY_DOMAIN" \
            --output artifacts/template_chunks.json
          
          # Extract summary info
          TEMPLATE_SUMMARY=$(jq -c '.' artifacts/domain_summary.json)
          CHUNK_COUNT=$(jq '.total_chunks' artifacts/template_chunks.json)
          
          echo "template_summary=$TEMPLATE_SUMMARY" >> $GITHUB_OUTPUT
          echo "chunk_count=$CHUNK_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ Template loaded with $CHUNK_COUNT chunks"
          
      - name: Upload Template Data
        uses: actions/upload-artifact@v4
        with:
          name: domain-template-data
          path: artifacts/

  # ===========================================
  # PHASE 3: PROFESSIONAL TASK DECOMPOSITION
  # ===========================================
  
  professional-task-decomposition:
    name: "🧠 Professional Task Decomposition"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates']
    outputs:
      task_count: ${{ steps.decompose.outputs.task_count }}
      dependency_groups: ${{ steps.decompose.outputs.dependency_groups }}
      estimated_duration: ${{ steps.decompose.outputs.estimated_duration }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml
          
      - name: Download Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Professional Task Decomposition with Domain Knowledge
        id: decompose
        run: |
          echo "🧠 Starting professional task decomposition..."
          
          # Load domain summary
          DOMAIN_SUMMARY=$(cat artifacts/domain-template-data/domain_summary.json)
          ISSUE_CONTENT=$(cat artifacts/issue-domain-data/issue_content.txt)
          
          # Create decomposition prompt with domain expertise
          cat > decomposition_prompt.txt << 'EOF'
          あなたは${{ needs.validate-and-detect.outputs.primary_domain }}ドメインの専門家です。
          
          以下のドメイン情報を基に、プロフェッショナルな視点でタスクを分解してください：
          
          ドメイン情報：
          ```json
          ${DOMAIN_SUMMARY}
          ```
          
          ユーザーのリクエスト：
          ```
          ${ISSUE_CONTENT}
          ```
          
          以下の形式でタスクを分解してください：
          
          1. 専門家視点での要求分析
          2. 必要なタスクの洗い出し（プロの実務フローに基づく）
          3. タスク間の依存関係（データフローベース）
          4. 並列実行可能なタスクグループ
          5. 各タスクの推定所要時間
          6. 使用するミニマルユニット
          7. 専門的な制約条件の考慮
          
          出力形式：
          ```json
          {
            "professional_analysis": "専門家視点での分析",
            "tasks": [
              {
                "id": "task-1",
                "name": "タスク名",
                "description": "詳細説明",
                "minimal_units": ["unit1", "unit2"],
                "dependencies": [],
                "estimated_duration": "5分",
                "professional_notes": "専門的な注意点"
              }
            ],
            "dependency_groups": [
              {
                "group": 1,
                "parallel_tasks": ["task-1", "task-2"],
                "can_start": "immediately"
              }
            ],
            "total_estimated_duration": "30分",
            "domain_specific_constraints": []
          }
          ```
          EOF
          
          # Replace variables in prompt
          export DOMAIN_SUMMARY
          export ISSUE_CONTENT
          envsubst < decomposition_prompt.txt > final_prompt.txt
          
          # Execute Claude Code for task decomposition
          npx @anthropic-ai/claude-code \
            -p "$(cat final_prompt.txt)" \
            --allowedTools "Write" \
            --permission-mode "acceptEdits" \
            --outputFile "artifacts/professional_task_decomposition.json" \
            --autoApprove
          
          # Extract results
          if [ -f "artifacts/professional_task_decomposition.json" ]; then
            TASK_COUNT=$(jq '.tasks | length' artifacts/professional_task_decomposition.json)
            DEPENDENCY_GROUPS=$(jq -c '.dependency_groups' artifacts/professional_task_decomposition.json)
            ESTIMATED_DURATION=$(jq -r '.total_estimated_duration' artifacts/professional_task_decomposition.json)
            
            echo "task_count=$TASK_COUNT" >> $GITHUB_OUTPUT
            echo "dependency_groups=$DEPENDENCY_GROUPS" >> $GITHUB_OUTPUT
            echo "estimated_duration=$ESTIMATED_DURATION" >> $GITHUB_OUTPUT
            
            echo "✅ Decomposed into $TASK_COUNT tasks"
            echo "⏱️ Estimated duration: $ESTIMATED_DURATION"
          else
            echo "❌ Task decomposition failed"
            exit 1
          fi
          
      - name: Upload Task Decomposition
        uses: actions/upload-artifact@v4
        with:
          name: task-decomposition
          path: artifacts/professional_task_decomposition.json

  # ===========================================
  # PHASE 4: CONSTRAINT-AWARE WORKFLOW GENERATION
  # ===========================================
  
  generate-professional-workflow:
    name: "⚡ Generate Professional Workflow"
    runs-on: ubuntu-latest
    needs: ['validate-and-detect', 'load-domain-templates', 'professional-task-decomposition']
    outputs:
      workflow_path: ${{ steps.generate.outputs.workflow_path }}
      workflow_name: ${{ steps.generate.outputs.workflow_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install pyyaml
          
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Generate Professional Workflow
        id: generate
        run: |
          echo "⚡ Generating professional workflow..."
          
          # Prepare all necessary data
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          PRIMARY_DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create generation directory
          PROJECT_DIR="projects/issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          mkdir -p "$PROJECT_DIR/generated-workflow"
          
          # Load template chunks progressively
          CHUNKS=$(jq -r '.chunks[].id' artifacts/domain-template-data/template_chunks.json)
          
          # Create comprehensive generation prompt
          cat > generation_prompt.txt << 'EOF'
          プロフェッショナルなGitHub Actionsワークフローを生成してください。
          
          タスク分解結果：
          ```json
          $(cat artifacts/task-decomposition/professional_task_decomposition.json)
          ```
          
          ドメイン: $PRIMARY_DOMAIN
          
          重要な制約:
          1. uses: でローカルファイルを参照しない
          2. 全てのパスは${{ needs.setup.outputs.project_dir }}を使用
          3. MCP使用時は--mcp-configを必ず含める
          4. ジョブ間のファイル共有はartifactsを使用
          5. 各ステップは21000文字以内
          
          専門的な品質基準に従って、実務で使えるワークフローを生成してください。
          
          出力ファイル: $PROJECT_DIR/generated-workflow/workflow.yml
          EOF
          
          # Execute workflow generation
          npx @anthropic-ai/claude-code \
            -p "$(cat generation_prompt.txt)" \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Read,MultiEdit" \
            --permission-mode "acceptEdits" \
            --autoApprove
          
          # Verify workflow was created
          WORKFLOW_PATH="$PROJECT_DIR/generated-workflow/workflow.yml"
          if [ -f "$WORKFLOW_PATH" ]; then
            WORKFLOW_NAME="professional-workflow-${PRIMARY_DOMAIN}-${TIMESTAMP}"
            
            echo "workflow_path=$WORKFLOW_PATH" >> $GITHUB_OUTPUT
            echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
            
            echo "✅ Workflow generated: $WORKFLOW_NAME"
          else
            echo "❌ Workflow generation failed"
            exit 1
          fi
          
      - name: Upload Generated Workflow
        uses: actions/upload-artifact@v4
        with:
          name: generated-workflow
          path: projects/

  # ===========================================
  # PHASE 5: VALIDATION & DEPLOYMENT
  # ===========================================
  
  validate-and-deploy:
    name: "✅ Validate & Deploy"
    runs-on: ubuntu-latest
    needs: ['generate-professional-workflow']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Generated Workflow
        uses: actions/download-artifact@v4
        with:
          name: generated-workflow
          path: projects/
          
      - name: Validate Workflow
        run: |
          echo "✅ Validating generated workflow..."
          
          # Use workflow with inputs if available, otherwise use original
          if [ "${{ needs.generate-professional-inputs.outputs.inputs_generated }}" == "true" ]; then
            WORKFLOW_PATH="${{ needs.generate-professional-inputs.outputs.workflow_path_with_inputs }}"
          else
            WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          fi
          
          # YAML syntax validation
          python -c "import yaml; yaml.safe_load(open('$WORKFLOW_PATH'))"
          echo "✅ YAML syntax valid"
          
          # GitHub Actions structure validation
          if grep -q "^name:" "$WORKFLOW_PATH" && \
             grep -q "^on:" "$WORKFLOW_PATH" && \
             grep -q "^jobs:" "$WORKFLOW_PATH"; then
            echo "✅ GitHub Actions structure valid"
          else
            echo "❌ Invalid GitHub Actions structure"
            exit 1
          fi
          
      - name: Deploy Workflow
        run: |
          echo "🚀 Deploying workflow..."
          
          # Use workflow with inputs if available, otherwise use original
          if [ "${{ needs.generate-professional-inputs.outputs.inputs_generated }}" == "true" ]; then
            WORKFLOW_PATH="${{ needs.generate-professional-inputs.outputs.workflow_path_with_inputs }}"
          else
            WORKFLOW_PATH="${{ needs.generate-professional-workflow.outputs.workflow_path }}"
          fi
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          
          # Deploy to generated workflows directory
          DEPLOY_PATH=".github/workflows/generated/${WORKFLOW_NAME}.yml"
          mkdir -p .github/workflows/generated
          cp "$WORKFLOW_PATH" "$DEPLOY_PATH"
          
          # Commit and push
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add "$DEPLOY_PATH"
          git commit -m "🚀 Deploy professional workflow: $WORKFLOW_NAME
          
          Generated from Issue #${{ needs.validate-and-detect.outputs.issue_number }}
          Domain: ${{ needs.validate-and-detect.outputs.primary_domain }}
          
          This workflow includes professional domain expertise and constraints."
          
          git push
          
          echo "✅ Workflow deployed to: $DEPLOY_PATH"
          
      - name: Update Issue
        run: |
          ISSUE_NUMBER="${{ needs.validate-and-detect.outputs.issue_number }}"
          WORKFLOW_NAME="${{ needs.generate-professional-workflow.outputs.workflow_name }}"
          DOMAIN="${{ needs.validate-and-detect.outputs.primary_domain }}"
          
          gh issue comment $ISSUE_NUMBER --body "## ✅ Professional Workflow Generated!
          
          **Workflow Name**: \`$WORKFLOW_NAME\`
          **Domain**: $DOMAIN
          **Status**: Successfully deployed
          
          ### 📋 Summary:
          - Applied professional domain expertise
          - Incorporated domain-specific constraints
          - Optimized task dependencies
          - Validated and deployed
          
          ### 🚀 Next Steps:
          1. Review the generated workflow
          2. Trigger manually if needed
          3. Monitor execution results
          
          ---
          *Generated by Meta Workflow v11 with Domain Templates*"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}