name: Dynamic Question Generator
run-name: 🤖 Generating dynamic stepback questions for Issue #${{ github.event.issue.number }}

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: Issue検証と要求抽出
  validate-issue-format:
    runs-on: ubuntu-latest
    # ワークフロー要求Issueの場合のみ実行
    if: contains(github.event.issue.title, 'Workflow Request')
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      request_summary: ${{ steps.validate.outputs.request_summary }}
    
    steps:
      - name: Validate Issue Format
        id: validate
        run: |
          echo "🔍 Validating Issue format and extracting basic info..."
          
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Issue形式の基本検証
          if echo "$ISSUE_TITLE" | grep -q "Workflow Request"; then
            echo "✅ Valid workflow request Issue detected"
            
            # 基本的な要求サマリーを抽出（最初の200文字）
            SUMMARY=$(echo "$ISSUE_BODY" | head -5 | tr '\n' ' ' | cut -c1-200)
            echo "📝 Request summary: $SUMMARY"
            
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "request_summary=$SUMMARY" >> $GITHUB_OUTPUT
          else
            echo "❌ Not a workflow request Issue - skipping"
            echo "is_valid=false" >> $GITHUB_OUTPUT
          fi

  extract-user-request:
    needs: validate-issue-format
    runs-on: ubuntu-latest
    if: needs.validate-issue-format.outputs.is_valid == 'true'
    outputs:
      request_file: ${{ steps.extract.outputs.request_file }}
      workflow_type: ${{ steps.extract.outputs.workflow_type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract and Structure User Request
        id: extract
        run: |
          echo "📥 Extracting detailed user request from Issue..."
          
          mkdir -p .meta/dynamic-requests
          
          ISSUE_BODY="${{ github.event.issue.body }}"
          REQUEST_ID="req-$(date +%Y%m%d-%H%M%S)-${{ github.event.issue.number }}"
          REQUEST_FILE=".meta/dynamic-requests/${REQUEST_ID}.md"
          
          # ワークフロータイプの推測
          if echo "$ISSUE_BODY" | grep -qi "video\|動画"; then
            WORKFLOW_TYPE="video-generation"
          elif echo "$ISSUE_BODY" | grep -qi "image\|画像"; then
            WORKFLOW_TYPE="image-generation"
          elif echo "$ISSUE_BODY" | grep -qi "audio\|music\|音楽\|音声"; then
            WORKFLOW_TYPE="audio-generation"
          else
            WORKFLOW_TYPE="custom"
          fi
          
          # 構造化されたリクエストファイルを作成
          cat > "$REQUEST_FILE" << EOF
          # Dynamic Workflow Request
          
          **Issue Number:** #${{ github.event.issue.number }}
          **Workflow Type:** $WORKFLOW_TYPE
          **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## Original User Request
          
          $ISSUE_BODY
          
          ## Analysis Metadata
          - Request ID: $REQUEST_ID
          - Estimated complexity: TBD
          - Required clarifications: TBD
          EOF
          
          echo "✅ User request extracted and structured"
          echo "📁 Request file: $REQUEST_FILE"
          echo "🎯 Workflow type: $WORKFLOW_TYPE"
          
          echo "request_file=$REQUEST_FILE" >> $GITHUB_OUTPUT
          echo "workflow_type=$WORKFLOW_TYPE" >> $GITHUB_OUTPUT
          
      - name: Upload Request Data
        uses: actions/upload-artifact@v4
        with:
          name: request-data-${{ github.event.issue.number }}
          path: .meta/dynamic-requests/
          retention-days: 7

  generate-dynamic-questions:
    needs: [extract-user-request]
    runs-on: ubuntu-latest
    outputs:
      questions_generated: ${{ steps.generate.outputs.questions_generated }}
      questions_file: ${{ steps.generate.outputs.questions_file }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Request Data
        uses: actions/download-artifact@v4
        with:
          name: request-data-${{ github.event.issue.number }}
          path: .meta/dynamic-requests/
        
      - name: Generate Dynamic Stepback Questions
        id: generate
        run: |
          echo "🤖 Generating dynamic stepback questions..."
          
          mkdir -p .meta/dynamic-questions
          
          # REQUEST_FILEが相対パスで指定されているので、ファイルを再検索
          REQUEST_FILE="${{ needs.extract-user-request.outputs.request_file }}"
          if [ ! -f "$REQUEST_FILE" ]; then
            echo "🔍 Searching for request file in downloaded artifacts..."
            REQUEST_FILE=$(find .meta/dynamic-requests -name "*.md" | head -1)
            if [ -z "$REQUEST_FILE" ]; then
              echo "❌ No request file found in artifacts"
              exit 1
            fi
            echo "📁 Found request file: $REQUEST_FILE"
          fi
          
          WORKFLOW_TYPE="${{ needs.extract-user-request.outputs.workflow_type }}"
          
          # 統合テストのため、固定質問を生成（将来的にClaude Code統合予定）
          echo "🧠 Generating contextual questions for $WORKFLOW_TYPE workflow..."
          
          cat > .meta/dynamic-questions/generated-questions.md << 'EOF'
          ## 📋 ワークフロー詳細化のための質問
          
          より正確で最適化されたワークフローを生成するために、以下の質問にお答えください：
          
          **Q1: 出力品質・形式について**
          画像、動画、音楽の品質設定について教えてください。
          - 画像解像度: 1920x1080 / 1280x720 / カスタム
          - 動画品質: 高品質（時間重視せず） / バランス / 高速生成
          - 音楽品質: 高品質 / 標準 / 軽量
          **回答：**（ここに詳細をお書きください）
          
          **Q2: 処理フロー・統合方法について**
          各段階の出力をどのように連携させるかについて教えてください。
          - 画像→動画: 画像をベースに動画生成 / 独立して動画作成
          - 動画と音楽の統合: 自動統合 / 個別ファイル提供
          - 処理順序: 順次実行 / 並列処理可能
          **回答：**（ここに詳細をお書きください）
          
          **Q3: 技術仕様・制約について**
          実行時間やサービス選択の優先度を教えてください。
          - 実行時間: 品質重視（時間不問） / 60分以内 / 30分以内
          - MCPサービス: 特定サービス希望 / 推奨設定 / 高速重視
          - エラー処理: 厳密（停止） / 寛容（継続） / 自動リトライ
          **回答：**（ここに詳細をお書きください）
          
          **Q4: コンテンツ詳細について**
          生成するコンテンツの具体的なスタイルや特徴を教えてください。
          - 画像スタイル: リアル系 / アニメ系 / 抽象系
          - 動画の長さ: 短編(3-5秒) / 標準(8-10秒) / 長編(15秒+)
          - 音楽ジャンル: 指定あり / ムード重視 / おまかせ
          **回答：**（ここに詳細をお書きください）
          
          ---
          
          ### 📝 回答後の手順
          1. 上記の質問に回答を記入
          2. このIssueの本文を編集して回答を追加
          3. 回答完了後、「**start**」とコメントしてワークフロー生成を開始
          
          🤖 *Generated by Dynamic Stepback Question System v6*
          EOF
          
          echo "✅ Dynamic questions generated successfully"
          echo "questions_generated=true" >> $GITHUB_OUTPUT
          echo "questions_file=.meta/dynamic-questions/generated-questions.md" >> $GITHUB_OUTPUT
          
          # 生成された質問の確認
          QUESTION_COUNT=$(grep -c "^**Q[0-9]" .meta/dynamic-questions/generated-questions.md || echo "0")
          echo "📊 Generated $QUESTION_COUNT dynamic questions"
          
      - name: Upload Generation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dynamic-questions-${{ github.run_number }}
          path: .meta/dynamic-questions/
          retention-days: 30

  update-issue-body:
    needs: [generate-dynamic-questions]
    runs-on: ubuntu-latest
    if: needs.generate-dynamic-questions.outputs.questions_generated == 'true'
    outputs:
      update_success: ${{ steps.update.outputs.update_success }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Question Data
        uses: actions/download-artifact@v4
        with:
          name: dynamic-questions-${{ github.run_number }}
          path: .meta/dynamic-questions/
        
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        env:
          GITHUB_TOKEN: ${{ github.token }}
        
      - name: Update Issue with Dynamic Questions
        id: update
        run: |
          echo "📝 Updating Issue #${{ github.event.issue.number }} with generated questions..."
          
          QUESTIONS_FILE="${{ needs.generate-dynamic-questions.outputs.questions_file }}"
          
          if [ ! -f "$QUESTIONS_FILE" ]; then
            echo "❌ Questions file not found"
            exit 1
          fi
          
          # 現在のIssue本文を取得
          CURRENT_BODY=$(gh issue view ${{ github.event.issue.number }} --json body --jq '.body')
          
          # 動的質問を Issue 本文に追加
          cat > .meta/updated-issue-body.md << EOF
          $CURRENT_BODY
          
          ---
          
          EOF
          
          cat "$QUESTIONS_FILE" >> .meta/updated-issue-body.md
          
          # Issue本文を更新
          if gh issue edit ${{ github.event.issue.number }} --body-file .meta/updated-issue-body.md; then
            echo "✅ Issue updated with dynamic questions"
            echo "update_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to update Issue"
            echo "update_success=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

  add-response-labels:
    needs: [update-issue-body]
    runs-on: ubuntu-latest
    if: needs.update-issue-body.outputs.update_success == 'true'
    
    steps:
      - name: Add Awaiting Response Labels
        run: |
          echo "🏷️ Adding response labels to Issue #${{ github.event.issue.number }}..."
          
          # GitHub CLIのインストール
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          
          # 完了通知コメント
          gh issue comment ${{ github.event.issue.number }} \
            --body "🤖 **動的ステップバック質問を生成しました！**

          あなたのワークフロー要求を分析し、最適化のための詳細質問を上記に追加しました。

          **📝 次のステップ:**
          1. 上記の質問に詳細な回答を記入してください
          2. 回答完了後、「**start**」とコメントしてください
          3. 自動的にカスタマイズされたワークフローが生成されます

          🎯 **より詳細な回答をいただくほど、精密で最適化されたワークフローを生成できます。**

          ---
          🤖 *Dynamic Question Generator v6*" \
            2>/dev/null || echo "⚠️ Failed to post completion comment"
        env:
          GITHUB_TOKEN: ${{ github.token }}