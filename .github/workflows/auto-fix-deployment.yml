name: AI-Powered Intelligent Auto-Fix System
run-name: 🧠 AI analyzing and fixing "${{ github.event.workflow_run.name || 'Manual' }}"

on:
  workflow_run:
    workflows: 
      - "Meta Workflow Executor v8"
      # 他の重要なワークフローも追加可能
      # - "Video Content Creation Production"
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      target_run_id:
        description: 'Target workflow run ID to analyze'
        required: false
        type: string
      fix_mode:
        description: 'Fix mode'
        required: false
        type: choice
        options:
          - intelligent
          - conservative
          - aggressive
        default: intelligent

permissions:
  contents: write
  pull-requests: write
  actions: write
  issues: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}  # Claude Pro/Max用

jobs:
  # Phase 1: AI-Powered Failure Analysis
  ai-analyze-failure:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure'))
    outputs:
      has_failure: ${{ steps.ai_analyze.outputs.has_failure }}
      error_analysis: ${{ steps.ai_analyze.outputs.error_analysis }}
      root_cause: ${{ steps.ai_analyze.outputs.root_cause }}
      suggested_fixes: ${{ steps.ai_analyze.outputs.suggested_fixes }}
      confidence_level: ${{ steps.ai_analyze.outputs.confidence_level }}
      fix_complexity: ${{ steps.ai_analyze.outputs.fix_complexity }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup MCP Configuration
        run: |
          # MCPサーバー設定を動的生成
          mkdir -p .claude
          cat > .claude/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              },
              "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."]
              }
            }
          }
          EOF
          
      - name: Fetch Detailed Failure Logs
        id: fetch_logs
        run: |
          echo "📋 Fetching comprehensive failure data..."
          
          # Get target run information
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.target_run_id }}" ]; then
            TARGET_RUN_ID="${{ github.event.inputs.target_run_id }}"
          else
            TARGET_RUN_ID="${{ github.event.workflow_run.id }}"
          fi
          
          # Fetch complete logs
          mkdir -p generated/logs
          gh run view $TARGET_RUN_ID --log > generated/logs/full-log.txt 2>&1 || true
          gh run view $TARGET_RUN_ID --log-failed > generated/logs/failed-log.txt 2>&1 || true
          
          # Get workflow file content
          WORKFLOW_PATH="${{ github.event.workflow_run.path || '.github/workflows/meta-workflow-executor-v8.yml' }}"
          cp "$WORKFLOW_PATH" generated/logs/workflow-file.yml || true
          
          echo "target_run_id=$TARGET_RUN_ID" >> $GITHUB_OUTPUT
          
      - name: AI-Powered Deep Analysis
        id: ai_analyze
        run: |
          echo "🤖 Starting AI-powered failure analysis..."
          
          # Create comprehensive analysis prompt
          cat > generated/ai-analysis-prompt.md << 'EOF'
          # Workflow Failure Analysis Request

          ## Context
          - Repository: ${{ github.repository }}
          - Failed Workflow: ${{ github.event.workflow_run.name }}
          - Run ID: ${{ steps.fetch_logs.outputs.target_run_id }}
          
          ## Failed Job Logs
          ```
          $(cat generated/logs/failed-log.txt | tail -500)
          ```
          
          ## Workflow Configuration
          ```yaml
          $(cat generated/logs/workflow-file.yml)
          ```
          
          ## Analysis Tasks
          1. **Root Cause Analysis**: Identify the exact cause of failure
          2. **Error Classification**: Categorize the error type
          3. **Impact Assessment**: Determine the scope and severity
          4. **Fix Recommendations**: Provide specific, actionable fixes
          5. **Prevention Strategy**: Suggest long-term improvements
          
          ## Output Format
          Provide a JSON response with:
          - has_failure: boolean
          - error_analysis: detailed description
          - root_cause: specific cause
          - suggested_fixes: array of fix objects with {action, description, code_snippet}
          - confidence_level: 0-100
          - fix_complexity: low/medium/high
          - prevention_recommendations: array of strings
          EOF
          
          # Execute Claude Code SDK analysis with OAuth token
          ANALYSIS_RESULT=$(claude -p "$(cat generated/ai-analysis-prompt.md)" \
            --output-format json \
            --mcp-config .claude/mcp-config.json \
            --allowed-tools "View,mcp__github__*,mcp__filesystem__*" \
            --max-turns 5 \
            2>/dev/null || echo '{"has_failure": false, "error": "Analysis failed"}')
          
          # Parse and save results
          echo "$ANALYSIS_RESULT" > generated/ai-analysis-result.json
          
          # Extract key outputs
          HAS_FAILURE=$(echo "$ANALYSIS_RESULT" | jq -r '.has_failure // false')
          ERROR_ANALYSIS=$(echo "$ANALYSIS_RESULT" | jq -r '.error_analysis // "Unknown error"' | sed 's/"/\\"/g')
          ROOT_CAUSE=$(echo "$ANALYSIS_RESULT" | jq -r '.root_cause // "Unknown cause"' | sed 's/"/\\"/g')
          SUGGESTED_FIXES=$(echo "$ANALYSIS_RESULT" | jq -c '.suggested_fixes // []')
          CONFIDENCE=$(echo "$ANALYSIS_RESULT" | jq -r '.confidence_level // 0')
          COMPLEXITY=$(echo "$ANALYSIS_RESULT" | jq -r '.fix_complexity // "unknown"')
          
          # Set outputs
          echo "has_failure=$HAS_FAILURE" >> $GITHUB_OUTPUT
          echo "error_analysis=$ERROR_ANALYSIS" >> $GITHUB_OUTPUT
          echo "root_cause=$ROOT_CAUSE" >> $GITHUB_OUTPUT
          echo "suggested_fixes=$SUGGESTED_FIXES" >> $GITHUB_OUTPUT
          echo "confidence_level=$CONFIDENCE" >> $GITHUB_OUTPUT
          echo "fix_complexity=$COMPLEXITY" >> $GITHUB_OUTPUT
          
          echo "✅ AI analysis completed with confidence: $CONFIDENCE%"

  # Phase 2: AI-Driven Fix Implementation
  ai-apply-fix:
    needs: ai-analyze-failure
    runs-on: ubuntu-latest
    if: needs.ai-analyze-failure.outputs.has_failure == 'true' && needs.ai-analyze-failure.outputs.confidence_level > '70'
    outputs:
      fixes_applied: ${{ steps.apply_fixes.outputs.fixes_applied }}
      fix_success: ${{ steps.apply_fixes.outputs.fix_success }}
      pr_created: ${{ steps.create_pr.outputs.pr_created }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Restore Analysis Results
        run: |
          mkdir -p generated
          echo '${{ needs.ai-analyze-failure.outputs.suggested_fixes }}' > generated/suggested-fixes.json
          
      - name: Setup MCP Configuration
        run: |
          mkdir -p .claude
          cat > .claude/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."]
              }
            }
          }
          EOF
          
      - name: AI-Powered Fix Implementation
        id: apply_fixes
        run: |
          echo "🔧 Implementing AI-recommended fixes..."
          
          # Parse suggested fixes
          FIXES=$(cat generated/suggested-fixes.json)
          FIX_COUNT=$(echo "$FIXES" | jq 'length')
          
          echo "📝 Found $FIX_COUNT recommended fixes"
          
          FIXES_APPLIED=0
          FIX_SUCCESS=true
          
          # Process each fix
          for i in $(seq 0 $((FIX_COUNT - 1))); do
            FIX=$(echo "$FIXES" | jq -r ".[$i]")
            ACTION=$(echo "$FIX" | jq -r '.action // "unknown"')
            DESCRIPTION=$(echo "$FIX" | jq -r '.description // "No description"')
            CODE_SNIPPET=$(echo "$FIX" | jq -r '.code_snippet // ""')
            
            echo "🔧 Applying fix $((i+1))/$FIX_COUNT: $ACTION"
            echo "📝 Description: $DESCRIPTION"
            
            # Create fix implementation prompt
            cat > generated/fix-implementation-$i.md << EOF
          # Fix Implementation Request

          ## Fix Details
          - Action: $ACTION
          - Description: $DESCRIPTION
          
          ## Code Snippet
          \`\`\`
          $CODE_SNIPPET
          \`\`\`
          
          ## Instructions
          1. Apply this fix to the appropriate files
          2. Ensure the fix is syntactically correct
          3. Validate that the fix addresses the root cause
          4. Make any necessary adjustments for consistency
          
          Please implement this fix and provide:
          - Files modified
          - Specific changes made
          - Any warnings or considerations
          EOF
            
            # Execute fix with Claude Code SDK using OAuth token
            FIX_RESULT=$(claude -p "$(cat generated/fix-implementation-$i.md)" \
              --mcp-config .claude/mcp-config.json \
              --allowed-tools "Read,Write,View,mcp__filesystem__*" \
              --permission-mode acceptEdits \
              --max-turns 10 \
              --output-format json \
              2>&1 | tee generated/fix-result-$i.json || echo '{"success": false}')
            
            # Check if fix was successful
            if echo "$FIX_RESULT" | grep -q '"success".*true' || [ -f generated/fix-result-$i.json ]; then
              echo "✅ Fix $((i+1)) applied successfully"
              FIXES_APPLIED=$((FIXES_APPLIED + 1))
            else
              echo "❌ Fix $((i+1)) failed to apply"
              FIX_SUCCESS=false
            fi
          done
          
          echo "fixes_applied=$FIXES_APPLIED" >> $GITHUB_OUTPUT
          echo "fix_success=$FIX_SUCCESS" >> $GITHUB_OUTPUT
          
          echo "📊 Applied $FIXES_APPLIED out of $FIX_COUNT fixes"
          
      - name: Validate Fixed Code
        id: validate
        run: |
          echo "🔍 Validating applied fixes..."
          
          # YAML validation for workflow files
          for file in $(find .github/workflows -name "*.yml" -o -name "*.yaml"); do
            if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
              echo "✅ $file: Valid YAML"
            else
              echo "❌ $file: Invalid YAML"
              exit 1
            fi
          done
          
          # Run any existing tests
          if [ -f "package.json" ] && grep -q "test" package.json; then
            npm test || echo "⚠️ Some tests failed"
          fi
          
          echo "✅ Validation completed"
          
      - name: Create Fix PR
        id: create_pr
        if: steps.apply_fixes.outputs.fixes_applied > '0'
        run: |
          # Configure git
          git config user.name "ai-autofix[bot]"
          git config user.email "ai-autofix[bot]@users.noreply.github.com"
          
          # Create branch
          BRANCH_NAME="autofix/ai-fix-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Stage changes
          git add -A
          
          if ! git diff --cached --quiet; then
            # Commit with detailed message
            git commit -m "🤖 AI-Powered Auto-Fix: ${{ needs.ai-analyze-failure.outputs.root_cause }}

          Root Cause Analysis:
          ${{ needs.ai-analyze-failure.outputs.error_analysis }}
          
          Fixes Applied: ${{ steps.apply_fixes.outputs.fixes_applied }}
          Confidence Level: ${{ needs.ai-analyze-failure.outputs.confidence_level }}%
          Fix Complexity: ${{ needs.ai-analyze-failure.outputs.fix_complexity }}
          
          This fix was automatically generated and applied by Claude Code SDK.
          Please review the changes before merging.
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR
            PR_BODY=$(cat << EOF
          ## 🤖 AI-Powered Auto-Fix
          
          ### Problem Summary
          **Root Cause**: ${{ needs.ai-analyze-failure.outputs.root_cause }}
          
          ### Analysis
          ${{ needs.ai-analyze-failure.outputs.error_analysis }}
          
          ### Fixes Applied
          - Number of fixes: ${{ steps.apply_fixes.outputs.fixes_applied }}
          - Confidence Level: ${{ needs.ai-analyze-failure.outputs.confidence_level }}%
          - Complexity: ${{ needs.ai-analyze-failure.outputs.fix_complexity }}
          
          ### Changes Made
          Please review the file changes tab for specific modifications.
          
          ### Validation
          - [x] YAML syntax validated
          - [x] AI confidence > 70%
          - [ ] Human review required
          
          ---
          *Generated with Claude Code SDK*
          EOF
          )
            
            gh pr create \
              --title "🤖 AI Auto-Fix: ${{ needs.ai-analyze-failure.outputs.root_cause }}" \
              --body "$PR_BODY" \
              --label "auto-fix,ai-generated" \
              --reviewer "${{ github.repository_owner }}"
            
            echo "pr_created=true" >> $GITHUB_OUTPUT
            echo "✅ PR created successfully"
          else
            echo "ℹ️ No changes to commit"
            echo "pr_created=false" >> $GITHUB_OUTPUT
          fi

  # Phase 3: AI Learning and Improvement
  ai-learn-and-improve:
    needs: [ai-analyze-failure, ai-apply-fix]
    runs-on: ubuntu-latest
    if: always() && needs.ai-analyze-failure.outputs.has_failure == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Learning Environment
        run: |
          mkdir -p .claude
          cat > .claude/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."]
              }
            }
          }
          EOF
          
      - name: AI Learning and Pattern Recognition
        run: |
          echo "📚 AI Learning from this incident..."
          
          # Create learning prompt
          cat > generated/learning-prompt.md << 'EOF'
          # Learning and Improvement Analysis
          
          ## Incident Summary
          - Root Cause: ${{ needs.ai-analyze-failure.outputs.root_cause }}
          - Error Analysis: ${{ needs.ai-analyze-failure.outputs.error_analysis }}
          - Fixes Applied: ${{ needs.ai-apply-fix.outputs.fixes_applied || '0' }}
          - Fix Success: ${{ needs.ai-apply-fix.outputs.fix_success || 'N/A' }}
          
          ## Learning Tasks
          1. Identify patterns that could prevent similar failures
          2. Suggest workflow improvements
          3. Recommend monitoring additions
          4. Propose documentation updates
          5. Create reusable fix templates
          
          ## Output Format
          Provide actionable recommendations for:
          - Workflow hardening
          - Error prevention patterns
          - Monitoring improvements
          - Documentation needs
          - Automation opportunities
          EOF
          
          # Execute learning analysis with OAuth token
          LEARNING_RESULT=$(claude -p "$(cat generated/learning-prompt.md)" \
            --output-format json \
            --mcp-config .claude/mcp-config.json \
            --allowed-tools "View,Read,mcp__filesystem__*" \
            --max-turns 3)
          
          echo "$LEARNING_RESULT" > generated/learning-insights.json
          
          # Create or update knowledge base
          mkdir -p meta/ai-learning
          
          # Save learning data with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          cat > "meta/ai-learning/incident-$TIMESTAMP.json" << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "incident": {
              "root_cause": "${{ needs.ai-analyze-failure.outputs.root_cause }}",
              "confidence": ${{ needs.ai-analyze-failure.outputs.confidence_level }},
              "complexity": "${{ needs.ai-analyze-failure.outputs.fix_complexity }}"
            },
            "resolution": {
              "fixes_applied": ${{ needs.ai-apply-fix.outputs.fixes_applied || 0 }},
              "success": ${{ needs.ai-apply-fix.outputs.fix_success || false }},
              "pr_created": ${{ needs.ai-apply-fix.outputs.pr_created || false }}
            },
            "learning": $LEARNING_RESULT
          }
          EOF
          
          # Update pattern library
          if [ -f "meta/ai-learning/patterns.json" ]; then
            # Merge with existing patterns
            jq -s '.[0] + {patterns: (.[0].patterns + [.[1]])}' \
              meta/ai-learning/patterns.json \
              "meta/ai-learning/incident-$TIMESTAMP.json" \
              > meta/ai-learning/patterns.tmp.json
            mv meta/ai-learning/patterns.tmp.json meta/ai-learning/patterns.json
          else
            # Create new pattern library
            echo '{"patterns": []}' > meta/ai-learning/patterns.json
          fi
          
          echo "✅ AI learning completed and knowledge base updated"
          
      - name: Generate Improvement Report
        run: |
          # Create comprehensive improvement report
          cat > generated/improvement-report.md << 'EOF'
          # AI Auto-Fix System Report
          
          ## Incident Analysis
          - **Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **Repository**: ${{ github.repository }}
          - **Workflow**: ${{ github.event.workflow_run.name }}
          
          ## AI Performance Metrics
          - **Analysis Confidence**: ${{ needs.ai-analyze-failure.outputs.confidence_level }}%
          - **Fix Complexity**: ${{ needs.ai-analyze-failure.outputs.fix_complexity }}
          - **Fixes Applied**: ${{ needs.ai-apply-fix.outputs.fixes_applied || '0' }}
          - **Success Rate**: ${{ needs.ai-apply-fix.outputs.fix_success && '100%' || 'Partial' }}
          
          ## Root Cause
          ${{ needs.ai-analyze-failure.outputs.root_cause }}
          
          ## Resolution Summary
          ${{ needs.ai-analyze-failure.outputs.error_analysis }}
          
          ## Learning Insights
          $(cat generated/learning-insights.json | jq -r '.recommendations[]' 2>/dev/null || echo "See detailed analysis")
          
          ## Next Steps
          1. Review and merge auto-fix PR if created
          2. Implement suggested workflow improvements
          3. Update documentation based on learnings
          4. Monitor for similar issues
          
          ---
          *Generated by AI-Powered Auto-Fix System using Claude Code SDK*
          EOF
          
          # Commit learning data
          git config user.name "ai-learning[bot]"
          git config user.email "ai-learning[bot]@users.noreply.github.com"
          
          git add meta/ai-learning/ generated/improvement-report.md
          
          if ! git diff --cached --quiet; then
            git commit -m "📚 AI Learning: Updated knowledge base from incident

          Incident: ${{ needs.ai-analyze-failure.outputs.root_cause }}
          Confidence: ${{ needs.ai-analyze-failure.outputs.confidence_level }}%
          Learning: Pattern recognition and prevention strategies updated"
            
            git push origin main || echo "Push to protected branch failed - manual merge required"
          fi
          
          echo "✅ Improvement report generated and knowledge base updated"