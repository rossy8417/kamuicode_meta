name: "Video Content Creation Production V4"
run-name: "🎥 Production V4: ${{ github.event.inputs.video_concept }}"

on:
  workflow_dispatch:
    inputs:
      video_concept:
        description: '動画コンセプト・テーマ'
        required: true
        default: 'AIとロボットが協力する未来の製品紹介動画'
        type: string
      target_audience:
        description: 'ターゲット視聴者'
        required: true
        default: 'professional'
        type: choice
        options:
        - general
        - business
        - young_adult
        - professional
        - creative
      video_length:
        description: '動画尺 (秒)'
        required: true
        default: '30'
        type: choice
        options:
        - '15'
        - '30'
        - '60'
      video_style:
        description: '動画スタイル'
        required: true
        default: 'cinematic'
        type: choice
        options:
        - cinematic
        - commercial
        - documentary
        - educational
        - artistic
      quality_setting:
        description: '画質設定'
        required: true
        default: 'high'
        type: choice
        options:
        - ultra
        - high
        - standard

permissions:
  contents: write
  actions: read

jobs:
  # Phase 1: 初期設定
  setup:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Verify MCP config exists
        id: check
        run: |
          echo "🔍 Checking MCP configuration..."
          if [ -f ".claude/mcp-kamuicode.json" ]; then
            echo "✅ MCP config found"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ MCP config not found"
            exit 1
          fi
          
      - name: Setup directories
        run: |
          mkdir -p generated/{concept,images,audio,video,final}
          
  # Phase 2: コンセプト作成 (Claude Code SDK Node)
  concept-planning:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.ready == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code@latest
          
      - name: Create concept with Claude Code SDK
        run: |
          mkdir -p generated/concept
          
          # Generate concept plan with Claude Code SDK and save to file
          claude -p "Create a detailed video concept plan for: '${{ github.event.inputs.video_concept }}'
          Target audience: ${{ github.event.inputs.target_audience }}
          Duration: ${{ github.event.inputs.video_length }} seconds
          Style: ${{ github.event.inputs.video_style }}
          
          Return ONLY a valid JSON object with the following structure:
          {
            \"title\": \"video title\",
            \"target_audience\": \"${{ github.event.inputs.target_audience }}\",
            \"duration\": ${{ github.event.inputs.video_length }},
            \"style\": \"${{ github.event.inputs.video_style }}\",
            \"total_scenes\": number_of_scenes,
            \"scenes\": [array of scene objects with descriptions],
            \"prompts\": {scene-specific prompts for image generation},
            \"timing\": {scene timing information},
            \"dialogue\": [array of dialogue/narration for each scene],
            \"audio_cues\": {background music and sound effects timing}
          }
          
          IMPORTANT: 
          - Generate 3-5 scenes based on ${{ github.event.inputs.video_length }} second duration
          - Include specific dialogue or narration text for each scene
          - Output ONLY valid JSON, no additional text or explanations" \
          --output-format json > claude_output.json
          
          # Extract the JSON from Claude Code SDK output and save to plan.json
          echo "🔍 Extracting JSON from Claude Code output..."
          if jq -e '.result' claude_output.json > /dev/null 2>&1; then
            # Extract from SDK metadata format
            jq -r '.result' claude_output.json | sed -n '/```json/,/```/p' | sed '1d;$d' > generated/concept/plan.json
          else
            # Assume direct JSON format (fallback)
            cat claude_output.json > generated/concept/plan.json
          fi
          
          # Validate extracted JSON
          if ! jq '.' generated/concept/plan.json > /dev/null 2>&1; then
            echo "❌ Failed to extract valid JSON, attempting alternative extraction..."
            # Alternative: extract JSON block from text content
            grep -A 1000 '```json' claude_output.json | grep -B 1000 '```' | head -n -1 | tail -n +2 > generated/concept/plan.json
          fi
          
          # Verify generated plan
          echo "📋 Generated concept plan:"
          cat generated/concept/plan.json | jq '.'
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
      - name: Upload concept
        uses: actions/upload-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
  # Phase 3: 音楽・音声生成 (先に実行)
  audio-generation:
    needs: concept-planning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Read MCP permissions from settings
        id: mcp_permissions
        run: |
          echo "📖 Reading MCP permissions..."
          # Extract MCP-only settings for GitHub Actions
          FULL_SETTINGS=$(cat .claude/settings.github-actions.json | jq -c .)
          echo "FULL_SETTINGS=$FULL_SETTINGS" >> $GITHUB_OUTPUT
          
      - name: Generate audio assets
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            1. Read concept from generated/concept/plan.json including dialogue/narration
            2. For each scene with dialogue:
               a. Generate narration/dialogue using t2s-fal-minimax-speech-02-turbo
               b. Use appropriate voice style for the content
               c. Save each audio file as scene_X_dialogue.wav
            3. Generate background music using t2m-google-lyria:
               - Style: ${{ github.event.inputs.video_style }}
               - Duration: ${{ github.event.inputs.video_length }} seconds
               - Save as background_music.wav
            4. Save all audio metadata to generated/audio/audio_assets.json with:
               - dialogue files and their scene mappings
               - background music file
               - timing information for each audio element
          system_prompt: |
            You are Claude Code in CI/CD with pre-configured MCP permissions.
            Generate both dialogue/narration and background music as specified.
          mcp_config: ".claude/mcp-kamuicode.json"
          settings: ${{ steps.mcp_permissions.outputs.FULL_SETTINGS }}
          allowed_tools: "View,mcp__t2m-google-lyria__*,mcp__t2s-fal-minimax-speech-02-turbo__*,Bash,Write,Read"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "30"
          
      - name: Upload audio
        uses: actions/upload-artifact@v4
        with:
          name: audio-${{ github.run_number }}
          path: |
            generated/audio/
            *.mp3
            *.wav
            
  # Phase 4: シーン数解析
  video-generation-prep:
    needs: concept-planning
    runs-on: ubuntu-latest
    outputs:
      scene_count: ${{ steps.count.outputs.scene_count }}
      scene_matrix: ${{ steps.count.outputs.scene_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Count scenes and create matrix
        id: count
        run: |
          echo "🔍 Analyzing scene count..."
          SCENE_COUNT=$(jq '.scenes | length' generated/concept/plan.json)
          echo "Found $SCENE_COUNT scenes"
          echo "scene_count=$SCENE_COUNT" >> $GITHUB_OUTPUT
          
          # Create matrix for sequential processing
          MATRIX_JSON=$(jq -c '[range(0; .scenes | length) | {scene: (. + 1)}]' generated/concept/plan.json)
          echo "scene_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix JSON: $MATRIX_JSON"
          
  # Phase 5: 逐次画像→動画生成 (V4新方式)
  scene-processing:
    needs: [concept-planning, audio-generation, video-generation-prep]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        scene: ${{ fromJson(needs.video-generation-prep.outputs.scene_matrix) }}
      max-parallel: 1  # 逐次処理でURL期限切れ防止
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Read MCP permissions from settings
        id: mcp_permissions
        run: |
          echo "📖 Reading MCP permissions..."
          FULL_SETTINGS=$(cat .claude/settings.github-actions.json | jq -c .)
          echo "FULL_SETTINGS=$FULL_SETTINGS" >> $GITHUB_OUTPUT
          
      - name: Generate image for scene ${{ matrix.scene.scene }}
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            TASK: Generate ONLY scene ${{ matrix.scene.scene }} image
            
            1. Read generated/concept/plan.json
            2. Find scene ${{ matrix.scene.scene }} prompt and description
            3. Generate ONLY this scene's image using t2i-google-imagen3:
               - Use the specific prompt for scene ${{ matrix.scene.scene }}
               - Quality: ${{ github.event.inputs.quality_setting }}
               - Aspect ratio: 1:1 (default)
            4. Save scene info to scene_${{ matrix.scene.scene }}_image_info.json with:
               - scene_number: ${{ matrix.scene.scene }}
               - image_url: (the direct URL from Imagen3 - CRITICAL for immediate use)
               - prompt_used: (the actual prompt used)
               - generation_time: (timestamp)
               - description: (scene description)
            5. DO NOT download the image - keep the URL fresh for immediate video generation
            
            IMPORTANT: Save the image_url immediately for next step usage!
          system_prompt: |
            You are Claude Code in CI/CD. Generate only scene ${{ matrix.scene.scene }} image.
            Keep the image_url fresh by NOT downloading - it will be used immediately for video generation.
          mcp_config: ".claude/mcp-kamuicode.json"
          settings: ${{ steps.mcp_permissions.outputs.FULL_SETTINGS }}
          allowed_tools: "Read,Write,mcp__t2i-google-imagen3__*"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "15"
          
      - name: Generate video for scene ${{ matrix.scene.scene }} (immediate)
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            TASK: Generate video for scene ${{ matrix.scene.scene }} using FRESH image URL
            
            1. Read scene_${{ matrix.scene.scene }}_image_info.json (just created)
            2. Extract the fresh image_url (no expiration yet)
            3. Use image_url DIRECTLY with i2v-fal-hailuo-02-pro:
               - Submit image_url (NOT base64, NOT local file)
               - Duration: appropriate for this scene from concept plan
               - Quality settings as needed
            4. Poll hailuo_02_result until COMPLETED status
            5. Download video to scene_${{ matrix.scene.scene }}_video.mp4
            6. Create scene_${{ matrix.scene.scene }}_video_info.json with metadata
            
            CRITICAL SUCCESS FACTORS:
            - Use image_url directly (proven working method from V1)
            - NO base64 conversion needed
            - Image was just generated so URL is fresh
            - This follows the successful pattern from previous working workflows
          system_prompt: |
            You are Claude Code in CI/CD. Generate video for scene ${{ matrix.scene.scene }} using
            the fresh image URL from the previous step. Use the proven direct URL method.
          mcp_config: ".claude/mcp-kamuicode.json"
          settings: ${{ steps.mcp_permissions.outputs.FULL_SETTINGS }}
          allowed_tools: "Read,Write,Bash,mcp__i2v-fal-hailuo-02-pro__*"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "25"
          timeout_minutes: 15
          
      - name: Upload scene assets
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene.scene }}-${{ github.run_number }}
          path: |
            scene_${{ matrix.scene.scene }}_*.mp4
            scene_${{ matrix.scene.scene }}_*.json
            
  # Phase 6: 動画・音声結合 (Claude Code SDK Node)
  video-assembly:
    needs: scene-processing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all assets
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_number }}"
          merge-multiple: true
          
      - name: Install FFmpeg and Claude Code CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          npm install -g @anthropic-ai/claude-code@latest
          ffmpeg -version
          
      - name: Analyze and prepare video files
        run: |
          echo "🎥 Analyzing available video files..."
          mkdir -p videos generated/assembly
          
          # Find all scene video files
          find . -name "scene_*_video.mp4" -type f
          for file in scene_*_video.mp4; do
            if [ -f "$file" ]; then
              echo "Found: $file"
              mv "$file" videos/
            fi
          done
          
          ls -la videos/
          
      - name: Assemble final video with Claude Code SDK
        run: |
          # Generate FFmpeg assembly script with Claude Code SDK
          claude -p "You are an expert video editor working with FFmpeg. 
          
          TASK: Create a comprehensive FFmpeg bash script to assemble a final video from multiple scene videos.
          
          CURRENT SITUATION:
          - Scene video files are in the videos/ directory (scene_1_video.mp4, scene_2_video.mp4, etc.)
          - Background music file may be available as background_music.wav
          - Audio dialogue files may be available as scene_*_dialogue.wav
          
          OUTPUT REQUIREMENTS:
          Return ONLY a complete bash script that:
          1. Lists all available scene videos in proper order (scene_1, scene_2, etc.)
          2. Creates an FFmpeg concat file for video concatenation
          3. Concatenates all scene videos into one video
          4. Mixes background music and dialogue audio if available
          5. Applies final video optimization (H.264, AAC audio, web-optimized)
          6. Outputs final_video.mp4
          7. Handles missing files gracefully
          8. Includes error checking and logging
          
          IMPORTANT: Output ONLY the bash script content, no explanations or markdown formatting." \
          --output-format text > assemble_video.sh
          
          # Make the script executable and run it
          chmod +x assemble_video.sh
          echo "🎬 Generated FFmpeg assembly script:"
          cat assemble_video.sh
          echo ""
          echo "🎥 Executing video assembly..."
          ./assemble_video.sh
          
          echo "✅ Video assembly complete!"
          if [ -f "final_video.mp4" ]; then
            ls -lh final_video.mp4
          else
            echo "❌ final_video.mp4 not found"
            ls -la
          fi
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
      - name: Upload final video
        uses: actions/upload-artifact@v4
        with:
          name: final-video-${{ github.run_number }}
          path: |
            final_video.mp4
            generated/assembly/
            
  # Phase 7: 最終パッケージ
  final-package:
    needs: video-assembly
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_number }}"
          merge-multiple: true
          
      - name: Create final package
        run: |
          echo "📦 Creating final package..."
          
          # ディレクトリ作成
          mkdir -p generated/final
          
          # 最終動画をコピー
          if [ -f "final_video.mp4" ]; then
            cp final_video.mp4 generated/final/
            echo "✅ Final video included in package"
          fi
          
          # パッケージ情報
          cat > generated/final/package.json << EOF
          {
            "project": "Video Content Creation V4",
            "concept": "${{ github.event.inputs.video_concept }}",
            "duration": ${{ github.event.inputs.video_length }},
            "style": "${{ github.event.inputs.video_style }}",
            "audience": "${{ github.event.inputs.target_audience }}",
            "quality": "${{ github.event.inputs.quality_setting }}",
            "features": {
              "sequential_generation": true,
              "fresh_url_usage": true,
              "multiple_scenes": true,
              "dialogue_narration": true,
              "background_music": true,
              "ffmpeg_assembly": true
            },
            "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run": ${{ github.run_number }}
          }
          EOF
          
          # ファイルサイズ情報
          echo "📁 Final package contents:"
          ls -lh generated/final/
          if [ -f "generated/final/final_video.mp4" ]; then
            echo ""
            echo "🎥 Final video size: $(ls -lh generated/final/final_video.mp4 | awk '{print $5}')"
          fi
          
      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: final-package-v4-${{ github.run_number }}
          path: |
            generated/final/
          retention-days: 90
          
      - name: Upload production video
        uses: actions/upload-artifact@v4
        with:
          name: production-video-v4-${{ github.run_number }}
          path: |
            final_video.mp4
          retention-days: 90
          if-no-files-found: warn
          
      - name: Summary
        run: |
          echo "## 🎉 Video Content Creation V4 Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎥 Production Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Concept**: ${{ github.event.inputs.video_concept }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ github.event.inputs.video_length }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Style**: ${{ github.event.inputs.video_style }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ github.event.inputs.quality_setting }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deliverables" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: production-video-v4-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Package**: final-package-v4-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ V4 New Features" >> $GITHUB_STEP_SUMMARY
          echo "- **Sequential Processing**: Image→Video per scene for fresh URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Expiration Solution**: Generate and use images immediately" >> $GITHUB_STEP_SUMMARY
          echo "- **No Base64 Conversion**: Direct URL usage (proven method)" >> $GITHUB_STEP_SUMMARY
          echo "- **Improved Reliability**: Based on successful V1 pattern" >> $GITHUB_STEP_SUMMARY