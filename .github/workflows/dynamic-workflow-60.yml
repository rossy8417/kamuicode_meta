name: "🎯 Dynamic Workflow - Issue #60 (Fixed)"
run-name: "📊 Dynamic Fixed | rossy8417 | Issue #60"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Source issue number"
        required: true
        default: "60"
      branch_name:
        description: "Working branch name"
        required: false
        default: "issue-60"
      topic:
        description: "Topic for video generation"
        required: true
        default: "京都の食べ物トレンド"

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  setup:
    name: "🚀 Setup"
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      timestamp: ${{ steps.setup.outputs.timestamp }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Project Structure
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/issue-60-$TIMESTAMP"
          mkdir -p "$PROJECT_DIR"/{logs,metadata,temp,final,media}
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "✅ Project structure created: $PROJECT_DIR"

  research_1:
    name: "🔍 Research: web-search"
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      completed: ${{ steps.execute.outputs.completed }}
      summary_path: ${{ steps.execute.outputs.summary_path }}
      sources_path: ${{ steps.execute.outputs.sources_path }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Create output directory
        run: mkdir -p ${{ needs.setup.outputs.project_dir }}/metadata
      
      - name: Execute Web Search
        id: execute
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          PROMPT="以下のクエリでWeb検索を実行してください：
          
          **検索クエリ**: ${{ inputs.topic }} 最新トレンド 2025年
          **最大結果数**: 10
          **言語**: japanese
          
          タスク：
          1. WebSearchツールを使用して最新の情報を検索
          2. 主要なポイントを要約して提供してください。
          3. 検索結果を以下のファイルに保存：
             - ${{ needs.setup.outputs.project_dir }}/metadata/search-summary.md（検索結果のまとめ）
             - ${{ needs.setup.outputs.project_dir }}/metadata/sources.txt（参照したURLのリスト）
             - ${{ needs.setup.outputs.project_dir }}/metadata/search-metadata.json（検索メタデータ：クエリ、実行日時、結果数など）
          
          注意事項：
          - 信頼できるソースを優先してください
          - 最新の情報を重視してください
          - 検索言語に応じて適切な結果を選択してください
          - 実際の検索結果であることを明確にするため、検索日時とソースURLを必ず記載してください"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            -p "$PROMPT" \
            --allowedTools "WebSearch,Write" \
            --permission-mode "acceptEdits"
          
          # 出力の確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/search-summary.md" ]; then
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "summary_path=${{ needs.setup.outputs.project_dir }}/metadata/search-summary.md" >> $GITHUB_OUTPUT
            echo "sources_path=${{ needs.setup.outputs.project_dir }}/metadata/sources.txt" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            echo "❌ Web search failed - no summary file found"
            exit 1
          fi

  planning_1:
    name: "📋 Planning: content-planning"
    runs-on: ubuntu-latest
    needs: [setup, research_1]
    outputs:
      completed: ${{ steps.execute.outputs.completed }}
      video_plan_path: ${{ steps.execute.outputs.video_plan_path }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Create output directory
        run: mkdir -p ${{ needs.setup.outputs.project_dir }}/metadata
      
      - name: Execute Planning Agent
        id: execute
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # プロンプトの構築
          PROMPT="あなたは動画制作の専門プランナーです。Web検索結果を基に、動画を生成するための詳細な計画を立ててください。

          **検索結果**: ${{ needs.setup.outputs.project_dir }}/metadata/search-summary.md を参照
          **テーマ**: ${{ inputs.topic }}の最新トレンド紹介動画
          **生成する動画数**: 1

          **タスク**:
          1. 検索結果を読み込んで分析
          2. ${{ inputs.topic }}の最新トレンドを紹介する動画コンセプトを企画
          3. 動画用の高品質な画像生成プロンプトを作成（英語）
          4. ナレーション原稿を作成（日本語、30秒程度）
          5. 計画書を「${{ needs.setup.outputs.project_dir }}/metadata/video-plan.md」に保存
          6. 以下のファイルを作成：
             - ${{ needs.setup.outputs.project_dir }}/metadata/image-prompt-1.txt（画像生成プロンプト、英語、1行）
             - ${{ needs.setup.outputs.project_dir }}/metadata/video-concept-1.txt（動画コンセプト）
             - ${{ needs.setup.outputs.project_dir }}/metadata/narration-script-1.txt（ナレーション原稿）

          **重要**: 
          - 検索結果の最新トレンドを必ず反映させる
          - 画像生成プロンプトは英語で作成
          - ナレーションは自然で親しみやすい日本語で
          - txtファイルは機械処理用（適切な改行で）"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            -p "$PROMPT" \
            --allowedTools "Read,Write,Edit" \
            --permission-mode "acceptEdits"
          
          # 出力の確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/video-plan.md" ]; then
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "video_plan_path=${{ needs.setup.outputs.project_dir }}/metadata/video-plan.md" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  image_generation:
    name: "🎨 image-generation"
    runs-on: ubuntu-latest
    needs: planning_1
    outputs:
      completed: ${{ steps.generate.outputs.completed }}
      image_path: ${{ steps.generate.outputs.image_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Generate Image
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # プロンプトファイルを読み込む
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/image-prompt-1.txt" ]; then
            IMAGE_PROMPT=$(cat "${{ needs.setup.outputs.project_dir }}/metadata/image-prompt-1.txt")
          else
            IMAGE_PROMPT="${{ inputs.topic }} trending food items, photorealistic, high quality"
          fi
          
          # Claude Code CLIでMCP経由で画像生成
          npx @anthropic-ai/claude-code \
            -p "MCP tool 'mcp__t2i-google-imagen3__imagen_t2i' を使用して以下のプロンプトで画像を生成してください:
            
            プロンプト: \"$IMAGE_PROMPT\"
            
            設定:
            - aspect_ratio: 16:9
            - num_images: 1
            - output_directory: ${{ needs.setup.outputs.project_dir }}/media
            
            生成された画像のパスを ${{ needs.setup.outputs.project_dir }}/media/generated-image-path.txt に保存してください。" \
            --allowedTools "mcp__t2i-google-imagen3__imagen_t2i,Write" \
            --permission-mode "acceptEdits"
          
          # 生成確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/media/generated-image-path.txt" ]; then
            IMAGE_PATH=$(cat "${{ needs.setup.outputs.project_dir }}/media/generated-image-path.txt")
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "image_path=$IMAGE_PATH" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  text_to_speech:
    name: "🎤 text-to-speech"
    runs-on: ubuntu-latest
    needs: planning_1
    outputs:
      completed: ${{ steps.generate.outputs.completed }}
      audio_path: ${{ steps.generate.outputs.audio_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Generate Speech
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # ナレーション原稿を読み込む
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/narration-script-1.txt" ]; then
            NARRATION_TEXT=$(cat "${{ needs.setup.outputs.project_dir }}/metadata/narration-script-1.txt")
          else
            NARRATION_TEXT="${{ inputs.topic }}の最新トレンドをご紹介します。"
          fi
          
          # Claude Code CLIでMCP経由で音声生成
          npx @anthropic-ai/claude-code \
            -p "MCP tool 'mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submit' を使用して以下のテキストを音声に変換してください:
            
            テキスト: \"$NARRATION_TEXT\"
            
            設定:
            - voice_id: Friendly_Person
            - language_boost: Japanese
            - speed: 1.0
            - emotion: happy
            
            1. submitでリクエストIDを取得
            2. statusで完了を確認（最大10回、10秒間隔）
            3. resultで音声をダウンロード（output_directory: ${{ needs.setup.outputs.project_dir }}/media）
            4. ダウンロードされた音声ファイルのパスを ${{ needs.setup.outputs.project_dir }}/media/generated-audio-path.txt に保存" \
            --allowedTools "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submit,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_status,mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_result,Write" \
            --permission-mode "acceptEdits"
          
          # 生成確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/media/generated-audio-path.txt" ]; then
            AUDIO_PATH=$(cat "${{ needs.setup.outputs.project_dir }}/media/generated-audio-path.txt")
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "audio_path=$AUDIO_PATH" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  video_generation:
    name: "🎬 video-generation"
    runs-on: ubuntu-latest
    needs: [planning_1, image_generation]
    outputs:
      completed: ${{ steps.generate.outputs.completed }}
      video_path: ${{ steps.generate.outputs.video_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Generate Video
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # ビデオコンセプトを読み込む
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/video-concept-1.txt" ]; then
            VIDEO_CONCEPT=$(cat "${{ needs.setup.outputs.project_dir }}/metadata/video-concept-1.txt")
          else
            VIDEO_CONCEPT="${{ inputs.topic }} trending showcase with dynamic camera movements"
          fi
          
          # Claude Code CLIでMCP経由で動画生成
          npx @anthropic-ai/claude-code \
            -p "MCP tool 'mcp__t2v-fal-veo3-fast__veo3_fast_submit' を使用して以下のプロンプトで動画を生成してください:
            
            プロンプト: \"$VIDEO_CONCEPT\"
            
            設定:
            - aspect_ratio: 16:9
            - duration: 8s
            - enhance_prompt: true
            - generate_audio: false
            
            1. submitでリクエストIDを取得
            2. statusで完了を確認（最大20回、15秒間隔）
            3. resultで動画をダウンロード（output_directory: ${{ needs.setup.outputs.project_dir }}/media）
            4. ダウンロードされた動画ファイルのパスを ${{ needs.setup.outputs.project_dir }}/media/generated-video-path.txt に保存" \
            --allowedTools "mcp__t2v-fal-veo3-fast__veo3_fast_submit,mcp__t2v-fal-veo3-fast__veo3_fast_status,mcp__t2v-fal-veo3-fast__veo3_fast_result,Write" \
            --permission-mode "acceptEdits"
          
          # 生成確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/media/generated-video-path.txt" ]; then
            VIDEO_PATH=$(cat "${{ needs.setup.outputs.project_dir }}/media/generated-video-path.txt")
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  post_production:
    name: "🎞️ Post Production"
    runs-on: ubuntu-latest
    needs: [setup, text_to_speech, video_generation]
    outputs:
      completed: ${{ steps.lipsync.outputs.completed }}
      final_video_path: ${{ steps.lipsync.outputs.final_video_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Apply Lipsync
        id: lipsync
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
        run: |
          # パスを読み込む
          VIDEO_PATH="${{ needs.video_generation.outputs.video_path }}"
          AUDIO_PATH="${{ needs.text_to_speech.outputs.audio_path }}"
          
          # Claude Code CLIでMCP経由でリップシンク
          npx @anthropic-ai/claude-code \
            -p "MCP tool 'mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_submit' を使用してリップシンクを適用してください:
            
            設定:
            - video_url: file://$VIDEO_PATH
            - audio_url: file://$AUDIO_PATH
            
            1. submitでリクエストIDを取得
            2. statusで完了を確認（最大30回、20秒間隔）
            3. resultで最終動画をダウンロード（output_directory: ${{ needs.setup.outputs.project_dir }}/final）
            4. ダウンロードされた最終動画ファイルのパスを ${{ needs.setup.outputs.project_dir }}/final/final-video-path.txt に保存" \
            --allowedTools "mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_submit,mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_status,mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_result,Write" \
            --permission-mode "acceptEdits"
          
          # 生成確認
          if [ -f "${{ needs.setup.outputs.project_dir }}/final/final-video-path.txt" ]; then
            FINAL_VIDEO_PATH=$(cat "${{ needs.setup.outputs.project_dir }}/final/final-video-path.txt")
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "final_video_path=$FINAL_VIDEO_PATH" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  summary:
    name: "📊 Summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, research_1, planning_1, image_generation, text_to_speech, video_generation, post_production]
    steps:
      - name: Generate Summary
        run: |
          echo "# 🎯 Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue**: #${{ github.event.inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic**: ${{ inputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ needs.setup.outputs.project_dir }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Generated Assets" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: ${{ needs.post_production.outputs.final_video_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.image_generation.outputs.image_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Audio**: ${{ needs.text_to_speech.outputs.audio_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Raw Video**: ${{ needs.video_generation.outputs.video_path }}" >> $GITHUB_STEP_SUMMARY