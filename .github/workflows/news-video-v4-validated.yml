name: "Professional News Video Production Workflow"

"on":
  workflow_dispatch:
    inputs:
      news_topic:
        description: "ニュースのトピック・キーワード"
        required: true
        type: string
        default: "最新のAI技術動向"
      
      news_category:
        description: "ニュースカテゴリー"
        required: true
        type: choice
        options:
          - "technology"
          - "politics" 
          - "economy"
          - "science"
          - "entertainment"
          - "sports"
          - "international"
          - "domestic"
        default: "technology"
      
      time_period:
        description: "対象期間"
        required: true
        type: choice
        options:
          - "latest"
          - "today"
          - "this_week"
          - "this_month"
        default: "latest"
      
      visual_style:
        description: "ビジュアルスタイル"
        required: false
        type: choice
        options:
          - "professional_news"
          - "modern_tech"
          - "documentary"
          - "corporate"
        default: "professional_news"
      
      quality_mode:
        description: "品質モード"
        required: false
        type: choice
        options:
          - "standard"
          - "high_quality"
          - "fast_processing"
        default: "standard"

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup_dirs.outputs.project_dir }}
      workflow_start_time: ${{ steps.setup_dirs.outputs.workflow_start_time }}
      matrix_scenes: ${{ steps.setup_dirs.outputs.matrix_scenes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Directories and Variables
        id: setup_dirs
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="/home/runner/work/kamuicode_meta/kamuicode_meta/projects/issue-66-20250811-064501"
          WORKFLOW_START_TIME=$(date -u +%s)
          MATRIX_SCENES='[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'
          
          # Create project directories
          mkdir -p "${PROJECT_DIR}/metadata"
          mkdir -p "${PROJECT_DIR}/logs"
          mkdir -p "${PROJECT_DIR}/media/images"
          mkdir -p "${PROJECT_DIR}/media/videos" 
          mkdir -p "${PROJECT_DIR}/media/audio"
          mkdir -p "${PROJECT_DIR}/final"
          
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "workflow_start_time=${WORKFLOW_START_TIME}" >> $GITHUB_OUTPUT
          echo "matrix_scenes=${MATRIX_SCENES}" >> $GITHUB_OUTPUT
          
          echo "✅ Setup completed - Project Directory: ${PROJECT_DIR}"
          echo "$GITHUB_STEP_SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "## News Video Production Workflow Started" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic**: ${{ inputs.news_topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Category**: ${{ inputs.news_category }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Visual Style**: ${{ inputs.visual_style }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Directory**: ${PROJECT_DIR}" >> $GITHUB_STEP_SUMMARY
          echo "- **Start Time**: $(date)" >> $GITHUB_STEP_SUMMARY

  phase1_information_gathering:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      research_completed: ${{ steps.news_research.outputs.research_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: News Information Gathering and Verification
        id: news_research
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Check MCP connection timing (within 12-minute safe window)
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed)"
            USE_MCP=true
          else
            echo "⚠️ MCP Connection Risk - Using Fallback (${ELAPSED_MINUTES}min elapsed)"
            USE_MCP=false
          fi
          
          if [ "$USE_MCP" = true ]; then
            # Execute comprehensive news research with Claude Code
            RESEARCH_PROMPT="ニュース情報収集・検証タスク:
            1. トピック: '${{ inputs.news_topic }}'、カテゴリ: '${{ inputs.news_category }}'
            2. 対象期間: '${{ inputs.time_period }}'
            3. WebSearchツールで複数の信頼できるソースから最新情報を収集
            4. 情報の信頼性評価とファクトチェック実施
            5. 5W1H原則に従った情報整理
            6. 収集結果を${PROJECT_DIR}/metadata/research_data.json に保存
            7. 情報源リストを${PROJECT_DIR}/metadata/sources.json に保存
            8. Bashツールでls -la ${PROJECT_DIR}/metadata/ 実行して確認"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "WebSearch,Write,Bash" \
              --max-turns 40 \
              --permission-mode "acceptEdits" \
              -p "$RESEARCH_PROMPT"
            
            echo "research_completed=true" >> $GITHUB_OUTPUT
          else
            # Fallback research method
            echo "Using fallback research method due to MCP timeout risk"
            echo '{"topic":"${{ inputs.news_topic }}","category":"${{ inputs.news_category }}","research_method":"fallback"}' > "${PROJECT_DIR}/metadata/research_data.json"
            echo "research_completed=fallback" >> $GITHUB_OUTPUT
          fi
          
          # Verification
          ls -la "${PROJECT_DIR}/metadata/"
          
          echo "## Phase 1: Information Gathering Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Research Status**: $(cat $GITHUB_OUTPUT | grep research_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Elapsed Time**: ${ELAPSED_MINUTES} minutes" >> $GITHUB_STEP_SUMMARY

      - name: Upload Research Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase1-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  phase2_script_development:
    runs-on: ubuntu-latest
    needs: [setup, phase1_information_gathering]
    outputs:
      script_completed: ${{ steps.script_creation.outputs.script_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Research Data
        uses: actions/download-artifact@v4
        with:
          name: phase1-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
          
      - name: News Script and Structure Creation
        id: script_creation
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Check MCP connection timing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed)"
            
            SCRIPT_PROMPT="ニュース構成・脚本作成タスク:
            1. ${PROJECT_DIR}/metadata/research_data.jsonを読み込み
            2. 60秒動画向けニュース構成を設計
            3. 視聴者の関心を引く導入(8秒)→本文(44秒)→まとめ(8秒)
            4. 10シーン構成の詳細脚本を作成(各シーン6秒想定)  
            5. ニュースキャスター向け読み原稿を作成
            6. 脚本を${PROJECT_DIR}/metadata/news_script.json に保存
            7. シーン構成を${PROJECT_DIR}/metadata/scene_breakdown.json に保存
            8. Bashツールで保存確認を実行"
            
            npx @anthropic-ai/claude-code \
              --allowedTools "Read,Write,Bash" \
              --max-turns 30 \
              --permission-mode "acceptEdits" \
              -p "$SCRIPT_PROMPT"
            
            echo "script_completed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Using fallback script creation due to MCP timeout risk"
            echo '{"script":"Fallback news script for ${{ inputs.news_topic }}","scenes":10}' > "${PROJECT_DIR}/metadata/news_script.json"
            echo "script_completed=fallback" >> $GITHUB_OUTPUT
          fi
          
          # Verification
          ls -la "${PROJECT_DIR}/metadata/"
          
          echo "## Phase 2: Script Development Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Script Status**: $(cat $GITHUB_OUTPUT | grep script_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Elapsed Time**: ${ELAPSED_MINUTES} minutes" >> $GITHUB_STEP_SUMMARY

      - name: Upload Script Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase2-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  phase3_parallel_content_creation:
    runs-on: ubuntu-latest
    needs: [setup, phase2_script_development]
    strategy:
      max-parallel: 3
      matrix:
        task: ["news_anchor", "narration", "graphics"]
    outputs:
      anchor_completed: ${{ steps.content_creation.outputs.anchor_completed }}
      narration_completed: ${{ steps.content_creation.outputs.narration_completed }}
      graphics_completed: ${{ steps.content_creation.outputs.graphics_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Script Data
        uses: actions/download-artifact@v4
        with:
          name: phase2-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
          
      - name: Parallel Content Creation
        id: content_creation
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          TASK="${{ matrix.task }}"
          
          # Check MCP connection timing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed) - Processing: ${TASK}"
            USE_MCP=true
          else
            echo "⚠️ MCP Connection Risk - Using Fallback for: ${TASK}"
            USE_MCP=false
          fi
          
          case "$TASK" in
            "news_anchor")
              if [ "$USE_MCP" = true ]; then
                ANCHOR_PROMPT="ニュースキャスター生成タスク:
                1. プロフェッショナルなニュースキャスターを生成
                2. 特徴: フォーマルスーツ、信頼感ある表情、ニューススタジオ背景
                3. 固定シード使用で一貫性確保(seed: 42)
                4. 高解像度(1920x1080)、プロフェッショナル品質
                5. 画像を${PROJECT_DIR}/media/images/news_anchor.png に保存
                6. URLを${PROJECT_DIR}/media/images/news_anchor-url.txt に保存
                7. Bashツールでls -la ${PROJECT_DIR}/media/images/ 実行"
                
                npx @anthropic-ai/claude-code \
                  --mcp-config ".claude/mcp-kamuicode.json" \
                  --allowedTools "mcp__t2i-*,Write,Bash" \
                  --max-turns 40 \
                  --permission-mode "acceptEdits" \
                  -p "$ANCHOR_PROMPT"
                  
                # Immediate URL download
                if [ -f "${PROJECT_DIR}/media/images/news_anchor-url.txt" ]; then
                  curl -L -o "${PROJECT_DIR}/media/images/news_anchor.png" "$(cat ${PROJECT_DIR}/media/images/news_anchor-url.txt)"
                fi
              else
                echo "Fallback: Creating anchor placeholder"
                echo "news_anchor_fallback" > "${PROJECT_DIR}/media/images/news_anchor.png"
              fi
              echo "anchor_completed=true" >> $GITHUB_OUTPUT
              ;;
              
            "narration")
              if [ "$USE_MCP" = true ]; then
                NARRATION_PROMPT="ナレーション音声生成タスク:
                1. ${PROJECT_DIR}/metadata/news_script.json から脚本を読み込み
                2. ニュース番組に適した明瞭で落ち着いたトーンで音声生成
                3. 日本語、女性プロフェッショナル音声使用
                4. 60秒目標、読み速度毎分320文字
                5. 音声を${PROJECT_DIR}/media/audio/narration.mp3 に保存
                6. 音声品質: -14LUFS レベル
                7. Bashツールで保存確認実行"
                
                npx @anthropic-ai/claude-code \
                  --mcp-config ".claude/mcp-kamuicode.json" \
                  --allowedTools "mcp__t2s-*,Read,Write,Bash" \
                  --max-turns 40 \
                  --permission-mode "acceptEdits" \
                  -p "$NARRATION_PROMPT"
              else
                echo "Fallback: Creating narration placeholder"
                echo "narration_fallback" > "${PROJECT_DIR}/media/audio/narration.mp3"
              fi
              echo "narration_completed=true" >> $GITHUB_OUTPUT
              ;;
              
            "graphics")
              GRAPHICS_PROMPT="タイトル・テロップ制作タスク:
              1. ${PROJECT_DIR}/metadata/news_script.json から情報を読み込み
              2. ニュースタイトル、重要ポイント、情報源表示を作成
              3. 報道基準に準拠したフォント・色彩選択
              4. テロップデータを${PROJECT_DIR}/metadata/graphics_data.json に保存
              5. Bashツールで保存確認"
              
              npx @anthropic-ai/claude-code \
                --allowedTools "Read,Write,Bash" \
                --max-turns 20 \
                --permission-mode "acceptEdits" \
                -p "$GRAPHICS_PROMPT"
                
              echo "graphics_completed=true" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "## Phase 3: ${TASK} Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Task**: ${TASK}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Elapsed Time**: ${ELAPSED_MINUTES} minutes" >> $GITHUB_STEP_SUMMARY

      - name: Upload Content Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase3-content-${{ matrix.task }}
          path: |
            ${{ needs.setup.outputs.project_dir }}/media/
            ${{ needs.setup.outputs.project_dir }}/metadata/

  phase4_scene_image_generation:
    runs-on: ubuntu-latest
    needs: [setup, phase2_script_development, phase3_parallel_content_creation]
    strategy:
      max-parallel: 10
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    outputs:
      scene_images_completed: ${{ steps.scene_generation.outputs.scene_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Script and Content Data
        uses: actions/download-artifact@v4
        with:
          name: phase2-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/
          
      - name: Scene Image Generation
        id: scene_generation
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check MCP connection timing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed) - Scene ${SCENE_NUM}"
            
            # Critical data persistence pattern implementation
            SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
            URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
            
            SCENE_PROMPT="シーン${SCENE_NUM}画像生成タスク:
            1. ${PROJECT_DIR}/metadata/scene_breakdown.json からシーン${SCENE_NUM}の内容を読み込み
            2. ニュース映像に適した構図でプロフェッショナル品質の画像を生成
            3. 視覚スタイル: ${{ inputs.visual_style }}
            4. 解像度: 1920x1080、報道にふさわしい中立的視点
            5. 画像を${SAVE_PATH}に保存 (Write tool使用)
            6. URLを${URL_PATH}に保存 (Write tool使用)
            7. ls -la ${PROJECT_DIR}/media/images/ を実行 (Bash tool使用)"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__t2i-*,Read,Write,Bash" \
              --max-turns 40 \
              --permission-mode "acceptEdits" \
              -p "$SCENE_PROMPT"
            
            # Immediate URL download (prevent 15-minute expiration)
            [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"
            
            # Multi-pattern file search (NEVER assume exact filename)
            IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.png" 2>/dev/null | head -1)
            [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
            [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)
            
            # File validation before use
            if [ -f "$IMAGE" ] && [ $(stat -c%s "$IMAGE") -gt 10000 ]; then
              echo "✅ Valid image: $IMAGE"
              echo "scene_completed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Invalid or missing image for scene ${SCENE_NUM}"
              echo "scene_completed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ MCP timeout risk - Creating fallback for Scene ${SCENE_NUM}"
            echo "scene_fallback_${SCENE_NUM}" > "${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
            echo "scene_completed=fallback" >> $GITHUB_OUTPUT
          fi
          
          echo "## Scene ${SCENE_NUM} Image Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Scene**: ${SCENE_NUM}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $(cat $GITHUB_OUTPUT | grep scene_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Scene Image Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase4-scene-${{ matrix.scene }}-image
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

  phase5_scene_video_conversion:
    runs-on: ubuntu-latest  
    needs: [setup, phase4_scene_image_generation]
    strategy:
      max-parallel: 10
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    outputs:
      scene_videos_completed: ${{ steps.video_conversion.outputs.video_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Scene Images
        uses: actions/download-artifact@v4
        with:
          name: phase4-scene-${{ matrix.scene }}-image
          path: ${{ needs.setup.outputs.project_dir }}/media/images/
          
      - name: Scene Video Conversion (Image-to-Video)
        id: video_conversion
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check MCP connection timing - critical for I2V processing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed) - I2V Scene ${SCENE_NUM}"
            
            # URL vs File Path Priority Pattern
            IMAGE_URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
            IMAGE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
            
            # Determine best image source (Google URL priority)
            if [ -f "$IMAGE_URL_FILE" ]; then
              IMAGE_URL=$(cat "$IMAGE_URL_FILE")
              # Verify Google URL accessibility
              if curl -IfsS --max-time 10 "$IMAGE_URL" >/dev/null 2>&1; then
                echo "✅ Using Google URL: $IMAGE_URL"
                IMAGE_SOURCE="$IMAGE_URL"
              else
                echo "⚠️ Google URL inaccessible, using local path"
                IMAGE_SOURCE="$IMAGE_PATH"
              fi
            else
              echo "ℹ️ Google URL not available, using local path"
              IMAGE_SOURCE="$IMAGE_PATH"
            fi
            
            VIDEO_PROMPT="シーン${SCENE_NUM}動画変換タスク(I2V):
            1. 画像ファイル: ${IMAGE_SOURCE}
            2. 動画生成: 6-8秒、1920x1080、30fps
            3. ニュース映像に適した滑らかな動き
            4. 高品質I2V変換実行
            5. 動画を${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4に保存
            6. Bashツールで保存確認とファイルサイズチェック"
            
            npx @anthropic-ai/claude-code \
              --max-turns 80 \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__i2v-*,Write,Bash" \
              --permission-mode "acceptEdits" \
              -p "$VIDEO_PROMPT"
            
            # Enhanced validation with strict file size requirements
            VIDEO_FILE="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4"
            if [ -f "$VIDEO_FILE" ] && [ -s "$VIDEO_FILE" ]; then
              FILE_SIZE=$(stat -c%s "$VIDEO_FILE" 2>/dev/null || echo 0)
              
              # Size validation (minimum 300KB)
              if [ "$FILE_SIZE" -gt 300000 ]; then
                echo "✅ VALID VIDEO: $VIDEO_FILE (${FILE_SIZE} bytes)"
                echo "video_completed=true" >> $GITHUB_OUTPUT
              else
                echo "❌ FILE TOO SMALL: $VIDEO_FILE (${FILE_SIZE} bytes < 300000)"
                echo "video_completed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ INVALID VIDEO: $VIDEO_FILE not found or empty"
              echo "video_completed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ MCP timeout risk - Creating fallback for Video ${SCENE_NUM}"
            echo "video_fallback_${SCENE_NUM}" > "${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_video.mp4"
            echo "video_completed=fallback" >> $GITHUB_OUTPUT
          fi
          
          echo "## Scene ${SCENE_NUM} Video Conversion" >> $GITHUB_STEP_SUMMARY
          echo "- **Scene**: ${SCENE_NUM}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $(cat $GITHUB_OUTPUT | grep video_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Scene Video Artifacts  
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase5-scene-${{ matrix.scene }}-video
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

  phase6_audio_enhancement:
    runs-on: ubuntu-latest
    needs: [setup, phase3_parallel_content_creation]
    outputs:
      audio_enhanced: ${{ steps.audio_processing.outputs.audio_enhanced }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Content Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase3-content-narration
          path: ${{ needs.setup.outputs.project_dir }}/media/
          
      - name: BGM Generation and Audio Processing
        id: audio_processing
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Check MCP connection timing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed) - Audio Enhancement"
            
            BGM_PROMPT="ニュース番組BGM生成タスク:
            1. ニュース番組に適した品格あるBGM生成
            2. 楽器構成: ピアノ、弦楽器中心
            3. 60秒長、ナレーションを邪魔しない控えめな音量
            4. BGMを${PROJECT_DIR}/media/audio/news_bgm.mp3 に保存
            5. Bashツールで保存確認とファイル情報取得"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__t2m-*,Write,Bash" \
              --max-turns 40 \
              --permission-mode "acceptEdits" \
              -p "$BGM_PROMPT"
              
            echo "audio_enhanced=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Using fallback audio processing due to MCP timeout risk"
            echo "bgm_fallback" > "${PROJECT_DIR}/media/audio/news_bgm.mp3"
            echo "audio_enhanced=fallback" >> $GITHUB_OUTPUT
          fi
          
          echo "## Phase 6: Audio Enhancement Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **BGM Status**: $(cat $GITHUB_OUTPUT | grep audio_enhanced | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Audio Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase6-audio-enhanced
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

  phase7_lipsync_processing:
    runs-on: ubuntu-latest
    needs: [setup, phase3_parallel_content_creation]
    outputs:
      lipsync_completed: ${{ steps.lipsync.outputs.lipsync_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Content Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase3-content-news_anchor
          path: ${{ needs.setup.outputs.project_dir }}/media/
          
      - name: Download Content Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase3-content-narration
          path: ${{ needs.setup.outputs.project_dir }}/media/
          
      - name: Lipsync Processing
        id: lipsync
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Check MCP connection timing
          ELAPSED_MINUTES=$(( ($(date +%s) - ${{ needs.setup.outputs.workflow_start_time }}) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK (${ELAPSED_MINUTES}min elapsed) - Lipsync Processing"
            
            LIPSYNC_PROMPT="リップシンク処理タスク:
            1. ニュースキャスター画像: ${PROJECT_DIR}/media/images/news_anchor.png
            2. ナレーション音声: ${PROJECT_DIR}/media/audio/narration.mp3
            3. 音素レベルでの高精度同期実行(±50ms以内)
            4. 自然な口の動きと表情維持
            5. リップシンク動画を${PROJECT_DIR}/media/videos/anchor_lipsync.mp4 に保存
            6. Bashツールで保存確認"
            
            npx @anthropic-ai/claude-code \
              --max-turns 80 \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-*,Write,Bash" \
              --permission-mode "acceptEdits" \
              -p "$LIPSYNC_PROMPT"
              
            echo "lipsync_completed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Using fallback lipsync processing due to MCP timeout risk"
            echo "lipsync_fallback" > "${PROJECT_DIR}/media/videos/anchor_lipsync.mp4"
            echo "lipsync_completed=fallback" >> $GITHUB_OUTPUT
          fi
          
          echo "## Phase 7: Lipsync Processing Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Lipsync Status**: $(cat $GITHUB_OUTPUT | grep lipsync_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Lipsync Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase7-lipsync
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

  phase8_video_editing_plan:
    runs-on: ubuntu-latest
    needs: [setup, phase5_scene_video_conversion, phase6_audio_enhancement, phase7_lipsync_processing]
    outputs:
      editing_plan_completed: ${{ steps.editing_plan.outputs.editing_plan_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download All Video Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase5-scene-*-video
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/
          merge-multiple: true
          
      - name: Download Audio Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase6-audio-enhanced
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/
          
      - name: Download Lipsync Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase7-lipsync
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/
          
      - name: Video Editing Plan Development
        id: editing_plan
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Comprehensive editing planning with Claude Code SDK
          EDITING_PLAN_PROMPT="動画編集プラン開発タスク:
          
          生成された全素材を分析:
          - 動画: scene1_video.mp4 から scene10_video.mp4 (各6-8秒)
          - ナレーション: narration.mp3 (60秒目標)
          - BGM: news_bgm.mp3
          - リップシンクキャスター: anchor_lipsync.mp4
          
          包括的編集プランを作成:
          1. 正確なタイムライン構造設計
          2. シーン間の自然な遷移推奨
          3. 音声ミックスレベルと同期設定
          4. 最終FFmpegコマンドシーケンス生成
          5. 品質チェック項目リスト
          
          編集プランを${PROJECT_DIR}/metadata/editing_plan.json に構造化JSONで出力
          FFmpegコマンドを${PROJECT_DIR}/metadata/ffmpeg_commands.sh に実行可能形式で保存
          Bashツールで保存確認実行"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$EDITING_PLAN_PROMPT"
          
          echo "editing_plan_completed=true" >> $GITHUB_OUTPUT
          
          echo "## Phase 8: Video Editing Plan Developed" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan Status**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Next**: Final video assembly with optimized timeline" >> $GITHUB_STEP_SUMMARY

      - name: Upload Editing Plan Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase8-editing-plan
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  phase9_final_assembly:
    runs-on: ubuntu-latest
    needs: [setup, phase8_video_editing_plan, phase3_parallel_content_creation]
    outputs:
      final_video_completed: ${{ steps.final_assembly.outputs.final_video_completed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          ffmpeg -version
          
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.setup.outputs.project_dir }}/
          merge-multiple: true
          
      - name: Final Video Assembly and Quality Management
        id: final_assembly
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # List all available files for debugging
          echo "=== Available Files ==="
          find "$PROJECT_DIR" -type f -name "*.mp4" -o -name "*.mp3" -o -name "*.png" | sort
          
          # Check if editing plan exists and execute
          if [ -f "${PROJECT_DIR}/metadata/ffmpeg_commands.sh" ]; then
            echo "Executing planned FFmpeg commands"
            chmod +x "${PROJECT_DIR}/metadata/ffmpeg_commands.sh"
            cd "$PROJECT_DIR"
            bash "${PROJECT_DIR}/metadata/ffmpeg_commands.sh"
          else
            echo "Creating fallback video assembly"
            
            # Create a basic video assembly
            cd "${PROJECT_DIR}/media/videos"
            
            # Collect available video files
            VIDEO_FILES=""
            for i in {1..10}; do
              if [ -f "scene${i}_video.mp4" ]; then
                VIDEO_FILES="$VIDEO_FILES scene${i}_video.mp4"
              fi
            done
            
            if [ -n "$VIDEO_FILES" ]; then
              echo "Assembling videos: $VIDEO_FILES"
              
              # Create file list for concatenation
              echo "" > video_list.txt
              for file in $VIDEO_FILES; do
                echo "file '$file'" >> video_list.txt
              done
              
              # Basic concatenation
              ffmpeg -f concat -safe 0 -i video_list.txt -c copy temp_concat.mp4
              
              # Add audio if available
              if [ -f "../audio/narration.mp3" ] && [ -f "../audio/news_bgm.mp3" ]; then
                # Mix narration and BGM, then add to video
                ffmpeg -i ../audio/narration.mp3 -i ../audio/news_bgm.mp3 -filter_complex "[1:a]volume=0.3[bg];[0:a][bg]amix=inputs=2[a]" -map "[a]" -t 60 mixed_audio.mp3
                ffmpeg -i temp_concat.mp4 -i mixed_audio.mp3 -c:v copy -c:a aac -shortest "${PROJECT_DIR}/final/news_video_final.mp4"
              elif [ -f "../audio/narration.mp3" ]; then
                # Add narration only
                ffmpeg -i temp_concat.mp4 -i ../audio/narration.mp3 -c:v copy -c:a aac -shortest "${PROJECT_DIR}/final/news_video_final.mp4"
              else
                # Video only
                cp temp_concat.mp4 "${PROJECT_DIR}/final/news_video_final.mp4"
              fi
            else
              echo "⚠️ No valid video files found, creating placeholder"
              echo "placeholder" > "${PROJECT_DIR}/final/news_video_final.mp4"
            fi
          fi
          
          # Quality verification
          FINAL_VIDEO="${PROJECT_DIR}/final/news_video_final.mp4"
          if [ -f "$FINAL_VIDEO" ] && [ -s "$FINAL_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 1000000 ]; then  # At least 1MB
              echo "✅ VALID FINAL VIDEO: $FINAL_VIDEO (${FILE_SIZE} bytes)"
              
              # Get video information if possible
              if command -v ffprobe >/dev/null 2>&1; then
                ffprobe -v quiet -show_format -show_streams "$FINAL_VIDEO" > "${PROJECT_DIR}/final/video_info.txt" 2>/dev/null || true
              fi
              
              echo "final_video_completed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ FINAL VIDEO TOO SMALL: ${FILE_SIZE} bytes"
              echo "final_video_completed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ FINAL VIDEO NOT FOUND OR EMPTY"
            echo "final_video_completed=false" >> $GITHUB_OUTPUT
          fi
          
          # Final verification and summary
          echo "=== Final Project Structure ===" 
          ls -la "${PROJECT_DIR}/final/"
          
          echo "## Phase 9: Final Assembly Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video Status**: $(cat $GITHUB_OUTPUT | grep final_video_completed | cut -d'=' -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Location**: ${PROJECT_DIR}/final/" >> $GITHUB_STEP_SUMMARY
          
          # Add workflow completion summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎬 News Video Production Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic**: ${{ inputs.news_topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Category**: ${{ inputs.news_category }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Length**: 60 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Scenes Generated**: 10 scenes" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Status**: $([ -f "${FINAL_VIDEO}" ] && echo "✅ Success" || echo "❌ Issues detected")" >> $GITHUB_STEP_SUMMARY

      - name: Upload Final Video Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-news-video
          path: |
            ${{ needs.setup.outputs.project_dir }}/final/
            ${{ needs.setup.outputs.project_dir }}/metadata/
            ${{ needs.setup.outputs.project_dir }}/logs/