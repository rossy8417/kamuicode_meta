name: Professional News Video Generator

on:
  workflow_dispatch:
    inputs:
      video_title:
        description: "ニュース動画のタイトル"
        required: true
        default: "最新技術ニュース速報"
        type: string
      duration:
        description: "動画の長さ"
        required: true
        default: "60s"
        type: choice
        options:
          - "30s"
          - "60s"
          - "90s"
      target_platform:
        description: "配信プラットフォーム"
        required: true
        default: "youtube"
        type: choice
        options:
          - "youtube"
          - "twitter"
          - "instagram"
          - "tiktok"
      content_type:
        description: "コンテンツの種類"
        required: true
        default: "news"
        type: choice
        options:
          - "news"
          - "educational"
          - "entertainment"
      news_topic:
        description: "ニューストピック（例：AI技術、環境問題、経済動向）"
        required: true
        default: "AI技術"
        type: string
      visual_style:
        description: "ビジュアルスタイル"
        required: false
        default: "professional"
        type: choice
        options:
          - "professional"
          - "documentary"
          - "corporate"
          - "cinematic"
      narration_voice:
        description: "ナレーション音声"
        required: false
        default: "female_professional"
        type: choice
        options:
          - "female_professional"
          - "male_professional"
          - "ai_neutral"
  push:
    paths-ignore:
      - '.github/workflows/**'

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'workflow_dispatch'  # Skip entire workflow on push
    outputs:
      project_dir: ${{ steps.setup-dirs.outputs.project_dir }}
      scene_count: ${{ steps.calculate-scenes.outputs.scene_count }}
      matrix_scenes: ${{ steps.calculate-scenes.outputs.matrix_scenes }}
      workflow_start: ${{ steps.setup-time.outputs.workflow_start }}
      news_topic: ${{ steps.setup-params.outputs.news_topic }}
      duration_seconds: ${{ steps.calculate-scenes.outputs.duration_seconds }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Project Directory
        id: setup-dirs
        run: |
          PROJECT_DIR="/home/runner/work/kamuicode_meta/kamuicode_meta/projects/issue-66-20250816-140132"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          mkdir -p "$PROJECT_DIR"/{metadata,logs,media/{images,videos,audio},final}
          echo "✅ Project directories created"

      - name: Record Workflow Start Time
        id: setup-time
        run: |
          echo "workflow_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
          echo "✅ Workflow start time recorded"

      - name: Setup Input Parameters
        id: setup-params
        run: |
          echo "news_topic=${{ github.event.inputs.news_topic }}" >> $GITHUB_OUTPUT
          echo "✅ Parameters configured"

      - name: Calculate Scene Count
        id: calculate-scenes
        run: |
          DURATION="${{ github.event.inputs.duration }}"
          case "$DURATION" in
            "30s") 
              DURATION_SEC=30
              SCENE_COUNT=6
              ;;
            "60s") 
              DURATION_SEC=60
              SCENE_COUNT=12
              ;;
            "90s") 
              DURATION_SEC=90
              SCENE_COUNT=18
              ;;
            *) 
              DURATION_SEC=60
              SCENE_COUNT=12
              ;;
          esac
          
          echo "duration_seconds=$DURATION_SEC" >> $GITHUB_OUTPUT
          echo "scene_count=$SCENE_COUNT" >> $GITHUB_OUTPUT
          
          # Generate matrix array for scenes
          MATRIX="["
          for i in $(seq 1 $SCENE_COUNT); do
            if [ $i -eq 1 ]; then
              MATRIX="${MATRIX}$i"
            else
              MATRIX="${MATRIX}, $i"
            fi
          done
          MATRIX="${MATRIX}]"
          
          echo "matrix_scenes=$MATRIX" >> $GITHUB_OUTPUT
          echo "✅ Scene calculation: $SCENE_COUNT scenes for ${DURATION_SEC}s video"

  information-gathering:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: setup
    outputs:
      news_data_file: ${{ steps.collect-info.outputs.news_data_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Collect News Information
        id: collect-info
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          NEWS_TOPIC="${{ needs.setup.outputs.news_topic }}"
          
          INFO_PROMPT="最新の「${NEWS_TOPIC}」に関するニュース情報を収集してください：
          
          1. WebSearchツールを使用して最新のニュース情報を検索
          2. 信頼性の高い複数のソース（NHK、時事通信、共同通信等）から情報を収集
          3. 収集した情報を分析し、以下の形式でJSONファイルに保存：
          
          {
            \"topic\": \"${NEWS_TOPIC}\",
            \"sources\": [
              {\"source\": \"ソース名\", \"title\": \"記事タイトル\", \"summary\": \"要約\", \"url\": \"URL\"},
              ...
            ],
            \"key_points\": [\"重要ポイント1\", \"重要ポイント2\", ...],
            \"main_story\": \"メインストーリー要約\",
            \"credibility_score\": \"信頼性スコア\"
          }
          
          4. ファイルを${PROJECT_DIR}/metadata/news_data.jsonに保存
          5. Bashツールでls -laで保存確認"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Bash" \
            --max-turns 40 \
            -p "$INFO_PROMPT"
          
          # Verify file creation
          NEWS_FILE="${PROJECT_DIR}/metadata/news_data.json"
          if [ -f "$NEWS_FILE" ]; then
            echo "news_data_file=$NEWS_FILE" >> $GITHUB_OUTPUT
            echo "✅ News information collected: $NEWS_FILE"
          else
            echo "⚠️ News file not found, creating minimal data"
            echo "{\"topic\":\"${NEWS_TOPIC}\",\"main_story\":\"${NEWS_TOPIC}の最新動向について\"}" > "$NEWS_FILE"
            echo "news_data_file=$NEWS_FILE" >> $GITHUB_OUTPUT
          fi

      - name: Upload Information Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: information-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  content-creation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup, information-gathering]
    outputs:
      script_file: ${{ steps.create-script.outputs.script_file }}
      narration_file: ${{ steps.generate-narration.outputs.narration_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Information Data
        uses: actions/download-artifact@v4
        with:
          name: information-data
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create News Script
        id: create-script
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          DURATION_SEC="${{ needs.setup.outputs.duration_seconds }}"
          SCENE_COUNT="${{ needs.setup.outputs.scene_count }}"
          
          SCRIPT_PROMPT="ニュース番組の台本を作成してください：
          
          1. ${PROJECT_DIR}/metadata/news_data.jsonの情報を分析
          2. ${DURATION_SEC}秒の動画用に${SCENE_COUNT}シーン構成で台本を作成
          3. プロフェッショナルなニュース番組形式（最初3秒でフック、8秒でコミット）
          4. 各シーンの時間配分と映像指示を含める
          5. 自然な日本語アナウンサー文体で記述
          
          台本構成：
          - オープニング（3秒）：視聴者の注意を引く導入
          - メイン内容（${DURATION_SEC - 8}秒）：核心情報の伝達
          - クロージング（5秒）：まとめと次回予告
          
          出力形式：
          {
            \"title\": \"ニュースタイトル\",
            \"total_duration\": ${DURATION_SEC},
            \"scenes\": [
              {\"scene_number\": 1, \"duration\": 5, \"narration\": \"ナレーション文\", \"visual_direction\": \"映像指示\"},
              ...
            ],
            \"full_narration\": \"完全なナレーション文\"
          }
          
          6. ${PROJECT_DIR}/metadata/news_script.jsonに保存
          7. Bashツールでls -laで確認"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            -p "$SCRIPT_PROMPT"
          
          SCRIPT_FILE="${PROJECT_DIR}/metadata/news_script.json"
          if [ -f "$SCRIPT_FILE" ]; then
            echo "script_file=$SCRIPT_FILE" >> $GITHUB_OUTPUT
            echo "✅ News script created: $SCRIPT_FILE"
          else
            echo "⚠️ Script file not created"
            echo "script_file=" >> $GITHUB_OUTPUT
          fi

      - name: Generate Narration Audio
        id: generate-narration
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          NARRATION_VOICE="${{ github.event.inputs.narration_voice }}"
          
          # Extract narration text from script
          SCRIPT_FILE="${PROJECT_DIR}/metadata/news_script.json"
          if [ -f "$SCRIPT_FILE" ]; then
            NARRATION_TEXT=$(jq -r '.full_narration // "最新のニュースをお伝えします。"' "$SCRIPT_FILE" 2>/dev/null || echo "最新のニュースをお伝えします。")
          else
            NARRATION_TEXT="最新のニュースをお伝えします。"
          fi
          
          TTS_PROMPT="プロフェッショナルなニュースキャスター音声を生成してください：
          
          1. MCP T2Sツール（mcp__t2s-kamui-minimax-speech__minimax_speech_02_turbo_submit）を使用
          2. 以下の設定で音声生成：
             - text: \"${NARRATION_TEXT}\"
             - voice_id: \"Wise_Woman\"
             - emotion: \"neutral\"
             - speed: 1.0
             - language_boost: \"Japanese\"
          3. 生成完了後、結果をダウンロードして${PROJECT_DIR}/media/audio/narration.mp3に保存
          4. Bashツールでls -laで確認"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-*,Write,Bash" \
            --max-turns 40 \
            -p "$TTS_PROMPT"
          
          NARRATION_FILE="${PROJECT_DIR}/media/audio/narration.mp3"
          if [ -f "$NARRATION_FILE" ]; then
            echo "narration_file=$NARRATION_FILE" >> $GITHUB_OUTPUT
            echo "✅ Narration audio generated: $NARRATION_FILE"
          else
            echo "⚠️ Narration file not found"
            echo "narration_file=" >> $GITHUB_OUTPUT
          fi

      - name: Upload Content Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: content-data
          path: ${{ needs.setup.outputs.project_dir }}/

  news-anchor-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: setup
    outputs:
      anchor_image: ${{ steps.generate-anchor.outputs.anchor_image }}
      anchor_url: ${{ steps.generate-anchor.outputs.anchor_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate News Anchor
        id: generate-anchor
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          SAVE_PATH="${PROJECT_DIR}/media/images/news_anchor.png"
          URL_PATH="${PROJECT_DIR}/media/images/news_anchor-url.txt"
          
          ANCHOR_PROMPT="プロフェッショナルなニュースキャスターの画像を生成してください：
          
          1. MCP T2Iツール（mcp__t2i-kamui-imagen3__imagen_t2i）を使用
          2. 以下の詳細なプロンプトで画像生成：
             prompt: \"Professional Japanese news anchor, female, wearing business suit, sitting at news desk, studio lighting, neutral background, confident expression, clean and professional appearance, 4K quality, realistic style\"
             aspect_ratio: \"16:9\"
             num_images: 1
          3. 生成後、画像を${SAVE_PATH}にWriteツールで保存
          4. URLを${URL_PATH}にWriteツールで保存
          5. Bashツールでls -la ${PROJECT_DIR}/media/images/で確認"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            -p "$ANCHOR_PROMPT"
          
          # Immediate URL download (prevent expiration)
          if [ -f "$URL_PATH" ]; then
            curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)" || true
          fi
          
          # Multi-pattern file search
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*news_anchor*.png" 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)
          
          if [ -f "$ANCHOR_IMAGE" ] && [ $(stat -c%s "$ANCHOR_IMAGE") -gt 10000 ]; then
            echo "✅ Valid anchor image: $ANCHOR_IMAGE"
            echo "anchor_image=$ANCHOR_IMAGE" >> $GITHUB_OUTPUT
            
            # Check for URL file
            if [ -f "$URL_PATH" ]; then
              ANCHOR_URL=$(cat "$URL_PATH")
              echo "anchor_url=$ANCHOR_URL" >> $GITHUB_OUTPUT
            else
              echo "anchor_url=" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Invalid or missing anchor image"
            echo "anchor_image=" >> $GITHUB_OUTPUT
            echo "anchor_url=" >> $GITHUB_OUTPUT
          fi

      - name: Upload Anchor Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: anchor-data
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

  scene-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, content-creation]
    strategy:
      fail-fast: false
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.matrix_scenes) }}
    outputs:
      failed_scenes: ${{ steps.track-failures.outputs.failed_scenes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Content Data
        uses: actions/download-artifact@v4
        with:
          name: content-data
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate Scene Background Image
        continue-on-error: true
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          NEWS_TOPIC="${{ needs.setup.outputs.news_topic }}"
          
          SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          # Extract scene direction from script if available
          SCRIPT_FILE="${PROJECT_DIR}/metadata/news_script.json"
          if [ -f "$SCRIPT_FILE" ]; then
            SCENE_DIRECTION=$(jq -r ".scenes[$((SCENE_NUM-1))].visual_direction // \"news studio background\"" "$SCRIPT_FILE" 2>/dev/null || echo "news studio background")
          else
            SCENE_DIRECTION="professional news studio background"
          fi
          
          IMAGE_PROMPT="ニュース番組の背景画像を生成してください：
          
          1. MCP T2Iツール（mcp__t2i-kamui-imagen3__imagen_t2i）を使用
          2. 以下の設定で画像生成：
             prompt: \"${SCENE_DIRECTION} for ${NEWS_TOPIC} news segment, modern news studio, professional lighting, empty studio with no people, clean background, broadcast quality, realistic style\"
             aspect_ratio: \"16:9\"
             num_images: 1
          3. 生成後、画像を${SAVE_PATH}にWriteツールで保存
          4. URLを${URL_PATH}にWriteツールで保存
          5. Bashツールでls -la ${PROJECT_DIR}/media/images/で確認"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            -p "$IMAGE_PROMPT"
          
          # Immediate URL download (prevent expiration)
          if [ -f "$URL_PATH" ]; then
            curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)" || true
          fi

      - name: Convert to Video Immediately
        continue-on-error: true
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Multi-pattern file search for image
          SCENE_IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.png" 2>/dev/null | head -1)
          [ -z "$SCENE_IMAGE" ] && SCENE_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          
          URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          if [ -f "$SCENE_IMAGE" ] || [ -f "$URL_PATH" ]; then
            # Prioritize Google URL over local path
            if [ -f "$URL_PATH" ]; then
              SCENE_URL=$(cat "$URL_PATH")
              if curl -IfsS --max-time 10 "$SCENE_URL" >/dev/null 2>&1; then
                echo "✅ Using Google URL: $SCENE_URL"
                IMAGE_REF="$SCENE_URL"
              else
                echo "⚠️ Google URL inaccessible, using local path"
                IMAGE_REF="$SCENE_IMAGE"
              fi
            else
              IMAGE_REF="$SCENE_IMAGE"
            fi
            
            VIDEO_PROMPT="画像から動画に変換してください：
            
            1. MCP I2Vツール（mcp__i2v-kamui-hailuo-02-pro__hailuo_02_submit）を使用
            2. 以下の設定で動画変換：
               image_url: \"${IMAGE_REF}\"
               prompt: \"smooth professional news studio background movement, subtle camera motion, broadcast quality\"
               prompt_optimizer: true
            3. 変換完了後、結果をダウンロードして${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_background.mp4に保存
            4. Bashツールでls -laで確認"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__i2v-*,Write,Bash" \
              --max-turns 80 \
              -p "$VIDEO_PROMPT"
            
            echo "✅ Scene ${SCENE_NUM} video conversion completed"
          else
            echo "❌ Scene ${SCENE_NUM}: No image found for video conversion"
          fi

      - name: Track Failures
        id: track-failures
        if: always()
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check if video was generated successfully
          VIDEO_FILE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.mp4" 2>/dev/null | head -1)
          
          if [ -f "$VIDEO_FILE" ] && [ $(stat -c%s "$VIDEO_FILE") -gt 300000 ]; then
            echo "✅ Scene ${SCENE_NUM}: SUCCESS"
            echo "failed_scenes=" >> $GITHUB_OUTPUT
          else
            echo "❌ Scene ${SCENE_NUM}: FAILED"
            echo "failed_scenes=${SCENE_NUM}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Scene Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene }}-data
          path: ${{ needs.setup.outputs.project_dir }}/media/

  scene-recovery:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [setup, content-creation, scene-generation]
    if: always() && needs.scene-generation.result != 'success'
    strategy:
      fail-fast: false
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.matrix_scenes) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check If Recovery Needed
        id: check-recovery
        run: |
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check if this scene failed in the main generation
          FAILED_SCENES="${{ needs.scene-generation.outputs.failed_scenes }}"
          if [[ "$FAILED_SCENES" == *"$SCENE_NUM"* ]]; then
            echo "needs_recovery=true" >> $GITHUB_OUTPUT
            echo "⚠️ Scene ${SCENE_NUM} needs recovery"
          else
            echo "needs_recovery=false" >> $GITHUB_OUTPUT
            echo "✅ Scene ${SCENE_NUM} does not need recovery"
          fi

      - name: Download Content Data
        if: steps.check-recovery.outputs.needs_recovery == 'true'
        uses: actions/download-artifact@v4
        with:
          name: content-data
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Setup Node.js for Claude Code
        if: steps.check-recovery.outputs.needs_recovery == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Recovery Attempt - Alternative Service
        if: steps.check-recovery.outputs.needs_recovery == 'true'
        continue-on-error: true
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          NEWS_TOPIC="${{ needs.setup.outputs.news_topic }}"
          
          echo "🔄 Recovery attempt for Scene ${SCENE_NUM} using alternative service"
          
          SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}_recovery.png"
          
          RECOVERY_PROMPT="代替サービスでニュース背景画像を生成してください：
          
          1. MCP T2Iツール（mcp__t2i-kamui-flux-schnell__flux_schnell_submit）を使用
          2. 以下の設定で画像生成：
             prompt: \"Professional news studio background, ${NEWS_TOPIC} news segment, modern studio, no people, clean background\"
             image_size: \"landscape_16_9\"
             num_images: 1
          3. 生成後、画像を${SAVE_PATH}にWriteツールで保存
          4. 即座にI2V変換（mcp__i2v-kamui-veo3-fast__veo3_fast_submit）を実行
          5. ${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_recovery.mp4に保存"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,mcp__i2v-*,Write,Bash" \
            --max-turns 80 \
            -p "$RECOVERY_PROMPT"

      - name: Upload Recovery Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene }}-recovery
          path: ${{ needs.setup.outputs.project_dir }}/media/

  lipsync-processing:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, content-creation, news-anchor-generation]
    outputs:
      lipsync_video: ${{ steps.generate-lipsync.outputs.lipsync_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Required Artifacts
        uses: actions/download-artifact@v4
        with:
          name: content-data
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Download Anchor Data
        uses: actions/download-artifact@v4
        with:
          name: anchor-data
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate Lipsync Video
        id: generate-lipsync
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Find anchor image and narration audio
          ANCHOR_IMAGE="${{ needs.news-anchor-generation.outputs.anchor_image }}"
          ANCHOR_URL="${{ needs.news-anchor-generation.outputs.anchor_url }}"
          NARRATION_FILE="${{ needs.content-creation.outputs.narration_file }}"
          
          # Use anchor URL if available, otherwise local path
          if [ -n "$ANCHOR_URL" ] && [ "$ANCHOR_URL" != "" ]; then
            IMAGE_REF="$ANCHOR_URL"
          else
            IMAGE_REF="$ANCHOR_IMAGE"
          fi
          
          # Find narration audio file
          if [ ! -f "$NARRATION_FILE" ]; then
            NARRATION_FILE=$(find "$PROJECT_DIR" -name "*.mp3" -o -name "*.wav" 2>/dev/null | head -1)
          fi
          
          if [ -n "$IMAGE_REF" ] && [ -f "$NARRATION_FILE" ]; then
            LIPSYNC_PROMPT="ニュースキャスターのリップシンク動画を生成してください：
            
            1. MCP V2Vツール（mcp__v2v-kamui-pixverse-lipsync__pixverse_lipsync_submit）を使用
            2. 以下の設定でリップシンク処理：
               video_url: \"${IMAGE_REF}\"
               audio_url: \"${NARRATION_FILE}\"
               voice_id: \"Auto\"
            3. 処理完了後、結果をダウンロードして${PROJECT_DIR}/media/videos/news_anchor_lipsync.mp4に保存
            4. Bashツールでls -laで確認"
            
            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-*,Write,Bash" \
              --max-turns 80 \
              -p "$LIPSYNC_PROMPT"
            
            LIPSYNC_VIDEO=$(find "$PROJECT_DIR" -name "*lipsync*.mp4" 2>/dev/null | head -1)
            
            if [ -f "$LIPSYNC_VIDEO" ] && [ $(stat -c%s "$LIPSYNC_VIDEO") -gt 300000 ]; then
              echo "lipsync_video=$LIPSYNC_VIDEO" >> $GITHUB_OUTPUT
              echo "✅ Lipsync video generated: $LIPSYNC_VIDEO"
            else
              echo "lipsync_video=" >> $GITHUB_OUTPUT
              echo "⚠️ Lipsync video generation failed"
            fi
          else
            echo "lipsync_video=" >> $GITHUB_OUTPUT
            echo "⚠️ Missing anchor image or narration audio for lipsync"
          fi

      - name: Upload Lipsync Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lipsync-data
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

  video-editing-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup, scene-generation, scene-recovery, lipsync-processing]
    if: always()
    outputs:
      editing_plan: ${{ steps.create-plan.outputs.editing_plan }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Media Assets
        uses: actions/download-artifact@v4
        with:
          pattern: "*-data"
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Setup Node.js for Claude Code
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create Video Editing Plan
        id: create-plan
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          DURATION_SEC="${{ needs.setup.outputs.duration_seconds }}"
          
          PLAN_PROMPT="プロフェッショナルなニュース動画の編集プランを作成してください：
          
          1. 生成された全素材を分析：
             - 背景動画: ${PROJECT_DIR}/media/videos/scene*_background.mp4
             - キャスター動画: ${PROJECT_DIR}/media/videos/news_anchor_lipsync.mp4
             - ナレーション音声: ${PROJECT_DIR}/media/audio/narration.mp3
          
          2. ${DURATION_SEC}秒のニュース動画として最適な編集プランを作成：
             - タイムライン構造（正確なタイミング）
             - シーン間のトランジション方式
             - キャスターと背景の合成方法
             - 音声レベルとミックス設定
             - 最終品質設定（1920x1080、30fps、-14LUFS）
          
          3. 詳細なFFmpegコマンドシーケンスを生成
          
          4. 編集プランを${PROJECT_DIR}/metadata/editing_plan.jsonに保存
          
          5. プランにはこれらの要素を含める：
             - timeline: 各素材の開始・終了時間
             - transitions: シーン間の切り替え効果
             - composition: レイヤー構成と配置
             - audio_mix: 音声レベルと処理
             - ffmpeg_commands: 実行コマンド列"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            -p "$PLAN_PROMPT"
          
          PLAN_FILE="${PROJECT_DIR}/metadata/editing_plan.json"
          if [ -f "$PLAN_FILE" ]; then
            echo "editing_plan=$PLAN_FILE" >> $GITHUB_OUTPUT
            echo "✅ Video editing plan created: $PLAN_FILE"
          else
            echo "editing_plan=" >> $GITHUB_OUTPUT
            echo "⚠️ Editing plan not created"
          fi

      - name: Upload Editing Plan
        uses: actions/upload-artifact@v4
        with:
          name: editing-plan
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  final-video-assembly:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, video-editing-plan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Assets
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Assemble Final Video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          DURATION_SEC="${{ needs.setup.outputs.duration_seconds }}"
          VIDEO_TITLE="${{ github.event.inputs.video_title }}"
          
          cd "$PROJECT_DIR"
          
          # Find available video files
          BACKGROUND_VIDEOS=$(find media/videos -name "*background*.mp4" -o -name "*scene*.mp4" | sort)
          LIPSYNC_VIDEO=$(find media/videos -name "*lipsync*.mp4" | head -1)
          NARRATION_AUDIO=$(find media/audio -name "*.mp3" -o -name "*.wav" | head -1)
          
          echo "=== Available Assets ==="
          echo "Background videos: $BACKGROUND_VIDEOS"
          echo "Lipsync video: $LIPSYNC_VIDEO"
          echo "Narration audio: $NARRATION_AUDIO"
          
          # Create video list for concatenation
          echo "Creating video sequence..."
          VIDEO_LIST="final/video_list.txt"
          mkdir -p final
          
          # Build concatenation list
          for video in $BACKGROUND_VIDEOS; do
            if [ -f "$video" ]; then
              # Ensure each clip is exactly 5 seconds
              CLIP_NAME="final/clip_$(basename "$video")"
              ffmpeg -i "$video" -t 5 -c copy "$CLIP_NAME" -y
              echo "file '$CLIP_NAME'" >> "$VIDEO_LIST"
            fi
          done
          
          if [ -f "$VIDEO_LIST" ]; then
            # Concatenate background videos
            echo "Concatenating background videos..."
            ffmpeg -f concat -safe 0 -i "$VIDEO_LIST" -c copy "final/background_sequence.mp4" -y
            
            # Trim to exact duration
            ffmpeg -i "final/background_sequence.mp4" -t "$DURATION_SEC" -c copy "final/background_trimmed.mp4" -y
            
            # Add lipsync overlay if available
            if [ -f "$LIPSYNC_VIDEO" ]; then
              echo "Adding lipsync overlay..."
              ffmpeg -i "final/background_trimmed.mp4" -i "$LIPSYNC_VIDEO" \
                -filter_complex "[1:v]scale=640:360[overlay]; [0:v][overlay]overlay=W-w-20:20" \
                -t "$DURATION_SEC" "final/video_with_anchor.mp4" -y
              FINAL_VIDEO="final/video_with_anchor.mp4"
            else
              FINAL_VIDEO="final/background_trimmed.mp4"
            fi
            
            # Add audio if available
            if [ -f "$NARRATION_AUDIO" ]; then
              echo "Adding narration audio..."
              ffmpeg -i "$FINAL_VIDEO" -i "$NARRATION_AUDIO" \
                -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 \
                -t "$DURATION_SEC" "final/news_video_final.mp4" -y
              FINAL_OUTPUT="final/news_video_final.mp4"
            else
              FINAL_OUTPUT="$FINAL_VIDEO"
            fi
            
            # Verify final output
            if [ -f "$FINAL_OUTPUT" ] && [ $(stat -c%s "$FINAL_OUTPUT") -gt 1000000 ]; then
              echo "✅ Final video created successfully: $FINAL_OUTPUT"
              
              # Generate metadata
              ffprobe -v quiet -print_format json -show_format -show_streams "$FINAL_OUTPUT" > "final/video_metadata.json"
              
              # Create summary
              cat > "final/generation_summary.txt" << EOF
News Video Generation Summary
============================
Title: $VIDEO_TITLE
Duration: ${DURATION_SEC}s
Output: $FINAL_OUTPUT
Generated: \$(date)

Assets Used:
- Background videos: $(echo "$BACKGROUND_VIDEOS" | wc -l) files
- Lipsync video: $([ -f "$LIPSYNC_VIDEO" ] && echo "Yes" || echo "No")
- Narration audio: $([ -f "$NARRATION_AUDIO" ] && echo "Yes" || echo "No")

Final video size: $(stat -c%s "$FINAL_OUTPUT" | numfmt --to=iec-i --suffix=B)
EOF
              
              echo "✅ News video generation completed successfully!"
            else
              echo "❌ Final video generation failed"
            fi
          else
            echo "❌ No video files found for assembly"
          fi

      - name: Upload Final Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

  quality-verification:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup, final-video-assembly]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Final Video
        uses: actions/download-artifact@v4
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

      - name: Install FFmpeg for Verification
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Verify Video Quality
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          EXPECTED_DURATION="${{ needs.setup.outputs.duration_seconds }}"
          
          cd "$PROJECT_DIR/final"
          
          FINAL_VIDEO=$(find . -name "*.mp4" | head -1)
          
          if [ -f "$FINAL_VIDEO" ]; then
            echo "=== Video Quality Verification ==="
            
            # Basic file info
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO")
            echo "File size: $(numfmt --to=iec-i --suffix=B $FILE_SIZE)"
            
            # Video properties
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_VIDEO")
            RESOLUTION=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv="s=x:p=0" "$FINAL_VIDEO")
            FPS=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=r_frame_rate -of csv="p=0" "$FINAL_VIDEO")
            
            echo "Duration: ${DURATION}s (expected: ${EXPECTED_DURATION}s)"
            echo "Resolution: $RESOLUTION"
            echo "Frame rate: $FPS"
            
            # Quality checks
            QUALITY_SCORE=0
            
            # Duration check (±2 seconds tolerance)
            if (( $(echo "$DURATION >= $EXPECTED_DURATION - 2" | bc -l) )) && (( $(echo "$DURATION <= $EXPECTED_DURATION + 2" | bc -l) )); then
              echo "✅ Duration: PASS"
              QUALITY_SCORE=$((QUALITY_SCORE + 25))
            else
              echo "❌ Duration: FAIL"
            fi
            
            # File size check (minimum 1MB)
            if [ "$FILE_SIZE" -gt 1000000 ]; then
              echo "✅ File size: PASS"
              QUALITY_SCORE=$((QUALITY_SCORE + 25))
            else
              echo "❌ File size: FAIL"
            fi
            
            # Resolution check
            if [[ "$RESOLUTION" == *"1920x1080"* ]] || [[ "$RESOLUTION" == *"1280x720"* ]]; then
              echo "✅ Resolution: PASS"
              QUALITY_SCORE=$((QUALITY_SCORE + 25))
            else
              echo "⚠️ Resolution: ACCEPTABLE ($RESOLUTION)"
              QUALITY_SCORE=$((QUALITY_SCORE + 15))
            fi
            
            # Video codec check
            CODEC=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=codec_name -of csv="p=0" "$FINAL_VIDEO")
            if [[ "$CODEC" == "h264" ]] || [[ "$CODEC" == "h265" ]]; then
              echo "✅ Codec: PASS ($CODEC)"
              QUALITY_SCORE=$((QUALITY_SCORE + 25))
            else
              echo "⚠️ Codec: ACCEPTABLE ($CODEC)"
              QUALITY_SCORE=$((QUALITY_SCORE + 15))
            fi
            
            echo ""
            echo "=== Final Quality Score: $QUALITY_SCORE/100 ==="
            
            if [ "$QUALITY_SCORE" -ge 80 ]; then
              echo "🎉 HIGH QUALITY: Video meets professional standards"
            elif [ "$QUALITY_SCORE" -ge 60 ]; then
              echo "✅ ACCEPTABLE: Video meets basic requirements"
            else
              echo "⚠️ NEEDS IMPROVEMENT: Video quality below standards"
            fi
            
            # Save quality report
            cat > "quality_report.txt" << EOF
News Video Quality Report
========================
Generated: \$(date)
Final Video: $FINAL_VIDEO

Technical Specifications:
- Duration: ${DURATION}s (target: ${EXPECTED_DURATION}s)
- Resolution: $RESOLUTION
- Frame Rate: $FPS
- Codec: $CODEC
- File Size: $(numfmt --to=iec-i --suffix=B $FILE_SIZE)

Quality Score: $QUALITY_SCORE/100

EOF
            
          else
            echo "❌ No final video found for verification"
            echo "Quality Score: 0/100" > "quality_report.txt"
          fi

      - name: Upload Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-verification
          path: ${{ needs.setup.outputs.project_dir }}/final/quality_report.txt
