name: "AI News Video Generation v4 - Enhanced"

on:
  workflow_dispatch:
    inputs:
      duration:
        description: "Video duration in seconds"
        required: true
        default: "30"
        type: string
      topic:
        description: "News topic"
        required: true
        default: "Latest AI technology"
        type: string

env:
  CLAUDE_CODE_CI_MODE: "true"
  CLAUDE_CODE_AUTO_APPROVE_MCP: "true"
  PROJECT_NAME: "ai-news-video-v4"

jobs:
  setup:
    name: "Setup & Planning"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      scene_count: ${{ steps.setup.outputs.scene_count }}
      workflow_start: ${{ steps.setup.outputs.workflow_start }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Setup Project Environment
        id: setup
        run: |
          # CRITICAL: Use date command instead of github.run_started_at (prevents empty timestamp issue)
          echo "workflow_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
          
          # Dynamic scene calculation from duration input
          DURATION="${{ inputs.duration }}"
          SCENE_COUNT=$(( (DURATION + 4) / 5 ))  # 5 seconds per scene, rounded up
          echo "scene_count=${SCENE_COUNT}" >> $GITHUB_OUTPUT
          
          # Create project directory with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/${PROJECT_NAME}-${TIMESTAMP}"
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          
          # Create comprehensive directory structure
          mkdir -p "${PROJECT_DIR}/media/images"
          mkdir -p "${PROJECT_DIR}/media/videos" 
          mkdir -p "${PROJECT_DIR}/media/audio"
          mkdir -p "${PROJECT_DIR}/metadata"
          mkdir -p "${PROJECT_DIR}/logs"
          mkdir -p "${PROJECT_DIR}/final"
          
          echo "‚úÖ Setup complete: ${SCENE_COUNT} scenes for ${DURATION}s video"
          echo "üìÅ Project directory: ${PROJECT_DIR}"

      - name: Upload Setup Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-setup
          path: ${{ steps.setup.outputs.project_dir }}

  phase-1-planning:
    name: "Phase 1: Content Planning & Structure"
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 8
    outputs:
      planning_complete: ${{ steps.planning.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Setup
        uses: actions/download-artifact@v4
        with:
          name: project-setup
          path: ${{ needs.setup.outputs.project_dir }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: AI News Content Planning
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_COUNT="${{ needs.setup.outputs.scene_count }}"
          
          # Enhanced planning prompt for news video
          PLANNING_PROMPT="Create comprehensive AI news video plan:
          
          Topic: ${{ inputs.topic }}
          Duration: ${{ inputs.duration }} seconds
          Scene Count: ${SCENE_COUNT} scenes (5 seconds each)
          
          Requirements:
          1. Professional news structure (hook, content, conclusion)
          2. Visual storytelling for each scene
          3. Character consistency with same_character_seed
          4. Professional newscaster persona
          5. Scene-by-scene breakdown with specific prompts
          
          Save detailed plan to: ${PROJECT_DIR}/metadata/content-plan.json
          Include: scene descriptions, visual prompts, narration script, timing breakdown"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "planning-ccsdk,web-search-claude,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$PLANNING_PROMPT"
          
          # Verify planning output
          if [ -f "${PROJECT_DIR}/metadata/content-plan.json" ]; then
            echo "‚úÖ Content planning completed"
            echo "complete=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Planning failed - no output file"
            echo "complete=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Planning Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-1-planning
          path: ${{ needs.setup.outputs.project_dir }}

  phase-2-parallel-assets:
    name: "Phase 2: Asset Creation (Parallel)"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning]
    timeout-minutes: 15
    strategy:
      matrix:
        asset_type: [newscaster, narration, bgm]
      max-parallel: 3
    outputs:
      assets_complete: ${{ steps.assets.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase-1-planning
          path: ${{ needs.setup.outputs.project_dir }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Check MCP Connection Window
        run: |
          WORKFLOW_START="${{ needs.setup.outputs.workflow_start }}"
          CURRENT_TIME=$(date -Iseconds)
          
          # Calculate elapsed time in minutes
          START_EPOCH=$(date -d "$WORKFLOW_START" +%s)
          CURRENT_EPOCH=$(date +%s)
          ELAPSED_MINUTES=$(( (CURRENT_EPOCH - START_EPOCH) / 60 ))
          
          echo "‚è±Ô∏è Elapsed time: ${ELAPSED_MINUTES} minutes"
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "‚úÖ MCP connection safe window (${ELAPSED_MINUTES}min < 12min)"
          else
            echo "‚ö†Ô∏è MCP connection risk - using fallback (${ELAPSED_MINUTES}min >= 12min)"
            exit 1
          fi

      - name: Generate Asset - ${{ matrix.asset_type }}
        id: assets
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          ASSET_TYPE="${{ matrix.asset_type }}"
          
          case "$ASSET_TYPE" in
            "newscaster")
              SAVE_PATH="${PROJECT_DIR}/media/images/newscaster.png"
              URL_PATH="${PROJECT_DIR}/media/images/newscaster-url.txt"
              
              ASSET_PROMPT="Generate professional news anchor character:
              
              Description: Professional newscaster, business suit, confident expression, studio background, high quality, realistic
              Style: Professional photography, 4K quality, studio lighting
              Seed: 12345 (for character consistency)
              
              Steps:
              1. Generate image with mcp__t2i-kamui-imagen3__imagen_t2i
              2. Save image to: ${SAVE_PATH}
              3. Save Google URL to: ${URL_PATH}
              4. Execute: ls -la ${PROJECT_DIR}/media/images/
              5. Download URL immediately with curl to prevent expiration"
              
              TOOLS="mcp__t2i-kamui-imagen3__imagen_t2i,Write,Bash"
              ;;
              
            "narration")
              SAVE_PATH="${PROJECT_DIR}/media/audio/narration.mp3"
              
              ASSET_PROMPT="Generate professional news narration:
              
              Text: Based on content plan, create ${{ inputs.duration }}-second narration about ${{ inputs.topic }}
              Voice: Professional news anchor voice, clear articulation, appropriate pace
              Quality: High quality for lip sync compatibility
              
              Steps:
              1. Read content plan from ${PROJECT_DIR}/metadata/content-plan.json
              2. Generate narration with mcp__t2s-fal-minimax-speech-02-turbo
              3. Save audio to: ${SAVE_PATH}
              4. Verify audio duration matches target"
              
              TOOLS="mcp__t2s-*,Read,Write,Bash"
              ;;
              
            "bgm")
              SAVE_PATH="${PROJECT_DIR}/media/audio/bgm.wav"
              
              ASSET_PROMPT="Generate professional news background music:
              
              Style: Subtle, professional, news-appropriate
              Duration: ${{ inputs.duration }} seconds
              Volume: Background level (-20dB for mixing)
              
              Steps:
              1. Generate BGM with mcp__t2m-google-lyria
              2. Save to: ${SAVE_PATH}
              3. Verify audio properties"
              
              TOOLS="mcp__t2m-*,Write,Bash"
              ;;
          esac
          
          # Execute with enhanced error handling
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "$TOOLS" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$ASSET_PROMPT"
          
          # Enhanced validation with retry logic
          if [ -f "$SAVE_PATH" ]; then
            FILE_SIZE=$(stat -c%s "$SAVE_PATH" 2>/dev/null || echo 0)
            
            # Asset-specific size validation
            case "$ASSET_TYPE" in
              "newscaster")
                MIN_SIZE=10000  # 10KB minimum for images
                ;;
              "narration"|"bgm")
                MIN_SIZE=100000  # 100KB minimum for audio
                ;;
            esac
            
            if [ "$FILE_SIZE" -gt "$MIN_SIZE" ]; then
              echo "‚úÖ Valid $ASSET_TYPE asset: $SAVE_PATH (${FILE_SIZE} bytes)"
              echo "complete=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è $ASSET_TYPE too small (${FILE_SIZE} bytes), attempting retry with different parameters"
              
              # Retry with modified parameters
              RETRY_PROMPT="Retry $ASSET_TYPE generation with enhanced parameters:
              - Use different seed/voice/style for variation
              - Ensure high quality output
              - Save to: $SAVE_PATH
              - Verify file size > $MIN_SIZE bytes"
              
              npx @anthropic-ai/claude-code \
                --mcp-config ".claude/mcp-kamuicode.json" \
                --allowedTools "$TOOLS" \
                --max-turns 40 \
                --permission-mode "acceptEdits" \
                -p "$RETRY_PROMPT"
              
              # Re-validate after retry
              if [ -f "$SAVE_PATH" ] && [ $(stat -c%s "$SAVE_PATH") -gt "$MIN_SIZE" ]; then
                echo "‚úÖ Retry successful for $ASSET_TYPE"
                echo "complete=true" >> $GITHUB_OUTPUT
              else
                echo "‚ùå $ASSET_TYPE generation failed after retry"
                echo "complete=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚ùå $ASSET_TYPE file not found: $SAVE_PATH"
            echo "complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Asset Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-2-assets-${{ matrix.asset_type }}
          path: ${{ needs.setup.outputs.project_dir }}

  phase-3-scene-generation:
    name: "Phase 3: Scene Generation (T2I‚ÜíI2V Pipeline)"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning, phase-2-parallel-assets]
    timeout-minutes: 25
    strategy:
      matrix:
        scene: [1, 2, 3, 4, 5, 6]
      max-parallel: 6
    outputs:
      scenes_complete: ${{ steps.scenes.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Previous Artifacts
        run: |
          # Download all previous phase artifacts
          mkdir -p ${{ needs.setup.outputs.project_dir }}
        
      - name: Download Phase 1 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase-1-planning
          path: ${{ needs.setup.outputs.project_dir }}

      - name: Download Phase 2 Assets
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-newscaster
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Generate Scene ${{ matrix.scene }} - T2I‚ÜíI2V Pipeline
        id: scenes
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check MCP connection window before processing
          WORKFLOW_START="${{ needs.setup.outputs.workflow_start }}"
          CURRENT_TIME=$(date -Iseconds)
          START_EPOCH=$(date -d "$WORKFLOW_START" +%s)
          CURRENT_EPOCH=$(date +%s)
          ELAPSED_MINUTES=$(( (CURRENT_EPOCH - START_EPOCH) / 60 ))
          
          echo "‚è±Ô∏è Scene ${SCENE_NUM}: Elapsed time ${ELAPSED_MINUTES} minutes"
          
          if [ $ELAPSED_MINUTES -ge 15 ]; then
            echo "‚ùå MCP connection expired - cannot generate scene"
            echo "complete=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # CRITICAL: T2I‚ÜíI2V in SAME job to prevent URL expiration
          IMAGE_SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          IMAGE_URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          VIDEO_SAVE_PATH="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}.mp4"
          
          # Enhanced T2I‚ÜíI2V pipeline prompt with retry logic
          SCENE_PROMPT="Complete T2I‚ÜíI2V pipeline for Scene ${SCENE_NUM}:

          Phase 1 - Image Generation:
          1. Read content plan: ${PROJECT_DIR}/metadata/content-plan.json
          2. Generate scene ${SCENE_NUM} image with specific prompt from plan
          3. Use professional news visual style, high quality
          4. Save image to: ${IMAGE_SAVE_PATH}
          5. Save Google URL to: ${IMAGE_URL_PATH}
          6. Verify image file size > 10KB
          
          Phase 2 - Immediate I2V Conversion (URL expiration prevention):
          7. Read Google URL from: ${IMAGE_URL_PATH}
          8. Generate 8-second video with mcp__i2v-kamui-hailuo-02-pro
          9. Save video to: ${VIDEO_SAVE_PATH}
          10. Verify video file size > 300KB and duration ‚â• 5 seconds
          
          Phase 3 - Validation & Retry:
          11. If image < 10KB: retry with different seed
          12. If video < 300KB: retry I2V with different parameters
          13. Execute: ls -la ${PROJECT_DIR}/media/{images,videos}/
          
          CRITICAL: Complete both T2I and I2V in this single execution to prevent URL expiration!"
          
          # Execute T2I‚ÜíI2V pipeline with enhanced parameters
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,mcp__i2v-*,Read,Write,Bash" \
            --max-turns 80 \
            --permission-mode "acceptEdits" \
            -p "$SCENE_PROMPT"
          
          # Enhanced validation with detailed logging
          IMAGE_VALID=false
          VIDEO_VALID=false
          
          if [ -f "$IMAGE_SAVE_PATH" ]; then
            IMAGE_SIZE=$(stat -c%s "$IMAGE_SAVE_PATH" 2>/dev/null || echo 0)
            if [ "$IMAGE_SIZE" -gt 10000 ]; then
              echo "‚úÖ Scene ${SCENE_NUM} image valid: ${IMAGE_SIZE} bytes"
              IMAGE_VALID=true
            else
              echo "‚ö†Ô∏è Scene ${SCENE_NUM} image too small: ${IMAGE_SIZE} bytes"
            fi
          else
            echo "‚ùå Scene ${SCENE_NUM} image not found"
          fi
          
          if [ -f "$VIDEO_SAVE_PATH" ]; then
            VIDEO_SIZE=$(stat -c%s "$VIDEO_SAVE_PATH" 2>/dev/null || echo 0)
            if [ "$VIDEO_SIZE" -gt 300000 ]; then
              echo "‚úÖ Scene ${SCENE_NUM} video valid: ${VIDEO_SIZE} bytes"
              VIDEO_VALID=true
            else
              echo "‚ö†Ô∏è Scene ${SCENE_NUM} video too small: ${VIDEO_SIZE} bytes"
            fi
          else
            echo "‚ùå Scene ${SCENE_NUM} video not found"
          fi
          
          # Overall scene completion status
          if [ "$IMAGE_VALID" = true ] && [ "$VIDEO_VALID" = true ]; then
            echo "‚úÖ Scene ${SCENE_NUM} complete: Both image and video generated successfully"
            echo "complete=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Scene ${SCENE_NUM} incomplete: Image=$IMAGE_VALID, Video=$VIDEO_VALID"
            echo "complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Scene Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-3-scene-${{ matrix.scene }}
          path: ${{ needs.setup.outputs.project_dir }}

  phase-4-editing-plan:
    name: "Phase 4: Video Editing Plan Analysis"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning, phase-2-parallel-assets, phase-3-scene-generation]
    timeout-minutes: 10
    outputs:
      editing_plan_complete: ${{ steps.editing.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Scene Artifacts
        run: |
          mkdir -p ${{ needs.setup.outputs.project_dir }}

      - name: Download Planning Artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase-1-planning
          path: ${{ needs.setup.outputs.project_dir }}

      - name: Download Scene Artifacts
        run: |
          for scene in 1 2 3 4 5 6; do
            echo "Downloading scene $scene artifacts..."
          done
        
      - name: Download Scene 1
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-1
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Scene 2
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-2
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Scene 3
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-3
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Scene 4
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-4
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Scene 5
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-5
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Scene 6
        uses: actions/download-artifact@v4
        with:
          name: phase-3-scene-6
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Assets
        run: |
          # Download all asset types
          echo "Downloading asset artifacts..."

      - name: Download Newscaster Asset
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-newscaster
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Narration Asset
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-narration
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download BGM Asset
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-bgm
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Create Professional Editing Plan
        id: editing
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_COUNT="${{ needs.setup.outputs.scene_count }}"
          
          echo "üìã Creating professional editing plan for ${SCENE_COUNT} scenes"
          
          # List available materials
          echo "Available materials:"
          find "${PROJECT_DIR}" -name "*.mp4" -o -name "*.mp3" -o -name "*.wav" -o -name "*.png" | sort
          
          EDITING_PROMPT="Analyze all generated materials and create professional news video editing plan:

          Available Materials:
          - Scene videos: ${PROJECT_DIR}/media/videos/scene*.mp4 (8s each)
          - Newscaster: ${PROJECT_DIR}/media/images/newscaster.png
          - Narration: ${PROJECT_DIR}/media/audio/narration.mp3 (${{ inputs.duration }}s)
          - BGM: ${PROJECT_DIR}/media/audio/bgm.wav
          - Content plan: ${PROJECT_DIR}/metadata/content-plan.json

          Create comprehensive editing plan:
          1. Analyze all available files and their properties
          2. Design optimal timeline structure for ${{ inputs.duration }}-second news video
          3. Plan scene transitions and timing
          4. Audio mixing strategy (narration + BGM levels)
          5. Generate precise FFmpeg command sequence
          6. Include quality checks and validation steps

          Save plan to: ${PROJECT_DIR}/metadata/editing-plan.json
          Include: timeline, ffmpeg commands, quality criteria, fallback options"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "acceptEdits" \
            -p "$EDITING_PROMPT"
          
          # Verify editing plan creation
          if [ -f "${PROJECT_DIR}/metadata/editing-plan.json" ]; then
            echo "‚úÖ Editing plan created successfully"
            echo "complete=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Editing plan creation failed"
            echo "complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Editing Plan
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-4-editing-plan
          path: ${{ needs.setup.outputs.project_dir }}

  phase-5-lipsync:
    name: "Phase 5: Lip Sync Processing"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning, phase-2-parallel-assets, phase-3-scene-generation]
    timeout-minutes: 15
    outputs:
      lipsync_complete: ${{ steps.lipsync.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Required Artifacts
        run: |
          mkdir -p ${{ needs.setup.outputs.project_dir }}

      - name: Download Newscaster
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-newscaster
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Narration
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-narration
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Check MCP Connection Status
        run: |
          WORKFLOW_START="${{ needs.setup.outputs.workflow_start }}"
          START_EPOCH=$(date -d "$WORKFLOW_START" +%s)
          CURRENT_EPOCH=$(date +%s)
          ELAPSED_MINUTES=$(( (CURRENT_EPOCH - START_EPOCH) / 60 ))
          
          echo "‚è±Ô∏è Lip sync phase: Elapsed time ${ELAPSED_MINUTES} minutes"
          
          if [ $ELAPSED_MINUTES -ge 18 ]; then
            echo "‚ö†Ô∏è MCP connection likely expired - may need fallback"
          fi

      - name: Apply Lip Sync to Newscaster
        id: lipsync
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          NEWSCASTER_IMAGE="${PROJECT_DIR}/media/images/newscaster.png"
          NARRATION_AUDIO="${PROJECT_DIR}/media/audio/narration.mp3"
          LIPSYNC_OUTPUT="${PROJECT_DIR}/media/videos/newscaster-lipsync.mp4"
          
          # Check if required files exist
          if [ ! -f "$NEWSCASTER_IMAGE" ]; then
            echo "‚ö†Ô∏è Newscaster image not found, checking alternatives..."
            # Search for any available image
            NEWSCASTER_IMAGE=$(find "$PROJECT_DIR" -name "*.png" | head -1)
            if [ -z "$NEWSCASTER_IMAGE" ]; then
              echo "‚ùå No newscaster image available for lip sync"
              echo "complete=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          if [ ! -f "$NARRATION_AUDIO" ]; then
            echo "‚ùå Narration audio not found for lip sync"
            echo "complete=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üé¨ Applying lip sync: $NEWSCASTER_IMAGE + $NARRATION_AUDIO"
          
          LIPSYNC_PROMPT="Apply high-precision lip sync to newscaster:

          Input Files:
          - Video/Image: ${NEWSCASTER_IMAGE}
          - Audio: ${NARRATION_AUDIO}
          
          Requirements:
          - Precision: ¬±50ms synchronization accuracy
          - Quality: Professional news broadcast standard
          - Duration: Match narration length exactly
          - Output: ${LIPSYNC_OUTPUT}
          
          Steps:
          1. Verify input file accessibility and properties
          2. Apply lip sync with mcp__v2v-kamui-creatify-lipsync or similar
          3. Validate output quality (size > 1MB, duration > 10s)
          4. Save result to specified path"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__v2v-*,mcp__i2v-*,Read,Write,Bash" \
            --max-turns 60 \
            --permission-mode "acceptEdits" \
            -p "$LIPSYNC_PROMPT"
          
          # Validate lip sync output
          if [ -f "$LIPSYNC_OUTPUT" ]; then
            VIDEO_SIZE=$(stat -c%s "$LIPSYNC_OUTPUT" 2>/dev/null || echo 0)
            if [ "$VIDEO_SIZE" -gt 1000000 ]; then  # 1MB minimum
              echo "‚úÖ Lip sync completed successfully: ${VIDEO_SIZE} bytes"
              echo "complete=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Lip sync output too small: ${VIDEO_SIZE} bytes"
              echo "complete=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Lip sync output not found"
            echo "complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Lip Sync Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-5-lipsync
          path: ${{ needs.setup.outputs.project_dir }}

  phase-6-final-composition:
    name: "Phase 6: Final Video Composition"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning, phase-2-parallel-assets, phase-3-scene-generation, phase-4-editing-plan, phase-5-lipsync]
    timeout-minutes: 15
    outputs:
      final_video: ${{ steps.compose.outputs.final_video }}
      composition_complete: ${{ steps.compose.outputs.complete }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Required Artifacts
        run: |
          mkdir -p ${{ needs.setup.outputs.project_dir }}
          echo "Downloading all artifacts for final composition..."

      - name: Download Editing Plan
        uses: actions/download-artifact@v4
        with:
          name: phase-4-editing-plan
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download Lip Sync Results
        uses: actions/download-artifact@v4
        with:
          name: phase-5-lipsync
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Download All Scene Videos
        run: |
          for scene in 1 2 3 4 5 6; do
            echo "Attempting to download scene $scene..."
          done

      - name: Download Scene Videos
        uses: actions/download-artifact@v4
        with:
          pattern: phase-3-scene-*
          path: ${{ needs.setup.outputs.project_dir }}
          merge-multiple: true
        continue-on-error: true

      - name: Download BGM
        uses: actions/download-artifact@v4
        with:
          name: phase-2-assets-bgm
          path: ${{ needs.setup.outputs.project_dir }}
        continue-on-error: true

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Final Video Composition
        id: compose
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          FINAL_OUTPUT="${PROJECT_DIR}/final/ai-news-video-final.mp4"
          
          mkdir -p "${PROJECT_DIR}/final"
          
          echo "üé¨ Starting final video composition"
          echo "Target duration: ${{ inputs.duration }} seconds"
          
          # List all available materials
          echo "Available materials:"
          find "$PROJECT_DIR" -type f \( -name "*.mp4" -o -name "*.mp3" -o -name "*.wav" \) | sort
          
          # Count available scene videos
          SCENE_VIDEOS=$(find "$PROJECT_DIR" -name "scene*.mp4" | wc -l)
          echo "üìä Found ${SCENE_VIDEOS} scene videos"
          
          # Check for required components
          LIPSYNC_VIDEO=$(find "$PROJECT_DIR" -name "*lipsync*.mp4" | head -1)
          BGM_AUDIO=$(find "$PROJECT_DIR" -name "bgm.*" | head -1)
          NARRATION_AUDIO=$(find "$PROJECT_DIR" -name "narration.*" | head -1)
          
          COMPOSITION_PROMPT="Create professional news video final composition:

          Available Materials:
          - Scene videos: ${SCENE_VIDEOS} found in ${PROJECT_DIR}/media/videos/
          - Lip sync video: ${LIPSYNC_VIDEO}
          - BGM: ${BGM_AUDIO}
          - Narration: ${NARRATION_AUDIO}
          - Editing plan: ${PROJECT_DIR}/metadata/editing-plan.json
          
          Requirements:
          - Final duration: ${{ inputs.duration }} seconds
          - Professional news video quality
          - Audio levels: Narration (-14 LUFS), BGM (-20dB background)
          - Resolution: 1920x1080, 30fps
          - Format: MP4, H.264 codec
          
          Steps:
          1. Analyze editing plan and available materials
          2. Create FFmpeg command sequence for optimal composition
          3. Handle missing materials with fallbacks
          4. Execute video composition with quality validation
          5. Save final video: ${FINAL_OUTPUT}
          6. Generate metadata file with video properties
          
          CRITICAL: Ensure audio synchronization and professional quality output"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 60 \
            --permission-mode "acceptEdits" \
            -p "$COMPOSITION_PROMPT"
          
          # Validate final output
          if [ -f "$FINAL_OUTPUT" ]; then
            VIDEO_SIZE=$(stat -c%s "$FINAL_OUTPUT" 2>/dev/null || echo 0)
            
            # Check video properties with FFprobe
            if ffprobe "$FINAL_OUTPUT" >/dev/null 2>&1; then
              DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_OUTPUT")
              echo "‚úÖ Final video created successfully:"
              echo "   File: $FINAL_OUTPUT"
              echo "   Size: ${VIDEO_SIZE} bytes"
              echo "   Duration: ${DURATION} seconds"
              echo "final_video=${FINAL_OUTPUT}" >> $GITHUB_OUTPUT
              echo "complete=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Final video file is corrupted"
              echo "complete=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Final video composition failed - no output file"
            echo "complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Final Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-video-composition
          path: ${{ needs.setup.outputs.project_dir }}

  progressive-reporting:
    name: "Progressive Workflow Reporting"
    runs-on: ubuntu-latest
    needs: [setup, phase-1-planning, phase-2-parallel-assets, phase-3-scene-generation, phase-4-editing-plan, phase-5-lipsync, phase-6-final-composition]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Comprehensive Report
        run: |
          echo "# AI News Video Generation v4 - Workflow Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Topic**: ${{ inputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: ${{ inputs.duration }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "**Scene Count**: ${{ needs.setup.outputs.scene_count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Start**: ${{ needs.setup.outputs.workflow_start }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Phase Status Summary" >> $GITHUB_STEP_SUMMARY
          
          # Phase 1 Status
          if [ "${{ needs.phase-1-planning.outputs.planning_complete }}" = "true" ]; then
            echo "‚úÖ **Phase 1**: Content Planning - COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Phase 1**: Content Planning - FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 2 Status (Matrix)
          echo "üìä **Phase 2**: Asset Creation (Parallel)" >> $GITHUB_STEP_SUMMARY
          
          # Phase 3 Status (Matrix)
          echo "üé¨ **Phase 3**: Scene Generation (T2I‚ÜíI2V Pipeline)" >> $GITHUB_STEP_SUMMARY
          
          # Phase 4 Status
          if [ "${{ needs.phase-4-editing-plan.outputs.editing_plan_complete }}" = "true" ]; then
            echo "‚úÖ **Phase 4**: Editing Plan - COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Phase 4**: Editing Plan - FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 5 Status
          if [ "${{ needs.phase-5-lipsync.outputs.lipsync_complete }}" = "true" ]; then
            echo "‚úÖ **Phase 5**: Lip Sync - COMPLETED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Phase 5**: Lip Sync - FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Phase 6 Status
          if [ "${{ needs.phase-6-final-composition.outputs.composition_complete }}" = "true" ]; then
            echo "‚úÖ **Phase 6**: Final Composition - COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Final Video**: ${{ needs.phase-6-final-composition.outputs.final_video }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Phase 6**: Final Composition - FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Project Directory: \`${{ needs.setup.outputs.project_dir }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- All artifacts preserved for analysis and reuse" >> $GITHUB_STEP_SUMMARY

      - name: Archive All Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complete-workflow-archive
          path: .
          retention-days: 30