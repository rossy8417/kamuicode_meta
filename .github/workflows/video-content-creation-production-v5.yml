name: "Video Content Creation Production V5"
run-name: "🎥 Production V5: ${{ github.event.inputs.video_concept }}"

on:
  workflow_dispatch:
    inputs:
      video_concept:
        description: '動画コンセプト・テーマ'
        required: true
        default: 'AIとロボットが協力する未来の製品紹介動画'
        type: string
      target_audience:
        description: 'ターゲット視聴者'
        required: true
        default: 'professional'
        type: choice
        options:
        - general
        - business
        - young_adult
        - professional
        - creative
      video_length:
        description: '動画尺 (秒)'
        required: true
        default: '30'
        type: choice
        options:
        - '15'
        - '30'
        - '60'
      video_style:
        description: '動画スタイル'
        required: true
        default: 'cinematic'
        type: choice
        options:
        - cinematic
        - commercial
        - documentary
        - educational
        - artistic
      quality_setting:
        description: '画質設定'
        required: true
        default: 'high'
        type: choice
        options:
        - ultra
        - high
        - standard

permissions:
  contents: write
  actions: read

jobs:
  # Phase 1: 初期設定
  setup:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Verify MCP config exists
        id: check
        run: |
          echo "🔍 Checking MCP configuration..."
          if [ -f ".claude/mcp-kamuicode.json" ]; then
            echo "✅ MCP config found"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ MCP config not found"
            exit 1
          fi
          
      - name: Setup directories
        run: |
          mkdir -p generated/{concept,images,audio,video,final}
          
  # Phase 2: コンセプト作成 (Claude Code SDK Node)
  concept-planning:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.ready == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code@latest
          
      - name: Create concept with Claude Code SDK
        run: |
          mkdir -p generated/concept
          
          # Generate concept plan with Claude Code SDK and save to file
          claude -p "Create a detailed video concept plan for: '${{ github.event.inputs.video_concept }}'
          Target audience: ${{ github.event.inputs.target_audience }}
          Duration: ${{ github.event.inputs.video_length }} seconds
          Style: ${{ github.event.inputs.video_style }}
          
          Return ONLY a valid JSON object with the following structure:
          {
            \"title\": \"video title\",
            \"target_audience\": \"${{ github.event.inputs.target_audience }}\",
            \"duration\": ${{ github.event.inputs.video_length }},
            \"style\": \"${{ github.event.inputs.video_style }}\",
            \"total_scenes\": number_of_scenes,
            \"scenes\": [array of scene objects with descriptions],
            \"prompts\": {scene-specific prompts for image generation},
            \"timing\": {scene timing information},
            \"dialogue\": [array of dialogue/narration for each scene],
            \"audio_cues\": {background music and sound effects timing}
          }
          
          IMPORTANT: 
          - Generate 3-5 scenes based on ${{ github.event.inputs.video_length }} second duration
          - Include specific dialogue or narration text for each scene
          - Output ONLY valid JSON, no additional text or explanations" \
          --output-format json > claude_output.json
          
          # Extract the JSON from Claude Code SDK output and save to plan.json
          echo "🔍 Extracting JSON from Claude Code output..."
          if jq -e '.result' claude_output.json > /dev/null 2>&1; then
            # Extract from SDK metadata format
            jq -r '.result' claude_output.json | sed -n '/```json/,/```/p' | sed '1d;$d' > generated/concept/plan.json
          else
            # Assume direct JSON format (fallback)
            cat claude_output.json > generated/concept/plan.json
          fi
          
          # Validate extracted JSON
          if ! jq '.' generated/concept/plan.json > /dev/null 2>&1; then
            echo "❌ Failed to extract valid JSON, attempting alternative extraction..."
            # Alternative: extract JSON block from text content
            grep -A 1000 '```json' claude_output.json | grep -B 1000 '```' | head -n -1 | tail -n +2 > generated/concept/plan.json
          fi
          
          # Verify generated plan
          echo "📋 Generated concept plan:"
          cat generated/concept/plan.json | jq '.'
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
      - name: Upload concept
        uses: actions/upload-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
  # Phase 3: 音楽・音声生成 (先に実行)
  audio-generation:
    needs: concept-planning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Read MCP permissions from settings
        id: mcp_permissions
        run: |
          echo "📖 Reading MCP permissions..."
          # Extract MCP-only settings for GitHub Actions
          FULL_SETTINGS=$(cat .claude/settings.github-actions.json | jq -c .)
          echo "FULL_SETTINGS=$FULL_SETTINGS" >> $GITHUB_OUTPUT
          
      - name: Generate audio assets
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            1. Read concept from generated/concept/plan.json including dialogue/narration
            2. For each scene with dialogue:
               a. Generate narration/dialogue using t2s-fal-minimax-speech-02-turbo
               b. Use appropriate voice style for the content
               c. Save each audio file as scene_X_dialogue.wav
            3. Generate background music using t2m-google-lyria:
               - Style: ${{ github.event.inputs.video_style }}
               - Duration: ${{ github.event.inputs.video_length }} seconds
               - Save as background_music.wav
            4. Save all audio metadata to generated/audio/audio_assets.json with:
               - dialogue files and their scene mappings
               - background music file
               - timing information for each audio element
          system_prompt: |
            You are Claude Code in CI/CD with pre-configured MCP permissions.
            Generate both dialogue/narration and background music as specified.
          mcp_config: ".claude/mcp-kamuicode.json"
          settings: ${{ steps.mcp_permissions.outputs.FULL_SETTINGS }}
          allowed_tools: "View,mcp__t2m-google-lyria__*,mcp__t2s-fal-minimax-speech-02-turbo__*,Bash,Write,Read"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "30"
          
      - name: Upload audio
        uses: actions/upload-artifact@v4
        with:
          name: audio-${{ github.run_number }}
          path: |
            generated/audio/
            *.mp3
            *.wav
            
  # Phase 4: シーン数解析
  video-generation-prep:
    needs: concept-planning
    runs-on: ubuntu-latest
    outputs:
      scene_count: ${{ steps.count.outputs.scene_count }}
      scene_matrix: ${{ steps.count.outputs.scene_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Count scenes and create matrix
        id: count
        run: |
          echo "🔍 Analyzing scene count..."
          SCENE_COUNT=$(jq '.scenes | length' generated/concept/plan.json)
          echo "Found $SCENE_COUNT scenes"
          echo "scene_count=$SCENE_COUNT" >> $GITHUB_OUTPUT
          
          # Create matrix for sequential processing
          MATRIX_JSON=$(jq -c '[range(0; .scenes | length) | {scene: (. + 1)}]' generated/concept/plan.json)
          echo "scene_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix JSON: $MATRIX_JSON"
          
  # Phase 5: 逐次画像→動画生成 (V4新方式)
  scene-processing:
    needs: [concept-planning, audio-generation, video-generation-prep]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        scene: ${{ fromJson(needs.video-generation-prep.outputs.scene_matrix) }}
      max-parallel: 1  # 逐次処理でURL期限切れ防止
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download concept
        uses: actions/download-artifact@v4
        with:
          name: concept-${{ github.run_number }}
          path: generated/concept/
          
      - name: Read MCP permissions from settings
        id: mcp_permissions
        run: |
          echo "📖 Reading MCP permissions..."
          FULL_SETTINGS=$(cat .claude/settings.github-actions.json | jq -c .)
          echo "FULL_SETTINGS=$FULL_SETTINGS" >> $GITHUB_OUTPUT
          
      - name: Generate image for scene ${{ matrix.scene.scene }}
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            TASK: Generate ONLY scene ${{ matrix.scene.scene }} image
            
            1. Read generated/concept/plan.json
            2. Find scene ${{ matrix.scene.scene }} prompt and description
            3. Generate ONLY this scene's image using t2i-google-imagen3:
               - Use the specific prompt for scene ${{ matrix.scene.scene }}
               - Quality: ${{ github.event.inputs.quality_setting }}
               - Aspect ratio: 1:1 (default)
            4. Save scene info to scene_${{ matrix.scene.scene }}_image_info.json with:
               - scene_number: ${{ matrix.scene.scene }}
               - image_url: (the direct URL from Imagen3 - CRITICAL for immediate use)
               - prompt_used: (the actual prompt used)
               - generation_time: (timestamp)
               - description: (scene description)
            5. DO NOT download the image - keep the URL fresh for immediate video generation
            
            IMPORTANT: Save the image_url immediately for next step usage!
          system_prompt: |
            You are Claude Code in CI/CD. Generate only scene ${{ matrix.scene.scene }} image.
            Keep the image_url fresh by NOT downloading - it will be used immediately for video generation.
          mcp_config: ".claude/mcp-kamuicode.json"
          settings: ${{ steps.mcp_permissions.outputs.FULL_SETTINGS }}
          allowed_tools: "Read,Write,mcp__t2i-google-imagen3__*"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "15"
          
      - name: Generate video for scene ${{ matrix.scene.scene }} (immediate)
        run: |
          echo "🎬 Generating video for scene ${{ matrix.scene.scene }} using Claude Code SDK..."
          
          # Execute Claude Code SDK with local success pattern
          # Create combined settings with MCP and bash permissions
          cat > combined-settings.json << 'EOF'
{
  "permissions": {
    "allow": [
      "Read",
      "Write",
      "Bash(curl:*)",
      "Bash(ls:*)",
      "Bash(stat:*)",
      "Bash(file:*)",
      "Bash(mkdir:*)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(jq:*)",
      "Bash(pwd:*)",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_submit",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_status",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_result"
    ]
  }
}
EOF
          
          claude -p "TASK: Generate video for scene ${{ matrix.scene.scene }} with mandatory download
          
          CRITICAL: Follow LOCAL SUCCESS PATTERN that works:
          'For images/videos/3D generation: After generation completes, ALWAYS do URL download and open. Download to current directory. Always use full authenticated URL path (long for Google, short for FAL). No abbreviations. For I2V/I2I inputs use Google URLs, no abbreviations (not file paths!). Show saved file location with full path from ~.'
          
          STEP 1: Read image info and generate video
          1. Read scene_${{ matrix.scene.scene }}_image_info.json
          2. Extract image_url (fresh, no expiration)
          3. Use i2v-fal-hailuo-02-pro with image_url directly
          4. Poll until COMPLETED status
          5. Get FULL video URL from result
          
          STEP 2: MANDATORY DOWNLOAD (Critical Success Pattern)
          6. IMMEDIATELY after generation: Download video file
          7. Use FULL authenticated URL (no shortcuts/省略)
          8. Execute: curl -o 'scene_${{ matrix.scene.scene }}_video.mp4' '<FULL_VIDEO_URL>'
          9. Verify: ls -la scene_${{ matrix.scene.scene }}_video.mp4
          10. Check file size > 100KB
          11. Show full file path of saved video
          
          STEP 3: Create result info
          12. Save scene_${{ matrix.scene.scene }}_video_info.json with:
              - download_status: completed
              - video_file_path: scene_${{ matrix.scene.scene }}_video.mp4
              - file_size: actual bytes
              - full_path: complete file location
          
          REQUIREMENTS:
          - Video generation MUST be followed by immediate download  
          - Use complete authenticated URL without abbreviations
          - File must exist on filesystem before completion
          - Show full path of downloaded file" \
          --mcp-config .claude/mcp-kamuicode.json \
          --settings combined-settings.json \
          --output-format json > claude_response.json
          
          # Extract and verify result
          echo "📋 Claude Code response:"
          cat claude_response.json | jq '.'
          
          # Extract video URL from Claude Code response and download (2-stage URL handling)
          echo "🔍 Extracting video URL from Claude Code response..."
          
          # First, try direct video URL (old format)
          VIDEO_URL=$(cat claude_response.json | jq -r '.result' | grep -o 'https://v3\.fal\.media/files/[^"]*\.mp4' | head -1)
          
          if [ -n "$VIDEO_URL" ] && [ "$VIDEO_URL" != "null" ]; then
            echo "📥 Found direct video URL: $VIDEO_URL"
          else
            # Try queue URL (new format) - extract and resolve
            echo "🔍 Searching for queue URL..."
            QUEUE_URL=$(cat claude_response.json | jq -r '.result' | grep -o 'https://queue\.fal\.run/[^`]*' | head -1)
            
            if [ -n "$QUEUE_URL" ] && [ "$QUEUE_URL" != "null" ]; then
              echo "📥 Found queue URL: $QUEUE_URL"
              echo "🔄 Resolving queue URL to get actual video URL..."
              
              # Resolve queue URL to get video URL
              for resolve_attempt in 1 2 3; do
                echo "🔗 Queue resolve attempt $resolve_attempt/3..."
                QUEUE_RESPONSE=$(curl -s "$QUEUE_URL" --connect-timeout 15 --max-time 60)
                if [ $? -eq 0 ]; then
                  # Try multiple JSON paths for video URL
                  VIDEO_URL=$(echo "$QUEUE_RESPONSE" | jq -r '.video // .result.video // .data.video // .output.video // empty' 2>/dev/null)
                  if [ -n "$VIDEO_URL" ] && [ "$VIDEO_URL" != "null" ]; then
                    echo "✅ Resolved video URL: $VIDEO_URL"
                    break
                  else
                    echo "⚠️ Queue response received but no video URL found, retrying..."
                    sleep 3
                  fi
                else
                  echo "❌ Queue resolve attempt $resolve_attempt failed"
                  sleep 3
                fi
              done
            else
              # Try any other URL patterns
              echo "🔍 Searching for alternative URL patterns..."
              VIDEO_URL=$(cat claude_response.json | jq -r '.result' | grep -oE 'https?://[^\s"`]+\.mp4' | head -1)
              if [ -n "$VIDEO_URL" ] && [ "$VIDEO_URL" != "null" ]; then
                echo "📥 Found alternative video URL: $VIDEO_URL"
              fi
            fi
          fi
          
          # Download video if URL was found
          if [ -n "$VIDEO_URL" ] && [ "$VIDEO_URL" != "null" ]; then
            echo "⬇️ Downloading video file from: $VIDEO_URL"
            
            # Download video with retry logic
            DOWNLOAD_SUCCESS=false
            for attempt in 1 2 3; do
              echo "📡 Download attempt $attempt/3..."
              if curl -L -o "scene_${{ matrix.scene.scene }}_video.mp4" "$VIDEO_URL" --connect-timeout 30 --max-time 300; then
                echo "✅ Download attempt $attempt succeeded"
                DOWNLOAD_SUCCESS=true
                break
              else
                echo "❌ Download attempt $attempt failed"
                sleep 5
              fi
            done
            
            if [ "$DOWNLOAD_SUCCESS" = "false" ]; then
              echo "❌ All download attempts failed!"
              exit 1
            fi
          else
            echo "❌ No video URL found with any method!"
            echo "🔍 Debug: Claude Code response content:"
            cat claude_response.json | jq -r '.result' | head -10
            exit 1
          fi
          
          # Check for video file in multiple possible locations
          echo "🔍 Checking for video files in multiple locations..."
          
          # Possible file locations based on Claude Code behavior
          POSSIBLE_LOCATIONS=(
            "scene_${{ matrix.scene.scene }}_video.mp4"
            "projects/current-session/temp/scene_${{ matrix.scene.scene }}_video.mp4"
            "temp/scene_${{ matrix.scene.scene }}_video.mp4"
            "*/scene_${{ matrix.scene.scene }}_video.mp4"
          )
          
          VIDEO_FILE_FOUND=""
          for location in "${POSSIBLE_LOCATIONS[@]}"; do
            # Use find to handle wildcard patterns
            FOUND_FILES=$(find . -path "./$location" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_FILES" ]; then
              VIDEO_FILE_FOUND="$FOUND_FILES"
              echo "✅ Found video file at: $VIDEO_FILE_FOUND"
              break
            fi
          done
          
          # If Claude Code generated video in different location, copy it
          if [ -n "$VIDEO_FILE_FOUND" ]; then
            if [ "$VIDEO_FILE_FOUND" != "./scene_${{ matrix.scene.scene }}_video.mp4" ]; then
              echo "📂 Copying video file to expected location..."
              cp "$VIDEO_FILE_FOUND" "scene_${{ matrix.scene.scene }}_video.mp4"
              echo "✅ Video file copied to: scene_${{ matrix.scene.scene }}_video.mp4"
            fi
            
            FILE_SIZE=$(stat -c%s "scene_${{ matrix.scene.scene }}_video.mp4" 2>/dev/null || stat -f%z "scene_${{ matrix.scene.scene }}_video.mp4")
            echo "✅ Final video file: scene_${{ matrix.scene.scene }}_video.mp4 (${FILE_SIZE} bytes)"
            
            # Verify file is not corrupted (minimum 50KB for valid video)
            if [ "$FILE_SIZE" -lt 50000 ]; then
              echo "⚠️ Warning: File size is very small (${FILE_SIZE} bytes) - may be corrupted"
              file "scene_${{ matrix.scene.scene }}_video.mp4" || echo "File command failed"
            else
              echo "✅ File size looks good (${FILE_SIZE} bytes)"
            fi
          else
            echo "❌ ERROR: Video file not found in any expected location!"
            echo "🔍 Searching for any MP4 files..."
            find . -name "*.mp4" -type f 2>/dev/null | head -10
            echo "📁 Current directory structure:"
            find . -maxdepth 3 -type d 2>/dev/null | head -20
            exit 1
          fi
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
          
      - name: Verify video file exists
        run: |
          echo "🔍 Verifying scene ${{ matrix.scene.scene }} video file..."
          if [ -f "scene_${{ matrix.scene.scene }}_video.mp4" ]; then
            FILE_SIZE=$(stat -f%z "scene_${{ matrix.scene.scene }}_video.mp4" 2>/dev/null || stat -c%s "scene_${{ matrix.scene.scene }}_video.mp4")
            echo "✅ Video file found: scene_${{ matrix.scene.scene }}_video.mp4 (${FILE_SIZE} bytes)"
            if [ $FILE_SIZE -lt 100000 ]; then
              echo "⚠️ Warning: File size is small (${FILE_SIZE} bytes)"
            fi
          else
            echo "❌ ERROR: Video file not found!"
            echo "📁 Current directory contents:"
            ls -la
            exit 1
          fi
          
      - name: Upload scene assets
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene.scene }}-${{ github.run_number }}
          path: |
            scene_${{ matrix.scene.scene }}_video.mp4
            scene_${{ matrix.scene.scene }}_*.json
          if-no-files-found: error
            
  # Phase 6: 動画・音声結合 (Claude Code SDK Node)
  video-assembly:
    needs: scene-processing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all assets
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_number }}"
          merge-multiple: true
          
      - name: Install FFmpeg and Claude Code CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          npm install -g @anthropic-ai/claude-code@latest
          ffmpeg -version
          
      - name: Analyze and prepare video files
        run: |
          echo "🎥 Analyzing available video files..."
          mkdir -p videos generated/assembly
          
          echo "📁 Current directory structure:"
          find . -name "*.mp4" -type f 2>/dev/null || echo "No MP4 files found in current directory"
          
          echo "📁 All downloaded artifacts:"
          find . -name "scene_*" -type f 2>/dev/null || echo "No scene files found"
          
          # Find all scene video files with more flexible search
          echo "🔍 Searching for scene video files..."
          FOUND_VIDEOS=0
          
          # Check multiple possible locations
          for pattern in "scene_*_video.mp4" "*/scene_*_video.mp4" "scene-*/scene_*_video.mp4"; do
            for file in $pattern; do
              if [ -f "$file" ]; then
                echo "✅ Found: $file"
                cp "$file" videos/
                FOUND_VIDEOS=$((FOUND_VIDEOS + 1))
              fi
            done
          done
          
          echo "📊 Found $FOUND_VIDEOS video files"
          echo "📁 Videos directory contents:"
          ls -la videos/
          
          if [ $FOUND_VIDEOS -eq 0 ]; then
            echo "❌ No video files found! Checking all files..."
            find . -type f -name "*.mp4" -o -name "*video*" | head -20
            echo "📋 Directory structure:"
            find . -maxdepth 3 -type d | head -20
          fi
          
      - name: Assemble final video with Claude Code SDK
        run: |
          # Generate FFmpeg assembly script with Claude Code SDK
          claude -p "You are an expert video editor working with FFmpeg. 
          
          TASK: Create a comprehensive FFmpeg bash script to assemble a final video from multiple scene videos.
          
          CURRENT SITUATION:
          - Scene video files are in the videos/ directory (scene_1_video.mp4, scene_2_video.mp4, etc.)
          - Background music file may be available as background_music.wav
          - Audio dialogue files may be available as scene_*_dialogue.wav
          
          OUTPUT REQUIREMENTS:
          Return ONLY a complete bash script that:
          1. Lists all available scene videos in proper order (scene_1, scene_2, etc.)
          2. Creates an FFmpeg concat file for video concatenation
          3. Concatenates all scene videos into one video
          4. Mixes background music and dialogue audio if available
          5. Applies final video optimization (H.264, AAC audio, web-optimized)
          6. Outputs final_video.mp4
          7. Handles missing files gracefully
          8. Includes error checking and logging
          
          IMPORTANT: Output ONLY the bash script content, no explanations or markdown formatting." \
          --output-format text > assemble_video.sh
          
          # Make the script executable and run it
          chmod +x assemble_video.sh
          echo "🎬 Generated FFmpeg assembly script:"
          cat assemble_video.sh
          echo ""
          echo "🎥 Executing video assembly..."
          ./assemble_video.sh
          
          echo "✅ Video assembly complete!"
          if [ -f "final_video.mp4" ]; then
            ls -lh final_video.mp4
          else
            echo "❌ final_video.mp4 not found"
            ls -la
          fi
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
      - name: Upload final video
        uses: actions/upload-artifact@v4
        with:
          name: final-video-${{ github.run_number }}
          path: |
            final_video.mp4
            generated/assembly/
            
  # Phase 7: 最終パッケージ
  final-package:
    needs: video-assembly
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_number }}"
          merge-multiple: true
          
      - name: Create final package
        run: |
          echo "📦 Creating final package..."
          
          # ディレクトリ作成
          mkdir -p generated/final
          
          # 最終動画をコピー
          if [ -f "final_video.mp4" ]; then
            cp final_video.mp4 generated/final/
            echo "✅ Final video included in package"
          fi
          
          # パッケージ情報
          cat > generated/final/package.json << EOF
          {
            "project": "Video Content Creation V4",
            "concept": "${{ github.event.inputs.video_concept }}",
            "duration": ${{ github.event.inputs.video_length }},
            "style": "${{ github.event.inputs.video_style }}",
            "audience": "${{ github.event.inputs.target_audience }}",
            "quality": "${{ github.event.inputs.quality_setting }}",
            "features": {
              "sequential_generation": true,
              "fresh_url_usage": true,
              "multiple_scenes": true,
              "dialogue_narration": true,
              "background_music": true,
              "ffmpeg_assembly": true
            },
            "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run": ${{ github.run_number }}
          }
          EOF
          
          # ファイルサイズ情報
          echo "📁 Final package contents:"
          ls -lh generated/final/
          if [ -f "generated/final/final_video.mp4" ]; then
            echo ""
            echo "🎥 Final video size: $(ls -lh generated/final/final_video.mp4 | awk '{print $5}')"
          fi
          
      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: final-package-v4-${{ github.run_number }}
          path: |
            generated/final/
          retention-days: 90
          
      - name: Upload production video
        uses: actions/upload-artifact@v4
        with:
          name: production-video-v4-${{ github.run_number }}
          path: |
            final_video.mp4
          retention-days: 90
          if-no-files-found: warn
          
      - name: Summary
        run: |
          echo "## 🎉 Video Content Creation V4 Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎥 Production Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Concept**: ${{ github.event.inputs.video_concept }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ github.event.inputs.video_length }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Style**: ${{ github.event.inputs.video_style }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ github.event.inputs.quality_setting }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deliverables" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: production-video-v4-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Package**: final-package-v4-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ V4 New Features" >> $GITHUB_STEP_SUMMARY
          echo "- **Sequential Processing**: Image→Video per scene for fresh URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Expiration Solution**: Generate and use images immediately" >> $GITHUB_STEP_SUMMARY
          echo "- **No Base64 Conversion**: Direct URL usage (proven method)" >> $GITHUB_STEP_SUMMARY
          echo "- **Improved Reliability**: Based on successful V1 pattern" >> $GITHUB_STEP_SUMMARY