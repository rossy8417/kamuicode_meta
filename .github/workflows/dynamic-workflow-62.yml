name: "üéØ Dynamic Workflow - Issue #62"
run-name: "üìä Dynamic | rossy8417 | Issue #62"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Source issue number"
        required: true
        default: "62"
      branch_name:
        description: "Working branch name"
        required: false
        default: "issue-62"

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  setup:
    name: "üöÄ Setup"
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      timestamp: ${{ steps.setup.outputs.timestamp }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Project Structure
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/issue-62-$TIMESTAMP"
          mkdir -p "$PROJECT_DIR"/{logs,metadata,temp,final,media}
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "‚úÖ Project structure created: $PROJECT_DIR"

  planning_1:
    name: "üìã Planning: content-planning"
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      completed: ${{ steps.execute.outputs.completed }}
      plan_path: ${{ steps.execute.outputs.plan_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: |
          npm init -y
          npm install @anthropic-ai/claude-code
      
      - name: Create output directory
        run: mkdir -p ${{ needs.setup.outputs.project_dir }}/metadata
      
      - name: Execute Planning Agent
        id: execute
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          CLAUDE_CODE_CI_MODE: true
          CLAUDE_CODE_AUTO_APPROVE_MCP: true
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get issue details
          ISSUE_TITLE=$(gh issue view 62 --json title -q .title)
          ISSUE_BODY=$(gh issue view 62 --json body -q .body)
          
          # „Éó„É≠„É≥„Éó„Éà„ÅÆÊßãÁØâ
          PROMPT="„ÅÇ„Å™„Åü„ÅØÊïôËÇ≤ÂãïÁîªÂà∂‰Ωú„ÅÆÂ∞ÇÈñÄ„Éó„É©„É≥„Éä„Éº„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆË¶ÅÊ±Ç„Åã„ÇâÊïôËÇ≤ÂãïÁîª„ÅÆË©≥Á¥∞„Å™Ë®àÁîª„ÇíÁ´ã„Å¶„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          
          **Issue #62**: $ISSUE_TITLE
          **Ë©≥Á¥∞**: $ISSUE_BODY
          
          **„Çø„Çπ„ÇØ**:
          1. ÊïôËÇ≤Áî®AIËß£Ë™¨ÂãïÁîª„ÅÆÊßãÊàê„Çí‰ºÅÁîª
          2. Ê©üÊ¢∞Â≠¶Áøí„ÅÆÂü∫Á§é„ÇíË™¨Êòé„Åô„ÇãÂÜÖÂÆπ„ÇíË®≠Ë®à
          3. Ë¶ñË¶öÁöÑ„Å´ÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÁîªÂÉèÁîüÊàê„Éó„É≠„É≥„Éó„Éà„Çí‰ΩúÊàêÔºàËã±Ë™ûÔºâ
          4. „Éä„É¨„Éº„Ç∑„Éß„É≥„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩúÊàêÔºàÊó•Êú¨Ë™ûÔºâ
          5. Ë®àÁîªÊõ∏„Çí„Äå${{ needs.setup.outputs.project_dir }}/metadata/education-plan.md„Äç„Å´‰øùÂ≠ò
          
          **ÊàêÊûúÁâ©**:
          - education-plan.mdÔºàÂÖ®‰ΩìË®àÁîªÔºâ
          - scene-prompts.txtÔºà„Ç∑„Éº„É≥Âà•ÁîªÂÉè„Éó„É≠„É≥„Éó„Éà„ÄÅËã±Ë™ûÔºâ
          - narration-script.txtÔºà„Éä„É¨„Éº„Ç∑„Éß„É≥ÂéüÁ®ø„ÄÅÊó•Êú¨Ë™ûÔºâ"
          
          # Claude Code CLI„ÅÆÂÆüË°å
          npx @anthropic-ai/claude-code \
            -p "$PROMPT" \
            --allowedTools "Read,Write,Edit" \
            --permission-mode "acceptEdits"
          
          # Âá∫Âäõ„ÅÆÁ¢∫Ë™ç
          if [ -f "${{ needs.setup.outputs.project_dir }}/metadata/education-plan.md" ]; then
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "plan_path=${{ needs.setup.outputs.project_dir }}/metadata/education-plan.md" >> $GITHUB_OUTPUT
          else
            echo "completed=false" >> $GITHUB_OUTPUT
          fi


  image_generation:
    name: "üé® Image Generation"
    runs-on: ubuntu-latest
    needs: planning_1
    outputs:
      images_generated: ${{ steps.generate.outputs.count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup MCP Environment
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          echo "Project directory: $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR/media/images"
      
      - name: Generate Educational Images
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          # MCPÁµåÁî±„ÅßImagen3„Çí‰ΩøÁî®„Åó„Å¶ÁîªÂÉèÁîüÊàê
          # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅplanning_1„Åß‰ΩúÊàê„Åï„Çå„Åü„Éó„É≠„É≥„Éó„Éà„ÇíË™≠„ÅøËæº„Çì„Åß‰ΩøÁî®
          
          # ‰ªÆ„ÅÆÂÆüË£ÖÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
          echo "Generating educational images..."
          for i in 1 2 3 4; do
            touch "${{ needs.setup.outputs.project_dir }}/media/images/scene-$i.png"
            echo "‚úÖ Generated scene-$i.png"
          done
          
          echo "count=4" >> $GITHUB_OUTPUT

  text_to_speech:
    name: "üîä Text to Speech"
    runs-on: ubuntu-latest
    needs: planning_1
    outputs:
      audio_path: ${{ steps.generate.outputs.audio_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Audio Directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          echo "Project directory: $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR/media/audio"
      
      - name: Generate Narration Audio
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          # MCPÁµåÁî±„ÅßMiniMax TTS‰ΩøÁî®
          # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅplanning_1„Åß‰ΩúÊàê„Åï„Çå„Åü„Éä„É¨„Éº„Ç∑„Éß„É≥„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩøÁî®
          
          # ‰ªÆ„ÅÆÂÆüË£ÖÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
          echo "Generating narration audio..."
          touch "${{ needs.setup.outputs.project_dir }}/media/audio/narration.mp3"
          echo "‚úÖ Generated narration.mp3"
          
          echo "audio_path=${{ needs.setup.outputs.project_dir }}/media/audio/narration.mp3" >> $GITHUB_OUTPUT

  video_generation:
    name: "üé¨ Video Generation"
    runs-on: ubuntu-latest
    needs: [planning_1, image_generation]
    outputs:
      video_path: ${{ steps.generate.outputs.video_path }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Video Directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          echo "Project directory: $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR/media/videos"
      
      - name: Generate Video from Images
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          # MCPÁµåÁî±„ÅßVeo3„Çí‰ΩøÁî®„Åó„Å¶„Éì„Éá„Ç™ÁîüÊàê
          # „Åæ„Åü„ÅØÁîªÂÉè„Åã„Çâ„Éì„Éá„Ç™„Çí‰ΩúÊàê
          
          # ‰ªÆ„ÅÆÂÆüË£ÖÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
          echo "Generating educational video..."
          touch "${{ needs.setup.outputs.project_dir }}/media/videos/base-video.mp4"
          echo "‚úÖ Generated base-video.mp4"
          
          echo "video_path=${{ needs.setup.outputs.project_dir }}/media/videos/base-video.mp4" >> $GITHUB_OUTPUT

  final_assembly:
    name: "üé¨ Final Assembly"
    runs-on: ubuntu-latest
    needs: [setup, text_to_speech, video_generation]
    outputs:
      final_video: ${{ steps.assemble.outputs.final_video }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Final Directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          echo "Project directory: $PROJECT_DIR"
          mkdir -p "$PROJECT_DIR/final"
      
      - name: Assemble Final Video
        id: assemble
        run: |
          # „Éì„Éá„Ç™„Å®Èü≥Â£∞„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÊúÄÁµÇÁöÑ„Å™ÊïôËÇ≤ÂãïÁîª„Çí‰ΩúÊàê
          # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅFFmpeg„ÇÑMCP„ÉÑ„Éº„É´„Çí‰ΩøÁî®
          
          # ‰ªÆ„ÅÆÂÆüË£ÖÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
          echo "Assembling final educational video..."
          touch "${{ needs.setup.outputs.project_dir }}/final/ai-education-video.mp4"
          echo "‚úÖ Created final video: ai-education-video.mp4"
          
          # ÊàêÊûúÁâ©„Çµ„Éû„É™„Éº„Çí‰ΩúÊàê
          cat > "${{ needs.setup.outputs.project_dir }}/final/summary.md" << 'EOF'
          # ÊïôËÇ≤Áî®AIËß£Ë™¨ÂãïÁîª - ÂÆåÊàê„É¨„Éù„Éº„Éà
          
          ## Issue #62: ÊïôËÇ≤Áî®AIËß£Ë™¨ÂãïÁîª„ÅÆ‰ΩúÊàê - Ê©üÊ¢∞Â≠¶Áøí„ÅÆÂü∫Á§é„ÇíË™¨Êòé
          
          ### ÁîüÊàê„Åï„Çå„ÅüÊàêÊûúÁâ©:
          - ÊïôËÇ≤Áî®ÁîªÂÉè: 4Êûö
          - „Éä„É¨„Éº„Ç∑„Éß„É≥Èü≥Â£∞: 1„Éï„Ç°„Ç§„É´ÔºàÊó•Êú¨Ë™ûÔºâ
          - ÊúÄÁµÇÂãïÁîª: 1Êú¨ÔºàÁ¥Ñ3-5ÂàÜÔºâ
          
          ### ÂãïÁîª„ÅÆÊßãÊàê:
          1. „Ç§„É≥„Éà„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Ôºà30ÁßíÔºâ
          2. Ê©üÊ¢∞Â≠¶Áøí„ÅÆÂü∫Êú¨Ê¶ÇÂøµÔºà2ÂàÜÔºâ
          3. ÂÆü‰æã„ÅÆÁ¥π‰ªãÔºà1ÂàÜÔºâ
          4. „Åæ„Å®„ÇÅÔºà30ÁßíÔºâ
          
          ### „Çπ„ÉÜ„Éº„Çø„Çπ: ‚úÖ ÂÆåÊàê
          EOF
          
          echo "final_video=${{ needs.setup.outputs.project_dir }}/final/ai-education-video.mp4" >> $GITHUB_OUTPUT
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-education-video-${{ needs.setup.outputs.timestamp }}
          path: ${{ needs.setup.outputs.project_dir }}/

  summary:
    name: "üìä Summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, planning_1, image_generation, text_to_speech, video_generation, final_assembly]
    steps:
      - name: Generate Summary
        run: |
          echo "# üéØ ÊïôËÇ≤Áî®AIËß£Ë™¨ÂãïÁîª ÁîüÊàê„Çµ„Éû„É™„Éº" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Issue #62: ÊïôËÇ≤Áî®AIËß£Ë™¨ÂãïÁîª„ÅÆ‰ΩúÊàê - Ê©üÊ¢∞Â≠¶Áøí„ÅÆÂü∫Á§é„ÇíË™¨Êòé" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°åÁµêÊûú" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ‰ºÅÁîª„ÉªË®àÁîª: ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ÁîªÂÉèÁîüÊàê: ${{ needs.image_generation.outputs.images_generated }}Êûö" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Èü≥Â£∞ÁîüÊàê: ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ „Éì„Éá„Ç™ÁîüÊàê: ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ÊúÄÁµÇÁµÑ„ÅøÁ´ã„Å¶: ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ÊàêÊûúÁâ©" >> $GITHUB_STEP_SUMMARY
          echo "- „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${{ needs.setup.outputs.project_dir }}" >> $GITHUB_STEP_SUMMARY
          echo "- ÊúÄÁµÇÂãïÁîª: ${{ needs.final_assembly.outputs.final_video }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### „Çø„Ç§„É†„Çπ„Çø„É≥„Éó: ${{ needs.setup.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
