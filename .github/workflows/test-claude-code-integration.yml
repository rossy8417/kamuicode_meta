name: Test Claude Code Integration
run-name: 🧪 Testing GitHub Actions ↔ Claude Code Integration

on:
  workflow_dispatch:
    inputs:
      test_prompt:
        description: 'Test prompt for Claude Code'
        required: false
        default: 'Create a simple task analysis for video generation workflow'
        type: string
      complexity_level:
        description: 'Complexity level (1-10)'  
        required: false
        default: '5'
        type: string

permissions:
  contents: write
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: GitHub Actions初期処理
  initial-analysis:
    runs-on: ubuntu-latest
    outputs:
      should_use_claude: ${{ steps.analyze.outputs.should_use_claude }}
      initial_data: ${{ steps.analyze.outputs.initial_data }}
      complexity_score: ${{ steps.analyze.outputs.complexity_score }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Initial Static Analysis
        id: analyze
        run: |
          echo "🔍 GitHub Actions initial analysis starting..."
          
          mkdir -p test-results/phase1
          
          # Input data analysis
          TEST_PROMPT="${{ inputs.test_prompt }}"
          COMPLEXITY="${{ inputs.complexity_level }}"
          
          echo "📝 Test Prompt: $TEST_PROMPT"
          echo "📊 Complexity Level: $COMPLEXITY"
          
          # Complexity-based decision
          if [ "$COMPLEXITY" -gt 3 ]; then
            echo "🧠 High complexity detected - using Claude Code analysis"
            echo "should_use_claude=true" >> $GITHUB_OUTPUT
          else
            echo "📋 Low complexity detected - using static processing only"
            echo "should_use_claude=false" >> $GITHUB_OUTPUT
          fi
          
          # Prepare initial data
          echo "# Initial Analysis Data" > test-results/phase1/initial-data.md
          echo "" >> test-results/phase1/initial-data.md
          echo "**Test Prompt**: $TEST_PROMPT" >> test-results/phase1/initial-data.md
          echo "**Complexity**: $COMPLEXITY/10" >> test-results/phase1/initial-data.md
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-results/phase1/initial-data.md
          echo "**GitHub Run ID**: ${{ github.run_id }}" >> test-results/phase1/initial-data.md
          
          echo "initial_data=test-results/phase1/initial-data.md" >> $GITHUB_OUTPUT
          echo "complexity_score=$COMPLEXITY" >> $GITHUB_OUTPUT
          
          echo "✅ GitHub Actions initial analysis completed"
          
      - name: Upload Initial Analysis
        uses: actions/upload-artifact@v4
        with:
          name: initial-analysis-${{ github.run_number }}
          path: test-results/phase1/
          retention-days: 1

  # Phase 2: Claude Code analysis (conditional)
  claude-analysis:
    needs: initial-analysis
    runs-on: ubuntu-latest
    if: needs.initial-analysis.outputs.should_use_claude == 'true'
    outputs:
      claude_analysis_completed: ${{ steps.claude-result.outputs.completed }}
      claude_result_file: ${{ steps.claude-result.outputs.result_file }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Initial Analysis
        uses: actions/download-artifact@v4
        with:
          name: initial-analysis-${{ github.run_number }}
          path: test-results/phase1/
          
      - name: Prepare Claude Code Input
        run: |
          echo "🎯 Preparing Claude Code input data..."
          
          mkdir -p test-results/phase2
          
          # Safe file generation using echo (avoiding HEREDOC)
          echo "# Claude Code Integration Test" > test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "You are testing Claude Code integration with GitHub Actions workflows." >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "## Input Data" >> test-results/phase2/claude-prompt.md
          cat test-results/phase1/initial-data.md >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "## Task" >> test-results/phase2/claude-prompt.md
          echo "Based on the requirements above, perform detailed task analysis:" >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "1. **Input prompt analysis**" >> test-results/phase2/claude-prompt.md
          echo "2. **Recommended workflow strategy**" >> test-results/phase2/claude-prompt.md
          echo "3. **Required tools and MCP services identification**" >> test-results/phase2/claude-prompt.md
          echo "4. **Execution time estimation**" >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "## Output Requirements" >> test-results/phase2/claude-prompt.md
          echo "Output results as JSON file: ./claude-analysis-result.json" >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "JSON structure:" >> test-results/phase2/claude-prompt.md
          echo '```json' >> test-results/phase2/claude-prompt.md
          echo '{' >> test-results/phase2/claude-prompt.md
          echo '  "analysis_completed": true,' >> test-results/phase2/claude-prompt.md
          echo '  "input_analysis": "Analysis result",' >> test-results/phase2/claude-prompt.md
          echo '  "recommended_strategy": "Recommended strategy",' >> test-results/phase2/claude-prompt.md
          echo '  "required_tools": ["tool1", "tool2"],' >> test-results/phase2/claude-prompt.md
          echo '  "mcp_services": ["service1", "service2"],' >> test-results/phase2/claude-prompt.md
          echo '  "estimated_duration_minutes": 30,' >> test-results/phase2/claude-prompt.md
          echo '  "complexity_assessment": "high/medium/low",' >> test-results/phase2/claude-prompt.md
          echo '  "additional_recommendations": "Additional recommendations"' >> test-results/phase2/claude-prompt.md
          echo '}' >> test-results/phase2/claude-prompt.md
          echo '```' >> test-results/phase2/claude-prompt.md
          echo "" >> test-results/phase2/claude-prompt.md
          echo "This test verifies GitHub Actions and Claude Code integration works correctly." >> test-results/phase2/claude-prompt.md
          
          echo "✅ Claude Code input preparation completed"
          
      - name: Execute Claude Code Analysis
        uses: anthropics/claude-code-base-action@beta
        env:
          CLAUDE_CODE_CI_MODE: "true"
          CLAUDE_CODE_AUTO_APPROVE_MCP: "true"
        with:
          prompt_file: "test-results/phase2/claude-prompt.md"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          max_turns: "10"
          allowed_tools: "Read,Write,Bash"
          
      - name: Process Claude Code Results
        id: claude-result
        run: |
          echo "🔍 Processing Claude Code results..."
          
          if [ -f "./claude-analysis-result.json" ]; then
            echo "✅ Claude Code analysis result obtained"
            
            # Move result to test-results
            cp claude-analysis-result.json test-results/phase2/
            
            # Validate result
            if python3 -c "import json; json.load(open('test-results/phase2/claude-analysis-result.json'))" 2>/dev/null; then
              echo "✅ JSON format is valid"
              
              STRATEGY=$(python3 -c "import json; print(json.load(open('test-results/phase2/claude-analysis-result.json')).get('recommended_strategy', 'unknown'))")
              DURATION=$(python3 -c "import json; print(json.load(open('test-results/phase2/claude-analysis-result.json')).get('estimated_duration_minutes', 0))")
              
              echo "📋 Recommended strategy: $STRATEGY"
              echo "⏱️ Estimated time: $DURATION minutes"
              
              echo "completed=true" >> $GITHUB_OUTPUT
              echo "result_file=test-results/phase2/claude-analysis-result.json" >> $GITHUB_OUTPUT
            else
              echo "❌ Invalid JSON format"
              echo "completed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Claude Code analysis result not found"
            echo "completed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Claude Analysis Results
        if: steps.claude-result.outputs.completed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: claude-analysis-${{ github.run_number }}
          path: test-results/phase2/
          retention-days: 1

  # Phase 3: GitHub Actions final processing (automatic return)
  final-processing:
    needs: [initial-analysis, claude-analysis]
    runs-on: ubuntu-latest
    if: always()  # Execute fallback even if Claude Code fails
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ github.run_number }}"
          merge-multiple: true
          path: test-results/final/
          
      - name: Final Integration and Summary
        run: |
          echo "🎯 GitHub Actions final processing (automatic return completed)"
          
          mkdir -p test-results/summary
          
          # Create summary report
          echo "# Claude Code Integration Test Summary" > test-results/summary/test-summary.md
          echo "" >> test-results/summary/test-summary.md
          echo "**Test Run**: ${{ github.run_id }}" >> test-results/summary/test-summary.md
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-results/summary/test-summary.md
          echo "" >> test-results/summary/test-summary.md
          
          # Summarize each phase results
          echo "## Phase 1: GitHub Actions Initial Analysis" >> test-results/summary/test-summary.md
          echo "- ✅ Completed" >> test-results/summary/test-summary.md
          echo "- Complexity: ${{ needs.initial-analysis.outputs.complexity_score }}/10" >> test-results/summary/test-summary.md
          echo "- Claude Code usage decision: ${{ needs.initial-analysis.outputs.should_use_claude }}" >> test-results/summary/test-summary.md
          echo "" >> test-results/summary/test-summary.md
          
          echo "## Phase 2: Claude Code Analysis" >> test-results/summary/test-summary.md
          if [ "${{ needs.initial-analysis.outputs.should_use_claude }}" = "true" ]; then
            if [ "${{ needs.claude-analysis.outputs.claude_analysis_completed }}" = "true" ]; then
              echo "- ✅ Completed" >> test-results/summary/test-summary.md
              
              # Add Claude Code result details
              if [ -f "test-results/final/claude-analysis-result.json" ]; then
                STRATEGY=$(python3 -c "import json; print(json.load(open('test-results/final/claude-analysis-result.json')).get('recommended_strategy', 'unknown'))" 2>/dev/null || echo "unknown")
                COMPLEXITY=$(python3 -c "import json; print(json.load(open('test-results/final/claude-analysis-result.json')).get('complexity_assessment', 'unknown'))" 2>/dev/null || echo "unknown")
                DURATION=$(python3 -c "import json; print(json.load(open('test-results/final/claude-analysis-result.json')).get('estimated_duration_minutes', 0))" 2>/dev/null || echo "0")
                
                echo "- Recommended strategy: $STRATEGY" >> test-results/summary/test-summary.md
                echo "- Complexity assessment: $COMPLEXITY" >> test-results/summary/test-summary.md
                echo "- Estimated time: ${DURATION} minutes" >> test-results/summary/test-summary.md
              fi
            else
              echo "- ❌ Failed (using fallback)" >> test-results/summary/test-summary.md
            fi
          else
            echo "- ⏭️ Skipped (low complexity)" >> test-results/summary/test-summary.md
          fi
          echo "" >> test-results/summary/test-summary.md
          
          echo "## Phase 3: GitHub Actions Final Processing" >> test-results/summary/test-summary.md
          echo "- ✅ Automatic return completed" >> test-results/summary/test-summary.md
          echo "- Integration test successful" >> test-results/summary/test-summary.md
          echo "" >> test-results/summary/test-summary.md
          
          echo "## Conclusion" >> test-results/summary/test-summary.md
          echo "GitHub Actions ↔ Claude Code round-trip integration verified to work correctly." >> test-results/summary/test-summary.md
          
          echo "📋 Test summary completed"
          cat test-results/summary/test-summary.md
          
      - name: Save Test Results
        run: |
          if [ -d "test-results" ]; then
            echo "💾 Saving test results..."
            
            # Organize results for commit
            mkdir -p generated/test-results/claude-integration/
            cp -r test-results/* generated/test-results/claude-integration/
            
            echo "✅ Test results saved to generated/test-results/claude-integration/"
          fi

  # Fallback processing (for Claude Code failure alternative)
  fallback-processing:
    needs: initial-analysis
    runs-on: ubuntu-latest
    if: needs.initial-analysis.outputs.should_use_claude == 'false'
    
    steps:
      - name: Static Fallback Processing
        run: |
          echo "📋 Executing static fallback processing..."
          
          mkdir -p test-results/fallback
          
          # Generate static analysis result
          echo '{' > test-results/fallback/static-result.json
          echo '  "analysis_completed": true,' >> test-results/fallback/static-result.json
          echo '  "method": "static_fallback",' >> test-results/fallback/static-result.json
          echo '  "input_analysis": "Static analysis based on complexity level",' >> test-results/fallback/static-result.json
          echo '  "recommended_strategy": "template-based-approach",' >> test-results/fallback/static-result.json
          echo '  "required_tools": ["basic-tools"],' >> test-results/fallback/static-result.json
          echo '  "mcp_services": [],' >> test-results/fallback/static-result.json
          echo '  "estimated_duration_minutes": 15,' >> test-results/fallback/static-result.json
          echo '  "complexity_assessment": "low",' >> test-results/fallback/static-result.json
          echo '  "additional_recommendations": "Simple workflow recommended for low complexity tasks"' >> test-results/fallback/static-result.json
          echo '}' >> test-results/fallback/static-result.json
          
          echo "✅ Static fallback processing completed"
          echo "💡 This result was generated without Claude Code analysis"