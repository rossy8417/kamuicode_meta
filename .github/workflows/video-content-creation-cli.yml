name: "Video Content Creation CLI Direct"
run-name: "🎥 CLI Direct: ${{ github.event.inputs.video_concept }}"

on:
  workflow_dispatch:
    inputs:
      video_concept:
        description: '動画コンセプト・テーマ'
        required: true
        default: 'CLI直接テスト - AIとロボットの協力'
        type: string

permissions:
  contents: write
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  test-cli-direct:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Claude Code CLI
        run: |
          echo "📦 Installing Claude Code CLI..."
          npm install -g @anthropic-ai/claude-code@latest
          
      - name: Verify Installation
        run: |
          echo "🔍 Checking Claude Code installation..."
          which claude || echo "claude not in PATH"
          npx claude --version || echo "npx claude failed"
          
      - name: Setup test environment
        run: |
          mkdir -p generated/keyframes
          mkdir -p .claude
          
          # Create test prompt file
          cat > test-prompt.txt << 'EOF'
          Generate a test image using any available method.
          Create a JSON file at generated/keyframes/cli-test-result.json with:
          {
            "status": "success",
            "method": "cli-test",
            "timestamp": "<current time>"
          }
          EOF
          
          # Create MCP config
          cat > .claude/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "t2i-google-imagen3": {
                "type": "http",
                "url": "https://mcp-creatify-lipsync-20250719-010824-a071b7b8-820994673238.us-central1.run.app/t2i/google/imagen",
                "description": "Google Imagen 3 Text-to-Image Generation"
              }
            }
          }
          EOF
          
      - name: Run Claude CLI with skip permissions
        run: |
          echo "🚀 Running Claude Code CLI..."
          
          # Try different approaches
          echo "Approach 1: Using npx with OAuth token"
          CLAUDE_CODE_OAUTH_TOKEN=${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }} \
          npx claude -p "$(cat test-prompt.txt)" \
            --mcp-config=.claude/mcp-config.json \
            --dangerously-skip-permissions \
            --output-format stream-json || echo "Approach 1 failed"
          
          echo "Approach 2: Direct with allowed tools"
          npx claude -p "Write a test file to generated/keyframes/cli-test.json" \
            --allowed-tools "Write" \
            --dangerously-skip-permissions || echo "Approach 2 failed"
          
      - name: Check Results
        if: always()
        run: |
          echo "📊 Checking results..."
          ls -la generated/keyframes/ || echo "No keyframes directory"
          find generated -name "*.json" -type f -exec echo "Found: {}" \; -exec cat {} \; || echo "No JSON files found"
          
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cli-direct-test-${{ github.run_number }}
          path: generated/
          retention-days: 7