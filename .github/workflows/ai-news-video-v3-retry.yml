name: Social Media News Video Creator

on:
  workflow_dispatch:
    inputs:
      news_topic:
        description: 'Main news topic to cover'
        required: true
        type: string
        default: 'Technology News'
      video_duration:
        description: 'Video duration in seconds'
        required: true
        type: choice
        options:
          - '30'
          - '60'
          - '90'
        default: '30'
      target_platform:
        description: 'Target social media platform'
        required: true
        type: choice
        options:
          - 'YouTube'
          - 'Instagram'
          - 'TikTok'
          - 'LinkedIn'
        default: 'YouTube'
      video_style:
        description: 'Video style preference'
        required: true
        type: choice
        options:
          - 'Professional News'
          - 'Casual Modern'
          - 'Corporate'
        default: 'Professional News'
      narrator_gender:
        description: 'Narrator gender'
        required: true
        type: choice
        options:
          - 'Female'
          - 'Male'
        default: 'Female'

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: 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

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.setup-dirs.outputs.project_dir }}
      workflow_start: ${{ steps.setup-dirs.outputs.workflow_start }}
      scene_count: ${{ steps.calculate-scenes.outputs.scene_count }}
      scene_list: ${{ steps.calculate-scenes.outputs.scene_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup directories and workflow timing
        id: setup-dirs
        run: |
          PROJECT_DIR="/home/runner/work/kamuicode_meta/kamuicode_meta/projects/issue-70-20250814-135030"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "workflow_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
          
          # Create directory structure
          mkdir -p "$PROJECT_DIR"/{media/{images,videos,audio,3d},metadata,logs,final}
          
          echo "✅ Project directories created at: $PROJECT_DIR"
          ls -la "$PROJECT_DIR"

      - name: Calculate scene count for news video
        id: calculate-scenes
        run: |
          DURATION=${{ inputs.video_duration }}
          SCENE_COUNT=$(( (DURATION + 4) / 5 ))  # 5 seconds per scene, rounded up
          
          SCENE_LIST="["
          for ((i=1; i<=SCENE_COUNT; i++)); do
            if [ $i -eq 1 ]; then
              SCENE_LIST="${SCENE_LIST}${i}"
            else
              SCENE_LIST="${SCENE_LIST},${i}"
            fi
          done
          SCENE_LIST="${SCENE_LIST}]"
          
          echo "scene_count=$SCENE_COUNT" >> $GITHUB_OUTPUT
          echo "scene_list=$SCENE_LIST" >> $GITHUB_OUTPUT
          
          echo "🎬 Video will have $SCENE_COUNT scenes (${DURATION}s ÷ 5s per scene)"

  planning:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      script_content: ${{ steps.planning.outputs.script_content }}
      scene_breakdown: ${{ steps.planning.outputs.scene_breakdown }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: News content planning and research
        id: planning
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          PLANNING_PROMPT="Create a comprehensive ${{ inputs.video_duration }}-second news video plan:

          Topic: ${{ inputs.news_topic }}
          Style: ${{ inputs.video_style }}
          Platform: ${{ inputs.target_platform }}
          Scenes: ${{ needs.setup.outputs.scene_count }}
          
          Tasks:
          1. Research current trends about '${{ inputs.news_topic }}' using WebSearch
          2. Create engaging script with Hook->Main->CTA structure
          3. Break down into ${{ needs.setup.outputs.scene_count }} scenes (5 seconds each)
          4. Generate visual descriptions for each scene
          5. Save script to ${PROJECT_DIR}/metadata/script.txt using Write tool
          6. Save scene breakdown to ${PROJECT_DIR}/metadata/scene_breakdown.json using Write tool
          7. Verify files with ls -la ${PROJECT_DIR}/metadata/
          
          Requirements:
          - Professional news tone with credible information
          - Visual consistency across scenes
          - Clear call-to-action
          - Optimized for ${{ inputs.target_platform }}"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$PLANNING_PROMPT"

          # Verify and extract outputs
          ls -la "${PROJECT_DIR}/metadata/"
          
          if [ -f "${PROJECT_DIR}/metadata/script.txt" ]; then
            SCRIPT_CONTENT=$(cat "${PROJECT_DIR}/metadata/script.txt" | head -c 1000)
            echo "script_content=${SCRIPT_CONTENT}" >> $GITHUB_OUTPUT
            echo "✅ Script created successfully"
          else
            echo "⚠️ Script file not found, creating fallback"
            echo "Breaking news on ${{ inputs.news_topic }}. Stay informed with the latest updates." > "${PROJECT_DIR}/metadata/script.txt"
            echo "script_content=Breaking news on ${{ inputs.news_topic }}. Stay informed with the latest updates." >> $GITHUB_OUTPUT
          fi
          
          if [ -f "${PROJECT_DIR}/metadata/scene_breakdown.json" ]; then
            SCENE_BREAKDOWN=$(cat "${PROJECT_DIR}/metadata/scene_breakdown.json" | head -c 1000)
            echo "scene_breakdown=${SCENE_BREAKDOWN}" >> $GITHUB_OUTPUT
            echo "✅ Scene breakdown created successfully"
          else
            echo "⚠️ Scene breakdown not found, creating fallback"
            echo '{"scenes": []}' > "${PROJECT_DIR}/metadata/scene_breakdown.json"
            echo "scene_breakdown={\"scenes\": []}" >> $GITHUB_OUTPUT
          fi

      - name: Upload planning artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  audio_generation:
    runs-on: ubuntu-latest
    needs: [setup, planning]
    outputs:
      narration_file: ${{ steps.audio.outputs.narration_file }}
      bgm_file: ${{ steps.audio.outputs.bgm_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download planning artifacts
        uses: actions/download-artifact@v4
        with:
          name: planning-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Generate narration and BGM
        id: audio
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Generate narration
          NARRATION_PROMPT="Generate professional news narration:
          
          Script: ${{ needs.planning.outputs.script_content }}
          Voice: ${{ inputs.narrator_gender }}, News anchor style
          Duration: ${{ inputs.video_duration }} seconds
          
          Requirements:
          1. Generate clear narration using MCP tool mcp__t2s-fal-minimax-speech-02-turbo
          2. Save audio to ${PROJECT_DIR}/media/audio/narration.mp3 using Write tool
          3. Analyze timing and save analysis to ${PROJECT_DIR}/media/audio/narration_timing.json
          4. Verify with ls -la ${PROJECT_DIR}/media/audio/
          
          Voice settings:
          - Professional news anchor tone
          - Clear pronunciation
          - Appropriate pacing for news delivery"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$NARRATION_PROMPT"

          # Generate BGM
          BGM_PROMPT="Generate news background music:
          
          Style: Professional news, subtle, non-intrusive
          Duration: ${{ inputs.video_duration }} seconds
          
          Requirements:
          1. Generate BGM using MCP tool mcp__t2m-google-lyria
          2. Save to ${PROJECT_DIR}/media/audio/bgm.mp3 using Write tool
          3. Verify with ls -la ${PROJECT_DIR}/media/audio/
          
          Music characteristics:
          - News broadcast style
          - Low volume, supportive
          - Professional and credible tone"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2m-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$BGM_PROMPT"

          # Verify files and set outputs
          ls -la "${PROJECT_DIR}/media/audio/"
          
          # Find narration file
          NARRATION_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*narration*" -o -name "*.mp3" | head -1)
          if [ -z "$NARRATION_FILE" ]; then
            NARRATION_FILE="${PROJECT_DIR}/media/audio/narration.mp3"
          fi
          echo "narration_file=$NARRATION_FILE" >> $GITHUB_OUTPUT
          
          # Find BGM file
          BGM_FILE=$(find "${PROJECT_DIR}/media/audio" -name "*bgm*" -o -name "*background*" | head -1)
          if [ -z "$BGM_FILE" ]; then
            BGM_FILE="${PROJECT_DIR}/media/audio/bgm.mp3"
          fi
          echo "bgm_file=$BGM_FILE" >> $GITHUB_OUTPUT

      - name: Upload audio artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

  news_anchor_generation:
    runs-on: ubuntu-latest
    needs: [setup, planning]
    outputs:
      anchor_image: ${{ steps.anchor.outputs.anchor_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download planning artifacts
        uses: actions/download-artifact@v4
        with:
          name: planning-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Generate news anchor character
        id: anchor
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          ANCHOR_PROMPT="Create professional news anchor character:
          
          Style: ${{ inputs.video_style }}
          Gender: ${{ inputs.narrator_gender }}
          Platform: ${{ inputs.target_platform }}
          
          Requirements:
          1. Generate professional news anchor image using MCP tool mcp__t2i-kamui-imagen3__imagen_t2i
          2. Save image to ${PROJECT_DIR}/media/images/news_anchor.png using Write tool
          3. Save URL to ${PROJECT_DIR}/media/images/news_anchor-url.txt using Write tool
          4. Execute ls -la ${PROJECT_DIR}/media/images/ using Bash tool
          
          Character specifications:
          - Professional business attire (suit/blazer)
          - Credible, trustworthy appearance
          - Neutral, professional expression
          - News studio background or solid professional background
          - High quality, clear facial features
          - Consistent lighting and color palette
          
          Technical specs:
          - 1920x1080 resolution
          - Professional portrait composition
          - Use seed: 42 for consistency across scenes"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$ANCHOR_PROMPT"

          # Immediate URL download (prevent expiration)
          URL_PATH="${PROJECT_DIR}/media/images/news_anchor-url.txt"
          SAVE_PATH="${PROJECT_DIR}/media/images/news_anchor.png"
          
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"

          # Multi-pattern file search
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*anchor*.png" 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)

          # File validation
          if [ -n "$ANCHOR_IMAGE" ] && [ -f "$ANCHOR_IMAGE" ]; then
            FILE_SIZE=$(stat -c%s "$ANCHOR_IMAGE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 10000 ]; then
              echo "✅ News anchor generated successfully: $ANCHOR_IMAGE (${FILE_SIZE} bytes)"
              echo "anchor_image=$ANCHOR_IMAGE" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Anchor image too small: $ANCHOR_IMAGE (${FILE_SIZE} bytes)"
              echo "anchor_image=$ANCHOR_IMAGE" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No anchor image found"
            echo "anchor_image=" >> $GITHUB_OUTPUT
          fi

          ls -la "${PROJECT_DIR}/media/images/"

      - name: Upload anchor artifacts
        uses: actions/upload-artifact@v4
        with:
          name: anchor-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

  scene_generation:
    runs-on: ubuntu-latest
    needs: [setup, planning]
    strategy:
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.scene_list) }}
    outputs:
      scene_${{ matrix.scene }}_video: ${{ steps.scene-video.outputs.video_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download planning artifacts
        uses: actions/download-artifact@v4
        with:
          name: planning-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Generate scene image (T2I)
        id: scene-image
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Define explicit save paths
          SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          SCENE_PROMPT="Generate scene $SCENE_NUM image for news video:
          
          Topic: ${{ inputs.news_topic }}
          Style: ${{ inputs.video_style }}
          Scene: ${SCENE_NUM} of ${{ needs.setup.outputs.scene_count }}
          
          Requirements:
          1. Generate scene image using MCP tool mcp__t2i-kamui-imagen3__imagen_t2i
          2. Save generated image to ${SAVE_PATH} using Write tool
          3. Save Google Cloud Storage URL to ${URL_PATH} using Write tool
          4. Execute ls -la ${PROJECT_DIR}/media/images/ using Bash tool to verify
          
          Visual specifications:
          - Professional news broadcast quality
          - 1920x1080 resolution
          - Consistent with ${{ inputs.video_style }} theme
          - High contrast and clear details
          - Suitable for ${{ inputs.target_platform }}
          - Scene duration: 5 seconds
          
          Important: Execute all steps in order"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$SCENE_PROMPT"

          # Immediate URL download (prevent expiration)
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"

          # Multi-pattern file search
          IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.png" 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" 2>/dev/null | head -1)

          # File validation with retry logic
          if [ -n "$IMAGE" ] && [ -f "$IMAGE" ]; then
            FILE_SIZE=$(stat -c%s "$IMAGE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 10000 ]; then
              echo "✅ Scene ${SCENE_NUM} image generated: $IMAGE (${FILE_SIZE} bytes)"
              echo "image_file=$IMAGE" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Image too small, attempting retry with different seed"
              
              RETRY_PROMPT="Retry scene $SCENE_NUM image generation with seed $((RANDOM + 1000)):
              1. Generate image with MCP tool mcp__t2i-kamui-imagen3__imagen_t2i
              2. Save to ${SAVE_PATH} using Write tool
              3. Save URL to ${URL_PATH} using Write tool
              4. Verify file size > 10KB"
              
              npx @anthropic-ai/claude-code \
                --mcp-config ".claude/mcp-kamuicode.json" \
                --allowedTools "mcp__t2i-*,Write,Bash" \
                --max-turns 40 \
                --permission-mode "bypassPermissions" \
                -p "$RETRY_PROMPT"
              
              # Re-check after retry
              IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -1 2>/dev/null | head -1)
              if [ -n "$IMAGE" ] && [ -f "$IMAGE" ]; then
                FILE_SIZE=$(stat -c%s "$IMAGE" 2>/dev/null || echo 0)
                if [ "$FILE_SIZE" -gt 10000 ]; then
                  echo "✅ Retry successful: $IMAGE (${FILE_SIZE} bytes)"
                  echo "image_file=$IMAGE" >> $GITHUB_OUTPUT
                else
                  echo "❌ Scene ${SCENE_NUM} image generation failed after retry"
                  echo "image_file=" >> $GITHUB_OUTPUT
                fi
              else
                echo "❌ No image file found after retry"
                echo "image_file=" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "❌ No image file found"
            echo "image_file=" >> $GITHUB_OUTPUT
          fi

      - name: Convert to video (I2V) - SAME JOB
        id: scene-video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Check if image exists from previous step
          IMAGE_FILE="${{ steps.scene-image.outputs.image_file }}"
          
          if [ -z "$IMAGE_FILE" ] || [ ! -f "$IMAGE_FILE" ]; then
            echo "::warning::No valid image for scene ${SCENE_NUM}, skipping I2V conversion"
            echo "video_file=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # URL validity check
          URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          LOCAL_IMAGE="${IMAGE_FILE}"
          
          if [ -f "$URL_FILE" ]; then
            IMAGE_URL=$(cat "$URL_FILE")
            if curl -IfsS --max-time 5 "$IMAGE_URL" >/dev/null 2>&1; then
              IMAGE_REF="$IMAGE_URL"
              echo "✅ Using Google Cloud Storage URL for I2V"
            else
              IMAGE_REF="$LOCAL_IMAGE"
              echo "⚠️ URL expired, using local path for I2V"
            fi
          else
            IMAGE_REF="$LOCAL_IMAGE"
          fi

          VIDEO_PATH="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}.mp4"
          
          I2V_PROMPT="Convert image to video for scene ${SCENE_NUM}:
          
          Input image: ${IMAGE_REF}
          
          Requirements:
          1. Convert to video using MCP tool mcp__i2v-fal-hailuo-02-fast
          2. Save video to ${VIDEO_PATH} using Write tool
          3. Duration: 6 seconds (suitable for 5s scene + transitions)
          4. Resolution: 1920x1080, 30fps
          5. Professional news broadcast quality
          6. Verify with ls -la ${PROJECT_DIR}/media/videos/
          
          Important: Maintain visual consistency with news theme"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-*,Write,Bash" \
            --max-turns 80 \
            --permission-mode "bypassPermissions" \
            -p "$I2V_PROMPT" || echo "::warning::I2V failed for scene ${SCENE_NUM}, continuing with image only"

          # Find and validate video file
          VIDEO=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.mp4" 2>/dev/null | head -1)
          [ -z "$VIDEO" ] && VIDEO=$(find "$PROJECT_DIR" -name "*.mp4" -mmin -5 2>/dev/null | head -1)

          if [ -n "$VIDEO" ] && [ -f "$VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$VIDEO" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 300000 ]; then
              echo "✅ Scene ${SCENE_NUM} video generated: $VIDEO (${FILE_SIZE} bytes)"
              echo "video_file=$VIDEO" >> $GITHUB_OUTPUT
            else
              echo "::warning::Video file too small for scene ${SCENE_NUM}: $VIDEO (${FILE_SIZE} bytes)"
              echo "video_file=$VIDEO" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::No video generated for scene ${SCENE_NUM}"
            echo "video_file=" >> $GITHUB_OUTPUT
          fi

          ls -la "${PROJECT_DIR}/media/videos/"

      - name: Upload scene artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scene-${{ matrix.scene }}-artifacts
          path: |
            ${{ needs.setup.outputs.project_dir }}/media/images/scene${{ matrix.scene }}.*
            ${{ needs.setup.outputs.project_dir }}/media/videos/scene${{ matrix.scene }}.*
        if: always()

  editing_plan:
    runs-on: ubuntu-latest
    needs: [setup, planning, audio_generation, news_anchor_generation, scene_generation]
    outputs:
      editing_instructions: ${{ steps.plan.outputs.editing_instructions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts

      - name: Copy artifacts to project directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          cp -r /tmp/artifacts/*/* "$PROJECT_DIR/" 2>/dev/null || true
          ls -la "$PROJECT_DIR/media/"

      - name: Create video editing plan
        id: plan
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          PLANNING_PROMPT="Create detailed video editing plan:
          
          Available assets:
          - Narration audio: Available
          - Background music: Available  
          - News anchor: Available
          - Scene videos: ${{ needs.setup.outputs.scene_count }} scenes
          - Total duration: ${{ inputs.video_duration }} seconds
          
          Requirements:
          1. Analyze all available media files
          2. Create optimal editing timeline and sequence
          3. Plan audio synchronization and BGM overlay
          4. Design smooth transitions between scenes
          5. Save editing plan to ${PROJECT_DIR}/metadata/editing_plan.json using Write tool
          6. Include timing, transitions, and effects specifications
          7. Verify with ls -la ${PROJECT_DIR}/metadata/
          
          Video specifications:
          - Target duration: ${{ inputs.video_duration }} seconds
          - Resolution: 1920x1080
          - Frame rate: 30fps
          - Audio: -14 LUFS standard
          - Platform: ${{ inputs.target_platform }}"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash,Read" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$PLANNING_PROMPT"

          # Extract editing instructions
          if [ -f "${PROJECT_DIR}/metadata/editing_plan.json" ]; then
            EDITING_INSTRUCTIONS=$(cat "${PROJECT_DIR}/metadata/editing_plan.json" | head -c 2000)
            echo "editing_instructions=${EDITING_INSTRUCTIONS}" >> $GITHUB_OUTPUT
            echo "✅ Editing plan created successfully"
          else
            echo "⚠️ Creating fallback editing plan"
            echo '{"plan": "basic"}' > "${PROJECT_DIR}/metadata/editing_plan.json"
            echo "editing_instructions={\"plan\": \"basic\"}" >> $GITHUB_OUTPUT
          fi

      - name: Upload editing plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: editing-plan-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  lipsync_processing:
    runs-on: ubuntu-latest
    needs: [setup, audio_generation, news_anchor_generation, editing_plan]
    outputs:
      lipsync_video: ${{ steps.lipsync.outputs.lipsync_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download required artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts

      - name: Copy artifacts to project directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          cp -r /tmp/artifacts/*/* "$PROJECT_DIR/" 2>/dev/null || true

      - name: Perform lip-sync processing
        id: lipsync
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Find narration and anchor files
          NARRATION_FILE=$(find "$PROJECT_DIR" -name "*narration*.mp3" -o -name "*speech*.mp3" | head -1)
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*anchor*.png" -o -name "*presenter*.png" | head -1)
          
          if [ -z "$NARRATION_FILE" ] || [ -z "$ANCHOR_IMAGE" ]; then
            echo "::warning::Missing files for lip-sync: narration=$NARRATION_FILE, anchor=$ANCHOR_IMAGE"
            echo "lipsync_video=" >> $GITHUB_OUTPUT
            exit 0
          fi

          LIPSYNC_PROMPT="Perform professional lip-sync processing:
          
          Audio file: ${NARRATION_FILE}
          Anchor image: ${ANCHOR_IMAGE}
          
          Requirements:
          1. Create lip-sync video using MCP tool mcp__v2v-fal-pixverse-lipsync
          2. Synchronize mouth movements with audio narration
          3. Save result to ${PROJECT_DIR}/media/videos/anchor_lipsync.mp4 using Write tool
          4. Maintain professional appearance and smooth transitions
          5. Target ±50ms synchronization accuracy
          6. Verify with ls -la ${PROJECT_DIR}/media/videos/
          
          Quality requirements:
          - Natural facial expressions
          - Accurate phoneme matching
          - Professional broadcast quality
          - 1920x1080 resolution, 30fps"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__v2v-*,Write,Bash" \
            --max-turns 80 \
            --permission-mode "bypassPermissions" \
            -p "$LIPSYNC_PROMPT" || echo "::warning::Lip-sync processing failed, continuing without"

          # Find and validate lip-sync video
          LIPSYNC_VIDEO=$(find "$PROJECT_DIR" -name "*lipsync*.mp4" -o -name "*anchor*.mp4" | head -1)
          
          if [ -n "$LIPSYNC_VIDEO" ] && [ -f "$LIPSYNC_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$LIPSYNC_VIDEO" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 500000 ]; then
              echo "✅ Lip-sync video created: $LIPSYNC_VIDEO (${FILE_SIZE} bytes)"
              echo "lipsync_video=$LIPSYNC_VIDEO" >> $GITHUB_OUTPUT
            else
              echo "::warning::Lip-sync video too small: $LIPSYNC_VIDEO (${FILE_SIZE} bytes)"
              echo "lipsync_video=" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::No lip-sync video generated"
            echo "lipsync_video=" >> $GITHUB_OUTPUT
          fi

      - name: Upload lipsync artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lipsync-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/
        if: always()

  final_composition:
    runs-on: ubuntu-latest
    needs: [setup, planning, audio_generation, scene_generation, editing_plan, lipsync_processing]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all final artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/final_artifacts

      - name: Copy all artifacts to project directory
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          cp -r /tmp/final_artifacts/*/* "$PROJECT_DIR/" 2>/dev/null || true
          
          echo "📁 Final asset inventory:"
          find "$PROJECT_DIR" -type f -name "*.mp4" -o -name "*.mp3" -o -name "*.png" | sort

      - name: Compose final news video
        id: compose
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          COMPOSITION_PROMPT="Create final ${{ inputs.video_duration }}-second news video:
          
          Available assets:
          - Scene videos: ${{ needs.setup.outputs.scene_count }} scenes
          - Narration audio: Available
          - Background music: Available
          - Lip-sync video: Available (if generated)
          
          Requirements:
          1. Concatenate all scene videos in sequence
          2. Overlay narration audio with proper timing
          3. Add background music at appropriate level (-20dB below narration)
          4. Apply smooth transitions between scenes
          5. Normalize audio to -14 LUFS broadcast standard
          6. Export final video to ${PROJECT_DIR}/final/news_video_final.mp4
          7. Create thumbnail from first frame: ${PROJECT_DIR}/final/thumbnail.png
          8. Generate metadata file: ${PROJECT_DIR}/final/video_metadata.json
          9. Use Write tool for all file operations
          10. Verify with ls -la ${PROJECT_DIR}/final/
          
          Technical specifications:
          - Resolution: 1920x1080
          - Frame rate: 30fps
          - Duration: Exactly ${{ inputs.video_duration }} seconds
          - Audio: -14 LUFS, stereo
          - Container: MP4 (H.264/AAC)
          - Platform optimization: ${{ inputs.target_platform }}"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash,Read" \
            --max-turns 60 \
            --permission-mode "bypassPermissions" \
            -p "$COMPOSITION_PROMPT"

          # Verify final output
          ls -la "${PROJECT_DIR}/final/"
          
          FINAL_VIDEO=$(find "$PROJECT_DIR/final" -name "*.mp4" | head -1)
          if [ -n "$FINAL_VIDEO" ] && [ -f "$FINAL_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            echo "✅ Final video created: $FINAL_VIDEO (${FILE_SIZE} bytes)"
            
            # Basic video validation
            if command -v ffprobe >/dev/null 2>&1; then
              DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$FINAL_VIDEO" 2>/dev/null || echo "unknown")
              echo "📹 Video duration: ${DURATION} seconds"
            fi
          else
            echo "❌ Final video not found"
          fi

      - name: Create execution summary
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          echo "## 🎬 Social Media News Video Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Topic**: ${{ inputs.news_topic }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: ${{ inputs.video_duration }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: ${{ inputs.target_platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Style**: ${{ inputs.video_style }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scenes**: ${{ needs.setup.outputs.scene_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📁 Generated Assets:" >> $GITHUB_STEP_SUMMARY
          find "$PROJECT_DIR" -type f \( -name "*.mp4" -o -name "*.mp3" -o -name "*.png" -o -name "*.json" \) | \
            while read file; do
              SIZE=$(stat -c%s "$file" 2>/dev/null || echo 0)
              SIZE_KB=$((SIZE / 1024))
              REL_PATH=${file#$PROJECT_DIR/}
              echo "- \`$REL_PATH\` (${SIZE_KB}KB)" >> $GITHUB_STEP_SUMMARY
            done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Process Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- News content planned and researched" >> $GITHUB_STEP_SUMMARY
          echo "- Professional narration generated" >> $GITHUB_STEP_SUMMARY
          echo "- Background music created" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.setup.outputs.scene_count }} scenes generated" >> $GITHUB_STEP_SUMMARY
          echo "- News anchor created" >> $GITHUB_STEP_SUMMARY
          echo "- Lip-sync processing completed" >> $GITHUB_STEP_SUMMARY
          echo "- Final video composition finished" >> $GITHUB_STEP_SUMMARY
          
          FINAL_VIDEO=$(find "$PROJECT_DIR/final" -name "*.mp4" | head -1)
          if [ -n "$FINAL_VIDEO" ]; then
            echo "- **Final output**: \`${FINAL_VIDEO#$PROJECT_DIR/}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload final deliverables
        uses: actions/upload-artifact@v4
        with:
          name: final-news-video
          path: |
            ${{ needs.setup.outputs.project_dir }}/final/
            ${{ needs.setup.outputs.project_dir }}/metadata/
          retention-days: 30
        if: always()
