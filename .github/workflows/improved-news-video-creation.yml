name: "🎬 News Video Creation Workflow - Improved Version"

on:
  workflow_dispatch:
    inputs:
      topic:
        description: "ニューストピック（例: 最新の技術ニュース、経済動向、社会情勢など）"
        required: true
        default: "最新のAI技術動向"
      style:
        description: "動画のスタイル"
        required: false
        default: "professional news"
        type: choice
        options:
          - professional news
          - casual news
          - documentary style
      language:
        description: "言語設定"
        required: false
        default: "japanese"
        type: choice
        options:
          - japanese
          - english

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  # Phase 1: Setup and Information Gathering
  setup-and-info-gathering:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      info_summary: ${{ steps.gather-info.outputs.summary }}
      topic: ${{ steps.extract-topic.outputs.topic }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup project directory
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/news-video-${TIMESTAMP}"
          mkdir -p "${PROJECT_DIR}"/{metadata,logs,media/{images,videos,audio},final,temp}
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "✅ Project directory created: ${PROJECT_DIR}"

      - name: Extract topic
        id: extract-topic
        run: |
          TOPIC="${{ inputs.topic }}"
          echo "topic=${TOPIC}" >> $GITHUB_OUTPUT
          echo "Topic: ${TOPIC}" > ${{ steps.setup.outputs.project_dir }}/metadata/topic.txt

      - name: Information gathering and validation
        id: gather-info
        run: |
          PROJECT_DIR="${{ steps.setup.outputs.project_dir }}"
          TOPIC="${{ steps.extract-topic.outputs.topic }}"
          
          INFO_PROMPT="指定されたトピック「${TOPIC}」について、信頼できる最新情報を収集してください。

          要件:
          1. 最低3つの独立した情報源から情報を収集
          2. 情報の正確性と信頼性を確認
          3. 60秒のニュース動画に適した内容を選別
          4. 各情報源のURL、発信時刻、信頼度を記録

          出力形式:
          - collected_info.json: 収集した情報
          - info_summary.txt: 要約テキスト
          - sources.json: 情報源のメタデータ"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Read" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$INFO_PROMPT"

          # Validate results
          if [ -f "collected_info.json" ]; then
            mv collected_info.json "$PROJECT_DIR/metadata/"
            echo "summary=$(head -1 info_summary.txt 2>/dev/null || echo 'Information gathered successfully')" >> $GITHUB_OUTPUT
            mv info_summary.txt "$PROJECT_DIR/metadata/" 2>/dev/null || echo "No summary file"
            mv sources.json "$PROJECT_DIR/metadata/" 2>/dev/null || echo "No sources file"
            echo "✅ Information gathering completed"
          else
            echo "summary=Information gathering completed with basic data" >> $GITHUB_OUTPUT
            echo "✅ Basic information gathering completed"
          fi

      - name: Upload Phase 1 artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase1-info-gathering
          path: ${{ steps.setup.outputs.project_dir }}/

      - name: Phase 1 Progress Report
        run: |
          echo "## 📊 Phase 1: Information Gathering & Setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic**: ${{ steps.extract-topic.outputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: Setup and info gathering within 10min timeout" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: Project structure created and information collected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Phase 2: Content Structure and Script Creation
  content-structure:
    runs-on: ubuntu-latest
    needs: setup-and-info-gathering
    timeout-minutes: 8
    outputs:
      script_path: ${{ steps.create-script.outputs.script_path }}
      scene_count: ${{ steps.create-script.outputs.scene_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Phase 1 artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase1-info-gathering
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Create news script and structure
        id: create-script
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          TOPIC="${{ needs.setup-and-info-gathering.outputs.topic }}"
          STYLE="${{ inputs.style }}"
          LANGUAGE="${{ inputs.language }}"

          SCRIPT_PROMPT="収集した情報を基に、60秒のニュース動画用台本を作成してください。

          要件:
          1. 視聴者の注意を引く導入部（0-8秒）
          2. 明確な情報伝達部（8-45秒）  
          3. 適切な結論部（45-60秒）
          4. 各シーンは約5秒、合計12シーン構成
          5. スタイル: ${STYLE}
          6. 言語: ${LANGUAGE}

          出力ファイル:
          - news_script.txt: 完全な台本
          - scene_breakdown.json: シーン別構成
          - timing_plan.json: タイミング設計"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "$SCRIPT_PROMPT"

          # Process results
          if [ -f "news_script.txt" ]; then
            mv news_script.txt "$PROJECT_DIR/metadata/"
            SCRIPT_PATH="$PROJECT_DIR/metadata/news_script.txt"
            echo "script_path=${SCRIPT_PATH}" >> $GITHUB_OUTPUT
          fi

          if [ -f "scene_breakdown.json" ]; then
            mv scene_breakdown.json "$PROJECT_DIR/metadata/"
            # Extract scene count from JSON
            SCENE_COUNT=$(jq -r '.scenes | length' "$PROJECT_DIR/metadata/scene_breakdown.json" 2>/dev/null || echo "12")
            echo "scene_count=${SCENE_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "scene_count=12" >> $GITHUB_OUTPUT
          fi

          mv timing_plan.json "$PROJECT_DIR/metadata/" 2>/dev/null || echo "No timing plan"
          echo "✅ Script creation completed"

      - name: Upload Phase 2 artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase2-content-structure
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Phase 2 Progress Report
        run: |
          echo "## 📊 Phase 2: Content Structure & Script" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Scene Count**: ${{ steps.create-script.outputs.scene_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Script**: Created 60-second news script" >> $GITHUB_STEP_SUMMARY
          echo "- **Structure**: Professional news format with intro-content-conclusion flow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Phase 3: Asset Generation (Parallel)
  asset-generation:
    runs-on: ubuntu-latest
    needs: [setup-and-info-gathering, content-structure]
    timeout-minutes: 12
    strategy:
      matrix:
        asset_type: [narration, caster_image, studio_background]
      max-parallel: 3
    outputs:
      narration_path: ${{ steps.generate-narration.outputs.narration_path }}
      caster_image_path: ${{ steps.generate-caster.outputs.caster_path }}
      caster_image_url: ${{ steps.generate-caster.outputs.caster_url }}
      studio_bg_path: ${{ steps.generate-studio.outputs.studio_path }}
      studio_bg_url: ${{ steps.generate-studio.outputs.studio_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: phase2-content-structure
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Generate narration audio
        if: matrix.asset_type == 'narration'
        id: generate-narration
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          LANGUAGE="${{ inputs.language }}"

          NARRATION_PROMPT="台本を読み上げるプロフェッショナルなニュースキャスター音声を生成してください。

          要件:
          1. 明瞭で権威性のある声質
          2. 適切なペース（毎分150-180語）
          3. ニュース番組らしいトーン
          4. 音声レベル: -14LUFS（YouTube最適化）
          5. 言語: ${LANGUAGE}

          入力: ${PROJECT_DIR}/metadata/news_script.txt
          出力: narration.mp3"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-*,Read,Write" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "$NARRATION_PROMPT"

          # Handle dynamic filename
          AUDIO_FILE=$(find . -name "*.mp3" -o -name "*.wav" -o -name "*.m4a" | head -1)
          if [ -n "$AUDIO_FILE" ] && [ -f "$AUDIO_FILE" ]; then
            mv "$AUDIO_FILE" "$PROJECT_DIR/media/audio/narration.mp3"
            echo "narration_path=$PROJECT_DIR/media/audio/narration.mp3" >> $GITHUB_OUTPUT
            echo "✅ Narration audio generated"
          else
            echo "❌ Narration generation failed"
          fi

      - name: Generate news caster image
        if: matrix.asset_type == 'caster_image'
        id: generate-caster
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          CASTER_PROMPT="信頼感と権威性を持つプロフェッショナルなニュースキャスターの画像を生成してください。

          要件:
          1. プロフェッショナルな外見と服装
          2. 信頼感を演出する表情
          3. 青系基調で信頼感を演出
          4. Rule of thirdsに従った配置
          5. 高解像度（512x512以上）
          6. 一貫性確保のため固定seed: 12345

          出力: professional_news_caster.png"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$CASTER_PROMPT"

          # Handle generated image
          IMAGE_FILE=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -1)
          if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
            cp "$IMAGE_FILE" "$PROJECT_DIR/media/images/news_caster.png"
            echo "caster_path=$PROJECT_DIR/media/images/news_caster.png" >> $GITHUB_OUTPUT
            
            # Check for Google URL in generated files
            URL_FILE=$(find . -name "*url*.txt" -o -name "*gcs*.txt" | head -1)
            if [ -f "$URL_FILE" ]; then
              CASTER_URL=$(cat "$URL_FILE")
              echo "$CASTER_URL" > "$PROJECT_DIR/media/images/news_caster_url.txt"
              echo "caster_url=$CASTER_URL" >> $GITHUB_OUTPUT
            else
              echo "caster_url=" >> $GITHUB_OUTPUT
            fi
            echo "✅ News caster image generated"
          else
            echo "❌ Caster image generation failed"
          fi

      - name: Generate studio background
        if: matrix.asset_type == 'studio_background'
        id: generate-studio
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          STUDIO_PROMPT="プロフェッショナルなニューススタジオ背景を生成してください。

          要件:
          1. ニュース番組らしい権威性
          2. 青系基調で信頼感演出
          3. キャスターとの調和を考慮
          4. 適切な明度・コントラスト
          5. 現代的で洗練された設計
          6. 1920x1080解像度対応

          出力: news_studio_background.png"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "$STUDIO_PROMPT"

          # Handle generated background
          BG_FILE=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -1)
          if [ -n "$BG_FILE" ] && [ -f "$BG_FILE" ]; then
            cp "$BG_FILE" "$PROJECT_DIR/media/images/studio_background.png"
            echo "studio_path=$PROJECT_DIR/media/images/studio_background.png" >> $GITHUB_OUTPUT
            
            # Check for Google URL
            URL_FILE=$(find . -name "*url*.txt" -o -name "*gcs*.txt" | head -1)
            if [ -f "$URL_FILE" ]; then
              STUDIO_URL=$(cat "$URL_FILE")
              echo "$STUDIO_URL" > "$PROJECT_DIR/media/images/studio_background_url.txt"
              echo "studio_url=$STUDIO_URL" >> $GITHUB_OUTPUT
            else
              echo "studio_url=" >> $GITHUB_OUTPUT
            fi
            echo "✅ Studio background generated"
          else
            echo "❌ Studio background generation failed"
          fi

      - name: Upload Phase 3 artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase3-assets-${{ matrix.asset_type }}
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Phase 3 Progress Report
        run: |
          echo "## 📊 Phase 3: Asset Generation (${{ matrix.asset_type }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Asset Type**: ${{ matrix.asset_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: Professional grade with consistent parameters" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Phase 4: Scene Video Generation (Matrix Parallel with URL Expiration Handling)
  scene-video-generation:
    runs-on: ubuntu-latest
    needs: [setup-and-info-gathering, content-structure, asset-generation]
    timeout-minutes: 15
    strategy:
      matrix:
        scene_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      max-parallel: 6  # Reduced from 12 to manage resources and avoid API limits
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/
          merge-multiple: true

      - name: Generate scene ${{ matrix.scene_id }} video (Image→Video immediate conversion)
        id: generate-scene
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          SCENE_ID="${{ matrix.scene_id }}"
          
          # Check if caster image URL is available (prioritize Google URL)
          CASTER_URL=""
          if [ -f "$PROJECT_DIR/media/images/news_caster_url.txt" ]; then
            CASTER_URL=$(cat "$PROJECT_DIR/media/images/news_caster_url.txt")
            # Verify URL accessibility
            if curl -IfsS --max-time 10 "$CASTER_URL" >/dev/null 2>&1; then
              echo "✅ Using Google URL for scene $SCENE_ID: $CASTER_URL"
              USE_GOOGLE_URL=true
            else
              echo "⚠️ Google URL inaccessible, using local path for scene $SCENE_ID"
              USE_GOOGLE_URL=false
            fi
          else
            echo "ℹ️ Google URL not available, using local path for scene $SCENE_ID"
            USE_GOOGLE_URL=false
          fi

          # Create scene-specific prompt with immediate I2V conversion
          SCENE_PROMPT="シーン${SCENE_ID}の動画を生成してください。
          
          手順:
          1. まず、このシーン用の画像を生成または既存の画像を使用
          2. 即座に画像をビデオに変換（URL期限切れ防止のため）
          
          シーン${SCENE_ID}の要件:
          - 約6秒の動画
          - プロフェッショナルなニュース番組スタイル
          - キャスターの一貫性（同一人物、seed: 12345）
          - 1920x1080解像度、30fps
          - スムーズで自然な動き

          $(if [ "$USE_GOOGLE_URL" = "true" ]; then
            echo "ベース画像URL: $CASTER_URL"
          else
            echo "ベース画像パス: $PROJECT_DIR/media/images/news_caster.png"
          fi)

          出力: scene${SCENE_ID}_video.mp4"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-*,mcp__t2i-*,Write,Read" \
            --max-turns 80 \
            --permission-mode "acceptEdits" \
            -p "$SCENE_PROMPT"

          # Enhanced video validation
          VIDEO_FILE=$(find . -name "*.mp4" -o -name "*.mov" | head -1)
          if [ -n "$VIDEO_FILE" ] && [ -f "$VIDEO_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$VIDEO_FILE" 2>/dev/null || echo 0)
            
            # Enhanced validation: Size + format check
            if [ "$FILE_SIZE" -gt 300000 ]; then  # 300KB minimum
              if ffprobe "$VIDEO_FILE" >/dev/null 2>&1; then
                DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$VIDEO_FILE" 2>/dev/null || echo "0")
                if (( $(echo "$DURATION >= 5.0" | bc -l 2>/dev/null || echo 0) )); then
                  cp "$VIDEO_FILE" "$PROJECT_DIR/media/videos/scene${SCENE_ID}_video.mp4"
                  echo "✅ VALID SCENE $SCENE_ID: ${FILE_SIZE} bytes, ${DURATION}s"
                  echo "scene_${SCENE_ID}_status=success" >> $GITHUB_OUTPUT
                else
                  echo "❌ SCENE $SCENE_ID: Too short (${DURATION}s)"
                  echo "scene_${SCENE_ID}_status=failed" >> $GITHUB_OUTPUT
                fi
              else
                echo "❌ SCENE $SCENE_ID: Invalid video format"
                echo "scene_${SCENE_ID}_status=failed" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ SCENE $SCENE_ID: File too small (${FILE_SIZE} bytes)"
              echo "scene_${SCENE_ID}_status=failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ SCENE $SCENE_ID: No video file generated"
            echo "scene_${SCENE_ID}_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Upload scene ${{ matrix.scene_id }} artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase4-scene-${{ matrix.scene_id }}
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/media/videos/

      - name: Scene ${{ matrix.scene_id }} Progress Report
        if: always()
        run: |
          STATUS="${{ steps.generate-scene.outputs[format('scene_{0}_status', matrix.scene_id)] }}"
          if [ "$STATUS" = "success" ]; then
            echo "## 📊 Phase 4: Scene ${{ matrix.scene_id }} Video" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 📊 Phase 4: Scene ${{ matrix.scene_id }} Video" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ⚠️ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Scene ID**: ${{ matrix.scene_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Immediate I2V conversion after image generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Phase 5: Enhancement Processing (Mixed Parallel)
  enhancement-processing:
    runs-on: ubuntu-latest
    needs: [setup-and-info-gathering, content-structure, asset-generation, scene-video-generation]
    timeout-minutes: 10
    strategy:
      matrix:
        enhancement_type: [lipsync, bgm, graphics]
      max-parallel: 3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/
          merge-multiple: true

      - name: Lip-sync processing
        if: matrix.enhancement_type == 'lipsync'
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          # Check for available videos and audio
          VIDEO_COUNT=$(find "$PROJECT_DIR/media/videos" -name "scene*_video.mp4" | wc -l)
          AUDIO_FILE="$PROJECT_DIR/media/audio/narration.mp3"
          
          if [ "$VIDEO_COUNT" -gt 0 ] && [ -f "$AUDIO_FILE" ]; then
            LIPSYNC_PROMPT="生成されたシーン動画にナレーション音声を同期させるリップシンク処理を実行してください。

            要件:
            1. 音素解析に基づく正確な口の動き
            2. 同期ズレ50ms以内
            3. 自然な口の動き
            4. 全シーンの一貫した処理

            入力:
            - 動画ディレクトリ: $PROJECT_DIR/media/videos/
            - 音声ファイル: $AUDIO_FILE

            出力: リップシンク処理済み動画"

            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-*,Read,Write,Bash" \
              --max-turns 40 \
              --permission-mode "acceptEdits" \
              -p "$LIPSYNC_PROMPT"

            echo "✅ Lip-sync processing completed"
          else
            echo "⚠️ Insufficient materials for lip-sync: $VIDEO_COUNT videos, audio available: $([ -f "$AUDIO_FILE" ] && echo 'yes' || echo 'no')"
          fi

      - name: BGM and audio mixing
        if: matrix.enhancement_type == 'bgm'
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          BGM_PROMPT="ニュース番組らしいプロフェッショナルなBGMを生成し、音声レベルを調整してください。

          要件:
          1. ニュース番組の信頼感を演出
          2. ナレーションを邪魔しない適切なレベル（BGM: -20dB程度）
          3. 60秒の動画長に合わせた長さ
          4. 音声レベル正規化（-14LUFS）

          入力: ナレーション音声
          出力: BGM音声、ミックス済み音声"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2m-*,Bash,Write" \
            --max-turns 30 \
            --permission-mode "acceptEdits" \
            -p "$BGM_PROMPT"

          # Handle generated BGM
          BGM_FILE=$(find . -name "*.mp3" -o -name "*.wav" | head -1)
          if [ -n "$BGM_FILE" ] && [ -f "$BGM_FILE" ]; then
            cp "$BGM_FILE" "$PROJECT_DIR/media/audio/bgm.mp3"
            echo "✅ BGM generation and mixing completed"
          fi

      - name: Graphics and text overlay
        if: matrix.enhancement_type == 'graphics'
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          GRAPHICS_PROMPT="ニュース番組らしいテロップ、見出し、情報源表示などのグラフィック要素を作成してください。

          要件:
          1. 高い視認性と読みやすさ
          2. 情報の階層化表示
          3. 適切なタイミング設計
          4. ブランド統一感
          5. Rule of thirdsに基づく配置

          入力: ニュース情報、台本
          出力: グラフィック要素、テロップ設計"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Read" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "$GRAPHICS_PROMPT"

          # Create graphics specifications
          echo "Graphics and text overlay specifications created" > "$PROJECT_DIR/metadata/graphics_spec.txt"
          echo "✅ Graphics design completed"

      - name: Upload enhancement artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase5-enhancement-${{ matrix.enhancement_type }}
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Enhancement Progress Report
        run: |
          echo "## 📊 Phase 5: Enhancement (${{ matrix.enhancement_type }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ matrix.enhancement_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: Professional processing standards applied" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Phase 6: Final Integration and Quality Check
  final-integration:
    runs-on: ubuntu-latest
    needs: [setup-and-info-gathering, content-structure, asset-generation, scene-video-generation, enhancement-processing]
    timeout-minutes: 15
    outputs:
      final_video_path: ${{ steps.integrate.outputs.final_path }}
      quality_score: ${{ steps.quality-check.outputs.score }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/
          merge-multiple: true

      - name: Video integration and editing
        id: integrate
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          
          # Count available video files
          VIDEO_COUNT=$(find "$PROJECT_DIR/media/videos" -name "scene*_video.mp4" 2>/dev/null | wc -l)
          echo "Found $VIDEO_COUNT scene videos for integration"
          
          if [ "$VIDEO_COUNT" -gt 0 ]; then
            INTEGRATION_PROMPT="全てのシーン動画、音声、BGMを統合し、60秒の完成ニュース動画を作成してください。

            要件:
            1. スムーズなシーン間トランジション
            2. 音声レベル正規化（-14LUFS）
            3. 最終品質チェック
            4. 60秒±2秒の長さ
            5. YouTube等のプラットフォーム最適化

            入力:
            - シーン動画: $VIDEO_COUNT ファイル
            - ナレーション、BGM: $PROJECT_DIR/media/audio/
            - グラフィック仕様: $PROJECT_DIR/metadata/

            出力: final_news_video.mp4"

            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "Bash,Write,Read" \
              --max-turns 40 \
              --permission-mode "acceptEdits" \
              -p "$INTEGRATION_PROMPT"

            # Handle final video
            FINAL_VIDEO=$(find . -name "*final*.mp4" -o -name "*complete*.mp4" -o -name "*news*.mp4" | head -1)
            if [ -n "$FINAL_VIDEO" ] && [ -f "$FINAL_VIDEO" ]; then
              cp "$FINAL_VIDEO" "$PROJECT_DIR/final/final_news_video.mp4"
              echo "final_path=$PROJECT_DIR/final/final_news_video.mp4" >> $GITHUB_OUTPUT
              echo "✅ Final video integration completed"
            else
              echo "⚠️ Final video not found, attempting manual integration with FFmpeg"
              
              # Fallback: Manual FFmpeg integration
              cd "$PROJECT_DIR/media/videos"
              if ls scene*_video.mp4 >/dev/null 2>&1; then
                echo "file 'scene1_video.mp4'" > concat_list.txt
                for i in {2..12}; do
                  if [ -f "scene${i}_video.mp4" ]; then
                    echo "file 'scene${i}_video.mp4'" >> concat_list.txt
                  fi
                done
                
                ffmpeg -f concat -safe 0 -i concat_list.txt -c copy "$PROJECT_DIR/final/final_news_video.mp4" 2>/dev/null
                if [ -f "$PROJECT_DIR/final/final_news_video.mp4" ]; then
                  echo "final_path=$PROJECT_DIR/final/final_news_video.mp4" >> $GITHUB_OUTPUT
                  echo "✅ Manual FFmpeg integration successful"
                else
                  echo "❌ Manual integration failed"
                fi
              fi
            fi
          else
            echo "❌ No scene videos available for integration"
          fi

      - name: Quality assurance check
        id: quality-check
        run: |
          PROJECT_DIR="${{ needs.setup-and-info-gathering.outputs.project_dir }}"
          FINAL_VIDEO="$PROJECT_DIR/final/final_news_video.mp4"
          
          if [ -f "$FINAL_VIDEO" ]; then
            # Basic quality checks
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_VIDEO" 2>/dev/null || echo 0)
            
            QUALITY_SCORE=0
            
            # Size check (minimum 5MB for 60s video)
            if [ "$FILE_SIZE" -gt 5000000 ]; then
              QUALITY_SCORE=$((QUALITY_SCORE + 30))
            fi
            
            # Duration check (58-62 seconds)
            if (( $(echo "$DURATION >= 58 && $DURATION <= 62" | bc -l 2>/dev/null || echo 0) )); then
              QUALITY_SCORE=$((QUALITY_SCORE + 40))
            fi
            
            # Format validation
            if ffprobe "$FINAL_VIDEO" >/dev/null 2>&1; then
              QUALITY_SCORE=$((QUALITY_SCORE + 30))
            fi
            
            echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
            echo "✅ Quality check completed: Score $QUALITY_SCORE/100"
            
            # Create quality report
            {
              echo "# Final Video Quality Report"
              echo "- **File Size**: ${FILE_SIZE} bytes"
              echo "- **Duration**: ${DURATION} seconds" 
              echo "- **Quality Score**: ${QUALITY_SCORE}/100"
              echo "- **Status**: $([ $QUALITY_SCORE -gt 70 ] && echo 'PASS' || echo 'NEEDS_IMPROVEMENT')"
            } > "$PROJECT_DIR/final/quality_report.md"
          else
            echo "score=0" >> $GITHUB_OUTPUT
            echo "❌ Final video not available for quality check"
          fi

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-news-video
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/final/

      - name: Upload complete project
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complete-news-video-project
          path: ${{ needs.setup-and-info-gathering.outputs.project_dir }}/

      - name: Final Progress Report
        if: always()
        run: |
          QUALITY_SCORE="${{ steps.quality-check.outputs.score }}"
          
          echo "## 📊 Phase 6: Final Integration & Quality Check" >> $GITHUB_STEP_SUMMARY
          if [ "$QUALITY_SCORE" -gt 70 ]; then
            echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ⚠️ Needs Improvement" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Quality Score**: ${QUALITY_SCORE}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Output**: 60-second professional news video" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Final Summary Report
  workflow-summary:
    runs-on: ubuntu-latest
    needs: [setup-and-info-gathering, content-structure, asset-generation, scene-video-generation, enhancement-processing, final-integration]
    if: always()
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "# 🎬 News Video Creation Workflow - Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Workflow Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic**: ${{ needs.setup-and-info-gathering.outputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Style**: ${{ inputs.style }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Language**: ${{ inputs.language }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Duration**: 60 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ Phase Completion Status" >> $GITHUB_STEP_SUMMARY
          echo "1. **Information Gathering**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "2. **Content Structure**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "3. **Asset Generation**: $([ '${{ needs.asset-generation.result }}' = 'success' ] && echo '✅ Success' || echo '⚠️ Partial')" >> $GITHUB_STEP_SUMMARY
          echo "4. **Scene Video Generation**: $([ '${{ needs.scene-video-generation.result }}' = 'success' ] && echo '✅ Success' || echo '⚠️ Partial')" >> $GITHUB_STEP_SUMMARY
          echo "5. **Enhancement Processing**: $([ '${{ needs.enhancement-processing.result }}' = 'success' ] && echo '✅ Success' || echo '⚠️ Partial')" >> $GITHUB_STEP_SUMMARY
          echo "6. **Final Integration**: $([ '${{ needs.final-integration.result }}' = 'success' ] && echo '✅ Success' || echo '⚠️ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Final Results" >> $GITHUB_STEP_SUMMARY
          FINAL_QUALITY="${{ needs.final-integration.outputs.quality_score }}"
          if [ -n "$FINAL_QUALITY" ] && [ "$FINAL_QUALITY" -gt 70 ]; then
            echo "- **Overall Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Quality Score**: ${FINAL_QUALITY}/100 (PASS)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Overall Status**: ⚠️ Partial Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Quality Score**: ${FINAL_QUALITY:-0}/100" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Complete Project**: \`complete-news-video-project\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: \`final-news-video\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Scene Videos**: \`phase4-scene-*\` (12 scenes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Assets**: \`phase3-assets-*\` (audio, images)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Technical Implementation Highlights" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Expiration Mitigation**: ✅ Immediate I2V conversion strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Processing**: ✅ Matrix orchestration for scene generation" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Validation**: ✅ Enhanced file size and format validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Error Recovery**: ✅ Fallback methods for integration" >> $GITHUB_STEP_SUMMARY
          echo "- **Progressive Reporting**: ✅ Real-time status updates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Meta-Workflow v12 - Improved Version*" >> $GITHUB_STEP_SUMMARY