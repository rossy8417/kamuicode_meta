name: "Professional News Video Generation Workflow"

on:
  workflow_dispatch:
    inputs:
      video_title:
        description: "動画のタイトル"
        required: true
        type: string
        default: "AIが変える未来の教育"
      
      duration:
        description: "動画の長さ"
        required: true
        type: choice
        options:
          - "15s"
          - "30s"
          - "60s"
          - "90s"
          - "3min"
          - "5min"
          - "10min"
          - "15min"
          - "30min"
        default: "60s"
      
      target_platform:
        description: "配信プラットフォーム"
        required: true
        type: choice
        options:
          - "youtube"
          - "instagram"
          - "tiktok"
          - "twitter"
          - "linkedin"
          - "web"
          - "broadcast"
        default: "youtube"
      
      content_type:
        description: "コンテンツの種類"
        required: true
        type: choice
        options:
          - "promotional"
          - "educational"
          - "entertainment"
          - "documentary"
          - "tutorial"
          - "news"
          - "music_video"
        default: "news"
      
      visual_style:
        description: "ビジュアルスタイル"
        required: false
        type: choice
        options:
          - "cinematic"
          - "anime"
          - "documentary"
          - "corporate"
          - "vlog"
          - "artistic"
          - "minimalist"
        default: "cinematic"
      
      pacing:
        description: "編集ペース"
        required: false
        type: choice
        options:
          - "slow"
          - "normal"
          - "fast"
          - "dynamic"
        default: "normal"
      
      narration_voice:
        description: "ナレーション音声"
        required: false
        type: choice
        options:
          - "male_professional"
          - "female_professional"
          - "male_casual"
          - "female_casual"
          - "ai_neutral"
          - "child"
          - "elderly"
        default: "female_professional"
      
      performance_mode:
        description: "処理モード"
        required: false
        type: choice
        options:
          - "quality"
          - "balanced"
          - "speed"
        default: "balanced"

env:
  ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  setup-environment:
    name: "Phase 1: Foundation Setup"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      timestamp: ${{ steps.setup.outputs.timestamp }}
      workflow_start: ${{ steps.setup.outputs.workflow_start }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Project Environment
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_NAME="news-video-${{ inputs.video_title }}"
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          PROJECT_DIR="${GITHUB_WORKSPACE}/projects/${PROJECT_NAME}-${TIMESTAMP}"
          
          mkdir -p "${PROJECT_DIR}"/{metadata,logs,media/{images,videos,audio},final}
          mkdir -p "${PROJECT_DIR}/intermediate"
          
          echo "project_dir=${PROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "workflow_start=${{ github.run_started_at }}" >> $GITHUB_OUTPUT
          
          echo "{
            \"video_title\": \"${{ inputs.video_title }}\",
            \"duration\": \"${{ inputs.duration }}\",
            \"target_platform\": \"${{ inputs.target_platform }}\",
            \"content_type\": \"${{ inputs.content_type }}\",
            \"visual_style\": \"${{ inputs.visual_style }}\",
            \"pacing\": \"${{ inputs.pacing }}\",
            \"narration_voice\": \"${{ inputs.narration_voice }}\",
            \"performance_mode\": \"${{ inputs.performance_mode }}\",
            \"timestamp\": \"${TIMESTAMP}\",
            \"project_dir\": \"${PROJECT_DIR}\"
          }" > "${PROJECT_DIR}/metadata/parameters.json"
          
          echo "✅ Project environment setup complete"
          echo "📁 Project Directory: ${PROJECT_DIR}"
      
      - name: Upload Project Structure
        uses: actions/upload-artifact@v4
        with:
          name: project-structure
          path: ${{ steps.setup.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 1: Foundation Setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ inputs.video_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration Target**: ${{ inputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ inputs.target_platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  gather-news-information:
    name: "Phase 2: Multi-source News Collection"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: setup-environment
    outputs:
      search_results: ${{ steps.search.outputs.results_file }}
      info_quality_score: ${{ steps.validate.outputs.quality_score }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Project Structure
        uses: actions/download-artifact@v4
        with:
          name: project-structure
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Multi-source Information Gathering
        id: search
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          for attempt in {1..3}; do
            if npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "WebSearch,Write,Read" \
              --max-turns 15 \
              --permission-mode "acceptEdits" \
              -p "Search for recent news about '${{ inputs.video_title }}'. 

              Requirements:
              1. Search from multiple reliable news sources
              2. Focus on information from last 24-48 hours
              3. Gather at least 3-5 different perspective sources
              4. Save search results in structured JSON format
              5. Include source credibility assessment
              6. Extract key facts, quotes, and statistics
              
              Output to: ${PROJECT_DIR}/metadata/search_results.json
              Include: title, url, snippet, relevance_score, source_credibility, publish_date"; then
              break
            fi
            echo "⚠️ Retry $attempt/3 for news gathering..."
            sleep $((attempt * 5))
          done
          
          RESULTS_FILE="${PROJECT_DIR}/metadata/search_results.json"
          echo "results_file=${RESULTS_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ]; then
            echo "✅ News information gathered successfully"
            echo "[$(date)] News gathering completed" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Failed to gather news information"
            exit 1
          fi
      
      - name: Validate Information Quality
        id: validate
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          RESULTS_FILE="${{ steps.search.outputs.results_file }}"
          
          if [ -f "$RESULTS_FILE" ]; then
            SOURCE_COUNT=$(jq 'length' "$RESULTS_FILE" 2>/dev/null || echo 0)
            RECENT_COUNT=$(jq '[.[] | select(.publish_date and (.publish_date | fromdateiso8601) > (now - 172800))] | length' "$RESULTS_FILE" 2>/dev/null || echo 0)
            
            if [ "$SOURCE_COUNT" -ge 3 ] && [ "$RECENT_COUNT" -ge 2 ]; then
              QUALITY_SCORE=90
              echo "✅ Information quality: High ($SOURCE_COUNT sources, $RECENT_COUNT recent)"
            elif [ "$SOURCE_COUNT" -ge 2 ]; then
              QUALITY_SCORE=75
              echo "⚠️ Information quality: Medium ($SOURCE_COUNT sources)"
            else
              QUALITY_SCORE=60
              echo "⚠️ Information quality: Low ($SOURCE_COUNT sources)"
            fi
            
            echo "quality_score=${QUALITY_SCORE}" >> $GITHUB_OUTPUT
          else
            echo "quality_score=0" >> $GITHUB_OUTPUT
            echo "❌ No search results found"
            exit 1
          fi
      
      - name: Upload Search Results
        uses: actions/upload-artifact@v4
        with:
          name: search-results
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 2: Information Gathering" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Score**: ${{ steps.validate.outputs.quality_score }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ~4 minutes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  fact-check-analysis:
    name: "Phase 3: Information Reliability Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup-environment, gather-news-information]
    outputs:
      analysis_report: ${{ steps.analyze.outputs.report_file }}
      reliability_score: ${{ steps.analyze.outputs.reliability_score }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: search-results
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Fact-checking and Reliability Analysis
        id: analyze
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          for attempt in {1..3}; do
            if npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "Read,Write" \
              --max-turns 20 \
              --permission-mode "acceptEdits" \
              -p "Analyze the gathered news information for reliability and fact-checking.
              
              Input file: ${PROJECT_DIR}/metadata/search_results.json
              
              Requirements:
              1. Cross-reference information between sources
              2. Identify consistent facts vs conflicting reports
              3. Assess source credibility and bias
              4. Flag potential misinformation or unverified claims
              5. Calculate overall reliability score (0-100)
              6. Extract verified key facts for video script
              
              Output structured analysis to: ${PROJECT_DIR}/metadata/analysis_report.json
              Include: reliability_assessment, verified_facts, source_evaluation, recommendations"; then
              break
            fi
            echo "⚠️ Retry $attempt/3 for fact-checking..."
            sleep $((attempt * 10))
          done
          
          REPORT_FILE="${PROJECT_DIR}/metadata/analysis_report.json"
          echo "report_file=${REPORT_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$REPORT_FILE" ] && [ -s "$REPORT_FILE" ]; then
            RELIABILITY_SCORE=$(jq -r '.reliability_score // 0' "$REPORT_FILE")
            echo "reliability_score=${RELIABILITY_SCORE}" >> $GITHUB_OUTPUT
            
            if [ "$RELIABILITY_SCORE" -ge 85 ]; then
              echo "✅ High reliability information verified (${RELIABILITY_SCORE}%)"
            elif [ "$RELIABILITY_SCORE" -ge 70 ]; then
              echo "⚠️ Medium reliability information (${RELIABILITY_SCORE}%)"
            else
              echo "⚠️ Low reliability detected (${RELIABILITY_SCORE}%). Manual review recommended."
            fi
            echo "[$(date)] Fact-checking completed: ${RELIABILITY_SCORE}%" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Analysis failed"
            exit 1
          fi
      
      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 3: Reliability Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Reliability Score**: ${{ steps.analyze.outputs.reliability_score }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis Type**: Multi-source fact-checking" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  structure-content:
    name: "Phase 4: 60-Second Story Structure"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup-environment, fact-check-analysis]
    outputs:
      story_structure: ${{ steps.structure.outputs.structure_file }}
      scene_count: ${{ steps.structure.outputs.scene_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: analysis-results
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Structure Content for 60-Second Format
        id: structure
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --max-turns 15 \
            --permission-mode "acceptEdits" \
            -p "Create a structured 60-second news video format from analyzed information.

            Input: ${PROJECT_DIR}/metadata/analysis_report.json
            Target Duration: ${{ inputs.duration }}
            Content Type: ${{ inputs.content_type }}
            Platform: ${{ inputs.target_platform }}

            Required Structure:
            1. Hook Section (0-8s): Attention-grabbing opening
            2. Information Section (8-45s): Core news content
            3. Resolution/CTA Section (45-60s): Conclusion and call-to-action

            Output structured plan to: ${PROJECT_DIR}/metadata/story_structure.json
            Include:
            - scene_breakdown: Array of 10-12 scenes (6-8s each)
            - narrative_arc: Emotional progression
            - visual_requirements: Scene-specific image prompts
            - pacing_notes: Transition timing
            - engagement_hooks: Viewer retention elements

            Consider viewer psychology: 3-second hook for 50% retention, 8-second commit for 80% retention"
          
          STRUCTURE_FILE="${PROJECT_DIR}/metadata/story_structure.json"
          echo "structure_file=${STRUCTURE_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$STRUCTURE_FILE" ] && [ -s "$STRUCTURE_FILE" ]; then
            SCENE_COUNT=$(jq -r '.scene_breakdown | length' "$STRUCTURE_FILE" 2>/dev/null || echo 0)
            echo "scene_count=${SCENE_COUNT}" >> $GITHUB_OUTPUT
            echo "✅ Story structure created: ${SCENE_COUNT} scenes"
            echo "[$(date)] Content structuring completed" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Story structuring failed"
            exit 1
          fi
      
      - name: Upload Story Structure
        uses: actions/upload-artifact@v4
        with:
          name: story-structure
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 4: Content Structure" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Scene Count**: ${{ steps.structure.outputs.scene_count }} scenes" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Duration**: ${{ inputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Structure**: Hook(0-8s) → Content(8-45s) → CTA(45-60s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  create-script-and-visuals:
    name: "Phase 5: Parallel Script & Visual Planning"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup-environment, structure-content]
    outputs:
      narration_script: ${{ steps.script.outputs.script_file }}
      visual_plan: ${{ steps.visuals.outputs.plan_file }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Story Structure
        uses: actions/download-artifact@v4
        with:
          name: story-structure
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Create Professional Narration Script
        id: script
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --max-turns 15 \
            --permission-mode "acceptEdits" \
            -p "Create professional news anchor quality Japanese narration script.

            Input: ${PROJECT_DIR}/metadata/story_structure.json
            Voice Style: ${{ inputs.narration_voice }}
            Content Type: ${{ inputs.content_type }}

            Requirements:
            1. Professional news anchor tone and pacing
            2. Exact 60-second reading time (300-350 characters/minute Japanese)
            3. Natural source attribution integration
            4. Clear pronunciation markers for TTS
            5. Appropriate pauses and emphasis markers
            6. Technical terms with pronunciation guides

            Output to: ${PROJECT_DIR}/metadata/narration_script.json
            Include: full_script, timing_markers, pronunciation_notes, source_citations"
          
          SCRIPT_FILE="${PROJECT_DIR}/metadata/narration_script.json"
          echo "script_file=${SCRIPT_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$SCRIPT_FILE" ] && [ -s "$SCRIPT_FILE" ]; then
            echo "✅ Professional narration script created"
          else
            echo "❌ Script creation failed"
            exit 1
          fi
      
      - name: Design Visual Scene Plan
        id: visuals
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --max-turns 12 \
            --permission-mode "acceptEdits" \
            -p "Design comprehensive visual scene plan for news video.

            Input: ${PROJECT_DIR}/metadata/story_structure.json
            Visual Style: ${{ inputs.visual_style }}
            Platform: ${{ inputs.target_platform }}

            Requirements:
            1. Professional news studio environment setup
            2. 10-12 individual scene visual designs
            3. Consistent brand colors (blue theme for credibility)
            4. Rule of thirds composition
            5. 1920x1080 resolution optimization
            6. Platform-specific visual considerations

            Output to: ${PROJECT_DIR}/metadata/visual_plan.json
            Include: scene_descriptions, image_prompts, composition_notes, style_consistency"
          
          PLAN_FILE="${PROJECT_DIR}/metadata/visual_plan.json"
          echo "plan_file=${PLAN_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$PLAN_FILE" ] && [ -s "$PLAN_FILE" ]; then
            echo "✅ Visual plan designed"
          else
            echo "❌ Visual planning failed"
            exit 1
          fi
      
      - name: Upload Script and Visual Plans
        uses: actions/upload-artifact@v4
        with:
          name: script-and-visuals
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 5: Script & Visual Planning" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed (Parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- **Narration**: Professional anchor style" >> $GITHUB_STEP_SUMMARY
          echo "- **Visual Style**: ${{ inputs.visual_style }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resolution**: 1920x1080 (broadcast quality)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  generate-audio:
    name: "Phase 6: Professional Narration Generation"
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: [setup-environment, create-script-and-visuals]
    outputs:
      audio_file: ${{ steps.tts.outputs.audio_file }}
      audio_duration: ${{ steps.tts.outputs.duration }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Script and Visual Plans
        uses: actions/download-artifact@v4
        with:
          name: script-and-visuals
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Check MCP Connection Timing
        env:
          WORKFLOW_START: ${{ needs.setup-environment.outputs.workflow_start }}
        run: |
          ELAPSED_MINUTES=$(( ($(date +%s) - $(date -d "$WORKFLOW_START" +%s)) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection Safe - Elapsed: ${ELAPSED_MINUTES} minutes"
          else
            echo "⚠️ MCP Connection Risk - Elapsed: ${ELAPSED_MINUTES} minutes"
            echo "Switching to fallback TTS method"
            exit 0  # Will trigger fallback
          fi
      
      - name: Generate Professional TTS Audio
        id: tts
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          for attempt in {1..3}; do
            if npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__t2s-fal-minimax-speech-02-turbo,Write,Read" \
              --max-turns 15 \
              --permission-mode "acceptEdits" \
              -p "Generate professional Japanese news anchor audio.

              Input Script: ${PROJECT_DIR}/metadata/narration_script.json
              Voice Type: ${{ inputs.narration_voice }}

              TTS Parameters:
              - voice_id: Professional female Japanese anchor
              - speed: 1.0 (natural news reading pace)  
              - pitch: 0 (neutral professional tone)
              - emotion: neutral (credible news tone)
              - sample_rate: 44100
              - format: mp3

              Requirements:
              1. Clear pronunciation for news content
              2. Appropriate pauses and breathing
              3. Professional broadcast quality
              4. Target duration: 60 seconds
              5. Audio level: -14 LUFS (YouTube optimization)

              Save audio file to: ${PROJECT_DIR}/media/audio/narration.mp3
              Generate metadata JSON with duration and quality info"; then
              break
            fi
            echo "⚠️ Retry $attempt/3 for TTS generation..."
            sleep $((attempt * 5))
          done
          
          AUDIO_FILE="${PROJECT_DIR}/media/audio/narration.mp3"
          
          if [ -f "$AUDIO_FILE" ] && [ -s "$AUDIO_FILE" ]; then
            # Get audio duration using ffprobe if available
            if command -v ffprobe >/dev/null; then
              DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$AUDIO_FILE" 2>/dev/null || echo "60")
            else
              DURATION="60"  # Default assumption
            fi
            
            echo "audio_file=${AUDIO_FILE}" >> $GITHUB_OUTPUT
            echo "duration=${DURATION}" >> $GITHUB_OUTPUT
            echo "✅ Professional TTS audio generated (${DURATION}s)"
            echo "[$(date)] TTS generation completed" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ TTS generation failed"
            exit 1
          fi
      
      - name: Upload Audio Files
        uses: actions/upload-artifact@v4
        with:
          name: audio-files
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/audio/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 6: Audio Generation" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ steps.tts.outputs.duration }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: Professional broadcast (-14 LUFS)" >> $GITHUB_STEP_SUMMARY
          echo "- **Voice**: ${{ inputs.narration_voice }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  generate-images-batch1:
    name: "Phase 7A: Generate Studio Images (Batch 1)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup-environment, create-script-and-visuals]
    outputs:
      image_batch1: ${{ steps.generate.outputs.image_files }}
      image_count1: ${{ steps.generate.outputs.count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Visual Plans
        uses: actions/download-artifact@v4
        with:
          name: script-and-visuals
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Check MCP Connection Status
        env:
          WORKFLOW_START: ${{ needs.setup-environment.outputs.workflow_start }}
        run: |
          ELAPSED_MINUTES=$(( ($(date +%s) - $(date -d "$WORKFLOW_START" +%s)) / 60 ))
          
          if [ $ELAPSED_MINUTES -lt 12 ]; then
            echo "✅ MCP Connection OK - ${ELAPSED_MINUTES}min elapsed"
          else
            echo "⚠️ MCP timeout risk - using fallback after ${ELAPSED_MINUTES}min"
            exit 1
          fi
      
      - name: Generate Professional News Studio Images (1-5)
        id: generate
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-kamui-imagen3__imagen_t2i,Write,Read" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "Generate first batch of professional news video images (scenes 1-5).

            Input Visual Plan: ${PROJECT_DIR}/metadata/visual_plan.json
            Visual Style: ${{ inputs.visual_style }}
            
            Requirements for Batch 1:
            1. Professional news studio backgrounds
            2. News anchor desk/environment setups  
            3. Credibility-focused blue color scheme
            4. 1920x1080 resolution (16:9 aspect ratio)
            5. Consistent lighting and composition
            6. Professional broadcast quality
            
            Generate exactly 5 images for scenes 1-5:
            - Scene 1: Opening hook visual
            - Scene 2: News studio establishment shot
            - Scene 3: Topic introduction visual
            - Scene 4: Key information graphic
            - Scene 5: Supporting evidence visual
            
            Save images and metadata to: ${PROJECT_DIR}/media/images/
            Name format: scene_01.png, scene_02.png, etc.
            Record Google Storage URLs for immediate video conversion
            Create URL tracking file: image_urls_batch1.txt"
          
          sleep 2
          IMAGE_DIR="${PROJECT_DIR}/media/images"
          
          if [ -d "$IMAGE_DIR" ] && [ $(find "$IMAGE_DIR" -name "scene_*.png" -o -name "scene_*.jpg" | wc -l) -ge 4 ]; then
            IMAGE_COUNT=$(find "$IMAGE_DIR" -name "scene_0[1-5].*" | wc -l)
            IMAGE_FILES=$(find "$IMAGE_DIR" -name "scene_0[1-5].*" | head -5 | tr '\n' ',' | sed 's/,$//')
            
            echo "image_files=${IMAGE_FILES}" >> $GITHUB_OUTPUT
            echo "count=${IMAGE_COUNT}" >> $GITHUB_OUTPUT
            echo "✅ Generated ${IMAGE_COUNT} studio images (batch 1)"
            echo "[$(date)] Image batch 1 completed: ${IMAGE_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Image generation batch 1 failed"
            exit 1
          fi
      
      - name: Upload Image Batch 1
        uses: actions/upload-artifact@v4
        with:
          name: images-batch1
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/images/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 7A: Image Generation (Batch 1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Images Generated**: ${{ steps.generate.outputs.count }}/5" >> $GITHUB_STEP_SUMMARY
          echo "- **Style**: Professional news studio" >> $GITHUB_STEP_SUMMARY
          echo "- **Resolution**: 1920x1080" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  generate-images-batch2:
    name: "Phase 7B: Generate Content Images (Batch 2)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup-environment, create-script-and-visuals, generate-images-batch1]
    outputs:
      image_batch2: ${{ steps.generate.outputs.image_files }}
      image_count2: ${{ steps.generate.outputs.count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Visual Plans
        uses: actions/download-artifact@v4
        with:
          name: script-and-visuals
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Download Previous Images
        uses: actions/download-artifact@v4
        with:
          name: images-batch1
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/images/
      
      - name: Generate Remaining Content Images (6-10)
        id: generate
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-kamui-imagen3__imagen_t2i,Write,Read" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "Generate second batch of news content images (scenes 6-10).

            Input Visual Plan: ${PROJECT_DIR}/metadata/visual_plan.json
            Existing Images: Check ${PROJECT_DIR}/media/images/ for batch 1 consistency
            
            Requirements for Batch 2:
            1. Topic-specific content visuals
            2. Graphics and infographics
            3. Conclusion/CTA visuals
            4. Maintain visual consistency with batch 1
            5. Same resolution 1920x1080
            6. Blue professional theme continuation
            
            Generate exactly 5 more images for scenes 6-10:
            - Scene 6: Main content visual
            - Scene 7: Data/statistics graphic
            - Scene 8: Expert quote or citation
            - Scene 9: Impact/consequence visual
            - Scene 10: Call-to-action/conclusion
            
            Save to: ${PROJECT_DIR}/media/images/
            Name format: scene_06.png through scene_10.png
            Maintain URL tracking: image_urls_batch2.txt"
          
          sleep 2
          IMAGE_DIR="${PROJECT_DIR}/media/images"
          
          if [ -d "$IMAGE_DIR" ] && [ $(find "$IMAGE_DIR" -name "scene_*.png" -o -name "scene_*.jpg" | wc -l) -ge 8 ]; then
            IMAGE_COUNT=$(find "$IMAGE_DIR" -name "scene_0[6-9].*" -o -name "scene_10.*" | wc -l)
            IMAGE_FILES=$(find "$IMAGE_DIR" -name "scene_0[6-9].*" -o -name "scene_10.*" | head -5 | tr '\n' ',' | sed 's/,$//')
            
            echo "image_files=${IMAGE_FILES}" >> $GITHUB_OUTPUT
            echo "count=${IMAGE_COUNT}" >> $GITHUB_OUTPUT
            echo "✅ Generated ${IMAGE_COUNT} content images (batch 2)"
            echo "[$(date)] Image batch 2 completed: ${IMAGE_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Image generation batch 2 failed"
            exit 1
          fi
      
      - name: Upload Complete Image Set
        uses: actions/upload-artifact@v4
        with:
          name: all-images
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/images/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 7B: Image Generation (Batch 2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Images Generated**: ${{ steps.generate.outputs.count }}/5" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Images**: ${{ needs.generate-images-batch1.outputs.image_count1 + steps.generate.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Style**: Consistent content visuals" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  convert-videos-batch1:
    name: "Phase 8A: Convert Images to Videos (Batch 1)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup-environment, generate-images-batch1]
    outputs:
      video_batch1: ${{ steps.convert.outputs.video_files }}
      video_count1: ${{ steps.convert.outputs.count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Image Batch 1
        uses: actions/download-artifact@v4
        with:
          name: images-batch1
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/images/
      
      - name: Convert Images to Videos (Just-in-Time Processing)
        id: convert
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          # URL期限対策: 即座変換処理
          mkdir -p "${PROJECT_DIR}/media/videos"
          
          # Enhanced validation function with 300KB minimum
          validate_video_output() {
            local video_file="$1"
            local min_size="${2:-300000}"
            
            if [ -f "$video_file" ] && [ -s "$video_file" ]; then
              local file_size=$(stat -c%s "$video_file" 2>/dev/null || stat -f%z "$video_file" 2>/dev/null || echo 0)
              
              if [ "$file_size" -lt "$min_size" ]; then
                echo "❌ FILE TOO SMALL: $video_file (${file_size} bytes < ${min_size})"
                return 1
              fi
              
              echo "✅ VALID VIDEO: $video_file (${file_size} bytes)"
              return 0
            fi
            echo "❌ INVALID VIDEO: $video_file"
            return 1
          }
          
          # Google URL priority processing function
          convert_with_url_priority() {
            local scene_num="$1"
            local image_path="$2"
            
            # Check for Google URL first
            local url_file="${PROJECT_DIR}/media/images/scene_${scene_num}_url.txt"
            if [ -f "$url_file" ]; then
              local google_url=$(cat "$url_file")
              if [ -n "$google_url" ] && curl -IfsS --max-time 10 "$google_url" >/dev/null 2>&1; then
                echo "✅ Using Google URL for scene ${scene_num}"
                IMAGE_INPUT="$google_url"
              else
                echo "⚠️ Google URL expired, using local path"
                IMAGE_INPUT="file://${image_path}"
              fi
            else
              IMAGE_INPUT="file://${image_path}"
            fi
            
            # Execute I2V conversion
            for attempt in {1..3}; do
              if npx @anthropic-ai/claude-code \
                --max-turns 80 \
                --mcp-config ".claude/mcp-kamuicode.json" \
                --allowedTools "mcp__i2v-kamui-hailuo-02-pro,Write" \
                --permission-mode "acceptEdits" \
                -p "Convert image to professional 6-8 second video clip.
                
                Image Input: ${IMAGE_INPUT}
                Output: ${PROJECT_DIR}/media/videos/scene_${scene_num}_video.mp4
                
                Video Requirements:
                - Duration: 6-8 seconds
                - Resolution: 1920x1080 (maintain quality)  
                - Frame Rate: 30fps
                - Stable camera work (news appropriate)
                - Natural motion (minimal but professional)
                - Broadcast quality output
                
                Motion Style: News broadcast appropriate - stable, professional camera movement"; then
                break
              fi
              echo "⚠️ Retry $attempt/3 for scene ${scene_num}..."
              sleep $((attempt * 10))
            done
          }
          
          # Convert batch 1 images (scenes 1-5)
          SUCCESS_COUNT=0
          for scene in 01 02 03 04 05; do
            IMAGE_FILE=$(find "${PROJECT_DIR}/media/images" -name "scene_${scene}.*" | head -1)
            if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
              echo "🔄 Converting scene ${scene} to video..."
              convert_with_url_priority "$scene" "$IMAGE_FILE"
              
              # Validate output
              VIDEO_FILE="${PROJECT_DIR}/media/videos/scene_${scene}_video.mp4"
              if validate_video_output "$VIDEO_FILE"; then
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              fi
            fi
          done
          
          # Collect successful video files
          VIDEO_FILES=$(find "${PROJECT_DIR}/media/videos" -name "scene_0[1-5]_video.mp4" | tr '\n' ',' | sed 's/,$//')
          
          echo "video_files=${VIDEO_FILES}" >> $GITHUB_OUTPUT
          echo "count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          
          if [ "$SUCCESS_COUNT" -ge 3 ]; then
            echo "✅ Video conversion batch 1: ${SUCCESS_COUNT}/5 successful"
            echo "[$(date)] Video batch 1 completed: ${SUCCESS_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "⚠️ Low success rate: ${SUCCESS_COUNT}/5. Continuing with available videos."
            echo "[$(date)] Video batch 1 low success: ${SUCCESS_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          fi
      
      - name: Upload Video Batch 1
        uses: actions/upload-artifact@v4
        with:
          name: videos-batch1
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/videos/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 8A: Video Conversion (Batch 1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Videos Created**: ${{ steps.convert.outputs.count }}/5" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: 1920x1080, 30fps, 6-8s each" >> $GITHUB_STEP_SUMMARY
          echo "- **Processing**: Just-in-time (URL expiration safe)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  convert-videos-batch2:
    name: "Phase 8B: Convert Images to Videos (Batch 2)"  
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup-environment, generate-images-batch2, convert-videos-batch1]
    outputs:
      video_batch2: ${{ steps.convert.outputs.video_files }}
      video_count2: ${{ steps.convert.outputs.count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Images
        uses: actions/download-artifact@v4
        with:
          name: all-images
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/images/
      
      - name: Download Previous Videos
        uses: actions/download-artifact@v4
        with:
          name: videos-batch1
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/videos/
      
      - name: Convert Remaining Images to Videos (6-10)
        id: convert
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          # Enhanced validation function
          validate_video_output() {
            local video_file="$1"
            local min_size="${2:-300000}"
            
            if [ -f "$video_file" ] && [ -s "$video_file" ]; then
              local file_size=$(stat -c%s "$video_file" 2>/dev/null || stat -f%z "$video_file" 2>/dev/null || echo 0)
              
              if [ "$file_size" -lt "$min_size" ]; then
                echo "❌ FILE TOO SMALL: $video_file (${file_size} bytes)"
                return 1
              fi
              
              echo "✅ VALID VIDEO: $video_file (${file_size} bytes)"
              return 0
            fi
            return 1
          }
          
          # Convert batch 2 images (scenes 6-10)
          SUCCESS_COUNT=0
          for scene in 06 07 08 09 10; do
            IMAGE_FILE=$(find "${PROJECT_DIR}/media/images" -name "scene_${scene}.*" | head -1)
            if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
              echo "🔄 Converting scene ${scene} to video..."
              
              for attempt in {1..3}; do
                if npx @anthropic-ai/claude-code \
                  --max-turns 80 \
                  --mcp-config ".claude/mcp-kamuicode.json" \
                  --allowedTools "mcp__i2v-kamui-hailuo-02-pro,Write,Read" \
                  --permission-mode "acceptEdits" \
                  -p "Convert image to professional video clip (batch 2 consistency).
                  
                  Image: ${IMAGE_FILE}
                  Output: ${PROJECT_DIR}/media/videos/scene_${scene}_video.mp4
                  
                  Requirements:
                  - Duration: 6-8 seconds (match batch 1)
                  - Resolution: 1920x1080  
                  - Frame Rate: 30fps
                  - Visual consistency with previous scenes
                  - Professional news broadcast style
                  - Stable, appropriate motion for content scenes
                  - File size: minimum 300KB (quality assurance)"; then
                  break
                fi
                echo "⚠️ Retry $attempt/3 for scene ${scene}..."
                sleep $((attempt * 10))
              done
              
              # Validate output
              VIDEO_FILE="${PROJECT_DIR}/media/videos/scene_${scene}_video.mp4"
              if validate_video_output "$VIDEO_FILE"; then
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              fi
            fi
          done
          
          # Collect batch 2 video files
          VIDEO_FILES=$(find "${PROJECT_DIR}/media/videos" -name "scene_0[6-9]_video.mp4" -o -name "scene_10_video.mp4" | tr '\n' ',' | sed 's/,$//')
          
          echo "video_files=${VIDEO_FILES}" >> $GITHUB_OUTPUT
          echo "count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          
          if [ "$SUCCESS_COUNT" -ge 3 ]; then
            echo "✅ Video conversion batch 2: ${SUCCESS_COUNT}/5 successful"
            echo "[$(date)] Video batch 2 completed: ${SUCCESS_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "⚠️ Batch 2 low success rate: ${SUCCESS_COUNT}/5"
            echo "[$(date)] Video batch 2 low success: ${SUCCESS_COUNT} files" >> "${PROJECT_DIR}/logs/execution.log"
          fi
      
      - name: Upload All Videos
        uses: actions/upload-artifact@v4
        with:
          name: all-videos
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/videos/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 8B: Video Conversion (Batch 2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Videos Created**: ${{ steps.convert.outputs.count }}/5" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Videos**: ${{ needs.convert-videos-batch1.outputs.video_count1 + steps.convert.outputs.count }}/10" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: Consistent broadcast standard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  create-editing-plan:
    name: "Phase 9: Professional Editing Plan"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup-environment, generate-audio, convert-videos-batch2]
    outputs:
      editing_plan: ${{ steps.plan.outputs.plan_file }}
      final_duration: ${{ steps.plan.outputs.duration }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Media Assets
        uses: actions/download-artifact@v4
        with:
          name: all-videos
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/videos/
      
      - name: Download Audio Files
        uses: actions/download-artifact@v4
        with:
          name: audio-files
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/audio/
      
      - name: Create Comprehensive Editing Plan
        id: plan
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --max-turns 20 \
            --permission-mode "acceptEdits" \
            -p "Create professional video editing plan for news broadcast quality.

            Available Assets:
            - Videos: ${PROJECT_DIR}/media/videos/ (scene_01 through scene_10)
            - Audio: ${PROJECT_DIR}/media/audio/narration.mp3
            - Target: ${{ inputs.duration }} final video
            - Platform: ${{ inputs.target_platform }}

            Analysis Requirements:
            1. Inventory all available video clips (duration, quality, content)
            2. Analyze narration audio timing and sync points
            3. Calculate optimal scene transitions and cuts
            4. Plan audio sync and mixing levels
            5. Design professional transitions between scenes
            6. Calculate exact timeline (0-60 seconds)

            Output Comprehensive Plan:
            - Detailed timeline with exact timecodes
            - FFmpeg command sequences for execution
            - Audio mixing specifications (-14 LUFS target)
            - Transition timing and effects
            - Quality control checkpoints
            - Final specifications (1920x1080, 30fps)

            Save to: ${PROJECT_DIR}/metadata/editing_plan.json
            Include: timeline, commands, quality_specs, sync_points"
          
          PLAN_FILE="${PROJECT_DIR}/metadata/editing_plan.json"
          echo "plan_file=${PLAN_FILE}" >> $GITHUB_OUTPUT
          
          if [ -f "$PLAN_FILE" ] && [ -s "$PLAN_FILE" ]; then
            TARGET_DURATION="${{ inputs.duration }}"
            DURATION_SECONDS=$(echo "$TARGET_DURATION" | sed 's/[^0-9]//g')
            echo "duration=${DURATION_SECONDS}" >> $GITHUB_OUTPUT
            echo "✅ Professional editing plan created"
            echo "[$(date)] Editing plan completed for ${TARGET_DURATION}" >> "${PROJECT_DIR}/logs/execution.log"
          else
            echo "❌ Editing plan creation failed"
            exit 1
          fi
      
      - name: Upload Editing Plan
        uses: actions/upload-artifact@v4
        with:
          name: editing-plan
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Report Progress
        if: always()
        run: |
          echo "## 📊 Phase 9: Editing Plan" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Duration**: ${{ inputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Audio Standard**: -14 LUFS (YouTube optimized)" >> $GITHUB_STEP_SUMMARY
          echo "- **Video Quality**: 1920x1080, 30fps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  final-video-production:
    name: "Phase 10: Final Video Production"
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [setup-environment, create-editing-plan]
    outputs:
      final_video: ${{ steps.produce.outputs.final_file }}
      production_quality: ${{ steps.produce.outputs.quality_score }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Media Assets
        uses: actions/download-artifact@v4
        with:
          name: all-videos
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/videos/
      
      - name: Download Audio Files
        uses: actions/download-artifact@v4
        with:
          name: audio-files
          path: ${{ needs.setup-environment.outputs.project_dir }}/media/audio/
      
      - name: Download Editing Plan
        uses: actions/download-artifact@v4
        with:
          name: editing-plan
          path: ${{ needs.setup-environment.outputs.project_dir }}/metadata/
      
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Professional Video Production
        id: produce
        env:
          PROJECT_DIR: ${{ needs.setup-environment.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Bash" \
            --max-turns 25 \
            --permission-mode "acceptEdits" \
            -p "Execute professional news video production using editing plan.

            Input:
            - Editing Plan: ${PROJECT_DIR}/metadata/editing_plan.json
            - Video Assets: ${PROJECT_DIR}/media/videos/
            - Audio Assets: ${PROJECT_DIR}/media/audio/
            - Target Platform: ${{ inputs.target_platform }}

            Production Requirements:
            1. Execute FFmpeg commands from editing plan
            2. Concatenate all video clips with professional transitions
            3. Sync narration audio with perfect timing
            4. Apply broadcast-quality color correction
            5. Normalize audio to -14 LUFS (YouTube standard)
            6. Ensure 1920x1080 resolution at 30fps
            7. Apply platform-specific encoding settings

            Final Output: ${PROJECT_DIR}/final/news_video_final.mp4
            
            Quality Control:
            - Verify duration matches target: ${{ inputs.duration }}
            - Check audio/video sync accuracy
            - Validate broadcast technical specifications
            - Test file integrity and playability
            
            Generate production report with quality metrics and technical specs."
          
          FINAL_FILE="${PROJECT_DIR}/final/news_video_final.mp4"
          
          # Validate final production
          if [ -f "$FINAL_FILE" ] && [ -s "$FINAL_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_FILE" 2>/dev/null || echo 0)
            
            if [ "$FILE_SIZE" -gt 1000000 ]; then  # > 1MB indicates substantial content
              # Get video info if ffprobe available
              if command -v ffprobe >/dev/null; then
                ACTUAL_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_FILE" 2>/dev/null || echo "unknown")
                RESOLUTION=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv="s=x:p=0" "$FINAL_FILE" 2>/dev/null || echo "unknown")
                
                echo "✅ Final video produced successfully"
                echo "📊 File size: ${FILE_SIZE} bytes"
                echo "⏱️ Duration: ${ACTUAL_DURATION}s"
                echo "📺 Resolution: ${RESOLUTION}"
                
                # Quality assessment
                if [[ "$RESOLUTION" == "1920x1080" ]]; then
                  QUALITY_SCORE=95
                elif [[ "$RESOLUTION" == *"1080"* ]]; then
                  QUALITY_SCORE=85
                else
                  QUALITY_SCORE=75
                fi
              else
                QUALITY_SCORE=80
                echo "✅ Final video produced (quality checks limited)"
              fi
              
              echo "final_file=${FINAL_FILE}" >> $GITHUB_OUTPUT
              echo "quality_score=${QUALITY_SCORE}" >> $GITHUB_OUTPUT
              echo "[$(date)] Final production completed: ${FILE_SIZE} bytes" >> "${PROJECT_DIR}/logs/execution.log"
            else
              echo "❌ Final video too small (${FILE_SIZE} bytes)"
              exit 1
            fi
          else
            echo "❌ Final video production failed"
            exit 1
          fi
      
      - name: Upload Final Production
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-production
          path: ${{ needs.setup-environment.outputs.project_dir }}/final/
      
      - name: Upload Complete Project
        uses: actions/upload-artifact@v4  
        if: always()
        with:
          name: complete-project
          path: ${{ needs.setup-environment.outputs.project_dir }}/
      
      - name: Final Summary Report
        if: always()
        run: |
          echo "## 📊 Phase 10: Final Video Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: news_video_final.mp4" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Score**: ${{ steps.produce.outputs.quality_score }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Specifications**: 1920x1080, 30fps, -14 LUFS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "Professional news video generated successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Download Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Video**: \`final-production\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "- **Complete Project**: \`complete-project\` artifact" >> $GITHUB_STEP_SUMMARY