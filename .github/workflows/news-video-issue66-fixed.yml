name: News Video Generation Workflow

on:
  workflow_dispatch:
    inputs:
      topic:
        description: "ニュースのトピック（例：AI技術、気候変動、経済動向など）"
        required: true
        type: string
        default: "最新のAI技術動向"
      
      time_period:
        description: "期間指定"
        required: true
        type: choice
        options:
          - "直近1週間"
          - "直近1ヶ月"
          - "直近3ヶ月"
        default: "直近1週間"
      
      category:
        description: "ニュースカテゴリー"
        required: true
        type: choice
        options:
          - "テクノロジー"
          - "政治"
          - "経済"
          - "社会"
          - "エンタメ"
          - "スポーツ"
          - "科学"
          - "健康"
        default: "テクノロジー"
      
      video_duration:
        description: "動画の長さ（秒）"
        required: true
        type: choice
        options:
          - "30"
          - "60"
          - "90"
        default: "60"
      
      anchor_style:
        description: "アンカーのスタイル"
        required: true
        type: choice
        options:
          - "プロフェッショナル女性"
          - "プロフェッショナル男性"
          - "カジュアル女性"
          - "カジュアル男性"
        default: "プロフェッショナル女性"

  push:
    paths-ignore:
      - '.github/workflows/**'

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  setup:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      calculated_scene_count: ${{ steps.calculate.outputs.scene_count }}
      matrix_scenes: ${{ steps.calculate.outputs.matrix_scenes }}
      workflow_start: ${{ steps.setup.outputs.workflow_start }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup project environment
        id: setup
        run: |
          PROJECT_DIR="/home/runner/work/kamuicode_meta/kamuicode_meta/projects/news-video-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$PROJECT_DIR/media/images"
          mkdir -p "$PROJECT_DIR/media/videos"
          mkdir -p "$PROJECT_DIR/media/audio"
          mkdir -p "$PROJECT_DIR/metadata"
          mkdir -p "$PROJECT_DIR/logs"
          mkdir -p "$PROJECT_DIR/final"
          
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "workflow_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
          
          echo "✅ Project directory created: $PROJECT_DIR"

      - name: Calculate scene parameters
        id: calculate
        run: |
          DURATION="${{ github.event.inputs.video_duration }}"
          SCENE_COUNT=$((DURATION / 5))
          
          # Generate matrix array
          SCENES=""
          for i in $(seq 1 $SCENE_COUNT); do
            if [ -z "$SCENES" ]; then
              SCENES="$i"
            else
              SCENES="$SCENES, $i"
            fi
          done
          MATRIX_SCENES="[$SCENES]"
          
          echo "scene_count=$SCENE_COUNT" >> $GITHUB_OUTPUT
          echo "matrix_scenes=$MATRIX_SCENES" >> $GITHUB_OUTPUT
          
          echo "✅ Calculated: $SCENE_COUNT scenes, matrix: $MATRIX_SCENES"

  news_research:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      news_data: ${{ steps.research.outputs.news_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Conduct news research
        id: research
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          RESEARCH_PROMPT="ニュース情報収集と分析を実行してください：

          トピック: ${{ github.event.inputs.topic }}
          期間: ${{ github.event.inputs.time_period }}
          カテゴリー: ${{ github.event.inputs.category }}

          手順:
          1. WebSearchツールで複数の信頼性の高い日本語ニュースソース（NHK、朝日新聞、読売新聞、毎日新聞、Reuters Japan等）から最新情報を検索
          2. 収集した情報の信頼性評価と事実確認
          3. ${{ github.event.inputs.video_duration }}秒動画用の構成案作成
          4. 結果をJSONファイル: ${PROJECT_DIR}/metadata/news_research.json に保存（Writeツール使用）
          5. lsコマンドで保存確認（Bashツール使用）

          出力形式:
          {
            \"topic\": \"トピック\",
            \"sources\": [\"情報源1\", \"情報源2\"],
            \"key_facts\": [\"事実1\", \"事実2\"],
            \"reliability_score\": 85,
            \"composition_plan\": \"構成案概要\"
          }"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$RESEARCH_PROMPT"

          # Verify research results
          ls -la "$PROJECT_DIR/metadata/"
          
          if [ -f "$PROJECT_DIR/metadata/news_research.json" ]; then
            NEWS_DATA=$(cat "$PROJECT_DIR/metadata/news_research.json")
            echo "news_data=$NEWS_DATA" >> $GITHUB_OUTPUT
            echo "✅ News research completed"
          else
            echo "⚠️ Research file not found, creating fallback data"
            echo "news_data={\"topic\":\"${{ github.event.inputs.topic }}\",\"status\":\"fallback\"}" >> $GITHUB_OUTPUT
          fi

      - name: Upload research artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: news-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  script_creation:
    needs: [setup, news_research]
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      script_data: ${{ steps.script.outputs.script_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download research artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-research
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Create news script
        id: script
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_COUNT="${{ needs.setup.outputs.calculated_scene_count }}"
          
          SCRIPT_PROMPT="ニュース動画シナリオ作成を実行してください：

          入力情報:
          - 研究データ: ${PROJECT_DIR}/metadata/news_research.json
          - 動画長: ${{ github.event.inputs.video_duration }}秒
          - シーン数: ${SCENE_COUNT}個（5秒/シーン）

          手順:
          1. 研究データを読み込み（Readツール使用）
          2. ${SCENE_COUNT}シーン分の詳細シナリオ作成
          3. 各シーンの画像生成用プロンプト作成
          4. ナレーション台本作成（日本語、自然な話し方）
          5. 結果を以下のファイルに保存（Writeツール使用）:
             - ${PROJECT_DIR}/metadata/script.json
             - ${PROJECT_DIR}/metadata/narration.txt
          6. lsコマンドで保存確認（Bashツール使用）

          出力形式:
          script.json: {
            \"scenes\": [
              {\"scene_id\": 1, \"duration\": 5, \"text\": \"シーン1の内容\", \"image_prompt\": \"画像生成用プロンプト\"},
              ...
            ],
            \"total_duration\": ${{ github.event.inputs.video_duration }}
          }"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$SCRIPT_PROMPT"

          # Verify script creation
          ls -la "$PROJECT_DIR/metadata/"
          
          if [ -f "$PROJECT_DIR/metadata/script.json" ]; then
            SCRIPT_DATA=$(cat "$PROJECT_DIR/metadata/script.json")
            echo "script_data=$SCRIPT_DATA" >> $GITHUB_OUTPUT
            echo "✅ Script creation completed"
          else
            echo "⚠️ Script file not found"
            echo "script_data={\"status\":\"error\"}" >> $GITHUB_OUTPUT
          fi

      - name: Upload script artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  generate_narration:
    needs: [setup, script_creation]
    runs-on: ubuntu-latest
    timeout-minutes: 6
    outputs:
      narration_file: ${{ steps.narration.outputs.narration_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download script artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Generate narration audio
        id: narration
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          AUDIO_PATH="${PROJECT_DIR}/media/audio/narration.mp3"
          
          TTS_PROMPT="日本語ナレーション音声生成を実行してください：

          手順:
          1. ナレーション台本を読み込み: ${PROJECT_DIR}/metadata/narration.txt
          2. MCP TTS サービスで日本語音声生成（プロフェッショナルなニュースキャスター音質）
          3. 生成した音声を${AUDIO_PATH}に保存（Writeツール使用）
          4. ls -laで保存確認（Bashツール使用）

          音声設定:
          - 言語: 日本語
          - 音質: ニュースキャスター風、明瞭
          - 長さ: ${{ github.event.inputs.video_duration }}秒程度
          - フォーマット: MP3"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-*,Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$TTS_PROMPT"

          # Verify audio generation
          ls -la "$PROJECT_DIR/media/audio/"
          
          AUDIO_FILE=$(find "$PROJECT_DIR" -name "*.mp3" -type f 2>/dev/null | head -1)
          if [ -n "$AUDIO_FILE" ] && [ -f "$AUDIO_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$AUDIO_FILE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 50000 ]; then
              echo "✅ Narration generated: $AUDIO_FILE (${FILE_SIZE} bytes)"
              echo "narration_file=$AUDIO_FILE" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Audio file too small: ${FILE_SIZE} bytes"
              echo "narration_file=" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No audio file found"
            echo "narration_file=" >> $GITHUB_OUTPUT
          fi

      - name: Upload narration artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: narration-audio
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

  generate_anchor:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 6
    outputs:
      anchor_image: ${{ steps.anchor.outputs.anchor_image }}
      anchor_url: ${{ steps.anchor.outputs.anchor_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Generate news anchor
        id: anchor
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SAVE_PATH="${PROJECT_DIR}/media/images/anchor.png"
          URL_PATH="${PROJECT_DIR}/media/images/anchor-url.txt"
          
          ANCHOR_STYLE="${{ github.event.inputs.anchor_style }}"
          
          case "$ANCHOR_STYLE" in
            "プロフェッショナル女性")
              ANCHOR_PROMPT="Professional Japanese female news anchor, wearing business suit, sitting at news desk, neutral expression, professional lighting, green screen background, high quality portrait, broadcast journalism style"
              ;;
            "プロフェッショナル男性")
              ANCHOR_PROMPT="Professional Japanese male news anchor, wearing business suit and tie, sitting at news desk, neutral expression, professional lighting, green screen background, high quality portrait, broadcast journalism style"
              ;;
            "カジュアル女性")
              ANCHOR_PROMPT="Casual Japanese female presenter, wearing smart casual outfit, sitting at modern desk, friendly expression, natural lighting, green screen background, high quality portrait"
              ;;
            *)
              ANCHOR_PROMPT="Casual Japanese male presenter, wearing smart casual shirt, sitting at modern desk, friendly expression, natural lighting, green screen background, high quality portrait"
              ;;
          esac

          GENERATION_PROMPT="ニュースアンカー画像生成を実行してください：

          プロンプト: ${ANCHOR_PROMPT}

          手順:
          1. 上記プロンプトでMCP画像生成ツールを使用（seed値42で固定）
          2. 生成した画像を${SAVE_PATH}に保存（Writeツール使用）
          3. Google Cloud Storage URLを${URL_PATH}に保存（Writeツール使用）
          4. ls -la ${PROJECT_DIR}/media/images/ で保存確認（Bashツール使用）

          重要: 一貫性のため必ずseed値42を使用してください"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$GENERATION_PROMPT"

          # Immediate URL download (prevent expiration)
          ls -la "${PROJECT_DIR}/media/images/"
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"

          # Multi-pattern file search
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*anchor*.png" -type f 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 -type f 2>/dev/null | head -1)
          [ -z "$ANCHOR_IMAGE" ] && ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*.png" -type f 2>/dev/null | head -1)

          # File validation
          if [ -n "$ANCHOR_IMAGE" ] && [ -f "$ANCHOR_IMAGE" ]; then
            FILE_SIZE=$(stat -c%s "$ANCHOR_IMAGE" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 10000 ]; then
              echo "✅ Anchor image generated: $ANCHOR_IMAGE (${FILE_SIZE} bytes)"
              echo "anchor_image=$ANCHOR_IMAGE" >> $GITHUB_OUTPUT
              
              if [ -f "$URL_PATH" ]; then
                ANCHOR_URL=$(cat "$URL_PATH")
                echo "anchor_url=$ANCHOR_URL" >> $GITHUB_OUTPUT
              fi
            else
              echo "⚠️ Image file too small: ${FILE_SIZE} bytes"
              echo "anchor_image=" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No anchor image found"
            echo "anchor_image=" >> $GITHUB_OUTPUT
          fi

      - name: Upload anchor artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: anchor-image
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

  generate_scenes:
    needs: [setup, script_creation]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        scene: ${{ fromJson(needs.setup.outputs.matrix_scenes) }}
    outputs:
      failed_scenes: ${{ steps.track.outputs.failed_scenes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download script artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Generate scene image and video
        id: generate
        continue-on-error: true
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          # Step 1: Generate background image
          SAVE_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}.png"
          URL_PATH="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          IMAGE_PROMPT="シーン${SCENE_NUM}の背景画像生成を実行してください：

          手順:
          1. シナリオデータを読み込み: ${PROJECT_DIR}/metadata/script.json
          2. シーン${SCENE_NUM}の画像プロンプトを抽出
          3. MCP画像生成ツールで背景画像生成（人物を含まない背景のみ）
          4. 生成した画像を${SAVE_PATH}に保存（Writeツール使用）
          5. Google Cloud Storage URLを${URL_PATH}に保存（Writeツール使用）
          6. ls -la ${PROJECT_DIR}/media/images/ で保存確認（Bashツール使用）

          重要: 背景画像には人物を含めず、ニュース内容に関連した背景のみ生成してください"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Read,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$IMAGE_PROMPT"

          # Immediate URL download (prevent expiration)
          ls -la "${PROJECT_DIR}/media/images/"
          [ -f "$URL_PATH" ] && curl -L -o "$SAVE_PATH" "$(cat $URL_PATH)"

          # Multi-pattern file search for image
          IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.png" -type f 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" -mmin -2 -type f 2>/dev/null | head -1)
          [ -z "$IMAGE" ] && IMAGE=$(find "$PROJECT_DIR" -name "*.png" -type f 2>/dev/null | head -1)

          # Validate image
          if [ -f "$IMAGE" ] && [ $(stat -c%s "$IMAGE" 2>/dev/null || echo 0) -gt 10000 ]; then
            echo "✅ Scene ${SCENE_NUM} image generated: $IMAGE"
            
            # Step 2: Immediately convert to video (URL expiration prevention)
            VIDEO_PATH="${PROJECT_DIR}/media/videos/scene${SCENE_NUM}.mp4"
            
            # Check for Google URL first
            URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
            if [ -f "$URL_FILE" ]; then
              IMAGE_URL=$(cat "$URL_FILE")
              if curl -IfsS --max-time 5 "$IMAGE_URL" >/dev/null 2>&1; then
                IMAGE_REF="$IMAGE_URL"
                echo "✅ Using Google URL for video conversion"
              else
                IMAGE_REF="$IMAGE"
                echo "⚠️ URL expired, using local path"
              fi
            else
              IMAGE_REF="$IMAGE"
            fi
            
            VIDEO_PROMPT="背景画像から動画変換を実行してください：

            入力画像: ${IMAGE_REF}
            
            手順:
            1. 上記画像を6-8秒の動画に変換（MCP I2Vツール使用）
            2. 生成した動画を${VIDEO_PATH}に保存（Writeツール使用）
            3. ls -la ${PROJECT_DIR}/media/videos/ で保存確認（Bashツール使用）

            設定:
            - 長さ: 6-8秒
            - 解像度: 1920x1080
            - フレームレート: 30fps
            - 自然な動き"

            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__i2v-*,Write,Bash" \
              --max-turns 80 \
              --permission-mode "bypassPermissions" \
              -p "$VIDEO_PROMPT"

            # Verify video generation
            ls -la "$PROJECT_DIR/media/videos/"
            
            VIDEO=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*.mp4" -type f 2>/dev/null | head -1)
            [ -z "$VIDEO" ] && VIDEO=$(find "$PROJECT_DIR" -name "*.mp4" -mmin -2 -type f 2>/dev/null | head -1)
            
            if [ -f "$VIDEO" ] && [ $(stat -c%s "$VIDEO" 2>/dev/null || echo 0) -gt 300000 ]; then
              echo "✅ Scene ${SCENE_NUM} video generated: $VIDEO"
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "❌ Scene ${SCENE_NUM} video generation failed"
              echo "status=failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Scene ${SCENE_NUM} image generation failed"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Track failures
        id: track
        if: always()
        run: |
          if [ "${{ steps.generate.outputs.status }}" = "failed" ]; then
            echo "failed_scenes=${{ matrix.scene }}" >> $GITHUB_OUTPUT
          else
            echo "failed_scenes=" >> $GITHUB_OUTPUT
          fi

      - name: Upload scene artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scene-${{ matrix.scene }}-artifacts
          path: |
            ${{ needs.setup.outputs.project_dir }}/media/images/scene${{ matrix.scene }}*
            ${{ needs.setup.outputs.project_dir }}/media/videos/scene${{ matrix.scene }}*

  recover_failed_scenes:
    needs: [setup, generate_scenes]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always() && needs.generate_scenes.outputs.failed_scenes != ''
    strategy:
      fail-fast: false
      matrix:
        scene: ${{ fromJson(needs.generate_scenes.outputs.failed_scenes) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download script artifacts
        uses: actions/download-artifact@v4
        with:
          name: news-script
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Recovery attempt
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          echo "🔄 Attempting recovery for scene ${SCENE_NUM}"
          
          # Simplified fallback generation
          FALLBACK_PROMPT="シーン${SCENE_NUM}のフォールバック生成：

          手順:
          1. シンプルなニュース背景画像を生成（newspaper background, minimalist, no people）
          2. ${PROJECT_DIR}/media/images/scene${SCENE_NUM}_fallback.png に保存
          3. 短い動画に変換（4-5秒）
          4. ${PROJECT_DIR}/media/videos/scene${SCENE_NUM}_fallback.mp4 に保存
          5. 保存確認"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,mcp__i2v-*,Write,Bash" \
            --max-turns 60 \
            --permission-mode "bypassPermissions" \
            -p "$FALLBACK_PROMPT"

      - name: Upload recovery artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scene-${{ matrix.scene }}-recovery
          path: |
            ${{ needs.setup.outputs.project_dir }}/media/images/scene${{ matrix.scene }}*
            ${{ needs.setup.outputs.project_dir }}/media/videos/scene${{ matrix.scene }}*

  create_lipsync:
    needs: [setup, generate_anchor, generate_narration]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      lipsync_video: ${{ steps.lipsync.outputs.lipsync_video }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: anchor-image
          path: ${{ needs.setup.outputs.project_dir }}/media/images/

      - name: Download narration
        uses: actions/download-artifact@v4
        with:
          name: narration-audio
          path: ${{ needs.setup.outputs.project_dir }}/media/audio/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Generate lipsync video
        id: lipsync
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          # Find anchor image and audio
          ANCHOR_IMAGE=$(find "$PROJECT_DIR" -name "*anchor*.png" -type f 2>/dev/null | head -1)
          NARRATION_AUDIO=$(find "$PROJECT_DIR" -name "*.mp3" -type f 2>/dev/null | head -1)
          
          if [ -n "$ANCHOR_IMAGE" ] && [ -n "$NARRATION_AUDIO" ]; then
            LIPSYNC_PATH="${PROJECT_DIR}/media/videos/anchor_lipsync.mp4"
            
            LIPSYNC_PROMPT="リップシンク動画生成を実行してください：

            画像: ${ANCHOR_IMAGE}
            音声: ${NARRATION_AUDIO}
            
            手順:
            1. 上記の画像と音声でリップシンク動画を生成（MCP Lipsyncツール使用）
            2. 生成した動画を${LIPSYNC_PATH}に保存（Writeツール使用）
            3. ls -la ${PROJECT_DIR}/media/videos/ で保存確認（Bashツール使用）

            設定:
            - 音声に合わせた自然なリップシンク
            - 高品質な口の動き
            - プロフェッショナルな仕上がり"

            npx @anthropic-ai/claude-code \
              --mcp-config ".claude/mcp-kamuicode.json" \
              --allowedTools "mcp__v2v-*,Write,Bash" \
              --max-turns 60 \
              --permission-mode "bypassPermissions" \
              -p "$LIPSYNC_PROMPT"

            # Verify lipsync video
            LIPSYNC_VIDEO=$(find "$PROJECT_DIR" -name "*lipsync*.mp4" -type f 2>/dev/null | head -1)
            if [ -f "$LIPSYNC_VIDEO" ] && [ $(stat -c%s "$LIPSYNC_VIDEO" 2>/dev/null || echo 0) -gt 500000 ]; then
              echo "✅ Lipsync video generated: $LIPSYNC_VIDEO"
              echo "lipsync_video=$LIPSYNC_VIDEO" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Lipsync video generation failed"
              echo "lipsync_video=" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Missing anchor image or narration audio"
            echo "lipsync_video=" >> $GITHUB_OUTPUT
          fi

      - name: Upload lipsync artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lipsync-video
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

  create_editing_plan:
    needs: [setup, generate_scenes, create_lipsync]
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: always()
    outputs:
      editing_plan: ${{ steps.plan.outputs.editing_plan }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all scene artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: scene-*-artifacts
          path: ${{ needs.setup.outputs.project_dir }}/media/
          merge-multiple: true

      - name: Download lipsync artifacts
        uses: actions/download-artifact@v4
        with:
          name: lipsync-video
          path: ${{ needs.setup.outputs.project_dir }}/media/videos/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Create editing plan
        id: plan
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          PLAN_PROMPT="動画編集計画作成を実行してください：

          利用可能な素材を分析:
          - 背景動画: ${PROJECT_DIR}/media/videos/scene*.mp4
          - リップシンク動画: ${PROJECT_DIR}/media/videos/anchor_lipsync.mp4
          - ナレーション音声: ${PROJECT_DIR}/media/audio/narration.mp3

          手順:
          1. 全ての利用可能な素材をls -laで確認（Bashツール使用）
          2. 各素材の詳細情報を取得（ffprobeコマンド等）
          3. プロフェッショナルな編集計画を作成:
             - タイムライン構造（60秒構成）
             - アンカーと背景の合成方式（PiP配置またはクロマキー）
             - トランジション設計
             - 音響ミックス計画
          4. FFmpegコマンド列を生成
          5. 編集計画を${PROJECT_DIR}/metadata/editing_plan.json に保存（Writeツール使用）

          重要: 実際に存在するファイルのみを使用し、現実的な編集計画を作成してください"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$PLAN_PROMPT"

          # Verify editing plan
          if [ -f "$PROJECT_DIR/metadata/editing_plan.json" ]; then
            PLAN_DATA=$(cat "$PROJECT_DIR/metadata/editing_plan.json")
            echo "editing_plan=$PLAN_DATA" >> $GITHUB_OUTPUT
            echo "✅ Editing plan created"
          else
            echo "⚠️ Editing plan creation failed"
            echo "editing_plan={\"status\":\"failed\"}" >> $GITHUB_OUTPUT
          fi

      - name: Upload editing plan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: editing-plan
          path: ${{ needs.setup.outputs.project_dir }}/metadata/

  final_video_composition:
    needs: [setup, create_editing_plan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: ${{ needs.setup.outputs.project_dir }}/
          merge-multiple: true

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Compose final video
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          FINAL_VIDEO="${PROJECT_DIR}/final/news_video_final.mp4"
          mkdir -p "${PROJECT_DIR}/final"
          
          COMPOSITION_PROMPT="最終動画合成を実行してください：

          手順:
          1. 編集計画を読み込み: ${PROJECT_DIR}/metadata/editing_plan.json
          2. 利用可能な全素材を確認（Bashツール使用）
          3. 編集計画に基づきFFmpegコマンドを実行:
             - 背景動画の連結
             - アンカー動画の合成（PiP配置）
             - 音声ミックス
             - ニュース番組風のタイトル・クレジット追加
          4. 最終動画を${FINAL_VIDEO}に出力
          5. 品質確認（解像度、長さ、音量レベル等）

          目標品質:
          - 1920x1080, 30fps
          - ${{ github.event.inputs.video_duration }}秒
          - 音声 -14LUFS
          - プロフェッショナルなニュース番組品質"

          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write,Bash" \
            --max-turns 60 \
            --permission-mode "bypassPermissions" \
            -p "$COMPOSITION_PROMPT"

          # Verify final video
          ls -la "$PROJECT_DIR/final/"
          
          FINAL_VIDEO_FILE=$(find "$PROJECT_DIR" -name "*final*.mp4" -type f 2>/dev/null | head -1)
          if [ -f "$FINAL_VIDEO_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO_FILE" 2>/dev/null || echo 0)
            echo "✅ Final video created: $FINAL_VIDEO_FILE (${FILE_SIZE} bytes)"
            
            # Quality check with ffprobe
            if command -v ffprobe >/dev/null 2>&1; then
              DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_VIDEO_FILE" 2>/dev/null || echo "unknown")
              RESOLUTION=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv="s=x:p=0" "$FINAL_VIDEO_FILE" 2>/dev/null || echo "unknown")
              echo "📊 Video info: Duration=${DURATION}s, Resolution=${RESOLUTION}"
            fi
          else
            echo "⚠️ Final video not found"
          fi

      - name: Generate summary report
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          echo "# News Video Generation Report" > "$PROJECT_DIR/final/report.md"
          echo "" >> "$PROJECT_DIR/final/report.md"
          echo "## Parameters" >> "$PROJECT_DIR/final/report.md"
          echo "- Topic: ${{ github.event.inputs.topic }}" >> "$PROJECT_DIR/final/report.md"
          echo "- Duration: ${{ github.event.inputs.video_duration }}s" >> "$PROJECT_DIR/final/report.md"
          echo "- Category: ${{ github.event.inputs.category }}" >> "$PROJECT_DIR/final/report.md"
          echo "- Anchor Style: ${{ github.event.inputs.anchor_style }}" >> "$PROJECT_DIR/final/report.md"
          echo "- Generated: \$(date)" >> "$PROJECT_DIR/final/report.md"
          echo "" >> "$PROJECT_DIR/final/report.md"
          echo "## Generated Files" >> "$PROJECT_DIR/final/report.md"
          echo "\`\`\`" >> "$PROJECT_DIR/final/report.md"
          find "$PROJECT_DIR" -type f -name "*.mp4" -o -name "*.png" -o -name "*.mp3" -o -name "*.json" | sort >> "$PROJECT_DIR/final/report.md"
          echo "\`\`\`" >> "$PROJECT_DIR/final/report.md"

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-news-video
          path: ${{ needs.setup.outputs.project_dir }}/final/

      - name: Add summary to GitHub
        if: always()
        run: |
          PROJECT_DIR="${{ needs.setup.outputs.project_dir }}"
          
          echo "## 📺 News Video Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Topic**: ${{ github.event.inputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: ${{ github.event.inputs.video_duration }}s" >> $GITHUB_STEP_SUMMARY
          echo "**Category**: ${{ github.event.inputs.category }}" >> $GITHUB_STEP_SUMMARY
          echo "**Anchor**: ${{ github.event.inputs.anchor_style }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count generated files
          IMAGES=$(find "$PROJECT_DIR" -name "*.png" -type f 2>/dev/null | wc -l)
          VIDEOS=$(find "$PROJECT_DIR" -name "*.mp4" -type f 2>/dev/null | wc -l)
          AUDIO=$(find "$PROJECT_DIR" -name "*.mp3" -type f 2>/dev/null | wc -l)
          
          echo "**Generated Content**:" >> $GITHUB_STEP_SUMMARY
          echo "- Images: $IMAGES files" >> $GITHUB_STEP_SUMMARY
          echo "- Videos: $VIDEOS files" >> $GITHUB_STEP_SUMMARY
          echo "- Audio: $AUDIO files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Final video info
          FINAL_VIDEO=$(find "$PROJECT_DIR" -name "*final*.mp4" -type f 2>/dev/null | head -1)
          if [ -f "$FINAL_VIDEO" ]; then
            SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            SIZE_MB=$((SIZE / 1024 / 1024))
            echo "**Final Video**: ✅ Generated (${SIZE_MB}MB)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Final Video**: ❌ Not generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at**: $(date)" >> $GITHUB_STEP_SUMMARY
