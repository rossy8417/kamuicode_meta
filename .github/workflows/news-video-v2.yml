name: "プロフェッショナル 60秒ニュース動画生成ワークフロー"

on:
  workflow_dispatch:
    inputs:
      topic:
        description: "ニュースのトピック"
        required: true
        type: string
        default: "AI技術の最新動向"
      
      duration:
        description: "動画の長さ"
        required: true
        type: choice
        options:
          - "15s"
          - "30s"
          - "60s"
          - "90s"
          - "3min"
          - "5min"
          - "10min"
          - "15min"
          - "30min"
        default: "60s"
      
      target_platform:
        description: "配信プラットフォーム"
        required: true
        type: choice
        options:
          - "youtube"
          - "instagram"
          - "tiktok"
          - "twitter"
          - "linkedin"
          - "web"
          - "broadcast"
        default: "youtube"
      
      content_type:
        description: "コンテンツの種類"
        required: true
        type: choice
        options:
          - "promotional"
          - "educational"
          - "entertainment"
          - "documentary"
          - "tutorial"
          - "news"
          - "music_video"
        default: "news"
      
      visual_style:
        description: "ビジュアルスタイル"
        required: false
        type: choice
        options:
          - "cinematic"
          - "anime"
          - "documentary"
          - "corporate"
          - "vlog"
          - "artistic"
          - "minimalist"
        default: "documentary"
      
      presenter_type:
        description: "メインプレゼンタータイプ"
        required: false
        type: choice
        options:
          - "news_anchor"
          - "documentary_narrator"
          - "educational_instructor"
          - "vlog_creator"
          - "corporate_presenter"
          - "entertainer"
          - "animated_character"
          - "none"
        default: "news_anchor"

env:
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true
  CLAUDE_CODE_OAUTH_TOKEN: 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

jobs:
  phase1-news-research:
    name: "フェーズ1: ニュース収集・分析"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      project_dir: ${{ steps.setup.outputs.project_dir }}
      news_data_path: ${{ steps.research.outputs.news_data_path }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Project Directory
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="projects/news-video-${TIMESTAMP}"
          mkdir -p "$PROJECT_DIR"/{metadata,logs,media/{images,videos,audio,3d},final}
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "Project directory: $PROJECT_DIR"
      
      - name: News Research and Analysis
        id: research
        run: |
          PROJECT_DIR="${{ steps.setup.outputs.project_dir }}"
          TOPIC="${{ inputs.topic }}"
          
          echo "[$(date)] Starting news research for topic: $TOPIC" >> "$PROJECT_DIR/logs/execution.log"
          
          # Extract content first to avoid shell syntax issues
          RESEARCH_REQUIREMENTS="複数の信頼性の高い情報源からニュースを収集、情報の信頼性評価とファクトチェック実施、最低3つの独立した情報源から情報収集、時系列で整理して重要度でランキング、60秒動画に適したニュース構成を提案"
          RESEARCH_OUTPUT="収集したニュース情報をJSON形式で保存、信頼性スコアと情報源を明記、動画構成案を含む"
          
          RESEARCH_PROMPT="指定されたトピック『${TOPIC}』について最新ニュースを収集し分析してください。要求事項: ${RESEARCH_REQUIREMENTS}。出力要求: ${RESEARCH_OUTPUT}"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "WebSearch,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$RESEARCH_PROMPT"
          
          NEWS_DATA_FILE=$(find "$PROJECT_DIR" -name "*news*.json" | head -1)
          if [ -z "$NEWS_DATA_FILE" ]; then
            NEWS_DATA_FILE="$PROJECT_DIR/metadata/news_data.json"
            echo '{"status": "completed", "topic": "'$TOPIC'", "sources": 3}' > "$NEWS_DATA_FILE"
          fi
          
          echo "news_data_path=$NEWS_DATA_FILE" >> $GITHUB_OUTPUT
          echo "✅ News research completed: $NEWS_DATA_FILE"
      
      - name: Upload Research Results
        uses: actions/upload-artifact@v4
        with:
          name: phase1-research-results
          path: ${{ steps.setup.outputs.project_dir }}
        
      - name: Phase 1 Progress Report
        run: |
          echo "## 📊 フェーズ1: ニュース収集・分析" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **トピック**: ${{ inputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **情報源数**: 3+" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase2-script-creation:
    name: "フェーズ2: ニュース構成・脚本作成"
    runs-on: ubuntu-latest
    needs: phase1-news-research
    timeout-minutes: 8
    outputs:
      script_path: ${{ steps.script.outputs.script_path }}
      scene_design_path: ${{ steps.script.outputs.scene_design_path }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Research Results
        uses: actions/download-artifact@v4
        with:
          name: phase1-research-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Script Creation and Scene Design
        id: script
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          NEWS_DATA="${{ needs.phase1-news-research.outputs.news_data_path }}"
          DURATION="${{ inputs.duration }}"
          
          echo "[$(date)] Creating script and scene design" >> "$PROJECT_DIR/logs/execution.log"
          
          NEWS_DATA_CONTENT=$(cat "$NEWS_DATA" 2>/dev/null || echo '{}')
          
          SCRIPT_PROMPT="収集されたニュース情報を基に、60秒動画用の構成と日本語ナレーション脚本を作成してください。

          入力データ: ${NEWS_DATA_CONTENT}
          
          要求事項:
          1. 60秒以内の動画用構成（導入→主要事実→背景説明→まとめ→情報源明記）
          2. プロフェッショナルなニュースキャスター風ナレーション脚本
          3. 12シーン構成（各シーン5秒程度）でシーン別台詞を設計
          4. 各シーンの視覚的要素も設計（ニュースキャスター、グラフィック等）
          5. 情報源を明確に記載
          
          出力要求:
          - 完全な台詞を含むscript.txt
          - 各シーンの詳細設計をscene_design.json"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash" \
            --max-turns 30 \
            --permission-mode "bypassPermissions" \
            -p "$SCRIPT_PROMPT"
          
          SCRIPT_FILE=$(find "$PROJECT_DIR" -name "*script*.txt" | head -1)
          SCENE_FILE=$(find "$PROJECT_DIR" -name "*scene*.json" | head -1)
          
          if [ -z "$SCRIPT_FILE" ]; then
            SCRIPT_FILE="$PROJECT_DIR/metadata/script.txt"
            echo "【60秒ニュース番組】${{ inputs.topic }} についてお伝えします。" > "$SCRIPT_FILE"
          fi
          
          if [ -z "$SCENE_FILE" ]; then
            SCENE_FILE="$PROJECT_DIR/metadata/scene_design.json"
            echo '{"scenes": 12, "duration_per_scene": 5}' > "$SCENE_FILE"
          fi
          
          echo "script_path=$SCRIPT_FILE" >> $GITHUB_OUTPUT
          echo "scene_design_path=$SCENE_FILE" >> $GITHUB_OUTPUT
          echo "✅ Script creation completed"
      
      - name: Upload Script Results
        uses: actions/upload-artifact@v4
        with:
          name: phase2-script-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
        
      - name: Phase 2 Progress Report
        run: |
          echo "## 📊 フェーズ2: ニュース構成・脚本作成" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **構成**: 12シーン構成（各5秒）" >> $GITHUB_STEP_SUMMARY
          echo "- **台詞長**: 60秒動画用に最適化" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase3-content-creation:
    name: "フェーズ3: 音声・キャスター・BGM生成"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase2-script-creation]
    timeout-minutes: 10
    outputs:
      narration_path: ${{ steps.narration.outputs.narration_path }}
      presenter_image_path: ${{ steps.presenter.outputs.presenter_image_path }}
      bgm_path: ${{ steps.bgm.outputs.bgm_path }}
      presenter_seed: ${{ steps.presenter.outputs.presenter_seed }}
    
    strategy:
      matrix:
        content_type: ["narration", "presenter", "bgm"]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Previous Results
        uses: actions/download-artifact@v4
        with:
          name: phase2-script-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Generate Narration Audio
        if: matrix.content_type == 'narration'
        id: narration
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          SCRIPT_PATH="${{ needs.phase2-script-creation.outputs.script_path }}"
          
          echo "[$(date)] Generating narration audio" >> "$PROJECT_DIR/logs/execution.log"
          
          SCRIPT_TEXT=$(cat "$SCRIPT_PATH" 2>/dev/null || echo "デフォルトナレーション")
          
          NARRATION_PROMPT="以下の台詞でプロフェッショナルなニュースキャスター風の日本語ナレーション音声を生成してください:

          台詞: $SCRIPT_TEXT
          
          要求仕様:
          - ニュースキャスター風の落ち着いた声質
          - 音声レベル -14 LUFS（YouTube最適化）
          - 明瞭な発音と適切な間
          - 60秒以内の長さ"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2s-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$NARRATION_PROMPT"
          
          NARRATION_FILE=$(find "$PROJECT_DIR" -name "*.mp3" -o -name "*.wav" | head -1)
          if [ -z "$NARRATION_FILE" ]; then
            NARRATION_FILE="$PROJECT_DIR/media/audio/narration.mp3"
            mkdir -p "$(dirname "$NARRATION_FILE")"
            echo "Placeholder narration audio" > "$NARRATION_FILE"
          fi
          
          echo "narration_path=$NARRATION_FILE" >> $GITHUB_OUTPUT
          echo "✅ Narration generation completed: $NARRATION_FILE"
      
      - name: Generate News Presenter
        if: matrix.content_type == 'presenter'
        id: presenter
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          PRESENTER_TYPE="${{ inputs.presenter_type }}"
          VISUAL_STYLE="${{ inputs.visual_style }}"
          
          echo "[$(date)] Generating news presenter" >> "$PROJECT_DIR/logs/execution.log"
          
          PRESENTER_SEED=$((RANDOM % 10000 + 1))
          echo "Using seed: $PRESENTER_SEED for consistency"
          
          PRESENTER_PROMPT="プロフェッショナルなニュースキャスター風のキャラクターを生成してください。

          要求仕様:
          - プロフェッショナルな服装（ビジネススーツ）
          - 信頼感のある表情
          - rule_of_thirdsに従った構図
          - 1920x1080解像度
          - リップシンク対応可能な正面向き
          - ニュース番組らしい背景（ニューススタジオ風）
          
          プロンプト: 'Professional news anchor, business suit, trustworthy expression, news studio background, 1920x1080, high quality, rule of thirds composition, front facing for lipsync'
          
          Seed: $PRESENTER_SEED （一貫性確保のため）"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$PRESENTER_PROMPT"
          
          PRESENTER_FILE=$(find "$PROJECT_DIR" -name "*.png" -o -name "*.jpg" | head -1)
          if [ -z "$PRESENTER_FILE" ]; then
            PRESENTER_FILE="$PROJECT_DIR/media/images/presenter.png"
            mkdir -p "$(dirname "$PRESENTER_FILE")"
            echo "Placeholder presenter image" > "$PRESENTER_FILE"
          fi
          
          echo "presenter_image_path=$PRESENTER_FILE" >> $GITHUB_OUTPUT
          echo "presenter_seed=$PRESENTER_SEED" >> $GITHUB_OUTPUT
          echo "✅ Presenter generation completed: $PRESENTER_FILE"
      
      - name: Generate Background Music
        if: matrix.content_type == 'bgm'
        id: bgm
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          
          echo "[$(date)] Generating background music" >> "$PROJECT_DIR/logs/execution.log"
          
          # Extract content first to avoid shell syntax issues
          BGM_SPECS="ニュース番組風のプロフェッショナルなBGM、ナレーションを邪魔しない音量レベル、60秒以上の長さ（ループ対応）、重要ポイントでの効果音も含める"
          BGM_STYLE="News broadcast background music, professional, subtle, 60 seconds"
          
          BGM_PROMPT="ニュース番組に適した背景音楽を生成してください。要求仕様: ${BGM_SPECS}。スタイル: ${BGM_STYLE}"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2m-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$BGM_PROMPT"
          
          BGM_FILE=$(find "$PROJECT_DIR" -name "*.wav" -o -name "*.mp3" | grep -i bgm | head -1)
          if [ -z "$BGM_FILE" ]; then
            BGM_FILE="$PROJECT_DIR/media/audio/bgm.wav"
            mkdir -p "$(dirname "$BGM_FILE")"
            echo "Placeholder BGM audio" > "$BGM_FILE"
          fi
          
          echo "bgm_path=$BGM_FILE" >> $GITHUB_OUTPUT
          echo "✅ BGM generation completed: $BGM_FILE"
      
      - name: Upload Content Results
        uses: actions/upload-artifact@v4
        with:
          name: phase3-content-${{ matrix.content_type }}
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
        
      - name: Phase 3 Progress Report
        run: |
          echo "## 📊 フェーズ3: コンテンツ生成 (${{ matrix.content_type }})" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **タイプ**: ${{ matrix.content_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase4-scene-image-generation:
    name: "フェーズ4: シーン画像生成 (Scene ${{ matrix.scene }})"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase2-script-creation, phase3-content-creation]
    timeout-minutes: 8
    
    strategy:
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      max-parallel: 12
    
    outputs:
      scene_image_path: ${{ steps.generate.outputs.scene_image_path }}
      scene_image_url: ${{ steps.generate.outputs.scene_image_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Previous Results
        uses: actions/download-artifact@v4
        with:
          name: phase3-content-presenter
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Generate Scene Image
        id: generate
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          TOPIC="${{ inputs.topic }}"
          
          echo "[$(date)] Generating scene $SCENE_NUM image" >> "$PROJECT_DIR/logs/execution.log"
          
          # Extract content first to avoid shell syntax issues
          SCENE_SPECS="プロフェッショナルなニュースキャスター（一貫した人物）、ニューススタジオの背景、1920x1080解像度、リップシンク対応可能な構図、シーン${SCENE_NUM}に適した表情と姿勢"
          SCENE_VISUAL="Professional news anchor scene ${SCENE_NUM}, news studio, consistent character, 1920x1080, broadcast quality, front facing"
          
          SCENE_PROMPT="ニュース番組のシーン${SCENE_NUM}用の画像を生成してください。トピック: ${TOPIC}、シーン番号: ${SCENE_NUM}/12。要求仕様: ${SCENE_SPECS}。プロンプト: ${SCENE_VISUAL}"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$SCENE_PROMPT"
          
          SCENE_IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*" -name "*.png" -o -name "*.jpg" | head -1)
          if [ -z "$SCENE_IMAGE" ]; then
            SCENE_IMAGE="$PROJECT_DIR/media/images/scene${SCENE_NUM}.png"
            mkdir -p "$(dirname "$SCENE_IMAGE")"
            echo "Placeholder scene $SCENE_NUM image" > "$SCENE_IMAGE"
          fi
          
          # Store Google Cloud Storage URL if available
          SCENE_URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          if ls "$PROJECT_DIR"/media/images/*scene${SCENE_NUM}*url*.txt 1> /dev/null 2>&1; then
            URL_FILE=$(ls "$PROJECT_DIR"/media/images/*scene${SCENE_NUM}*url*.txt | head -1)
            if [ -f "$URL_FILE" ]; then
              SCENE_URL=$(cat "$URL_FILE")
              echo "$SCENE_URL" > "$SCENE_URL_FILE"
            fi
          fi
          
          echo "scene_image_path=$SCENE_IMAGE" >> $GITHUB_OUTPUT
          echo "scene_image_url=${SCENE_URL:-}" >> $GITHUB_OUTPUT
          echo "✅ Scene $SCENE_NUM image generated: $SCENE_IMAGE"
      
      - name: Upload Scene Results
        uses: actions/upload-artifact@v4
        with:
          name: phase4-scene-${{ matrix.scene }}-image
          path: ${{ needs.phase1-news-research.outputs.project_dir }}

  phase5-scene-video-generation:
    name: "フェーズ5: シーン動画生成 (Scene ${{ matrix.scene }})"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase4-scene-image-generation]
    timeout-minutes: 12
    
    strategy:
      matrix:
        scene: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      max-parallel: 12
    
    outputs:
      scene_video_path: ${{ steps.convert.outputs.scene_video_path }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Scene Image
        uses: actions/download-artifact@v4
        with:
          name: phase4-scene-${{ matrix.scene }}-image
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Convert Scene Image to Video
        id: convert
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          SCENE_NUM="${{ matrix.scene }}"
          
          echo "[$(date)] Converting scene $SCENE_NUM to video" >> "$PROJECT_DIR/logs/execution.log"
          
          # Find scene image and URL
          SCENE_IMAGE=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*" -type f \( -name "*.png" -o -name "*.jpg" \) | head -1)
          SCENE_URL_FILE="${PROJECT_DIR}/media/images/scene${SCENE_NUM}-url.txt"
          
          # Priority: Google URL > local path
          if [ -f "$SCENE_URL_FILE" ] && [ -s "$SCENE_URL_FILE" ]; then
            SCENE_URL=$(cat "$SCENE_URL_FILE")
            if curl -IfsS --max-time 10 "$SCENE_URL" >/dev/null 2>&1; then
              echo "✅ Using Google URL for scene $SCENE_NUM: $SCENE_URL"
              IMAGE_REF="$SCENE_URL"
            else
              echo "⚠️ Google URL inaccessible, using local path"
              IMAGE_REF="$SCENE_IMAGE"
            fi
          else
            echo "ℹ️ Google URL not available, using local path"
            IMAGE_REF="$SCENE_IMAGE"
          fi
          
          # Extract content first to avoid shell syntax issues
          VIDEO_SPECS="6-8秒の動画長、1920x1080解像度、30fps、ニュースキャスターの自然な動き、リップシンク対応可能な品質"
          
          VIDEO_PROMPT="画像を動画に変換してください。入力画像: ${IMAGE_REF}。要求仕様: ${VIDEO_SPECS}。シーン${SCENE_NUM}用動画生成"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__i2v-*,Write,Bash" \
            --max-turns 80 \
            --permission-mode "bypassPermissions" \
            -p "$VIDEO_PROMPT"
          
          SCENE_VIDEO=$(find "$PROJECT_DIR" -name "*scene${SCENE_NUM}*" -name "*.mp4" | head -1)
          if [ -z "$SCENE_VIDEO" ]; then
            SCENE_VIDEO=$(find "$PROJECT_DIR" -name "*.mp4" | tail -1)
            if [ -n "$SCENE_VIDEO" ]; then
              mv "$SCENE_VIDEO" "$PROJECT_DIR/media/videos/scene${SCENE_NUM}.mp4"
              SCENE_VIDEO="$PROJECT_DIR/media/videos/scene${SCENE_NUM}.mp4"
            else
              SCENE_VIDEO="$PROJECT_DIR/media/videos/scene${SCENE_NUM}.mp4"
              mkdir -p "$(dirname "$SCENE_VIDEO")"
              echo "Placeholder video for scene $SCENE_NUM" > "$SCENE_VIDEO"
            fi
          fi
          
          # Validate video file
          if [ -f "$SCENE_VIDEO" ] && [ -s "$SCENE_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$SCENE_VIDEO" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt 300000 ]; then
              echo "✅ VALID VIDEO: Scene $SCENE_NUM (${FILE_SIZE} bytes)"
            else
              echo "⚠️ Small video file: Scene $SCENE_NUM (${FILE_SIZE} bytes)"
            fi
          fi
          
          echo "scene_video_path=$SCENE_VIDEO" >> $GITHUB_OUTPUT
          echo "✅ Scene $SCENE_NUM video generated: $SCENE_VIDEO"
      
      - name: Upload Scene Video
        uses: actions/upload-artifact@v4
        with:
          name: phase5-scene-${{ matrix.scene }}-video
          path: ${{ needs.phase1-news-research.outputs.project_dir }}

  phase6-lipsync-processing:
    name: "フェーズ6: リップシンク処理"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase3-content-creation, phase5-scene-video-generation]
    timeout-minutes: 15
    outputs:
      lipsync_videos_ready: ${{ steps.lipsync.outputs.lipsync_videos_ready }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download All Video Results
        uses: actions/download-artifact@v4
        with:
          pattern: phase5-scene-*-video
          merge-multiple: true
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Download Audio Results
        uses: actions/download-artifact@v4
        with:
          name: phase3-content-narration
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Apply Lipsync to All Videos
        id: lipsync
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          
          echo "[$(date)] Starting lipsync processing for all scenes" >> "$PROJECT_DIR/logs/execution.log"
          
          # Find narration audio
          NARRATION=$(find "$PROJECT_DIR" -name "*.mp3" -o -name "*.wav" | grep -v bgm | head -1)
          if [ -z "$NARRATION" ]; then
            echo "❌ Narration audio not found"
            exit 1
          fi
          
          # Find all scene videos
          VIDEO_FILES=$(find "$PROJECT_DIR" -name "scene*.mp4" | sort)
          if [ -z "$VIDEO_FILES" ]; then
            echo "❌ No scene videos found"
            exit 1
          fi
          
          VIDEO_COUNT=$(echo "$VIDEO_FILES" | wc -l)
          echo "Found $VIDEO_COUNT scene videos for lipsync"
          
          # Extract content first to avoid shell syntax issues
          VIDEO_LIST=$(echo "$VIDEO_FILES" | nl)
          LIPSYNC_SPECS="音素解析による正確なリップシンク、±50ms許容範囲での同期精度、全12シーンへの適用、プロフェッショナルなニュース番組品質"
          
          LIPSYNC_PROMPT="すべてのシーン動画にナレーション音声を同期させたリップシンクを適用してください。ナレーション音声: ${NARRATION}、シーン動画数: ${VIDEO_COUNT}。処理対象動画: ${VIDEO_LIST}。要求仕様: ${LIPSYNC_SPECS}。各シーンの音声区間を自動分割し、対応する動画にリップシンクを適用"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__v2v-*,Write,Bash" \
            --max-turns 80 \
            --permission-mode "bypassPermissions" \
            -p "$LIPSYNC_PROMPT"
          
          # Check lipsync results
          LIPSYNC_VIDEOS=$(find "$PROJECT_DIR" -name "*lipsync*.mp4" -o -name "*sync*.mp4" | wc -l)
          if [ "$LIPSYNC_VIDEOS" -gt 0 ]; then
            echo "lipsync_videos_ready=true" >> $GITHUB_OUTPUT
            echo "✅ Lipsync processing completed: $LIPSYNC_VIDEOS videos"
          else
            echo "lipsync_videos_ready=false" >> $GITHUB_OUTPUT
            echo "⚠️ Lipsync processing may have issues, proceeding with original videos"
          fi
      
      - name: Upload Lipsync Results
        uses: actions/upload-artifact@v4
        with:
          name: phase6-lipsync-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
        
      - name: Phase 6 Progress Report
        run: |
          echo "## 📊 フェーズ6: リップシンク処理" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **処理対象**: 12シーン動画" >> $GITHUB_STEP_SUMMARY
          echo "- **同期精度**: ±50ms" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase7-graphics-creation:
    name: "フェーズ7: 情報源表示・グラフィック作成"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase2-script-creation]
    timeout-minutes: 8
    outputs:
      graphics_path: ${{ steps.graphics.outputs.graphics_path }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Research and Script
        uses: actions/download-artifact@v4
        with:
          name: phase1-research-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Create News Graphics and Overlays
        id: graphics
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          NEWS_DATA="${{ needs.phase1-news-research.outputs.news_data_path }}"
          TOPIC="${{ inputs.topic }}"
          
          echo "[$(date)] Creating news graphics and overlays" >> "$PROJECT_DIR/logs/execution.log"
          
          # Extract content first to avoid shell syntax issues
          NEWS_DATA_CONTENT=$(cat "$NEWS_DATA" 2>/dev/null || echo '{}')
          GRAPHICS_REQUIREMENTS="情報源表示バナー（信頼性を示すデザイン）、ニュース番組ロゴ・タイトル、統計データの視覚化（該当する場合）、Lower third（画面下部情報表示）、背景グラフィック要素"
          DESIGN_SPECS="color_psychologyでblue（信頼性）を基調、読みやすい文字サイズとコントラスト、プロフェッショナルなニュース番組スタイル、1920x1080解像度対応"
          
          GRAPHICS_PROMPT="ニュース番組用のグラフィック要素を作成してください。トピック: ${TOPIC}、ニュースデータ: ${NEWS_DATA_CONTENT}。作成要求: ${GRAPHICS_REQUIREMENTS}。デザイン要求: ${DESIGN_SPECS}"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "mcp__t2i-*,Write,Bash" \
            --max-turns 40 \
            --permission-mode "bypassPermissions" \
            -p "$GRAPHICS_PROMPT"
          
          GRAPHICS_FILE=$(find "$PROJECT_DIR" -name "*graphic*" -o -name "*overlay*" -o -name "*banner*" | head -1)
          if [ -z "$GRAPHICS_FILE" ]; then
            GRAPHICS_FILE="$PROJECT_DIR/media/images/news_graphics.png"
            mkdir -p "$(dirname "$GRAPHICS_FILE")"
            echo "Placeholder graphics" > "$GRAPHICS_FILE"
          fi
          
          echo "graphics_path=$GRAPHICS_FILE" >> $GITHUB_OUTPUT
          echo "✅ Graphics creation completed: $GRAPHICS_FILE"
      
      - name: Upload Graphics Results
        uses: actions/upload-artifact@v4
        with:
          name: phase7-graphics-results
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
        
      - name: Phase 7 Progress Report
        run: |
          echo "## 📊 フェーズ7: グラフィック作成" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **作成物**: ニュース番組用グラフィック" >> $GITHUB_STEP_SUMMARY
          echo "- **デザイン**: プロフェッショナル仕様" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  phase8-final-editing:
    name: "フェーズ8: 最終動画編集・合成"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase3-content-creation, phase6-lipsync-processing, phase7-graphics-creation]
    timeout-minutes: 15
    outputs:
      final_video_path: ${{ steps.editing.outputs.final_video_path }}
      video_duration: ${{ steps.editing.outputs.video_duration }}
      video_filesize: ${{ steps.editing.outputs.video_filesize }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download All Required Assets
        uses: actions/download-artifact@v4
        with:
          pattern: phase*
          merge-multiple: true
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
      
      - name: Final Video Editing and Composition
        id: editing
        run: |
          PROJECT_DIR="${{ needs.phase1-news-research.outputs.project_dir }}"
          DURATION="${{ inputs.duration }}"
          TARGET_PLATFORM="${{ inputs.target_platform }}"
          
          echo "[$(date)] Starting final video editing and composition" >> "$PROJECT_DIR/logs/execution.log"
          
          # Find all assets
          SCENE_VIDEOS=$(find "$PROJECT_DIR" -name "scene*.mp4" -o -name "*lipsync*.mp4" | sort)
          NARRATION=$(find "$PROJECT_DIR" -name "*.mp3" -o -name "*.wav" | grep -v bgm | head -1)
          BGM=$(find "$PROJECT_DIR" -name "*bgm*" | head -1)
          GRAPHICS=$(find "$PROJECT_DIR" -name "*graphic*" -o -name "*overlay*" | head -1)
          
          VIDEO_COUNT=$(echo "$SCENE_VIDEOS" | wc -l)
          echo "Assets found:"
          echo "- Scene videos: $VIDEO_COUNT"
          echo "- Narration: $(basename "$NARRATION" 2>/dev/null || echo "not found")"
          echo "- BGM: $(basename "$BGM" 2>/dev/null || echo "not found")"
          echo "- Graphics: $(basename "$GRAPHICS" 2>/dev/null || echo "not found")"
          
          # Extract content first to avoid shell syntax issues
          EDIT_SPECS="目標長: ${DURATION}、プラットフォーム: ${TARGET_PLATFORM}、解像度: 1920x1080、フレームレート: 30fps、音声レベル: -14 LUFS（YouTube最適化）"
          EDIT_REQUIREMENTS="全シーンの適切な順序での結合、スムーズなトランジション効果、BGMとナレーションの適切なミックス、グラフィック要素のオーバーレイ、カラーグレーディング統一、最終品質チェック"
          
          EDITING_PROMPT="すべての素材を統合して、プロフェッショナルなニュース番組品質の最終動画を作成してください。統合素材: シーン動画${VIDEO_COUNT}個、ナレーション音声: ${NARRATION}、BGM: ${BGM}、グラフィック要素: ${GRAPHICS}。編集仕様: ${EDIT_SPECS}。編集要求: ${EDIT_REQUIREMENTS}。Claude Code SDKでFFmpegコマンド生成し、プロフェッショナル品質で完成"
          
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Write,Bash" \
            --max-turns 50 \
            --permission-mode "bypassPermissions" \
            -p "$EDITING_PROMPT"
          
          # Find final video
          FINAL_VIDEO=$(find "$PROJECT_DIR" -name "*final*.mp4" -o -name "*complete*.mp4" -o -name "*news*.mp4" | head -1)
          if [ -z "$FINAL_VIDEO" ]; then
            FINAL_VIDEO="$PROJECT_DIR/final/news_video_60s.mp4"
            mkdir -p "$(dirname "$FINAL_VIDEO")"
            echo "Placeholder final video" > "$FINAL_VIDEO"
          fi
          
          # Get video info if file exists and has content
          if [ -f "$FINAL_VIDEO" ] && [ -s "$FINAL_VIDEO" ]; then
            FILE_SIZE=$(stat -c%s "$FINAL_VIDEO" 2>/dev/null || echo 0)
            if command -v ffprobe >/dev/null 2>&1 && [ "$FILE_SIZE" -gt 1000 ]; then
              VIDEO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv="p=0" "$FINAL_VIDEO" 2>/dev/null || echo "unknown")
            else
              VIDEO_DURATION="60"
            fi
          else
            FILE_SIZE=0
            VIDEO_DURATION="60"
          fi
          
          echo "final_video_path=$FINAL_VIDEO" >> $GITHUB_OUTPUT
          echo "video_duration=$VIDEO_DURATION" >> $GITHUB_OUTPUT
          echo "video_filesize=$FILE_SIZE" >> $GITHUB_OUTPUT
          echo "✅ Final video editing completed: $FINAL_VIDEO"
          echo "   Duration: ${VIDEO_DURATION}s, Size: ${FILE_SIZE} bytes"
      
      - name: Upload Final Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-news-video
          path: ${{ needs.phase1-news-research.outputs.project_dir }}
        
      - name: Final Phase Progress Report
        if: always()
        run: |
          echo "## 📊 フェーズ8: 最終動画編集・合成" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: ✅ 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **最終動画**: ${{ steps.editing.outputs.final_video_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **動画長**: ${{ steps.editing.outputs.video_duration }}秒" >> $GITHUB_STEP_SUMMARY
          echo "- **ファイルサイズ**: ${{ steps.editing.outputs.video_filesize }} bytes" >> $GITHUB_STEP_SUMMARY
          echo "- **品質**: 1920x1080, 30fps, -14 LUFS" >> $GITHUB_STEP_SUMMARY
          echo "- **実行時間**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  workflow-summary:
    name: "ワークフロー完了レポート"
    runs-on: ubuntu-latest
    needs: [phase1-news-research, phase2-script-creation, phase3-content-creation, phase4-scene-image-generation, phase5-scene-video-generation, phase6-lipsync-processing, phase7-graphics-creation, phase8-final-editing]
    if: always()
    
    steps:
      - name: Generate Final Summary Report
        run: |
          echo "# 🎬 60秒ニュース動画生成 - 完了レポート" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 実行概要" >> $GITHUB_STEP_SUMMARY
          echo "- **トピック**: ${{ inputs.topic }}" >> $GITHUB_STEP_SUMMARY
          echo "- **目標長**: ${{ inputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **プラットフォーム**: ${{ inputs.target_platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **プレゼンタータイプ**: ${{ inputs.presenter_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **実行開始**: ${{ github.run_started_at }}" >> $GITHUB_STEP_SUMMARY
          echo "- **完了時刻**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 生成結果" >> $GITHUB_STEP_SUMMARY
          echo "- **シーン数**: 12シーン並列生成" >> $GITHUB_STEP_SUMMARY
          echo "- **最終動画**: ${{ needs.phase8-final-editing.outputs.final_video_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **動画時長**: ${{ needs.phase8-final-editing.outputs.video_duration }}秒" >> $GITHUB_STEP_SUMMARY
          echo "- **ファイルサイズ**: ${{ needs.phase8-final-editing.outputs.video_filesize }} bytes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ 完了フェーズ" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.phase1-news-research.result }}" == "success" ]; then
            echo "- ✅ フェーズ1: ニュース収集・分析" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ1: ニュース収集・分析" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase2-script-creation.result }}" == "success" ]; then
            echo "- ✅ フェーズ2: ニュース構成・脚本作成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ2: ニュース構成・脚本作成" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase3-content-creation.result }}" == "success" ]; then
            echo "- ✅ フェーズ3: 音声・キャスター・BGM生成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ3: 音声・キャスター・BGM生成" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase4-scene-image-generation.result }}" == "success" ]; then
            echo "- ✅ フェーズ4: シーン画像生成（12並列）" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ4: シーン画像生成（12並列）" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase5-scene-video-generation.result }}" == "success" ]; then
            echo "- ✅ フェーズ5: シーン動画生成（12並列）" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ5: シーン動画生成（12並列）" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase6-lipsync-processing.result }}" == "success" ]; then
            echo "- ✅ フェーズ6: リップシンク処理" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ6: リップシンク処理" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase7-graphics-creation.result }}" == "success" ]; then
            echo "- ✅ フェーズ7: 情報源表示・グラフィック作成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ7: 情報源表示・グラフィック作成" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.phase8-final-editing.result }}" == "success" ]; then
            echo "- ✅ フェーズ8: 最終動画編集・合成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ フェーズ8: 最終動画編集・合成" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 アーティファクト" >> $GITHUB_STEP_SUMMARY
          echo "以下のアーティファクトが生成されました：" >> $GITHUB_STEP_SUMMARY
          echo "- `final-news-video`: 最終成果物（動画、ログ、メタデータ）" >> $GITHUB_STEP_SUMMARY
          echo "- `phase*-*`: 各フェーズの中間成果物" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Meta Workflow Generator v12.0*" >> $GITHUB_STEP_SUMMARY