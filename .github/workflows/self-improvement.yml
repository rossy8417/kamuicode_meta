name: Self-Improvement System
run-name: Meta Workflow Self-Improvement 🧠🔄

on:
  schedule:
    # 毎日午前2時に実行（UTC）
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      analysis_period_days:
        description: '分析期間（日数）'
        required: false
        type: number
        default: 7

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  analyze-performance:
    runs-on: ubuntu-latest
    outputs:
      improvement_needed: ${{ steps.analyze.outputs.improvement_needed }}
      success_rate: ${{ steps.analyze.outputs.success_rate }}
      common_failures: ${{ steps.analyze.outputs.common_failures }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Analyze Workflow Performance
        id: analyze
        run: |
          echo "📊 Analyzing Meta Workflow performance..."
          
          # 過去の実行データを取得・分析
          ANALYSIS_DAYS=${{ github.event.inputs.analysis_period_days || 7 }}
          
          # GitHub CLI で過去の実行履歴を取得
          if command -v gh &> /dev/null; then
            echo "📈 Fetching workflow run history..."
            gh run list --workflow="meta-workflow-generator-v2.yml" --limit 50 --json status,conclusion,createdAt > workflow_runs.json || echo "[]" > workflow_runs.json
          else
            echo "[]" > workflow_runs.json
          fi
          
          # パフォーマンス分析スクリプト
          cat > analyze_performance.js << 'EOF'
          const fs = require('fs');
          
          try {
            const runs = JSON.parse(fs.readFileSync('workflow_runs.json', 'utf8'));
            
            const totalRuns = runs.length;
            const successfulRuns = runs.filter(run => run.conclusion === 'success').length;
            const successRate = totalRuns > 0 ? (successfulRuns / totalRuns * 100).toFixed(1) : 0;
            
            // 失敗パターンの分析
            const failures = runs.filter(run => run.conclusion === 'failure');
            const commonFailures = {
              'mcp-config-issues': 0,
              'claude-auth-failed': 0,
              'prompt-missing': 0,
              'timeout': 0,
              'other': 0
            };
            
            // 改善が必要かの判定
            const improvementNeeded = successRate < 80 || totalRuns === 0;
            
            console.log(`Success Rate: ${successRate}%`);
            console.log(`Total Runs: ${totalRuns}`);
            console.log(`Improvement Needed: ${improvementNeeded}`);
            
            // GitHub Actions の出力に設定
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `improvement_needed=${improvementNeeded}\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `success_rate=${successRate}\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `common_failures=${JSON.stringify(commonFailures)}\n`);
            
            // 詳細レポートの生成
            const report = {
              timestamp: new Date().toISOString(),
              analysis_period_days: process.env.ANALYSIS_PERIOD_DAYS || 7,
              total_runs: totalRuns,
              successful_runs: successfulRuns,
              success_rate: parseFloat(successRate),
              improvement_needed: improvementNeeded,
              common_failures: commonFailures,
              recommendations: []
            };
            
            if (successRate < 50) {
              report.recommendations.push("Critical: Review core workflow logic");
              report.recommendations.push("Add more robust error handling");
            } else if (successRate < 80) {
              report.recommendations.push("Enhance fallback mechanisms");
              report.recommendations.push("Improve environment detection");
            }
            
            fs.writeFileSync('performance-report.json', JSON.stringify(report, null, 2));
            
          } catch (error) {
            console.error('Analysis failed:', error);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `improvement_needed=true\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `success_rate=0\n`);
          }
          EOF
          
          node analyze_performance.js
          
      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: performance-report.json
          retention-days: 90

  generate-improvements:
    needs: analyze-performance
    runs-on: ubuntu-latest
    if: needs.analyze-performance.outputs.improvement_needed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Performance Report
        uses: actions/download-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          
      - name: Generate Improvement Proposals
        run: |
          echo "🔧 Generating improvement proposals..."
          
          SUCCESS_RATE="${{ needs.analyze-performance.outputs.success_rate }}"
          
          mkdir -p .meta/improvements
          
          # 改善提案の生成
          cat > .meta/improvements/proposal-$(date +%Y%m%d).md << EOF
          # Meta Workflow Improvement Proposal
          
          ## Current Performance
          - Success Rate: ${SUCCESS_RATE}%
          - Analysis Date: $(date -u +%Y-%m-%d)
          
          ## Proposed Improvements
          
          ### High Priority
          EOF
          
          if (( $(echo "$SUCCESS_RATE < 50" | bc -l 2>/dev/null || echo "0") )); then
            cat >> .meta/improvements/proposal-$(date +%Y%m%d).md << EOF
          1. **Critical Failure Analysis**: Implement comprehensive error logging
          2. **Backup Execution Path**: Add complete offline fallback mode
          3. **Health Check Integration**: Pre-execution environment validation
          EOF
          elif (( $(echo "$SUCCESS_RATE < 80" | bc -l 2>/dev/null || echo "0") )); then
            cat >> .meta/improvements/proposal-$(date +%Y%m%d).md << EOF
          1. **Enhanced Error Recovery**: Improve automatic fix mechanisms
          2. **Configuration Resilience**: Better MCP config handling
          3. **Retry Logic Optimization**: Smarter retry strategies
          EOF
          fi
          
          cat >> .meta/improvements/proposal-$(date +%Y%m%d).md << EOF
          
          ### Implementation Plan
          - [ ] Update error handling patterns
          - [ ] Add comprehensive logging
          - [ ] Implement gradual rollout
          - [ ] Monitor improvement metrics
          
          ### Success Metrics
          - Target Success Rate: 95%+
          - Average Recovery Time: <2 minutes
          - User Satisfaction: Improved error messages
          
          ---
          Generated by Self-Improvement System 🧠
          EOF
          
      - name: Create Improvement Issue
        run: |
          if command -v gh &> /dev/null; then
            gh issue create \
              --title "🔧 Meta Workflow Improvement Proposal (Success Rate: ${{ needs.analyze-performance.outputs.success_rate }}%)" \
              --body-file .meta/improvements/proposal-$(date +%Y%m%d).md \
              --label enhancement,automation,self-improvement || echo "Issue creation failed"
          fi

  learning-system:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Update Knowledge Base
        run: |
          echo "📚 Updating system knowledge base..."
          
          mkdir -p .meta/knowledge
          
          # 学習データの蓄積
          cat > .meta/knowledge/learning-$(date +%Y%m%d).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_version": "v2",
            "learning_points": [
              "MCP configuration issues are primary failure cause",
              "Fallback mechanisms improve reliability",
              "Self-diagnostic phase reduces failures"
            ],
            "success_patterns": [
              "Pre-execution environment validation",
              "Graceful degradation strategies",
              "Comprehensive error logging"
            ],
            "next_research": [
              "Predictive failure detection",
              "Dynamic configuration adaptation",
              "User experience optimization"
            ]
          }
          EOF
          
          echo "🧠 Knowledge base updated with latest insights"