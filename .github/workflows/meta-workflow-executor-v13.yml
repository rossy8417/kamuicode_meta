name: "Meta Workflow Executor v13 (Scene Serial-Parallel)"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for workflow generation request'
        required: true
        default: '66'

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  CLAUDE_CODE_CI_MODE: true
  CLAUDE_CODE_AUTO_APPROVE_MCP: true

jobs:
  setup:
    name: "🧩 Setup & Inputs"
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.extract.outputs.issue_number }}
      project_dir: ${{ steps.setup.outputs.project_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchain
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "Node/Python preinstalled on ubuntu-latest"

      - name: Extract inputs
        id: extract
        run: |
          echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT

      - name: Prepare project directory
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_DIR="${GITHUB_WORKSPACE}/projects/issue-${{ inputs.issue_number }}-${TIMESTAMP}"
          mkdir -p "$PROJECT_DIR"/{generated-workflow,artifacts,logs}
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "📁 PROJECT_DIR=$PROJECT_DIR"

      - name: Upload setup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v13-setup
          path: ${{ steps.setup.outputs.project_dir }}/

  load-domain-templates:
    name: "📚 Load Domain Templates (Video Production)"
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      constraints_path: ${{ steps.locate.outputs.constraints_path }}
      patterns_path: ${{ steps.locate.outputs.patterns_path }}
      schema_path: ${{ steps.locate.outputs.schema_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate domain template files
        id: locate
        run: |
          set -e
          C="meta/domain-templates/video-production/constraints.yaml"
          P="meta/domain-templates/video-production/workflow-patterns.yaml"
          S="meta/domain-templates/video-production/input-schema.yaml"
          [ -f "$C" ] || { echo "::error::constraints.yaml not found"; exit 1; }
          [ -f "$P" ] || { echo "::error::workflow-patterns.yaml not found"; exit 1; }
          [ -f "$S" ] || { echo "::error::input-schema.yaml not found"; exit 1; }
          echo "constraints_path=$C" >> $GITHUB_OUTPUT
          echo "patterns_path=$P" >> $GITHUB_OUTPUT
          echo "schema_path=$S" >> $GITHUB_OUTPUT

      - name: Upload domain templates
        uses: actions/upload-artifact@v4
        with:
          name: v13-domain-templates
          path: |
            ${{ steps.locate.outputs.constraints_path }}
            ${{ steps.locate.outputs.patterns_path }}
            ${{ steps.locate.outputs.schema_path }}

  generate-workflow:
    name: "⚡ Generate Workflow (v13 rules enforced)"
    runs-on: ubuntu-latest
    needs: [setup, load-domain-templates]
    outputs:
      workflow_path: ${{ steps.generate.outputs.workflow_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Build v13 generation prompt
        id: prompt
        env:
          PROJECT_DIR: ${{ needs.setup.outputs.project_dir }}
        run: |
          echo "あなたはGitHub Actionsワークフロー設計の専門家です。以下のドメインテンプレート（constraints.yaml, workflow-patterns.yaml, input-schema.yaml）に厳密に従い、必ず『シーン直列×全体並列（matrix）』構造で動画制作ワークフローを生成してください。" > generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "必須要件（v13 クリティカル）：" >> generation_prompt_v13.txt
          echo "1) シーン数の自動計算" >> generation_prompt_v13.txt
          echo "   - story_structure.scene_breakdown があれば件数を採用" >> generation_prompt_v13.txt
          echo "   - 無い場合は duration を秒に変換し、default_per_scene_seconds=5で N=ceil(sec/5)" >> generation_prompt_v13.txt
          echo "   - constraints.yaml の timing_constraints / composition_rules を参照" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "2) シーン単位の直列チェーン（同一ジョブ内）" >> generation_prompt_v13.txt
          echo "   - 各シーンで『画像生成 → 画像から動画(I2V)』を直列に実行" >> generation_prompt_v13.txt
          echo "   - 画像生成直後にI2Vを行う（URL期限切れ対策）" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "3) シーン全体並列（matrix）" >> generation_prompt_v13.txt
          echo "   - jobs.<scene-job>.strategy.matrix.scene = [1..N]" >> generation_prompt_v13.txt
          echo "   - jobs.<scene-job>.strategy.max-parallel ≤ 5（constraints.yaml準拠）" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "4) 禁止パターン（必ず出力に含めない）" >> generation_prompt_v13.txt
          echo "   - generate-images-batchX / convert-videos-batchX のようなバッチ分割" >> generation_prompt_v13.txt
          echo "   - 画像のみ並列→後でI2V並列 などURL期限切れリスクの高い設計" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "5) 命名・出力" >> generation_prompt_v13.txt
          echo "   - 画像: media/images/scene_XX.png" >> generation_prompt_v13.txt
          echo "   - 動画: media/videos/scene_XX_video.mp4" >> generation_prompt_v13.txt
          echo "   - アーティファクト名: scene-media（全シーン同名でOK、複数アップロードで集約）" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "6) 共有ルール" >> generation_prompt_v13.txt
          echo "   - すべての生成ファイルは ${PROJECT_DIR} 配下に保存" >> generation_prompt_v13.txt
          echo "   - ジョブ間共有は actions/upload-artifact / download-artifact を使用" >> generation_prompt_v13.txt
          echo "" >> generation_prompt_v13.txt
          echo "出力: ワークフローを ${PROJECT_DIR}/generated-workflow/workflow.yml に生成" >> generation_prompt_v13.txt

      - name: Generate using Claude Code (v13)
        id: generate
        env:
          PROJECT_DIR: ${{ needs.setup.outputs.project_dir }}
        run: |
          npx @anthropic-ai/claude-code \
            --mcp-config ".claude/mcp-kamuicode.json" \
            --allowedTools "Read,Write" \
            --permission-mode "acceptEdits" \
            --max-turns 40 \
            -p "$(cat generation_prompt_v13.txt)"

          WF_PATH="${PROJECT_DIR}/generated-workflow/workflow.yml"
          if [ ! -f "$WF_PATH" ]; then
            echo "::error::Generated workflow not found at $WF_PATH"; exit 1; fi
          python -c "import yaml; yaml.safe_load(open('$WF_PATH'))" || { echo '::error::YAML invalid'; exit 1; }
          echo "workflow_path=$WF_PATH" >> $GITHUB_OUTPUT

      - name: Upload generated workflow
        uses: actions/upload-artifact@v4
        with:
          name: v13-generated-workflow
          path: ${{ steps.generate.outputs.workflow_path }}

  validate-structure:
    name: "✅ Validate Scene Serial-Parallel Structure"
    runs-on: ubuntu-latest
    needs: [setup, generate-workflow]
    outputs:
      passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download workflow
        uses: actions/download-artifact@v4
        with:
          name: v13-generated-workflow
          path: ${{ needs.setup.outputs.project_dir }}/generated-workflow/

      - name: Structural checks (Python)
        id: check
        run: |
          set -e
          WF="${{ needs.setup.outputs.project_dir }}/generated-workflow/workflow.yml"
          python - << 'PY'
import sys, yaml, re
wf_path = sys.argv[1]
data = yaml.safe_load(open(wf_path)) or {}
jobs = data.get('jobs') or {}
if not jobs:
    print('::error::No jobs found'); sys.exit(1)

errors = []
scene_job_key = None
for k, j in jobs.items():
    strat = (j or {}).get('strategy') or {}
    matrix = strat.get('matrix') or {}
    if isinstance(matrix, dict) and any(name=='scene' for name in matrix.keys()):
        scene_job_key = k
        maxpar = strat.get('max-parallel') or strat.get('max_parallel')
        try:
            maxpar_int = int(maxpar)
        except Exception:
            maxpar_int = 999
        if maxpar is None or maxpar_int > 5:
            errors.append(f"max-parallel invalid (>5) in job {k}: {maxpar}")
        steps = (j or {}).get('steps') or []
        names = [ (s.get('name') or '').lower() for s in steps if isinstance(s, dict) ]
        try:
            idx_img = next(i for i,n in enumerate(names) if 'image' in n)
            idx_i2v = next(i for i,n in enumerate(names) if ('image to video' in n) or ('i2v' in n) or ('convert' in n and 'video' in n))
            if not (idx_img < idx_i2v):
                errors.append('Per-scene pipeline order invalid (image before i2v required)')
        except StopIteration:
            errors.append('Per-scene pipeline steps not found (image and i2v)')
        break

if scene_job_key is None:
    errors.append('No job with strategy.matrix.scene found')

for bad in jobs.keys():
    if re.search(r'generate-images-batch|convert-videos-batch', bad):
        errors.append(f'Forbidden batch job found: {bad}')

if errors:
    print('::error::' + '\n'.join(errors))
    print('passed=false')
    sys.exit(1)
else:
    print('passed=true')
PY
          "${WF}"
          echo "passed=true" >> $GITHUB_OUTPUT

  finalize:
    name: "📦 Finalize & Report"
    runs-on: ubuntu-latest
    needs: [setup, generate-workflow, validate-structure]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload full project
        uses: actions/upload-artifact@v4
        with:
          name: v13-project
          path: ${{ needs.setup.outputs.project_dir }}/

      - name: Summary
        run: |
          echo "## ✅ Meta Workflow v13 完了" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue**: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Dir**: ${{ needs.setup.outputs.project_dir }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated**: ${{ needs.generate-workflow.outputs.workflow_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: Scene Serial-Parallel Structure ✅" >> $GITHUB_STEP_SUMMARY
