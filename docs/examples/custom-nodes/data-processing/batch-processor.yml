name: "Batch Processor Custom Node"
description: "大量データを分割してバッチ処理するカスタムノード例"

# このファイルは実装例です。大量のアイテム（画像生成、動画処理など）を効率的に処理する場合に使用

jobs:
  batch-processor:
    runs-on: ubuntu-latest
    needs: [data-preparation]  # 前提: 処理対象データの準備完了
    outputs:
      total_processed: ${{ steps.summary.outputs.total }}
      success_count: ${{ steps.summary.outputs.success }}
      failed_count: ${{ steps.summary.outputs.failed }}
      batch_results: ${{ steps.summary.outputs.results }}
    
    strategy:
      matrix:
        batch_id: [1, 2, 3, 4, 5]  # 最大5並列バッチ処理
      fail-fast: false  # 1つのバッチが失敗しても他を継続
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Batch Environment
        run: |
          mkdir -p projects/current-session/batch-processing/
          mkdir -p projects/current-session/batch-processing/batch-${{ matrix.batch_id }}
          echo "BATCH_ID=${{ matrix.batch_id }}" >> $GITHUB_ENV
          echo "BATCH_DIR=projects/current-session/batch-processing/batch-${{ matrix.batch_id }}" >> $GITHUB_ENV
          
      - name: Load Batch Data
        id: load-data
        run: |
          echo "📦 Loading data for batch ${{ matrix.batch_id }}"
          
          # バッチデータの分割ロジック
          # 実際の実装では前段ジョブから全体データを受け取り、
          # matrix.batch_id に基づいて分割する
          
          TOTAL_ITEMS=${{ needs.data-preparation.outputs.total_items || 25 }}
          BATCH_SIZE=$((TOTAL_ITEMS / 5))  # 5バッチに分割
          START_INDEX=$(((BATCH_ID - 1) * BATCH_SIZE + 1))
          END_INDEX=$((BATCH_ID * BATCH_SIZE))
          
          # 最後のバッチは残りすべてを処理
          if [ "$BATCH_ID" -eq "5" ]; then
            END_INDEX=$TOTAL_ITEMS
          fi
          
          echo "Processing items $START_INDEX to $END_INDEX"
          echo "start_index=$START_INDEX" >> $GITHUB_OUTPUT
          echo "end_index=$END_INDEX" >> $GITHUB_OUTPUT
          echo "batch_size=$((END_INDEX - START_INDEX + 1))" >> $GITHUB_OUTPUT
          
          # バッチ設定ファイル生成
          cat > "$BATCH_DIR/batch_config.json" << EOF
          {
            "batch_id": $BATCH_ID,
            "start_index": $START_INDEX,
            "end_index": $END_INDEX,
            "batch_size": $((END_INDEX - START_INDEX + 1)),
            "processing_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
      - name: Process Batch Items
        id: process-items
        run: |
          echo "⚙️ Processing batch ${{ matrix.batch_id }} items"
          
          START=${{ steps.load-data.outputs.start_index }}
          END=${{ steps.load-data.outputs.end_index }}
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          # バッチ内アイテム処理ループ
          for i in $(seq $START $END); do
            echo "Processing item #$i"
            
            # 個別アイテム処理（例: 画像生成）
            ITEM_SUCCESS=true
            
            # ここで実際の処理を実行
            # 例: MCP サービス呼び出し、ファイル変換、API呼び出し等
            if [ $((i % 7)) -eq 0 ]; then
              # シミュレーション: 7の倍数で意図的エラー
              echo "❌ Item #$i failed (simulated error)"
              ITEM_SUCCESS=false
              FAILED_COUNT=$((FAILED_COUNT + 1))
            else
              # 成功処理
              cat > "$BATCH_DIR/item_${i}_result.json" << EOF
          {
            "item_id": $i,
            "status": "success",
            "processed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "output_url": "https://example.com/output_${i}.jpg"
          }
          EOF
              echo "✅ Item #$i completed successfully"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            
            # レート制限対応（必要に応じて）
            sleep 0.1
          done
          
          echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "total_items=$((SUCCESS_COUNT + FAILED_COUNT))" >> $GITHUB_OUTPUT
          
      - name: Generate Batch Report
        run: |
          echo "📊 Generating batch ${{ matrix.batch_id }} report"
          
          # バッチ処理結果レポート
          cat > "$BATCH_DIR/batch_report.json" << EOF
          {
            "batch_summary": {
              "batch_id": ${{ matrix.batch_id }},
              "total_items": ${{ steps.process-items.outputs.total_items }},
              "success_count": ${{ steps.process-items.outputs.success_count }},
              "failed_count": ${{ steps.process-items.outputs.failed_count }},
              "success_rate": $(echo "scale=2; ${{ steps.process-items.outputs.success_count }} * 100 / ${{ steps.process-items.outputs.total_items }}" | bc -l)
            },
            "processing_details": {
              "start_time": "$(cat $BATCH_DIR/batch_config.json | jq -r '.processing_timestamp')",
              "end_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "batch_range": "Items ${{ steps.load-data.outputs.start_index }}-${{ steps.load-data.outputs.end_index }}"
            }
          }
          EOF
          
      - name: Handle Batch Failures
        if: steps.process-items.outputs.failed_count > 0
        run: |
          echo "⚠️ Batch ${{ matrix.batch_id }} had ${{ steps.process-items.outputs.failed_count }} failures"
          
          # 失敗したアイテムのリトライ戦略
          echo "Implementing retry strategy for failed items..."
          
          # 失敗原因の分析
          cat > "$BATCH_DIR/failure_analysis.json" << EOF
          {
            "batch_id": ${{ matrix.batch_id }},
            "failed_items": ${{ steps.process-items.outputs.failed_count }},
            "failure_patterns": {
              "rate_limit": "Possible rate limiting detected",
              "service_error": "External service temporary issue",
              "data_quality": "Input data validation failed"
            },
            "retry_recommendations": [
              "Reduce batch size",
              "Increase delay between requests",
              "Validate input data quality"
            ]
          }
          EOF
          
      - name: Upload Batch Artifacts
        run: |
          # バッチ結果をアーティファクトとして保存
          echo "📤 Uploading batch ${{ matrix.batch_id }} artifacts"
          
          # 成功したアイテムの一覧
          find "$BATCH_DIR" -name "item_*_result.json" > "$BATCH_DIR/successful_items.txt"
          
          echo "Batch ${{ matrix.batch_id }} processing completed"
          echo "Success: ${{ steps.process-items.outputs.success_count }}"
          echo "Failed: ${{ steps.process-items.outputs.failed_count }}"

  # バッチ結果の統合ジョブ
  batch-summary:
    runs-on: ubuntu-latest
    needs: [batch-processor]
    if: always()  # すべてのバッチが完了後に実行（失敗含む）
    outputs:
      total_processed: ${{ steps.summary.outputs.total }}
      success_count: ${{ steps.summary.outputs.success }}
      failed_count: ${{ steps.summary.outputs.failed }}
      overall_success_rate: ${{ steps.summary.outputs.success_rate }}
    
    steps:
      - name: Collect Batch Results
        id: summary
        run: |
          echo "📈 Collecting results from all batches"
          
          # 各バッチの結果を集計
          TOTAL_SUCCESS=0
          TOTAL_FAILED=0
          
          # Matrix結果の集計（実際の実装では needs.batch-processor.outputs を使用）
          for batch_id in {1..5}; do
            # シミュレーション値（実際は各バッチの出力から取得）
            batch_success=$((RANDOM % 10 + 5))  # 5-14の成功
            batch_failed=$((RANDOM % 3))        # 0-2の失敗
            
            TOTAL_SUCCESS=$((TOTAL_SUCCESS + batch_success))
            TOTAL_FAILED=$((TOTAL_FAILED + batch_failed))
            
            echo "Batch $batch_id: $batch_success success, $batch_failed failed"
          done
          
          TOTAL_PROCESSED=$((TOTAL_SUCCESS + TOTAL_FAILED))
          SUCCESS_RATE=$(echo "scale=2; $TOTAL_SUCCESS * 100 / $TOTAL_PROCESSED" | bc -l)
          
          echo "total=$TOTAL_PROCESSED" >> $GITHUB_OUTPUT
          echo "success=$TOTAL_SUCCESS" >> $GITHUB_OUTPUT
          echo "failed=$TOTAL_FAILED" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          # 統合レポート生成
          mkdir -p projects/current-session/batch-processing/
          cat > "projects/current-session/batch-processing/final_report.json" << EOF
          {
            "batch_processing_summary": {
              "total_batches": 5,
              "total_items": $TOTAL_PROCESSED,
              "successful_items": $TOTAL_SUCCESS,
              "failed_items": $TOTAL_FAILED,
              "overall_success_rate": $SUCCESS_RATE,
              "processing_completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            },
            "performance_metrics": {
              "avg_items_per_batch": $(echo "scale=1; $TOTAL_PROCESSED / 5" | bc -l),
              "parallel_efficiency": "High (5-way parallel processing)"
            }
          }
          EOF
          
          echo "✅ Batch processing summary completed"
          echo "📊 Total: $TOTAL_PROCESSED items ($SUCCESS_RATE% success rate)"

# 使用例:
# 大量の画像生成、動画処理、データ変換などで使用
# 
# jobs:
#   prepare-data:
#     # データ準備ジョブ
#     
#   process-large-dataset:
#     uses: ./docs/examples/custom-nodes/data-processing/batch-processor.yml
#     needs: [prepare-data]
#     
#   finalize-results:
#     needs: [process-large-dataset]
#     # 結果の最終処理