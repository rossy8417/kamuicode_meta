{
  "permissions": {
    "allow": [
      "// === Git & GitHub Operations ===",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git rebase:*)",
      "Bash(git stash:*)",
      "Bash(git restore:*)",
      "Bash(git reset:*)",
      "Bash(git clone:*)",
      "Bash(git remote:*)",
      "Bash(git fetch:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue edit:*)",
      "Bash(gh issue comment:*)",
      "Bash(gh issue close:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr checkout:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh run cancel:*)",
      "Bash(gh run watch:*)",
      "Bash(gh run download:*)",
      "Bash(gh workflow run:*)",
      "Bash(gh workflow list:*)",
      "Bash(gh workflow view:*)",
      "Bash(gh api:*)",
      "Bash(gh auth:*)",
      "Bash(gh repo:*)",
      
      "// === File System Operations ===",
      "Bash(ls:*)",
      "Bash(pwd:*)",
      "Bash(cd:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(ln:*)",
      "Bash(find:*)",
      "Bash(locate:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(du:*)",
      "Bash(df:*)",
      "Bash(tree:*)",
      "Bash(stat:*)",
      "Bash(file:*)",
      "Bash(realpath:*)",
      "Bash(basename:*)",
      "Bash(dirname:*)",
      
      "// === File Content Operations ===",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(less:*)",
      "Bash(more:*)",
      "Bash(grep:*)",
      "Bash(egrep:*)",
      "Bash(fgrep:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(cut:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(wc:*)",
      "Bash(diff:*)",
      "Bash(patch:*)",
      "Bash(jq:*)",
      "Bash(yq:*)",
      "Bash(xmllint:*)",
      
      "// === Archive & Compression ===",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(gzip:*)",
      "Bash(gunzip:*)",
      "Bash(bzip2:*)",
      "Bash(bunzip2:*)",
      "Bash(7z:*)",
      
      "// === Process & System ===",
      "Bash(ps:*)",
      "Bash(top:*)",
      "Bash(htop:*)",
      "Bash(kill:*)",
      "Bash(killall:*)",
      "Bash(pgrep:*)",
      "Bash(pkill:*)",
      "Bash(jobs:*)",
      "Bash(bg:*)",
      "Bash(fg:*)",
      "Bash(nohup:*)",
      "Bash(time:*)",
      "Bash(watch:*)",
      "Bash(sleep:*)",
      "Bash(wait:*)",
      "Bash(uname:*)",
      "Bash(hostname:*)",
      "Bash(whoami:*)",
      "Bash(id:*)",
      "Bash(date:*)",
      "Bash(cal:*)",
      "Bash(uptime:*)",
      "Bash(free:*)",
      "Bash(lscpu:*)",
      "Bash(lsb_release:*)",
      
      "// === Network Operations ===",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(ping:*)",
      "Bash(traceroute:*)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(nc:*)",
      "Bash(nslookup:*)",
      "Bash(dig:*)",
      "Bash(host:*)",
      
      "// === Development Tools ===",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(pip:*)",
      "Bash(pip3:*)",
      "Bash(pip install:*)",
      "Bash(pip uninstall:*)",
      "Bash(pip freeze:*)",
      "Bash(pipenv:*)",
      "Bash(poetry:*)",
      "Bash(virtualenv:*)",
      "Bash(venv:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(npx:*)",
      "Bash(make:*)",
      "Bash(cmake:*)",
      "Bash(gcc:*)",
      "Bash(g++:*)",
      "Bash(clang:*)",
      "Bash(go:*)",
      "Bash(cargo:*)",
      "Bash(rustc:*)",
      "Bash(java:*)",
      "Bash(javac:*)",
      "Bash(mvn:*)",
      "Bash(gradle:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(kubectl:*)",
      
      "// === Text Editors & IDEs ===",
      "Bash(vim:*)",
      "Bash(vi:*)",
      "Bash(nano:*)",
      "Bash(emacs:*)",
      "Bash(code:*)",
      
      "// === Testing & Validation ===",
      "Bash(pytest:*)",
      "Bash(unittest:*)",
      "Bash(jest:*)",
      "Bash(mocha:*)",
      "Bash(rspec:*)",
      "Bash(yamllint:*)",
      "Bash(jsonlint:*)",
      "Bash(eslint:*)",
      "Bash(pylint:*)",
      "Bash(flake8:*)",
      "Bash(black:*)",
      "Bash(prettier:*)",
      "Bash(rubocop:*)",
      
      "// === Shell Scripting ===",
      "Bash(echo:*)",
      "Bash(printf:*)",
      "Bash(read:*)",
      "Bash(export:*)",
      "Bash(source:*)",
      "Bash(.:*)",
      "Bash(eval:*)",
      "Bash(exec:*)",
      "Bash(exit:*)",
      "Bash(return:*)",
      "Bash(test:*)",
      "Bash([:*)",
      "Bash([[:*)",
      "Bash(true)",
      "Bash(false)",
      "Bash(for *)",
      "Bash(while *)",
      "Bash(until *)",
      "Bash(do *)",
      "Bash(done)",
      "Bash(if *)",
      "Bash(then *)",
      "Bash(else *)",
      "Bash(elif *)",
      "Bash(fi)",
      "Bash(case *)",
      "Bash(esac)",
      "Bash(function *)",
      "Bash(select *)",
      "Bash(break)",
      "Bash(continue)",
      
      "// === Environment & Variables ===",
      "Bash(env:*)",
      "Bash(printenv:*)",
      "Bash(set:*)",
      "Bash(unset:*)",
      "Bash(alias:*)",
      "Bash(unalias:*)",
      "Bash(history:*)",
      "Bash(hash:*)",
      "Bash(type:*)",
      "Bash(command:*)",
      "Bash(builtin:*)",
      
      "// === Permissions & Security ===",
      "Bash(chmod:*)",
      "Bash(chown:*)",
      "Bash(chgrp:*)",
      "Bash(umask:*)",
      "Bash(sudo:*)",
      "Bash(su:*)",
      "Bash(passwd:*)",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(rsync:*)",
      "Bash(gpg:*)",
      "Bash(openssl:*)",
      
      "// === Package Management ===",
      "Bash(apt:*)",
      "Bash(apt-get:*)",
      "Bash(apt-cache:*)",
      "Bash(dpkg:*)",
      "Bash(yum:*)",
      "Bash(dnf:*)",
      "Bash(rpm:*)",
      "Bash(brew:*)",
      "Bash(snap:*)",
      "Bash(flatpak:*)",
      
      "// === Claude Code Specific ===",
      "Bash(claude:*)",
      "Bash(claude --mcp-config=.claude/mcp-kamuicode.json)",
      "Bash(claude --mcp-config=.claude/mcp-kamuicode.json --interactive)",
      "Bash(claude mcp:*)",
      "Bash(claude --help)",
      "Bash(claude --version)",
      
      "// === Script Execution ===",
      "Bash(bash:*)",
      "Bash(sh:*)",
      "Bash(zsh:*)",
      "Bash(./script/*:*)",
      "Bash(./*.sh:*)",
      "Bash(./*.py:*)",
      "Bash(./*.js:*)",
      "Bash(./*.rb:*)",
      "Bash(./*.pl:*)",
      
      "// === Workflow Parameters ===",
      "Bash(--field *=*)",
      "Bash(--field video_concept=*)",
      "Bash(--field target_audience=*)",
      "Bash(--field video_length=*)",
      "Bash(--field video_style=*)",
      "Bash(--field visual_style=*)",
      "Bash(--field color_mood=*)",
      "Bash(--field video_quality=*)",
      "Bash(--field quality_setting=*)",
      "Bash(--field frame_rate=*)",
      "Bash(--field audio_integration=*)",
      
      "// === Safe Deletion (Limited) ===",
      "Bash(rm -f *.mp4)",
      "Bash(rm -f *.mp3)",
      "Bash(rm -f *.wav)",
      "Bash(rm -f *.png)",
      "Bash(rm -f *.jpg)",
      "Bash(rm -f *.gif)",
      "Bash(rm -f *.tmp)",
      "Bash(rm -f *.temp)",
      "Bash(rm -f *.log)",
      "Bash(rm -f *.bak)",
      "Bash(rm -f *.backup)",
      "Bash(rm -f *.swp)",
      "Bash(rm -f *.swo)",
      "Bash(rm -f *.cache)",
      "Bash(rm -rf ./tmp/*)",
      "Bash(rm -rf ./temp/*)",
      "Bash(rm -rf ./cache/*)",
      "Bash(rm -rf ./__pycache__/*)",
      "Bash(rm -rf ./node_modules/.cache/*)",
      "Bash(rmdir:*)",
      
      "// === Web Access ===",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:nodejs.org)",
      "WebFetch(domain:python.org)",
      "WebFetch(domain:npmjs.com)",
      "WebFetch(domain:pypi.org)",
      
      "// === MCP Services ===",
      "mcp__t2i-google-imagen3__imagen_t2i",
      "mcp__t2m-google-lyria__lyria_generate",
      "mcp__t2i-fal-imagen4-ultra__imagen4_ultra_submit",
      "mcp__t2i-fal-imagen4-ultra__imagen4_ultra_status",
      "mcp__t2i-fal-imagen4-ultra__imagen4_ultra_result",
      "mcp__t2i-fal-imagen4-fast__imagen4_fast_submit",
      "mcp__t2i-fal-imagen4-fast__imagen4_fast_status",
      "mcp__t2i-fal-imagen4-fast__imagen4_fast_result",
      "mcp__t2v-fal-veo3-fast__veo3_fast_submit",
      "mcp__t2v-fal-veo3-fast__veo3_fast_status",
      "mcp__t2v-fal-veo3-fast__veo3_fast_result",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_submit",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_status",
      "mcp__i2v-fal-hailuo-02-pro__hailuo_02_result",
      "mcp__i2i-fal-flux-kontext-max__flux_kontext_submit",
      "mcp__i2i-fal-flux-kontext-max__flux_kontext_status",
      "mcp__i2i-fal-flux-kontext-max__flux_kontext_result",
      "mcp__i2i3d-fal-hunyuan3d-v21__hunyuan3d_submit",
      "mcp__i2i3d-fal-hunyuan3d-v21__hunyuan3d_status",
      "mcp__i2i3d-fal-hunyuan3d-v21__hunyuan3d_result",
      "mcp__v2a-fal-thinksound__thinksound_submit",
      "mcp__v2a-fal-thinksound__thinksound_status",
      "mcp__v2a-fal-thinksound__thinksound_result",
      "mcp__v2v-fal-luma-ray2-modify__luma_ray2_submit",
      "mcp__v2v-fal-luma-ray2-modify__luma_ray2_status",
      "mcp__v2v-fal-luma-ray2-modify__luma_ray2_result",
      "mcp__r2v-fal-vidu-q1__vidu_q1_submit",
      "mcp__r2v-fal-vidu-q1__vidu_q1_status",
      "mcp__r2v-fal-vidu-q1__vidu_q1_result",
      "mcp__t2i-fal-flux-schnell__flux_schnell_submit",
      "mcp__t2i-fal-flux-schnell__flux_schnell_status",
      "mcp__t2i-fal-flux-schnell__flux_schnell_result",
      "mcp__t2i-fal-rundiffusion-photo-flux__rundiffusion_photo_flux_submit",
      "mcp__t2i-fal-rundiffusion-photo-flux__rundiffusion_photo_flux_status",
      "mcp__t2i-fal-rundiffusion-photo-flux__rundiffusion_photo_flux_result",
      "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_submit",
      "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_status",
      "mcp__t2s-fal-minimax-speech-02-turbo__minimax_speech_02_turbo_result",
      "mcp__i2i-fal-flux-kontext-lora__flux_kontext_submit",
      "mcp__i2i-fal-flux-kontext-lora__flux_kontext_status",
      "mcp__i2i-fal-flux-kontext-lora__flux_kontext_result",
      "mcp__train-fal-flux-kontext-trainer__flux_kontext_trainer_submit",
      "mcp__train-fal-flux-kontext-trainer__flux_kontext_trainer_status",
      "mcp__train-fal-flux-kontext-trainer__flux_kontext_trainer_result",
      "mcp__v2v-fal-bria-background-removal__submit",
      "mcp__v2v-fal-bria-background-removal__status",
      "mcp__v2v-fal-bria-background-removal__result",
      "mcp__v2v-fal-creatify-lipsync__lipsync_submit",
      "mcp__v2v-fal-creatify-lipsync__lipsync_status",
      "mcp__v2v-fal-creatify-lipsync__lipsync_result",
      "mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_submit",
      "mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_status",
      "mcp__v2v-fal-pixverse-lipsync__pixverse_lipsync_result",
      "mcp__v2v-fal-minimax-voice-design__submit",
      "mcp__v2v-fal-minimax-voice-design__status",
      "mcp__v2v-fal-minimax-voice-design__result",
      "mcp__v2v-fal-pixverse-extend__pixverse_extend_submit",
      "mcp__v2v-fal-pixverse-extend__pixverse_extend_status",
      "mcp__v2v-fal-pixverse-extend__pixverse_extend_result",
      "mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_submit",
      "mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_status",
      "mcp__i2v-fal-bytedance-seedance-v1-lite__bytedance_seedance_v1_lite_i2v_result"
    ],
    "deny": []
  },
  "defaults": {
    "mcp_output_directories": {
      "images": "./cli_generated/media/images",
      "videos": "./cli_generated/media/videos", 
      "audio": "./cli_generated/media/audio",
      "3d": "./cli_generated/media/3d"
    }
  }
}